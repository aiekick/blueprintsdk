#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <PageCurl_vulkan.h>

namespace BluePrint
{
struct PageCurlFusionNode final : Node
{
    BP_NODE_WITH_NAME(PageCurlFusionNode, "PageCurl Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Move")
    PageCurlFusionNode(BP* blueprint): Node(blueprint) { m_Name = "PageCurl Transform"; }

    ~PageCurlFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::PageCurl_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return false; }
    bool Skippable() const override { return true; }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf15b"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    ImGui::PageCurl_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 5730;
    const unsigned int logo_data[5732/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0x482880ae, 
    0x949069a3, 0x92034352, 0x748ae63b, 0xfd53eb7f, 0x16be44e1, 0x28dab027, 0x4561a8a2, 0xbe5b4315, 0x3495763a, 0xc664dbe8, 0x47fbcfd8, 0x6ed2f8a7, 
    0xa25fe0ca, 0x6b0f7fb9, 0x8f1ad777, 0x370975d9, 0x8feeb179, 0xb0df172a, 0x75953fee, 0x2525a314, 0x281a0374, 0xabf110dc, 0x0e2ad703, 0x96b3e56a, 
    0xe3490c66, 0x54ab2623, 0xcbf9e4b6, 0x3ee78c83, 0xa7789df5, 0x7835934d, 0x15455191, 0x154541b1, 0x3abe5b43, 0xe8349576, 0xd8c664db, 0xa747fbcf, 
    0xca6ed2f8, 0xb4a65fe0, 0x1479df68, 0x3357d4e7, 0xfa6eede1, 0x2efb51e3, 0x36ef26a1, 0x42e5d13d, 0xc71df6fb, 0x94a2aef2, 0x80aea464, 0x81cad19e, 
    0x63b4010a, 0x00482e00, 0x0e3c071e, 0xaa55f873, 0x5a71face, 0x6128770a, 0xfcbc66dc, 0x25252d5c, 0xd6aac2d4, 0x51147de6, 0x51b8915e, 0xefd65045, 
    0x4da59d8e, 0x31d9363a, 0xd1fe33b6, 0x9b34fee9, 0x8a17b8b2, 0x07e57d2b, 0x87a52bea, 0xf0e4d34c, 0xe1d3b8d0, 0xf3c732d9, 0x71be2505, 0xc0b90dcb, 
    0x6600ff27, 0xf033aff7, 0x717db7f6, 0x5097fda8, 0x1e9b7793, 0x7da1f2e8, 0xf9e30efb, 0xdde17f57, 0x856fad45, 0x8b7c8eb4, 0x606f978f, 0xc34f8ffd, 
    0x61a5e7f1, 0xd0902a51, 0xd1cae81a, 0x9f06f4be, 0xc97e684c, 0x8c69717f, 0x19ed9c08, 0x3ff214ce, 0xe4f52942, 0xad360ebd, 0x14459da1, 0x0576bc57, 
    0xbd303e72, 0xb2b7bc57, 0xcf1fd939, 0x00ff3d26, 0xbacedffa, 0x4487ceea, 0xf5592d82, 0x4cb22c23, 0x81b1e1f9, 0x383d4e9f, 0x56729aa8, 0xa8274743, 
    0x6ad316eb, 0x51b6b776, 0x004013cb, 0x800cc060, 0x327de878, 0x5486ba2b, 0x3396149e, 0x0f0c7594, 0xa30635a8, 0xdaa9c3a7, 0x05cb691b, 0xa8571024, 
    0x639dd223, 0x7136b668, 0xeb8e24db, 0x8c2fc018, 0x18a5f0e3, 0x2c70b7b8, 0xea809053, 0x3645404f, 0xacaeb68a, 0x298aa220, 0xe3235780, 0xcb7bd50b, 
    0x919d237b, 0xdf63f2fc, 0xfcad00ff, 0xe8acaeeb, 0xd5224874, 0xcb32529f, 0x1b9ecf24, 0xe3f41918, 0xa7898ad3, 0x72346425, 0x6db18e7a, 0x7b6ba736, 
    0x34b11c65, 0x000c0600, 0x878e07c8, 0xa8bb22d3, 0x49e14965, 0x50473963, 0x5083fac0, 0x3a7c3a6a, 0x9cb6a19d, 0x054152b0, 0x293d827a, 0x638b36d6, 
    0x48b21d67, 0x028cb1ee, 0x0a3fcef8, 0x778b8b51, 0x223ac502, 0x8e83ab44, 0x1f9d3645, 0x00ffd4fa, 0xe14f5578, 0xd186bd64, 0x0a431545, 0x7a617ce4, 
    0x646f79af, 0x9e3fb273, 0x00ff7b4c, 0x759dbff5, 0x890e9dd5, 0xeab35a04, 0x99645946, 0x0363c3f3, 0x717a9c3e, 0xace43451, 0x514f8e86, 0xd4a62dd6, 
    0xa36c6fed, 0x00802696, 0x001980c1, 0x64fad0f1, 0xa90c7557, 0x672c293c, 0x1f18ea28, 0x470d6a50, 0xb453874f, 0x0a96d336, 0x50af2048, 0xc63aa547, 
    0xe36c6cd1, 0xd61d49b6, 0x195f8031, 0x314ae1c7, 0x58e06e71, 0x98cd76ab, 0xaa06c7b1, 0xe7a7f654, 0x5933ea61, 0x6c7a63e2, 0x48bca2ce, 0xe88aa228, 
    0xf1912b2c, 0xe5bdea85, 0xc8ce91bd, 0xef3179fe, 0xfed600ff, 0x7456d775, 0x6a11243a, 0x6519a9cf, 0x0dcf6792, 0x71fa0c8c, 0xd344c5e9, 0x391ab292, 
    0xb658473d, 0xbdb5539b, 0x9a588eb2, 0x00060300, 0x43c70364, 0xd45d91e9, 0x24f02452, 0x8a2443a8, 0x6a501f18, 0x874f470d, 0xd336b453, 0x20480a96, 
    0xa54750af, 0x6cd1c63a, 0x49b6e36c, 0x8031d61d, 0xe1c7195f, 0x6e71314a, 0xed3c6be0, 0x2c372c75, 0xf2634877, 0x897ff965, 0x794e0c79, 0x9a9a3fc8, 
    0x4082537d, 0x0620a1a4, 0x424f8220, 0x8f44fe3b, 0x9b57aec6, 0xfd2c8788, 0xde8b6a4e, 0x8aa2a833, 0xa7808ef5, 0x12f70c45, 0x3cd07679, 0xa8e206ce, 
    0x703d8ea5, 0x47d7a601, 0x2c59fde0, 0xec944daf, 0x04447744, 0xdbaff024, 0xc5f5e9f3, 0xe84a9b4c, 0xb5d1940c, 0x37d76a21, 0x4a048d36, 0x64c4b219, 
    0xc1c11d28, 0xd2db8307, 0xe3705ba1, 0xbdd24f22, 0xc83dee2e, 0x6c5eef41, 0xe76e6da8, 0x17e66cb4, 0x2375372a, 0x0d46fcb1, 0x51af5470, 0x469d996a, 
    0xb20faae3, 0x51fab77f, 0xfff64ff6, 0x45b14a00, 0xbd9af565, 0x8ca4bdcc, 0xc2a728ea, 0xbcf11ce9, 0xaca8ac91, 0x30ba9119, 0x58afa107, 0xf38a1ae9, 
    0x86c0b04a, 0x68a45b59, 0x78c66309, 0x6db99a03, 0xeed36aa2, 0x2892b067, 0xffdc05c3, 0x24f72900, 0x743a0e36, 0xf44a7fcf, 0x7be1396d, 0x0bb84d48, 
    0x0a634009, 0x715c40bb, 0xca756ac7, 0x4a724d65, 0x8f55e8b3, 0x95248a2f, 0x1f9c2c77, 0x9fec936a, 0x7c95feed, 0xd4899ae8, 0x6bcfbeef, 0xa424b024, 
    0xa00e0086, 0x03a90337, 0xa8f4c838, 0x3578703a, 0x9715f1ca, 0x69ca9553, 0x27fb57ea, 0x2aa57ffb, 0xc560055b, 0x547a8eb3, 0x45bc54f4, 0x7371ad56, 
    0x07a4cec8, 0xf369ac73, 0xa02ae448, 0x00f4c4ea, 0x38add57a, 0x3c1835c2, 0xcb48d6f8, 0x830cabe0, 0x8d1f399e, 0x1c9f4e7a, 0x502cf036, 0x3a469144, 
    0x3b502822, 0x54e915f4, 0x8ea5c9a9, 0x83378fa4, 0x7726d647, 0xa23299c6, 0x870d4b0e, 0x6e1fb03d, 0x713cf47b, 0x078851eb, 0x2197f198, 0x23b08a91, 
    0xbd0707a1, 0xe5c2957a, 0xda97704d, 0x219efc05, 0x89dbd89c, 0x38099422, 0xf058812a, 0x469e2747, 0x955cef73, 0x24de542b, 0xd3bd344d, 0xed9fec2f, 
    0x937d94fe, 0xb7d2bffd, 0xdcfac25f, 0xc11a1951, 0x6b270388, 0x1ac81fab, 0x828320ca, 0xf1624530, 0xc5ec9615, 0xb8726bca, 0xf2e519b4, 0xdb2a853d, 
    0x245d9994, 0x297700c2, 0x9ed32719, 0x454f95df, 0x96d4ab4c, 0x26e7928d, 0x18893c66, 0xfbaf3acb, 0x2d6e15c7, 0x719a5827, 0x8073e91a, 0x4a5d2c01, 
    0x006e7b60, 0x9f719c13, 0x4df44a5f, 0x686b1b32, 0x14c1da76, 0x1171c728, 0xaf4f50a0, 0x32b94a1f, 0xd7b96be5, 0x63d9117d, 0x4987fcca, 0xe0d1099a, 
    0x1f190e99, 0x04f12369, 0x9fd49c8e, 0x6f00ff64, 0x2edeabf4, 0x10ebd980, 0x5cc2285d, 0xf1c2c62e, 0x529f7ab8, 0x533bfe0f, 0xa32e9ae9, 0xac99dbaa, 
    0x56d4fcad, 0x5ef54eda, 0xf53ef77a, 0xbdd5ebca, 0xe6e43993, 0x7d6564a5, 0xd2bffd93, 0xcb336881, 0xdf0a7be4, 0xdcdac297, 0x1bac5d28, 0x56d7ae03, 
    0x9035903f, 0x60040741, 0xad88978a, 0x35e592d5, 0x48ad5db9, 0xb04b3164, 0x6424c986, 0x0ea6dbe3, 0x1958cd71, 0x285acfc0, 0x5352a5ac, 0x4d0e99f8, 
    0x455167ee, 0x619ded15, 0xbb2e1e58, 0x69e96931, 0xf8722f1f, 0xfe0f7cc7, 0xb97e2bbe, 0xefc6462d, 0x4019f15b, 0x2586b725, 0xce18b3da, 0x773aee38, 
    0xcb37eaac, 0x177b3464, 0x35f93584, 0xafad2dbd, 0x62a77e9f, 0x8f886e15, 0x4ae0be6a, 0x07c8edb8, 0x8007393d, 0x271e5831, 0x217e36b7, 0x97508049, 
    0x7800ff51, 0x72f0b2e4, 0xfd150c3b, 0xc9261e7f, 0x6b085f75, 0xbcd59a76, 0x49656af3, 0xd9b0688e, 0x3855cf68, 0x3ce38e27, 0xafc10102, 0x513cf14f, 
    0x770c7aea, 0x1799c5d6, 0x1b67c46d, 0x0777a472, 0x7192f291, 0x6ab8e2c1, 0x13ababc1, 0x0a987835, 0x386a2972, 0xa9c1e80e, 0x33e48c2b, 0xf78aa2a8, 
    0xf0aac38e, 0x5656a866, 0xb46125d3, 0x1e74f082, 0xf579bdec, 0xbb7a7f1c, 0xafe54619, 0xe4785725, 0xb26d6349, 0xb1d1c146, 0x0739309c, 0xbdf47a9f, 
    0x5b8b560f, 0x35ee52d2, 0x24c97228, 0x9c32aa67, 0xa847fd11, 0x4aaef720, 0x29bab3d0, 0xd31a490c, 0xb3aa1251, 0x076c5c06, 0x9e311da9, 0xbc8d6b3d, 
    0xe1fe1e79, 0xedc288e5, 0xff8c312b, 0x714e0e00, 0xd8f0a55d, 0x3bdcbf04, 0x33ae19b8, 0xd5a2d451, 0xa16e2975, 0x056ccb07, 0x0c206324, 0xeceab866, 
    0x41645b63, 0x07561445, 0x895e9d39, 0xcd9b5ea1, 0x2188193e, 0xd407c188, 0x5ee51f1c, 0x12fe5b77, 0xe38b3cd4, 0x9fe4e764, 0xc0f74fe6, 0x3b70b7e7, 
    0xaff7e19f, 0x1b6fb462, 0xde513bf6, 0x9395dc38, 0xeade5a74, 0xce919429, 0xff9eedd3, 0x5a2b9e00, 0x3b2bb933, 0xda33b754, 0x71b78bc8, 0xc8b0b453, 
    0xebfcb107, 0x00ffa28c, 0x3bf5ed87, 0xfa5e593b, 0x0112dff4, 0xf1a35e44, 0x6ac0b53e, 0x5ca94326, 0x5d18b1b4, 0x9f3166a5, 0x2bcec9e1, 0x7a96c17b, 
    0xbd108d7e, 0x0d575a93, 0x1eb63c1e, 0x4eaa3e5e, 0x1579ec73, 0xc55faf93, 0xdd136ba9, 0x888d0842, 0x20c1480a, 0x9eb0660c, 0xf0a9e6c8, 0x288a3aa3, 
    0xa74e8cac, 0x7e7e17c3, 0x6e241899, 0xed38e48b, 0x2ba69f8e, 0x5cc9fba2, 0x8cae841f, 0x92db7277, 0x73b8eb70, 0x00ff23c0, 0x7557fad7, 0xbe6b650b, 
    0xdc99b4a2, 0x56c72b8e, 0xf354fa2c, 0xc8ede522, 0xc071729d, 0x975fdffb, 0x32fc6d75, 0xf4f0cf9f, 0x63264fe5, 0x0100ff83, 0xb7586315, 0x953b2259, 
    0x60155859, 0xb1074146, 0x06879fac, 0xbe4f2b3d, 0x12ee6ed3, 0x64b92139, 0x602184cc, 0x7bb00100, 0x5e8bb51e, 0xef3564f2, 0x4dda75a6, 0x1461a79e, 
    0x6f7a7ded, 0x0ea20049, 0xd6e71ea3, 0x3251e7bc, 0xa5e54a1d, 0x2bedc288, 0x00ff8c31, 0x5d714e0e, 0x69a68d9e, 0x75ef04fa, 0xa01cb726, 0x0a411ba1, 
    0x9a93113f, 0xf8fb35e5, 0x7b662db5, 0xb11141a8, 0x24184901, 0x73d68c01, 0xf85419d9, 0x14459d51, 0x75264656, 0xf0c7d815, 0x8b4b00ff, 0x9ae579c9, 
    0x9500a3e1, 0x8019553b, 0x0e3730ea, 0x61371f79, 0x7a4dacc9, 0x50233dce, 0xb0323886, 0xce0aa7ca, 0xcf0377cc, 0xf58afa5c, 0x57518867, 0x9b5ce74a, 
    0x4593b98a, 0x33dc2968, 0x73fd584b, 0x9789bffb, 0x8033f2b5, 0x87aec0c9, 0xa14197c3, 0x56b94997, 0x414c2e29, 0xe6d39194, 0xf3df615f, 0x2afaacf5, 
    0x56e68a27, 0x225f7bb0, 0x5ec49038, 0x6c8cc122, 0x643c9550, 0x52e51f1c, 0x98714551, 0xf756d499, 0x74e8b488, 0x55ed219f, 0xad622692, 0x4f6246ba, 
    0x439fd451, 0x0cb71154, 0x5d2ca3d7, 0x894eb99d, 0xc5da954f, 0xf6f0d30a, 0xa98bfdb3, 0x5a1c9279, 0xc2b885cf, 0xb53380e4, 0xfc097e87, 0x539ce089, 
    0xb478a868, 0x127f9cd5, 0xe891af7d, 0x22954977, 0x4dadddbc, 0xb1c5f58d, 0x871c5155, 0x05245660, 0xbe27af3c, 0xeb00ff08, 0xae68a9f5, 0x99984f59, 
    0x055be6d4, 0x99595114, 0x9da1d499, 0xda365e19, 0xb191c1e8, 0x0739309c, 0xfbc8abf3, 0xdfd56986, 0xfeeecff5, 0xc8d7de26, 0xf47b74ef, 0x6ef874d4, 
    0x17f36d90, 0x0eebfe95, 0x8233e808, 0xb859cd08, 0x39afa94c, 0x5f9db9a2, 0x206ffb21, 0x8ec52cd5, 0x00aa70bd, 0xa09a8f49, 0xfdf57a12, 0xa274a041, 
    0xb3bbc98a, 0x14eeee16, 0x15214551, 0xb29ffbf4, 0x703ec35f, 0xec38b915, 0x7aa53f78, 0x949bac55, 0x2bdaf31a, 0x9d23a6aa, 0xb7eac6de, 0x11f7e891, 
    0x0218aeab, 0xbccfeb3d, 0x752d644b, 0x0250b9d5, 0x9c3ca7dc, 0x963f5e96, 0xc68a86da, 0xb156e653, 0xadcca932, 0x2da51761, 0x41665614, 0x07501445, 
    0xa42acda3, 0x3e277063, 0xda78c995, 0x37443f0f, 0x6c2d0651, 0xed284ce2, 0x09e8e7d0, 0x3275853f, 0x00fff6fc, 0x51376b4e, 0x197b86b5, 0x866e9422, 
    0x4ce56874, 0x0e469091, 0xb575cd31, 0xabb96375, 0x942d1cab, 0x074158c2, 0x13de76b5, 0x4bdd74d1, 0xdb7b9e4d, 0x52d2356f, 0x8161efa0, 0x5e117b80, 
    0x9679a471, 0xaca425ef, 0x463bf0ac, 0x20414ec5, 0xaff2e3e0, 0xc621f055, 0x9c71728b, 0x00ff784c, 0x82e78a80, 0x6939b5f7, 0x9a517baf, 0x7de1957e, 
    0x2b5b2571, 0xf1686379, 0x19815d92, 0xda91d4e9, 0x05b8dbb8, 0xe1f6e4b5, 0x64a408b7, 0x8c83ebdd, 0xeba077d7, 0xcb12ebd0, 0x6d981e69, 0xe225a154, 
    0x06303f6e, 0xf5fa710d, 0xb16e7a84, 0x594eb43d, 0x1c378214, 0x6a9e9191, 0x8aae95a6, 0xa3a95c9a, 0xac288a3a, 0xc5a74e8c, 0xa2772d96, 0x32632cdc, 
    0x0913f320, 0xe0bc92b8, 0x3f32520f, 0x27ace21a, 0x6b0ec212, 0x9965e5d2, 0xc53d180f, 0xfb837079, 0xb0bb5937, 0x1d522ce0, 0xa7701280, 0x11fb1c95, 
    0x4d5d555b, 0xa5992deb, 0xf4846f5d, 0xd352375d, 0xdbf69e67, 0xa89474cd, 0x6060d83b, 0x2457c41e, 0xf8dd1539, 0xb946e314, 0x3c26ce38, 0x4445c07f, 
    0xd214d915, 0x9f66d472, 0x5c5f78a5, 0xdeca5649, 0x643cda58, 0x7a466097, 0xae762475, 0x6d01ee36, 0x6db83d79, 0x371929c2, 0x35e3e07a, 0xf43ae8dd, 
    0xdab2c43a, 0x551ba647, 0x9b784928, 0x8301cc8f, 0x61bd7e5c, 0x4fac9b1e, 0x4596136d, 0x24c78d20, 0xa99a6764, 0xa6a26ba5, 0xce682a97, 0x232b8aa2, 
    0x8c949d12, 0x59054741, 0x0423084e, 0xea50b91a, 0x6000fff6, 0x60c41df1, 0x55629300, 0xbf5ecf19, 0x9c2a35a8, 0xd8596d8a, 0x5ad8596d, 0xa2277ceb, 
    0x9b96bae9, 0xdeb6f73c, 0x41a5a46b, 0x0003c3de, 0x2ab922f6, 0x710afcee, 0x679c5ca3, 0xe03f1e13, 0xec0aaa22, 0x6a3969ba, 0xbcd24f33, 0xab24ae2f, 
    0x6d2c6f65, 0xb04b321e, 0x923a3d23, 0x771b573b, 0x9ebcb600, 0x14e136dc, 0x70bd9b8c, 0xf4ee9a71, 0x621d7a1d, 0xd3236d59, 0x2494aa0d, 0xe6c74dbc, 
    0x3faec100, 0x4d8fb05e, 0x89b627d6, 0x469022cb, 0x333292e3, 0xb5d254cd, 0x954b53d1, 0x45516734, 0x51889115, 0xa795434d, 0x6f5d0150, 0x375df484, 
    0x9e67d352, 0x74cddbf6, 0xd83ba894, 0xc41e6060, 0xdf5d2557, 0x6b344e81, 0x63e28c93, 0x5504fcc7, 0x539a5dc1, 0x9a51cb49, 0x7de1957e, 0x2b5b2571, 
    0xf1686379, 0x19815d92, 0xda91d4e9, 0x05b8dbb8, 0xe1f6e4b5, 0x64a408b7, 0x8c83ebdd, 0xeba077d7, 0xcb12ebd0, 0x6d981e69, 0xe225a154, 0x06303f6e, 
    0xf5fa710d, 0xb16e7a84, 0x594eb43d, 0x1c378214, 0x6a9e9191, 0x8aae95a6, 0xa3a95c9a, 0xac288a3a, 0x81424f8c, 0x518fc7b7, 0xca501b51, 0xab7d8a4c, 
    0x33f1b49e, 0xf688c2db, 0x802a6bde, 0x4fc6cc5b, 0x5b5631ae, 0x3e861bc6, 0x9100ffc1, 0xe91afbbf, 0xaf738fe7, 0xcbb947da, 0xd8c082f8, 0x5da58d78, 
    0x86ca5dde, 0xe0c8f404, 0xf363f881, 0xc40fbdad, 0xa32d1ad7, 0xc8110cc1, 0xe492f71d, 0x2afd01fa, 0x9a78b596, 0x8f7c94c7, 0x4362e225, 0xeac1dd6e, 
    0xca6f0f3a, 0x18edaaa9, 0xed166bce, 0x529ea32b, 0xa913afb4, 0x839ac793, 0x026d0921, 0x9cdce831, 0xcfcdb57e, 0xbc33b73c, 0x1c7939f3, 0x35f798e5, 
    0x4d2e151d, 0xf72627ee, 0x91a2280a, 0x69cda027, 0x1d1b0d85, 0xf8c2f5fe, 0xd5a1d1c2, 0x7f30afad, 0xc0368678, 0x397210e0, 0x953f39f5, 0x65181f6f, 
    0xfc0ff671, 0xd800ff8d, 0xa8b54ed6, 0x2cdbacc7, 0x64626c4f, 0x42c2e870, 0x381d7970, 0xfaf504cf, 0x28e5adf6, 0x73a663b5, 0x996ba38c, 0xada89cb1, 
    0xb7c417dd, 0xc1b32d1a, 0x1dc8110c, 0xe7e492f7, 0xb0d21fa0, 0x670c36d1, 0x36c5ea34, 0x6bd339b6, 0x78127554, 0x216450f3, 0x3d46a02d, 0xd68f931b, 
    0x96e7b9b9, 0x679e77e6, 0xb39c232f, 0xa2a3e61e, 0x1bf72687, 0x14857b93, 0x4b934851, 0xbe2db6c6, 0xfa07f9da, 0x4ef828b6, 0x3d093d48, 0x00ff2080, 
    0x4c9e5fdf, 0x6b2b2827, 0x53d3d653, 0xeddd92b3, 0x1f1c8736, 0x8f3d3833, 0x8ec65a4f, 0x39632c3f, 0xdd4d9bab, 0xbb69541a, 0xa2b5f5a1, 0x45e396f8, 
    0x822178b6, 0xf2be0339, 0x03f49c5c, 0x152d56fa, 0x09b1b529, 0x893aaab5, 0x32a8793c, 0x23d09610, 0xc7c98d1e, 0xf3dc5ceb, 0xcf3b73cb, 0xce919733, 
    0x51738f59, 0x7b9343d1, 0xc2bdc98d, 0x49a4288a, 0x15940d14, 0xf638322d, 0xfa34670c, 0x456b2b00, 0x8bc62df1, 0x0443f06c, 0xe47d0772, 0x07e839b9, 
    0x295aacf4, 0x4dc3d6a6, 0x49d451ad, 0x9041cde3, 0x1881b684, 0x3f4e6ef4, 0x9ee7e65a, 0x79de995b, 0x728ebc9c, 0x8e9a7bcc, 0xdc9b1c8a, 0x14ee4d6e, 
    0x42224551, 0x02a0288a, 0x7a68d8af, 0x4b0ba98e, 0xa2e66d67, 0xaa77d2b6, 0xde27fee0, 0xe07957a8, 0x728f4e40, 0x9c33c101, 0xaa22df7f, 0xc2c5ee2a, 
    0xe6cc4e2a, 0xb7b6f0a5, 0x066b170a, 0xd5b5ebc0, 0x640de48f, 0x18c14110, 0x493fbd22, 0xf8f4d4b3, 0xd3eb6ba7, 0x1005487a, 0x3ef71875, 0x893ae7b5, 
    0x2d57ea90, 0x6917462c, 0xf8678c59, 0x728a7372, 0x05e7908d, 0x14b57215, 0x14665051, 0x15004551, 0xd443c37e, 0x5b5a4875, 0x15356f3b, 0x57bd93b6, 
    0xf53ef107, 0x02cfbb42, 0x907b7402, 0xe39c090e, 0x5115f9fe, 0x112e7657, 0x35677652, 0xb8b5852f, 0x3658bb50, 0xacae5d07, 0x206b207f, 0xc1080e82, 
    0x4dfae915, 0xc5a7a79e, 0x9b5e5f3b, 0x832840d2, 0xf5b9c7a8, 0x4cd439af, 0x69b95287, 0x4abb3062, 0xc33f63cc, 0x94539c93, 0x2838876c, 0xa2a895ab, 
    0xa230838a, 0xab00288a, 0xa31e1af6, 0xd9d242aa, 0xada879db, 0xb8ea9db4, 0xaaf7893f, 0x1078de15, 0x80dca313, 0x1fe74c70, 0x8aaac8f7, 0x8a70b1bb, 
    0xa939b393, 0xc2ad2d7c, 0xb0c1da85, 0x6375ed3a, 0x045903f9, 0x08467010, 0x6cd24faf, 0x293e3df5, 0xdef4fada, 0x1d440192, 0xadcf3d46, 0x64a2ce79, 
    0x4bcb953a, 0x56da8511, 0x1cfe1963, 0xa39ce29c, 0x45c13964, 0x1445ad5c, 0x14851954, 0x5f054051, 0x1df5d0b0, 0xce961652, 0x6d45cddb, 0xc155efa4, 
    0x50bd4ffc, 0x80c0f3ae, 0x03e41e9d, 0xff386782, 0x5445be00, 0x848bdd55, 0xcd999d54, 0x6e6de14b, 0x0dd62e14, 0xab6bd781, 0xc81ac81f, 0x30828320, 
    0x937e7a45, 0xf1e9a967, 0xa6d7d74e, 0x200a90f4, 0x7dee31ea, 0x1375ce6b, 0x5aaed421, 0xd22e8c58, 0xf0cf18b3, 0xe514e7e4, 0x0ace211b, 0x286ae52a, 
    0x28cca0a2, 0x2b008aa2, 0xc54df0b7, 0xca455abc, 0x651c714d, 0xe00e38a6, 0x882bba1f, 0xce2eaaa2, 0xae5c46e5, 0x69a379e7, 0x3b817e9a, 0xc7ad49dd, 
    0xd0462a28, 0x64c48f42, 0x7e4db9e6, 0x594b2dfe, 0x4410ea9e, 0x4652406c, 0x35630009, 0x570e459d, 0xba724356, 0x144541b2, 0x51149054, 0xdb150045, 
    0xdee226f8, 0x26e5222d, 0xd3328eb8, 0x0f70071c, 0x51c415dd, 0x72671755, 0x73572ea3, 0xcdb4d1bc, 0xee9d403f, 0x94e3d6a4, 0x21682315, 0x7332e247, 
    0x7fbfa65c, 0xcfaca516, 0x36220875, 0x04232920, 0xce9a3180, 0xab2b87a2, 0x595db921, 0x2a8aa220, 0xa2280a48, 0xfced0a80, 0x166f7113, 0x5c937291, 
    0x8e691947, 0xee07b803, 0xaa28e28a, 0x51b9b38b, 0xdeb92b97, 0x9f66da68, 0x52f74ea0, 0x0aca716b, 0xa310b491, 0xae3919f1, 0x8bbf5f53, 0xba67d652, 
    0x101b1184, 0x40829114, 0x5167cd18, 0x90d59543, 0x90acaedc, 0x24154551, 0x40511405, 0x09fe7605, 0x488bb7b8, 0x23ae49b9, 0x01c7b48c, 0x45f703dc, 
    0x45551471, 0xcba8dcd9, 0x34efdc95, 0xd04f336d, 0x35a97b27, 0x4805e5b8, 0xf85108da, 0x29d79c8c, 0xa9c5dfaf, 0x42dd336b, 0x0a888d08, 0x0c20c148, 
    0xa1a8b366, 0x6ec8eaca, 0x28485657, 0x0f928aa2, 0x0000d9ff, 
};
};
} // namespace BluePrint
