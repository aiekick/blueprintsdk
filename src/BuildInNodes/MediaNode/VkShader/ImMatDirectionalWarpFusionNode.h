#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <DirectionalWarp_vulkan.h>

namespace BluePrint
{
struct DirectionalWarpFusionNode final : Node
{
    BP_NODE_WITH_NAME(DirectionalWarpFusionNode, "DirectionalWarp Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Move")
    DirectionalWarpFusionNode(BP* blueprint): Node(blueprint) { m_Name = "DirectionalWarp Transform"; }

    ~DirectionalWarpFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::DirectionalWarp_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_smoothness, m_direction.x, m_direction.y);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _smoothness = m_smoothness;
        ImVec2 _direction = m_direction;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Smoothness##DirectionalWarp", &_smoothness, 0.0, 1.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_smoothness##DirectionalWarp")) { _smoothness = 0.5f; changed = true; }
        ImGui::SliderFloat2("Direction##DirectionalWarp", (float *)&_direction, -1.0, 1.0, "%.1f", 0);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_direction##DirectionalWarp")) { _direction = {1, 0}; changed = true; }
        ImGui::PopItemWidth();
        if (_smoothness != m_smoothness) { m_smoothness = _smoothness; changed = true; }
        if (_direction.x != m_direction.x || _direction.y != m_direction.y) { m_direction = _direction; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("smoothness"))
        {
            auto& val = value["smoothness"];
            if (val.is_number()) 
                m_smoothness = val.get<imgui_json::number>();
        }
        if (value.contains("direction"))
        {
            auto& val = value["direction"];
            if (val.is_vec2()) 
                m_direction = val.get<imgui_json::vec2>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["smoothness"] = imgui_json::number(m_smoothness);
        value["direction"] = imgui_json::vec2(m_direction);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue421"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_smoothness   {0.5f};
    ImVec2 m_direction   {-1.0, 1.0};
    ImGui::DirectionalWarp_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 4905;
    const unsigned int logo_data[4908/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa9a22820, 0x00fff76a, 0xb76cbad9, 
    0x18756923, 0x760bdd40, 0xc095dda4, 0xda7345bb, 0x6fae881f, 0x7bcbbeef, 0x4d177114, 0xb952edd1, 0x57fadcef, 0x52324a43, 0x51144057, 0x14055045, 
    0x14054051, 0xff5e2d55, 0x4d37fb00, 0x2e6de496, 0xa11b08a3, 0xb29bd46e, 0xae6817b8, 0x15f1437b, 0xd9f7fdcd, 0x228e626f, 0xaa3dbae9, 0x9ffb3d57, 
    0x4669e84a, 0x02e84a4a, 0x00aa288a, 0x00288aa2, 0xaba58aa2, 0x6600ffdf, 0x8ddcb2e9, 0x0361d4a5, 0x93da2d74, 0xed025776, 0x7e68cf15, 0xbebfb922, 
    0x51ec2dfb, 0x47375dc4, 0xbfe74ab5, 0x0d5de973, 0x5d49c928, 0x15455100, 0x45511440, 0x54511400, 0x00ff7bb5, 0x5b36ddec, 0x8cbab491, 0xbb856e20, 
    0xe0ca6e52, 0xedb9a25d, 0x3757c40f, 0xbd65dff7, 0xa68b388a, 0x5ca9f6e8, 0x2b7deef7, 0x2919a5a1, 0x280aa02b, 0x8a02a8a2, 0xb902a028, 0x065f181f, 
    0x96c882bb, 0x200fd3f2, 0x00fff31d, 0xd775fed6, 0x243a7456, 0xa9cf6a11, 0x67926519, 0x0c8c0dcf, 0xc5e971fa, 0xb292d344, 0xfd2b391a, 0x2bf5d55e, 
    0x293ecd5b, 0xac003020, 0x3a9001a4, 0x579c3e74, 0x3ca90c77, 0x28672c29, 0x501f18ea, 0x4f470d6a, 0x36b45387, 0x480a96d3, 0x4750af20, 0xd1c63aa5, 
    0xb6e36c6c, 0x31d61d49, 0xc7195f80, 0x71314ae1, 0x51140b6c, 0xa2206845, 0xae00288a, 0xc117c647, 0x25b2e0ae, 0xc8c3b4bc, 0x00ff7c07, 0x759dbff5, 
    0x890e9dd5, 0xeab35a04, 0x99645946, 0x0363c3f3, 0x717a9c3e, 0xace43451, 0xff4a8e86, 0x7db55700, 0x4ff3d64a, 0x000c488a, 0x6400292b, 0xa70f9d0e, 
    0x2ac3dd15, 0x194b0a4f, 0x07863aca, 0x51831ad4, 0xedd4e1d3, 0x82e5b40d, 0xd42b0892, 0xb14ee911, 0x381b5bb4, 0x754792ed, 0xc617608c, 0x8c52f871, 
    0xc5025b5c, 0x085a5114, 0x008aa228, 0x85f1912b, 0x2cb86bf0, 0x302d6f89, 0x3fdf01f2, 0x5de76ffd, 0xa2436775, 0xfaac1641, 0x26599691, 0xc0d8f07c, 
    0x9c1ea7cf, 0x2b394d54, 0xbf92a321, 0x525fedd5, 0xe2d3bcb5, 0x0a000392, 0x031940ca, 0xc5e943a7, 0x93ca7077, 0x72c692c2, 0xf581a18e, 0x74d4a006, 
    0x433b75f8, 0xa460396d, 0x04f50a82, 0x6dac537a, 0x3bcec616, 0x63dd9164, 0x9cf10518, 0x17a3147e, 0x45b1c016, 0xa9f40428, 0xe9b180a3, 0x8a82085a, 
    0xb902a028, 0x065f181f, 0x96c882bb, 0x200fd3f2, 0x00fff31d, 0xd775fed6, 0x243a7456, 0xa9cf6a11, 0x67926519, 0x0c8c0dcf, 0xc5e971fa, 0xb292d344, 
    0xfd2b391a, 0x2bf5d55e, 0x293ecd5b, 0xac003020, 0x3a9001a4, 0x579c3e74, 0x3ca90c77, 0x28672c29, 0x501f18ea, 0x4f4b0d6a, 0x6bb3538b, 0x2001b269, 
    0x1441bd82, 0x924f2bfd, 0x572bc2ca, 0x8231cd97, 0x671c6303, 0x8b8b518a, 0x33700277, 0x8d25a452, 0x71d78658, 0xed0812ab, 0xb293b193, 0x243955fa, 
    0x288a2a23, 0x8aa200aa, 0x2191c86b, 0x14511d79, 0x001cb364, 0x54d40128, 0xdc5a5e30, 0x987b5bb1, 0x88642066, 0x2a3f36dc, 0x280a809a, 0x280a80a2, 
    0x280a80a2, 0x1289bca6, 0x11d59117, 0xc0314b46, 0x451d8002, 0xade50543, 0xb9b715cb, 0x48066286, 0xf263c38d, 0xa700a8a9, 0x39fc012b, 0x930269fc, 
    0xce6ec553, 0x1540717a, 0x008aa2e8, 0xf29aa228, 0x475e4824, 0x2c194554, 0x000a00c7, 0x71c72875, 0x2b352d55, 0x8a64f93b, 0x452b71d6, 0x3f0eb0f7, 
    0xabf0df03, 0xe97d0ea1, 0x90e5005d, 0xd5fa890e, 0x5d49ee98, 0x63f3c3b1, 0x4a3f3da9, 0xc8dd6c48, 0xe5536024, 0xcbd33896, 0x6ff7e480, 0x2049894a, 
    0x147dc66e, 0x51005a51, 0x71714745, 0x3d0d9c0d, 0x718decc3, 0xfd7a8293, 0xd509d828, 0xfe1cfe80, 0x3500ff34, 0xdaa37cbb, 0xb6eadaa8, 0xe0087217, 
    0x801e739f, 0xc5fc19a9, 0x3559596b, 0x201fe7d3, 0xec490e35, 0x0cd7d604, 0x1b0cd963, 0x31d63f4e, 0xf3aaf4cf, 0xac7fa32a, 0x7d9e1cf3, 0xc9dce5aa, 
    0x18bc0d6e, 0x1f6638dc, 0xea3decc3, 0xa9e75a88, 0x8a269128, 0x754551b4, 0xe2851596, 0x9c06d3cb, 0xde9fb1b6, 0x0fdcb65c, 0x95fef7ee, 0xa19e5cbb, 
    0xf8ad7763, 0x6d09908d, 0xb27085e1, 0xdc711cb2, 0xb326cf74, 0x902ddfa8, 0x2fa405d1, 0xd976cde1, 0xdce56325, 0x72900346, 0x74fa7a32, 0x7576a53f, 
    0x0eba6ac4, 0xda176dab, 0x4cfbbba7, 0x9714be71, 0xd713c062, 0xf56ea707, 0x0df268db, 0xc729c642, 0x8f032ade, 0x3435c746, 0x32889bdd, 0x4eb58c45, 
    0x9c1b85b0, 0x6ce855e0, 0x037832f0, 0xe25635a9, 0x99d82151, 0xa95a3f08, 0xb15b224d, 0xad288a46, 0xe2871506, 0x144ba79b, 0x6b2687b2, 0xee0008b7, 
    0x4a00ff3b, 0x916bc6dc, 0x7bfd7b5b, 0x65cf32c4, 0xcfd9af32, 0x00cf99ee, 0xf5e0380e, 0x76d459eb, 0x4734ee56, 0x0f9a0461, 0x24612d88, 0x438db895, 
    0xe54fc6f3, 0x1c73d7d0, 0xe54a8f05, 0x5dbdf42f, 0x4c6a5c4a, 0x49386219, 0x8ecfdf06, 0x575d317f, 0xb9e36f87, 0x8b996285, 0x980c8032, 0xa1acf5eb, 
    0x16d01635, 0x9bc6bac5, 0x6afda0df, 0x28322629, 0xdfab5d55, 0x5367b59e, 0x2d2eb6ba, 0xdb369ae2, 0xfabb61cb, 0x313a1f55, 0xd53eeed0, 0x67242b15, 
    0x0a425b29, 0x162aa728, 0xd7c6c2ae, 0x2d81e23d, 0x6c9ab6d4, 0xb9af797c, 0xfd81e38f, 0x0248ab6b, 0x552177a9, 0xab3d4946, 0xea33739a, 0x0430a86d, 
    0x0e8072c4, 0xacc68a36, 0x2b1a5692, 0xe1cf695a, 0x55175efd, 0xef0aad2e, 0xfdf59ced, 0xb1bb6b46, 0x96788ab6, 0x61e50ee1, 0x3f9203bb, 0x55d3e72a, 
    0xb16d4f6d, 0x6f21dfb1, 0x20e7badd, 0xdfbb00ff, 0x64e87abf, 0xd34997b4, 0xb3b2ba8b, 0x18cea970, 0x60b5fe9f, 0x6c7b25aa, 0x37574417, 0x401cf345, 
    0x1c3974a2, 0xaff2ab9a, 0x585520de, 0xcccf9de0, 0x2a4e8fc7, 0x79a176d4, 0xce734d6e, 0xa53467b3, 0x5228b572, 0xc0b1547a, 0x0c47ad5a, 0x50764068, 
    0x8d7acd7d, 0xc52be8d8, 0x66b55b6e, 0x7fad966b, 0x606c3a3c, 0x360bdea9, 0x5de93932, 0x0c6f992f, 0x3eabab44, 0x1c04553e, 0x2efd74d3, 0x885df26d, 
    0x6e54c9fc, 0xf6e48c00, 0x9e2bfcc0, 0xd1a0efa4, 0x0800ff81, 0x0c6dd66c, 0x40ca9d91, 0x710e72cb, 0xadeb00ff, 0xf4397589, 0x48b564ab, 0x3b1c9749, 
    0xa6fe382e, 0xdb1e4dba, 0x0db9ba59, 0x6d4b0071, 0x18c932c4, 0x5a077d5c, 0xad59e2a1, 0xde8eb927, 0xc491a4d8, 0x20495932, 0x730dfdb1, 0x4457564a, 
    0xceed5e4a, 0x334f5c6c, 0x4ecc6f67, 0xa6e63c49, 0x76b95d58, 0x40752afc, 0xea1400bd, 0xe76c72e6, 0x8aa2ce6c, 0x853adb2b, 0x914a4f0a, 0x36f30b61, 
    0x0146bd07, 0x0c84ed34, 0x24306990, 0x30648a74, 0xb0a14498, 0x3cc8b036, 0xb41855fa, 0x488db4f9, 0x2df217dc, 0x473c3799, 0xdb9393ee, 0x3d00fff0, 
    0x926dd22a, 0xf3750871, 0xf3dcce08, 0xed565c8f, 0xc05b82ad, 0x01009366, 0x35614d92, 0x4546a27e, 0xd61dbfc6, 0x48278a22, 0xb500ffbb, 0xa8d600ff, 
    0xdcb7e096, 0x6e35fe8c, 0x97b866e2, 0x0a47e171, 0xbd43053d, 0xa04fbe17, 0xdcb749ae, 0x52ad4cca, 0x3aaa4524, 0xbd5ac47a, 0x36dc6233, 0xf054bb85, 
    0x9118abe8, 0x9254a1ed, 0x00284b4e, 0xa8c9ebb1, 0xda2db421, 0x70acbdac, 0x8163bac5, 0xf49303db, 0x01e4acf7, 0x6a6b9926, 0xb43bf585, 0x17052755, 
    0x9e7fdc92, 0xd11c91d5, 0xfab66ec5, 0x3c1f2d74, 0x74c575bb, 0x81024e10, 0x00dab105, 0x05fdf8e5, 0x6f00ff73, 0xa559699e, 0x244f2e8b, 0xb8ca1f9c, 
    0x89dcb5aa, 0x9f0ea17b, 0xad62efb7, 0x6c27baa5, 0x49e72bd4, 0x92a9c8fe, 0x93633900, 0x8cc1ac5c, 0x81e70e8e, 0x43c81356, 0x39fc38f3, 0xdcc1f1aa, 
    0x79c22af0, 0x1f677e08, 0x49ec3587, 0xd737449d, 0xb138d396, 0x1996418e, 0xe9779c73, 0xa8d600ff, 0xc27169f7, 0x7cdf6f22, 0xe70121a7, 0x64b735db, 
    0x234ad3d6, 0x30bd0557, 0x1a8a976a, 0x700413e6, 0xc8bb5829, 0x3fbd0539, 0x955ceb2f, 0xd94ddc3b, 0x0d7b9f06, 0x342d5999, 0x80c262f8, 0xfab10c0b, 
    0x24b5d791, 0x29754bf3, 0xe72e7796, 0x3c00ffb9, 0x4f163456, 0x2c471e36, 0x4d8e657a, 0x13d18e5e, 0x991cb9de, 0x60d9a484, 0xa86a5a0a, 0xea14835e, 
    0xbdabcccc, 0x821ebfdb, 0xa5c68a91, 0xf72ea59b, 0x0a7afc6e, 0x4de9b550, 0x990d9df9, 0xd22dcdc0, 0x29aba4cc, 0xbada31f9, 0xfe766d5b, 0x2a2f0214, 
    0xa97c0c3c, 0xcd797d9e, 0x01e14865, 0x2aec9603, 0x1b69b714, 0x8a6bf27b, 0x6746cf4e, 0xdaccd6cc, 0x66d45593, 0xf292a289, 0x2b184666, 0xae2a82bb, 
    0x08e1282a, 0xac00a938, 0xdc0db99b, 0x90a2285a, 0xa909f08c, 0x2ad51212, 0x9bf769ac, 0xad52419f, 0x63f921ca, 0x5e71ea27, 0x654792db, 0xcb6ce8d0, 
    0x203eaa76, 0xf668c980, 0x32728271, 0x82f11cf8, 0xacc76905, 0xcaaa0343, 0xa4700b81, 0xd6fb8c9c, 0x1899aeb5, 0x10eeee8d, 0x619722ba, 0xd301e48c, 
    0xeab9ca9f, 0x05b2ba54, 0x279a7066, 0xfe5aee87, 0xebfb5405, 0x31e81896, 0x7acf7fce, 0xb9c735ea, 0x55ac0882, 0xcf7c73df, 0x9f7f3bec, 0x3b34eb6a, 
    0x63fe32dd, 0x450b6d6b, 0x18f34c20, 0xaef4815c, 0xfbb15b63, 0x053caf06, 0x0677f099, 0x33729263, 0xf2c972cd, 0x3b3943c7, 0x2d154347, 0x8cf56fa4, 
    0x94d5d44f, 0x49b55385, 0xb39d2b8a, 0x15d6950b, 0x53815c5e, 0xe821b0a4, 0x5415f4cd, 0x0af8692e, 0xbd027832, 0xd0b15549, 0x5eda6ae4, 0x5b81b45a, 
    0x87859e29, 0x6e73b35a, 0x21f742d3, 0xb290587e, 0x6b8e63af, 0xc1759397, 0xf5a330c6, 0xfff049af, 0x303c9600, 0x9631d7b7, 0xe36de258, 0xd70b16ef, 
    0xb9e25caf, 0x076d5e9d, 0xe1ab5c19, 0x2dd5b3a5, 0x244af9ca, 0x07e30d8c, 0xaa00ffbf, 0xda467db9, 0x984b7508, 0x9544c9e1, 0xc1eb6e94, 0x46fa77c5, 
    0xebeaa6a7, 0x1394a535, 0x2c8712db, 0xc48f0b23, 0x75e29a67, 0x7a69389d, 0x5f82b6a4, 0xe20e2634, 0xe6197930, 0x44ba9bb2, 0x288a7754, 0x285a8a01, 
    0xbf0a0cac, 0xd3247533, 0x14b0d382, 0x5a6cd464, 0xaec0004e, 0x7235d5c9, 0x18ac2419, 0x07564908, 0xef6a873b, 0xeead78f4, 0x6f2f387c, 0x5862f323, 
    0x033a94c9, 0x8e53afb8, 0xf170459d, 0xafa817c0, 0xb174f047, 0x11c3e14d, 0x9985708f, 0xb3e1305c, 0x2b82e5cf, 0x55b6c928, 0xa5627737, 0xafe19586, 
    0xd6c67910, 0x0091e3dd, 0xc71454dc, 0xd54e07a6, 0x2dc05dc7, 0x0db7276f, 0x262345b8, 0x661c5cef, 0x5b03bdbb, 0x65eed5b7, 0xfb4a8bb7, 0xa5f96326, 
    0xc40ebb89, 0xc5eb0880, 0xb2203e72, 0xb85a3f4d, 0xd41949b7, 0xc9b1c010, 0xf89367e4, 0x7155cfd4, 0xa329ce4e, 0xac288a36, 0xd202488c, 0x83ba9f33, 
    0x676da7f1, 0x22951ef6, 0x55d65aa0, 0x14b2291b, 0x7357bb83, 0x450f7de1, 0x356174d4, 0x3299b7c5, 0xf70e0933, 0x081df95e, 0x755c311d, 0x38057e77, 
    0x1989aed1, 0xf88fc7c4, 0x5e0da508, 0x5ad653a5, 0x377cec95, 0xcc5cfde1, 0x2edd73f6, 0x629e9dd3, 0xd8e9b91d, 0x916b7d9c, 0x5ddb84ba, 0x8c2101cd, 
    0x7290c94e, 0xb92b0e0e, 0x69b1eef0, 0xb535cfa9, 0x832c90be, 0x08485a26, 0x0348fd00, 0x932b9e07, 0x699205f1, 0xbac5d5fa, 0x86a0ce48, 0x234f8e05, 
    0x89c69f3c, 0xcda16b25, 0x9bd1542e, 0x66561445, 0x3bb45045, 0x4f9e63ac, 0x8e1338a5, 0x07d13407, 0xfae4983b, 0x23e564d7, 0x6055d956, 0xf77b9f69, 
    0xb32b3d3d, 0x6f49bcd2, 0x6bc7a667, 0x6de76173, 0x6d04874d, 0xcc35f42b, 0x229c0209, 0x4ccdf76e, 0xb8fb48ac, 0x999b6bfc, 0x5b934aa6, 0x2f5e6c1d, 
    0x3656b4b0, 0x3971345a, 0x0755411d, 0xdd5c81eb, 0xf7d7e4e5, 0xc04e5d72, 0xc0c921c9, 0x5150e9e3, 0xc4bdc949, 0x45e1dee4, 0x40925414, 0xe5cf4148, 
    0x4e79ec51, 0x48a5a75b, 0xe7580e10, 0xe7574feb, 0x9256bc0a, 0xc1366593, 0x573a0a22, 0xa6f8a743, 0x4d4c3f5d, 0x34c3593c, 0x336f3040, 0x3d497627, 
    0x21ac393d, 0x36a1a2f4, 0x5b9312b6, 0xcdf1311d, 0x8222c2ea, 0xa310dad2, 0x0a07ed6a, 0x3b57603b, 0xcedcf23c, 0xe4e5ccf3, 0xdc639673, 0xe45074d4, 
    0x6f72e3de, 0x298aa270, 0x2c234212, 0x5028d572, 0xfe891529, 0xea347e1c, 0xa2b51560, 0x45e396f8, 0x822178b6, 0xf2be0339, 0x3f409f5c, 0x42d162a5, 
    0xda346c6d, 0x9e441dd5, 0x0819d43c, 0x8f11684b, 0xf5e3e446, 0xe5796eae, 0x99e79db9, 0x2ce7c8cb, 0xe8a8b9c7, 0xc6bdc9a1, 0x45e1dee4, 0x31245214, 
    0x80a2288a, 0x7cd1da0a, 0xdba2714b, 0x1cc1103c, 0x2e79df81, 0xd21fa04f, 0x9ba668b1, 0xb5360d5b, 0x8f275147, 0x12420635, 0xd16304da, 0x6bfd38b9, 
    0x6e799e9b, 0x72e67967, 0x31cb39f2, 0x283a6aee, 0xb9716f72, 0x4551b837, 0x38218914, 0xd626cd51, 0x4a0ffa90, 0xf2dcc77a, 0x5631406a, 0x18dbd8e4, 
    0x56ab85b1, 0x489717f6, 0x79d2da5e, 0x8e161c94, 0xc21fc032, 0xc0f3aea0, 0xe41e9d80, 0xc779be0e, 0x4529f2fd, 0x08153b73, 0x7f1c3bf3, 0x39a83ef6, 
    0xfddf6d3a, 0xaaf06ff8, 0x46701064, 0xd24faf08, 0x486bf56d, 0x92d1fea7, 0x50809c3b, 0x7dccec44, 0x5e81cd47, 0x3582a873, 0x61c29c2b, 0x593e5626, 
    0xe7046d5c, 0xd928a718, 0x57e5700e, 0x1545512b, 0x0b616406, 0x003cb51c, 0x02a06829, 0x5ed85bac, 0x6b7ba15d, 0x7050e649, 0x00cb385a, 0x5daf0a7f, 
    0x3a0181e7, 0x7c1dc83d, 0xe4fb8ff3, 0xd85d4555, 0xd89947a8, 0xb100ffe3, 0xd3c941f5, 0xef00ff6e, 0x53857fc3, 0x30828320, 0x937e7a45, 0x455aab6f, 
    0x918cf63f, 0x8202e4dc, 0xea636627, 0xf30a6c3e, 0xa911449d, 0x0913e65c, 0xcaf2b132, 0x382768e3, 0xc84639c5, 0x5c95c3a9, 0x541445ad, 0x51148519, 
    0xb7580540, 0x42bbbcb0, 0xcc93d6f6, 0x71b4e0a0, 0x15fe0096, 0x02cfbb5e, 0x907b7402, 0x1fe7f93a, 0x8aaac8f7, 0x8f50b1bb, 0xffc7b133, 0x83ea6300, 
    0xffdda693, 0xff86df00, 0x41a60a00, 0x8a600407, 0xdf26fdf4, 0x7f8ab456, 0xb92319ed, 0x4e0405c8, 0x7cd4c7cc, 0x3ae715d8, 0xb9522388, 0x651226cc, 
    0xc695e563, 0x8a714ed0, 0x53918d72, 0x5ab92a87, 0x33a8288a, 0x80a2280a, 0x616fb10a, 0xed857679, 0x419927ad, 0x2ce368c1, 0xbd2afc01, 0x04049e77, 
    0x7520f7e8, 0xef3fcef3, 0x77155591, 0x671ea162, 0xc7fe8f63, 0x4d2707d5, 0xbf00ffbb, 0x4c15fe0d, 0xc1080e82, 0x4dfae915, 0x1469adbe, 0x32da00ff, 
    0x0a907347, 0x8f999d08, 0x2bb0f9a8, 0x461075ce, 0x4c9873a5, 0xcbc7ca24, 0x9ca08d2b, 0x1be514e3, 0x550ea722, 0x5114b572, 0x51146650, 0xdb150045, 
    0xdee226f8, 0x39e6222d, 0xb48823ae, 0x0fdc01c7, 0x51c415e1, 0x72671755, 0x73572ea3, 0xcdb4d1bc, 0xee9d403f, 0x94e3d6a4, 0x21682315, 0x7332e247, 
    0x7fbfa65c, 0xcfaca516, 0x36220875, 0x04232920, 0xce9a3180, 0xab2b87a2, 0x595db921, 0x2a8aa220, 0xa2280a48, 0xfced0a80, 0x166f7113, 0xd71c7391, 
    0x635ac411, 0xf007ee80, 0xaa28e28a, 0x51b9b38b, 0xdeb92b97, 0x9f66da68, 0x52f74ea0, 0x0aca716b, 0xa310b491, 0xae3919f1, 0x8bbf5f53, 0xba67d652, 
    0x101b1184, 0x40829114, 0x5167cd18, 0x90d59543, 0x90acaedc, 0x24154551, 0x40511405, 0x09fe7605, 0x488bb7b8, 0x886b8eb9, 0xc0312de2, 0x45f80377, 
    0x45551471, 0xcba8dcd9, 0x34efdc95, 0xd04f336d, 0x35a97b27, 0x4805e5b8, 0xf85108da, 0x29d79c8c, 0xa9c5dfaf, 0x42dd336b, 0x0a888d08, 0x0c20c148, 
    0xa1a8b366, 0x6ec8eaca, 0x28485657, 0x02928aa2, 0x02a0288a, 0xdc047fbb, 0x5ca4c55b, 0x71c435c7, 0x3be09816, 0xb822fc81, 0xeca22a8a, 0xca6554ee, 
    0x369a77ee, 0x13e8a799, 0xdc9ad4bd, 0x6da48272, 0x46fc2804, 0xd7946b4e, 0xb5d4e2ef, 0x04a1ee99, 0x2405c446, 0x33069060, 0xe550d459, 0x2b376475, 
    0x511424ab, 0xff074945, 0x000000d9, 
};
};
} // namespace BluePrint
