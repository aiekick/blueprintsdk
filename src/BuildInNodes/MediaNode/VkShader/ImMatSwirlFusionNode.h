#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Swirl_vulkan.h>

namespace BluePrint
{
struct SwirlFusionNode final : Node
{
    BP_NODE_WITH_NAME(SwirlFusionNode, "Swirl Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    SwirlFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Swirl Transform"; }

    ~SwirlFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Swirl_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_radius);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _radius = m_radius;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Radius##Swirl", &_radius, 0.1, 2.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_radius##Swirl")) { _radius = 1.f; changed = true; }
        ImGui::PopItemWidth();
        if (_radius != m_radius) { m_radius = _radius; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("radius"))
        {
            auto& val = value["radius"];
            if (val.is_number()) 
                m_radius = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["radius"] = imgui_json::number(m_radius);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue530"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_radius      {1.f};
    ImGui::Swirl_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 4512;
    const unsigned int logo_data[4512/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa9a22820, 0x00fff76a, 0xb76cbad9, 
    0x18756923, 0x760bdd40, 0xc095dda4, 0xda7345bb, 0x6fae881f, 0x7bcbbeef, 0x4d177114, 0xb952edd1, 0x57fadcef, 0x52324a43, 0x51144057, 0x450b5045, 
    0xb1e38414, 0x05a4c23e, 0xf52eb3a2, 0x692bbb3b, 0xa26c6e6e, 0x4f383482, 0x7fe6e332, 0x9f07054c, 0x785ba9c6, 0xbc814ba2, 0x40349369, 0x5b329ee1, 
    0xa8f5a71f, 0x2cd08a73, 0x7b551474, 0xed2fd83b, 0x5436f0c4, 0x9faa07f5, 0xef2a5643, 0xa2280a70, 0x288a1680, 0xea2824a9, 0xbb602870, 0xa802364b, 
    0x0fd02dc9, 0x509bcf7a, 0xa9fcddd1, 0xbd5282a6, 0x7ee0b2bc, 0xd84d8a40, 0x2b4a8766, 0x8621ee3d, 0xddd8ddcc, 0x3ed30823, 0xcbe86d51, 0x57ce988e, 
    0xef311d19, 0x1c7b6f4b, 0x1334c1b3, 0x10ec866f, 0x324cce62, 0xf4191928, 0x115c6fc7, 0x0b3297d6, 0x8aa2e817, 0x8aa20ea1, 0xa228402a, 0xdde292a2, 
    0x12ae9119, 0x012ef436, 0x4b009d1f, 0xa3594245, 0x278ece80, 0xe8715785, 0x08726f1b, 0x18cfb1e1, 0x5d915a1f, 0xdc784524, 0xb0ca303a, 0x2c5c69e8, 
    0x73408a3a, 0x02d352f8, 0xb6a2283a, 0xf1912b28, 0xb86bf085, 0x2d6f892c, 0xdf01f230, 0xe76ffd3f, 0x4367755d, 0xac1641a2, 0x599691fa, 0xd8f07c26, 
    0x1ea7cfc0, 0x394d549c, 0x92a3212b, 0x5fedd5bf, 0xd3bcb552, 0x000392e2, 0x1940ca0a, 0xe943a703, 0xca7077c5, 0xc692c293, 0x81a18e72, 0xd4a006f5, 
    0x3b75f874, 0x60396d43, 0xf50a82a4, 0xac537a04, 0xcec6166d, 0xdd91643b, 0xf1051863, 0xa3147e9c, 0xb1c01617, 0x82561445, 0x96bba116, 0x7b671be2, 
    0x74b38458, 0x3e032745, 0xa6d6e9a7, 0xa10ca4a2, 0x87d2a5a1, 0xea9627d5, 0xc2e31f6c, 0x74a0fb2f, 0x938655ed, 0x79dca47b, 0xd0345bda, 0x58c077b6, 
    0x13d40306, 0xfa3fe8c1, 0x4745bdf5, 0xae9c0b22, 0xa5737991, 0xac2e4cdc, 0x724c4a6e, 0x93b4c136, 0xd7ed389e, 0x975674a5, 0xc519f182, 0x1c20c4b5, 
    0xe742f97e, 0x325633e8, 0x18a7687d, 0xa200f5b8, 0x5a802a8a, 0x92a4a228, 0x979ccdad, 0x21c790d7, 0x2e45631f, 0xc32e0fe8, 0xfddf3ea0, 0x68a8ad7a, 
    0x8d2af7b6, 0xb231046f, 0x1582b91f, 0x69c5a1c7, 0xa7b8d4d2, 0x6a60eeb8, 0x87b76c1a, 0x43733a7c, 0xbc3be033, 0x9eeda8e0, 0x61fd3fb9, 0xd2d99cd7, 
    0x80a75334, 0x38e64bf3, 0xba8faa24, 0xf748f0a4, 0xa2d50a20, 0xc2bd8292, 0x551445e1, 0x51147588, 0xf17b0552, 0x4094b231, 0x318e994f, 0xacf4dfd7, 
    0xb8552b2d, 0xe4189289, 0xd62e7648, 0x3e067c47, 0x39f720b9, 0xf43c00ff, 0xf19614b5, 0x95eb304a, 0x76722527, 0xe8a8e3b1, 0x12b50e7a, 0x8de96e8b, 
    0xe8d1193b, 0xc323abfa, 0xc371cc25, 0x4a79322f, 0x80619f73, 0x8ad6f831, 0x86358e94, 0xc60837dd, 0x234507c0, 0x0106e2ae, 0x51b3fcef, 0xa1c4180b, 
    0xf00752fe, 0xff631179, 0xebcf4100, 0xd9594e56, 0x608b9d99, 0x31905890, 0xc20f3ae8, 0xc606569a, 0x81b1ae42, 0x4b7e872b, 0xf43a3010, 0xe1a7c31e, 
    0x50455152, 0xa3f7ec86, 0x8a3ebd67, 0x8c5d9839, 0xcf46efd9, 0xd7467d7a, 0x796da310, 0x2c765891, 0x859da301, 0xe83dbbd8, 0x044eefd9, 0x0d729011, 
    0x2ecc1c2d, 0xa3f76cc6, 0x8a3ebd67, 0x8d5d9839, 0xcf46efd9, 0x3c157d7a, 0x366357cc, 0xdeb3d17b, 0x9c0b419e, 0x0132be67, 0xb81eb923, 0xca936acf, 
    0x1feff95f, 0x47e1dfe4, 0x0db20b33, 0xf76cf49e, 0x960a5da9, 0x178144da, 0x03f4572c, 0x67d027b9, 0x1030add3, 0x90d08373, 0x8ae0887d, 0x8d5d9839, 
    0xcf46efd9, 0x73147d7a, 0x6713bb30, 0xe93d1bbd, 0x31f354d4, 0xefd98d5d, 0x757acf46, 0x0f945532, 0x5f0f9591, 0xf3e30999, 0xbb307314, 0x1bbd6717, 
    0x1cede93d, 0x7cb65181, 0xdf3ec9ad, 0x72d014e7, 0xeba10f3d, 0x731479fe, 0x6713bb30, 0xe93d1bbd, 0xc2cc51d4, 0xf49e4dec, 0x51a7f76c, 0x76c5cc53, 
    0x1bbd6737, 0xe4d4e93d, 0x45399047, 0x10ef132c, 0xe9ebb733, 0xb20b3347, 0x6cf49e3d, 0x1c64a7f7, 0x45ebf4e0, 0xc62ecc1c, 0x67a3f7ec, 0x398a3abd, 
    0xa48c5d98, 0x38490024, 0x152dbd03, 0x437e44a1, 0x6586155c, 0x7d9178c6, 0x6c5f08ce, 0xcff5bc02, 0xe135564c, 0xb63cd217, 0xcfc808f6, 0x8999cfb3, 
    0x923b462c, 0xadc9e971, 0x48810eb5, 0x0c00cc62, 0x01c7564f, 0x3380ebb3, 0xc8428ff9, 0x8eef710c, 0xbfc4f216, 0xc0cb4233, 0x085ec81d, 0xb5c7f7c9, 
    0xe82e5743, 0xf6653acd, 0x366afe98, 0x8c002cd5, 0xc3cf7cb6, 0xfc67603c, 0xa6f85af3, 0x3f8a6388, 0xe35795dc, 0x6fc0ba3f, 0xf7b3d3c8, 0x73826380, 
    0x7f7b7a82, 0x62a5699e, 0x1445a15e, 0x645a0855, 0x7215b085, 0x00bb710b, 0xfe9fdfe3, 0x489fd2bf, 0x2152e947, 0xb154a1e8, 0x490220c9, 0xbd0efae4, 
    0x9f93074f, 0x4e42efbb, 0x5a6e70b8, 0x0308c72d, 0x00770bb6, 0xd0e39f0e, 0x333d681a, 0xbf03779c, 0x1f00fff9, 0x694d5053, 0xce92c41c, 0x7400ffa4, 
    0x147e3bfd, 0x9814fa9d, 0xea126e9f, 0xbc0ac150, 0x2685649e, 0x8edb9604, 0x1879020b, 0x52e50fee, 0x26ef5599, 0xb745a387, 0x3972e838, 0xf523d81e, 
    0x635561c7, 0x033799d3, 0xec563979, 0x2ae45fb8, 0x024530cc, 0x8f02896d, 0x9534fed4, 0x926883fa, 0x24aa288a, 0xa4a2285a, 0x18335744, 0x19aa0c63, 
    0x4f808299, 0xb4507172, 0xc4a4fd73, 0x84ca192e, 0x5505c0de, 0xc08f07c8, 0x4412abf7, 0x1957a892, 0x918c8300, 0x32a6ca9f, 0x4620db28, 0xe6b11b37, 
    0x39060602, 0x3dcf1827, 0xa5d68fb1, 0x0d1b97ab, 0x076e4b11, 0x1c4bea98, 0x8e1b2cec, 0xbf3efda0, 0x61324b85, 0x6c019591, 0x240f26e0, 0xa47e9f01, 
    0xe6dce1af, 0x44db349d, 0x43fbcf67, 0x82886464, 0x47a61f94, 0xda270d5e, 0x8618334a, 0x71dcc809, 0xd3633b90, 0x2a963f8e, 0x408ad881, 0x9d115782, 
    0x398518c8, 0x6d6a47ce, 0xb4405014, 0x8b484551, 0xafb4c530, 0x1fa51dcc, 0x3a2a0377, 0xe7dc3300, 0x0e4e6faf, 0x8c21416c, 0x64b83849, 0x06727e0c, 
    0x409e9314, 0xe7e0792a, 0x244981fc, 0xc0eeda38, 0xfba8100e, 0xdb07f5a0, 0xebf5fa9c, 0x214a12c0, 0x77620891, 0x2e4f48c8, 0x9c6cef4c, 0xc7e14ef0, 
    0x6850fc4e, 0x48e25a99, 0x73a3795e, 0x70e68293, 0x3a6e6440, 0x5c470690, 0xb7683d02, 0x79b825dd, 0x18d84708, 0x1ccf31ae, 0x2ba5bf7e, 0xda5b1c43, 
    0x200764e1, 0xec467200, 0xcee975e0, 0x72790a3a, 0xa4ba4f01, 0xee9caa8c, 0x2149ebc0, 0x41307237, 0x0f0e0224, 0x51b4d43e, 0x5494814c, 0x8e735594, 
    0x3a0e74e4, 0x47515271, 0x688b5c38, 0x4b3370ce, 0x38475152, 0x928a8e5c, 0xe3c2398a, 0xa928a928, 0xe8c815e7, 0x22ad29a9, 0xa8bacb20, 0x9ca338f7, 
    0x938a362e, 0x28bd3eb0, 0x472e9ca3, 0x1c454945, 0x549471e1, 0x85f35494, 0x28a9e8c8, 0x472e9ca3, 0x1c454945, 0x2a3a72e1, 0x0be7284a, 0xa2a5a28c, 
    0x22579ca7, 0x8ea2a5a2, 0x1515b970, 0x8573142d, 0x68a9a8c8, 0x472e9ca3, 0x0c551445, 0xc54c1892, 0x3840c1b0, 0xfae404c9, 0xe23f750c, 0xb55b453d, 
    0x2a4382b1, 0xf2f7f2c8, 0x482523dd, 0xf679c6f7, 0xb1291de3, 0x58d826dc, 0xed12c98d, 0x930a0670, 0x9e87fe9e, 0x8a7b727a, 0x089aa791, 0xc82c6f24, 
    0xab02897a, 0x3b8e640c, 0xf63af00c, 0x485aa6f4, 0x190f34a7, 0x44179095, 0xae8ddb39, 0x4fc5fb17, 0xb87dfd38, 0x320c81a8, 0x107a10a4, 0xc93c0d72, 
    0x222fd72c, 0x84a0dc29, 0x7930701b, 0x8cf30027, 0x41a3537b, 0x3c8b016f, 0xea555494, 0x3aeac171, 0x9a48051e, 0xa3a8085d, 0xf8931304, 0x99a21863, 
    0x1545d122, 0x81640c22, 0x442a9edc, 0x01e5304f, 0xab3c00da, 0x2076dc10, 0x00608a60, 0xb2bb5295, 0x8c1cc7cb, 0x647a8e8c, 0xf13c7e64, 0x43f2d69a, 
    0xd5ee995c, 0xacd00659, 0x3b3001e3, 0xcfb88e03, 0x81d3f31c, 0x94497141, 0x3736708c, 0x7fb2f0c2, 0xa09d41cb, 0xe38ce0fa, 0x3d52e419, 0xdb3245a3, 
    0x012e21b3, 0x9e830747, 0xc7bffe9f, 0x6bba5fa5, 0xc1116039, 0xc6100934, 0x8f8bf9e6, 0xd3913ca0, 0x60a2f4a7, 0xc919f18c, 0xeedfde86, 0x717918ef, 
    0xf88ff281, 0xb0af1f08, 0xc8481b76, 0x8c726465, 0x109cb20a, 0x7c4a1a7b, 0x92a719d2, 0xc52e0052, 0x34e71e88, 0xd26246ca, 0x71e09e81, 0x0f4a9a9c, 
    0x915a7f6e, 0xc56d6d17, 0xdb82ecc3, 0x7919c1cd, 0x767a0109, 0x91eb431f, 0x24a2aeda, 0x80b88185, 0x43989fba, 0xf428b260, 0x8e54c5c1, 0xad216d65, 
    0x692662a2, 0x78d72901, 0x763d6ecf, 0x7b6aecf1, 0xf1ec4f4d, 0x850a4714, 0xca282400, 0xebc1a8e3, 0x3e034f9e, 0x158daabd, 0x40adae89, 0x91f66493, 
    0x30842b38, 0xc7f894af, 0x58f9002c, 0xed93d3f1, 0xa77da18a, 0x685295fd, 0x9320f3e4, 0x4730b6ee, 0x47e00f70, 0x53e9a03f, 0xbbe6f89b, 0x1d6e4986, 
    0x8e652cc4, 0xc9a38524, 0xb825c1c1, 0x7380e3f5, 0x8b3b55f8, 0x892a379f, 0x0b1332b2, 0x0e0aed9c, 0x637e7d06, 0x4ab6fe9f, 0x57ac046d, 0x19298aa2, 
    0x4a8aa28e, 0x346d1791, 0x7cc89bab, 0xc96301e4, 0x63f1b700, 0xf8fa3fae, 0xf934e319, 0x468a97b4, 0x46323c09, 0x165279c0, 0x763c092a, 0xe0781e04, 
    0x2caf8ed6, 0x55f9746a, 0xac7c5837, 0x31aa0e14, 0x673a1dc1, 0x054fad8f, 0x49f09495, 0x7bc5f074, 0x9c59c82b, 0xa067b7e1, 0x6360baf9, 0x58558c8c, 
    0x616c45d9, 0x134da749, 0x2111d808, 0xc3400a19, 0x09d2aee3, 0x0f0eaecf, 0x8aae55b5, 0x0c4be0e6, 0x37e9db31, 0xc940520a, 0x9cdba9e6, 0xa14f121c, 
    0x8fb5fe39, 0x38f66971, 0x9da133b1, 0x73300689, 0x07c91db3, 0xef31e6af, 0x9724a249, 0x5114ad42, 0x293a8248, 0xd9e83ddb, 0x22735aef, 0xe31d81ae, 
    0xeb2b4639, 0xe09cd783, 0x936a8ffa, 0x28d02ded, 0x9bf7c740, 0xf3e35209, 0x3daafcc0, 0xf76cf49e, 0x300799a3, 0xb28a95e7, 0x6220f2c4, 0x11e40b32, 
    0x33a5879e, 0xb90d5c77, 0xefd9a5f4, 0x397acf46, 0xa20d7390, 0x8ddeb39d, 0x2073f49e, 0x7e8a12ba, 0x7b367acf, 0x5d21f3d4, 0xe212a90c, 0x4aaac268, 
    0x0bee54e1, 0x4e3fe3b8, 0xe83d9b94, 0x3247efd9, 0xa9cd930b, 0xafaa4e5e, 0x4690c239, 0xc48f14d0, 0x91767755, 0x6316bb8b, 0x699293d4, 0xb3d17b76, 
    0x3e748ede, 0x9fa28c6b, 0x9e8ddeb3, 0x5d2173f4, 0xb39fa20d, 0xf59e8dde, 0x4357c83c, 0xf7eca728, 0x1cbd67a3, 0x51862ec8, 0x46efd94f, 0x90397acf, 
    0x9fa20c5d, 0x9e8ddeb3, 0xba2073f4, 0xcf768a12, 0xd47b367a, 0x125d21f3, 0x0a247741, 0xbef130c8, 0x8f0c2337, 0x24a6a1d7, 0x48a25c9e, 0x3823e299, 
    0xd3476e65, 0x7acf26a5, 0xced17b36, 0x254bcc87, 0x63a8e4f5, 0x4367ea92, 0x41425ad5, 0x760a2afc, 0x7b367acf, 0xe382ced1, 0xf76ca768, 0x1cbd67a3, 
    0x514257c8, 0x53001445, 0x711a19d6, 0x16e64308, 0x73f0b4db, 0xde96629c, 0x219dba07, 0xf19c1b8f, 0xeb3d8093, 0xd346c766, 0xd5fe2cee, 0x17ebc42d, 
    0x1b00c8f0, 0x703b23f9, 0xe73b1d48, 0xe54a53d8, 0xdc66b628, 0xa3f65769, 0x00b85a33, 0x801b4812, 0x55e9f81e, 0x4bb4ae2b, 0x3d662c6d, 0xe385a641, 
    0x8305543e, 0x4fb96e16, 0x58efb0fe, 0x0886209e, 0x40584675, 0x8a4c5152, 0xf4b10206, 0xa47e30fc, 0xa9c86ad3, 0x65e6ca42, 0x3119a514, 0x32dc48b9, 
    0x4a8a3a32, 0xa2683193, 0x7c0a908a, 0x25e0565e, 0x6bd517dc, 0x1dbac377, 0x754df4bd, 0xdb409777, 0x07483052, 0x9f3e498e, 0x4eb5da43, 0x2c221e9a, 
    0x32264b93, 0x0fb7a950, 0x678b1d86, 0x5ac5f739, 0x06b5dc8b, 0x5f5bccd5, 0xa5a0a60e, 0x64e3afec, 0x0a311f1c, 0xfb366b90, 0x66d3ba4e, 0x50445d11, 
    0xe49ccab0, 0xd635f630, 0x059a96c2, 0xaa5c5dbb, 0x8789bc5a, 0xc8215f89, 0xcf4906ee, 0x64ada73e, 0x979cfaea, 0x7dc72a7a, 0xa7e18e00, 0x55100a2d, 
    0x88d13196, 0x7a3dc7fc, 0xb1d2a6f6, 0xcc4b8a52, 0x8aa2e8e7, 0x285ac8cc, 0x9c3ddaab, 0x418afa77, 0xadbe7c2e, 0xea00c686, 0x4acdf473, 0x76571257, 
    0x955ed128, 0x762ca771, 0xb6921ecd, 0x00b952f6, 0xe30cb1ca, 0xf5be7efc, 0xa56b1b42, 0x6aa9cb84, 0xa176f7f6, 0xcad6c8b0, 0xb823c3ea, 0x2bbec7ef, 
    0xec6b664f, 0xeb8a128e, 0x450dcf35, 0x49f70224, 0x9a1bc350, 0xc3e0ce38, 0x3ffc57ae, 0x4b6e7e2f, 0x6963d80b, 0x239db465, 0x19cdbc5f, 0x0e357e00, 
    0xb428112d, 0x298aa257, 0x51142d12, 0x16ab2052, 0x689717f6, 0x79d2da5e, 0x8e161c94, 0xc21fc032, 0xe079d7ab, 0x728f4e40, 0xe33c5f07, 0x5115f9fe, 
    0x112a7657, 0xff3876e6, 0x507dec00, 0xef36cc7f, 0xf837fcfe, 0x38083255, 0xa7570423, 0xb5fa36e9, 0x00ff539c, 0xce1dc968, 0x9d883140, 0xf9a88f99, 
    0xce2b3db0, 0xa5461075, 0x394c9873, 0x57968f95, 0xc6394105, 0x4536ca29, 0xe5aa1c4e, 0xa0a2286a, 0x511465cc, 0x193e145b, 0x9664de9e, 0x91438633, 
    0xd54a1ffe, 0x6b0b35d3, 0x67b7a568, 0x56920329, 0xa6b25019, 0x931b9071, 0x7e05a78e, 0x8a1ed7a7, 0x26a5d869, 0x685c8c8e, 0xbfc9e76a, 0xdd78727b, 
    0x808db80d, 0x0723dcf4, 0x4d93aaf5, 0x5ba159a2, 0x97bb6448, 0xc228c9aa, 0x3ebec38f, 0x3e458f95, 0x968ef361, 0x91469a46, 0x4d8e59ce, 0x482a8a36, 
    0xa9288a16, 0xd64c4703, 0xf1ed34ae, 0xe8c0d29d, 0xae5cc654, 0x634fdd33, 0x15a76acf, 0x9993b6c4, 0x2074662d, 0x4682c3f0, 0x51e98f7b, 0x76e14e51, 
    0x52736d5f, 0x61dcc47d, 0xc6b26098, 0x03f5b1a1, 0x9252cd3d, 0x92cc9547, 0xac9e3b3b, 0x68d324c7, 0x7bdbe0a2, 0x48511485, 0x7847a505, 0xc86e3cd8, 
    0x8253a1c3, 0x10a92829, 0xc3b023e3, 0x04c7113b, 0xb7868dd6, 0x58abad25, 0x7697c0dc, 0xe7c29c4d, 0xb71b7d04, 0x1465d63c, 0x68d3d026, 0x4f7cacea, 
    0xed5bd8a5, 0x42bab3b7, 0xccfc8817, 0x7d9d3ea0, 0x9335e37b, 0x1ab76bad, 0x311baac4, 0x59ac9cc0, 0xd4a73ecf, 0x5a9f00ff, 0xc9a9a2cb, 0xb6b961b5, 
    0x455114ac, 0x45d12249, 0xed0a2215, 0x6f7113fc, 0x93729116, 0x6919475c, 0x07b8038e, 0x28e28aee, 0xb9b38baa, 0xb92b9751, 0x66da68de, 0xf74ea09f, 
    0xca716b52, 0x10b4910a, 0x3919f1a3, 0xbf5f53ae, 0x67d6528b, 0x1b1184ba, 0x82911410, 0x67cd1840, 0xd5954351, 0xacaedc90, 0x15455190, 0xd9ff1f24, 
};
};
} // namespace BluePrint
