#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Bounce_vulkan.h>

namespace BluePrint
{
struct BounceFusionNode final : Node
{
    BP_NODE_WITH_NAME(BounceFusionNode, "Bounce Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Move")
    BounceFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Bounce Transform"; }

    ~BounceFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Bounce_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_shadowColor, m_shadow_height, m_bounces);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _shadow_height = m_shadow_height;
        float _bounces = m_bounces;
        ImPixel _shadowColor = m_shadowColor;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("ShadowHeight##Bounce", &_shadow_height, 0.0, 0.3f, "%.3f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_shadow_height##Bounce")) { _shadow_height = 0.075f; changed = true; }
        ImGui::SliderFloat("Bounces##Bounce", &_bounces, 1.0, 10.f, "%.0f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_bounces##Bounce")) { _bounces = 3.f; changed = true; }
        ImGui::PopItemWidth();
        if (ImGui::ColorEdit4("ShadowColor##Bounce", (float*)&_shadowColor, ImGuiColorEditFlags_NoLabel | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_AlphaBar))
        {
            m_shadowColor = _shadowColor; changed = true;
        } ImGui::SameLine(); ImGui::TextUnformatted("Shadow Color");
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_shadowColor##Bounce")) { m_shadowColor = {0.0f, 0.0f, 0.0f, 0.6f}; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("shadow_height"))
        {
            auto& val = value["shadow_height"];
            if (val.is_number()) 
                m_shadow_height = val.get<imgui_json::number>();
        }
        if (value.contains("bounces"))
        {
            auto& val = value["bounces"];
            if (val.is_number()) 
                m_bounces = val.get<imgui_json::number>();
        }
        if (value.contains("shadowColor"))
        {
            auto& val = value["shadowColor"];
            if (val.is_vec4())
            {
                ImVec4 val4 = val.get<imgui_json::vec4>();
                m_shadowColor = ImPixel(val4.x, val4.y, val4.z, val4.w);
            }
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["shadow_height"] = imgui_json::number(m_shadow_height);
        value["bounces"] = imgui_json::number(m_bounces);
        value["shadowColor"] = imgui_json::vec4(ImVec4(m_shadowColor.r, m_shadowColor.g, m_shadowColor.b, m_shadowColor.a));
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        ImGui::SetWindowFontScale(1.0);
        // if show icon then we using u8"\uf2d0"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    ImPixel m_shadowColor {0.0f, 0.0f, 0.0f, 0.6f};
    float m_shadow_height {0.075};
    float m_bounces {3.f};
    ImGui::Bounce_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 5683;
    const unsigned int logo_data[5684/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa9a22820, 0x00fff76a, 0xb76cbad9, 
    0x18756923, 0x760bdd40, 0xc095dda4, 0xda7345bb, 0x6f6e881f, 0x79cbbeef, 0x4d177114, 0xb952edd1, 0x57fadcef, 0x52324a43, 0x51144057, 0x341a5045, 
    0xe3d94f56, 0xfe6f00ff, 0xa3f16ffb, 0x00fff1ec, 0x7d00ffb7, 0x9bd7f8b7, 0x46f749f5, 0xd49ac91e, 0xe3d94f56, 0xfe6f00ff, 0xa3f16ffb, 0x00fff1ec, 
    0x7d00ffb7, 0xf5d1f8b7, 0xec41f749, 0x6445ad99, 0xf63f9efd, 0xb6ef00ff, 0x3e1a00ff, 0x7ffb1fcf, 0x8d7fdbf7, 0x749f541f, 0xd49ac91e, 0xe3d94f56, 
    0xfe6f00ff, 0xa3f16ffb, 0x00fff1ec, 0x7d00ffb7, 0xf5d1f8b7, 0xec41f749, 0x1445ad99, 0x51901957, 0x13be7545, 0x4bdd74d1, 0xdb7b9e4d, 0x52d2356f, 
    0x8161efa0, 0x4d117b80, 0x1815bb2b, 0x92233bb9, 0x3f8dbba2, 0xb8bef04a, 0xbc95ad92, 0xc978b4b1, 0xf48cc02e, 0x5ced48ea, 0xda02dc6d, 0xdb707bf2, 
    0x6e325284, 0x69c6c1f5, 0x1625d8b8, 0xa268c895, 0x8a42928a, 0x8a02a028, 0x9ef0ad2b, 0x5aeaa68b, 0xdbdef36c, 0x9592ae79, 0x0c0c7b07, 0x698ad803, 
    0xc5a8d85d, 0x951cd9c9, 0xfa69dc15, 0xc4f58557, 0xe5ad6c95, 0x49c6a38d, 0xa7670476, 0xe36a4752, 0xd716e06e, 0xdc86db93, 0x77939122, 0x4d330eae, 
    0xb428c1c6, 0x144543ae, 0x51679254, 0x1def1545, 0x8c8f5c81, 0x60ae952f, 0x4f6ccbb2, 0xe73b509e, 0xce9fe9a7, 0x1acaeaba, 0x4feaab05, 0xe15a707d, 
    0xb8243f9f, 0x8e411f65, 0x4a4e13d5, 0xefe568c8, 0xd4476bf5, 0xf8342fed, 0x01c983e5, 0x20031558, 0x387d007a, 0x5219eaae, 0xce585278, 0x9f32d451, 
    0xe6856a50, 0x5b5da783, 0x28d62234, 0x12cfc749, 0x71fcb02a, 0x456dac56, 0xc2769c95, 0x608c7547, 0xf4383917, 0x9b6484a9, 0xa22816b8, 0x4541d48a, 
    0x55015014, 0xc216efef, 0x1ba75bc6, 0xb9906b84, 0x56614fc6, 0x85f1982b, 0xa76f2bd8, 0x363285ab, 0x0ee0c9f7, 0xb5e73f83, 0x1bcbe54c, 0xf1457781, 
    0x2ff76a1a, 0x1df2b701, 0xfbfc7257, 0x15f67ab7, 0xd44d5cb5, 0xb7569ab6, 0x3c637365, 0x52114452, 0x4e0f8c4d, 0x5ded710e, 0x478020a8, 0x4d4e5343, 
    0xa2c5c6e8, 0x1a412b8a, 0x954f5634, 0xcffdfc27, 0xa3f08ff9, 0x7efe93ca, 0xf8c7fce7, 0x5af59757, 0x9ac91e86, 0x14f8ddd5, 0x38b946e3, 0x7f3c26ce, 
    0x777945c0, 0xfdfc2795, 0xf08ff9cf, 0x573b1dad, 0x5ab874d4, 0x42d96b2b, 0x3d396eb3, 0xaac800ff, 0xdc691a8e, 0xddc541a8, 0xeba08d9e, 0xcb12ebd0, 
    0x6d981e69, 0xe225a154, 0x06303f6e, 0xf5fa710d, 0xb16e7a84, 0x594eb43d, 0x1c378214, 0x6a9e9191, 0xb44ef199, 0x20df3e46, 0x339115f7, 0xd34cdc5c, 
    0xf2707d4d, 0x6131cb39, 0x4b55fa93, 0x948a360f, 0xa834565b, 0x4f2a9fac, 0xf39ffbf9, 0x9547e11f, 0xcffdfc27, 0xacf08ff9, 0xcf50abfe, 0x8a5a33d9, 
    0x3f2ff3cc, 0xef7fe5e7, 0x5e00ffdf, 0xfef3328f, 0xfdfe577e, 0xeaf500ff, 0xb057ad7e, 0x3a8d9cbd, 0x710afcee, 0x679c5ca3, 0xe03f1e13, 0xccc7bc22, 
    0x9f00ffbc, 0xbf00ff95, 0xd77afd7f, 0xac4f7cd2, 0x05eff668, 0xbbb2d0bc, 0xefa23bef, 0xaa7d3d80, 0x9da887e1, 0x71112eda, 0xa07b6777, 0x12ebd0eb, 
    0x981e69cb, 0x25a1546d, 0x303f6ee2, 0xfa710d06, 0x6e7a84f5, 0x4eb43db1, 0x37821459, 0x9e91911c, 0x781e7f68, 0x9e859485, 0x93af4fdd, 0xfc5ceb9f, 
    0xcc8d7af7, 0x81d73cef, 0x639673e4, 0xd3f9531f, 0x6c8d0a95, 0x62b5c539, 0xe69915fd, 0xcacf7f5e, 0xbfdf00ff, 0x651ebdfe, 0xaffcfce7, 0x00fffbfd, 
    0x567fd6eb, 0xd9cfd8ab, 0x4ff6b5c8, 0x4a00fff6, 0xdffec93e, 0xa36856e9, 0x8b7b35eb, 0x5bb94bda, 0xfeed9fec, 0xfd937d94, 0xd5acd2bf, 0x510f0dfb, 
    0x6c6921d5, 0x56d4bced, 0x5cf54eda, 0xd1fbc41f, 0xa8af8af5, 0x31f6e6d4, 0xdffec9fe, 0x3fd947e9, 0xa02bfddb, 0xdcdac297, 0x1bac5d28, 0x56d7ae03, 
    0x9035903f, 0x60040741, 0xb2221e8a, 0xd69c83dd, 0x7fb26fe5, 0xf651fab7, 0x00fff64f, 0x1f45b34a, 0x5edcab59, 0xffca5dd2, 0x00ff6400, 0xeca3f46f, 
    0x95feed9f, 0x595f8a62, 0xa43ddcab, 0x6400ff8a, 0xf46f00ff, 0x089f5bac, 0x35ab7d45, 0x9bd7dded, 0xec101819, 0x398e812b, 0x5f155d0d, 0x1df5d0b0, 
    0xce961652, 0x6d45cddb, 0xc155efa4, 0x0ebd4ffc, 0x716949bd, 0x71eccda9, 0xd3079e77, 0xb16583a6, 0x3b67d236, 0xd3e367fe, 0xcb5aab05, 0x385b7b4d, 
    0xcde3dead, 0xfd2ed468, 0x1a3fce98, 0xb6f0a5e9, 0x6b170ab7, 0xb5ebc006, 0x0de48fd5, 0xc1411064, 0xb6972218, 0xd07f17a9, 0x2bb7e61c, 0xbffd93fd, 
    0x7fb28fd2, 0x8a55fab7, 0xaf66fd29, 0x15497b71, 0xdffec9fe, 0x3fd947e9, 0xc52afddb, 0x57b3fe14, 0x15497bb8, 0xdffec9fe, 0x3fd947e9, 0xc52afddb, 
    0xf5d0b05f, 0x9616521d, 0x45cddbce, 0x55efa46d, 0xbd4ffcc1, 0xfaaa581f, 0x636f4e8d, 0xed9fec23, 0x937d94fe, 0xb7d2bffd, 0xb7b6f0e5, 0x066b170a, 
    0xd5b5ebc0, 0x640de48f, 0x18c14110, 0xac888722, 0x35e560b7, 0x9fec5fb9, 0x7d94feed, 0xd2bffd93, 0xd64751ac, 0xb417f76a, 0x9fec5b91, 0x7d94feed, 
    0xd2bffd93, 0xd647d1ac, 0x690ff76a, 0x3fd9b722, 0xfb28fddb, 0xa57ffb27, 0x1af6ab59, 0x42aaa31e, 0x79dbd9d2, 0x9db4ada8, 0x893fb8ea, 0x15eba3f7, 
    0xcda9515f, 0x93fd63ec, 0x8fd2bffd, 0xfab77fb2, 0x852f4157, 0xbb50b8b5, 0x5d073658, 0x207facae, 0x0e82206b, 0x3c14c108, 0x07bb6545, 0xdfcaad29, 
    0x6f00ff64, 0x9feca3f4, 0x6695feed, 0x57b33e8a, 0x8aa4bdb8, 0xffc9da1f, 0xfff33e00, 0x47b3df00, 0xcf7fb2f6, 0xf700ffbc, 0xae68d3ec, 0xb947aaaf, 
    0xbf43b3af, 0x7dfe93b5, 0xbf00ffe7, 0x09dfba66, 0x4ec3baf8, 0xe18627d3, 0x4b794726, 0xc21fa10c, 0x53147205, 0x7ba75858, 0x7751308e, 0xc6239d3b, 
    0xc6245851, 0xd26bfafa, 0x3aa1d8d8, 0xb8d6277e, 0x3b72cdeb, 0xfbe7d99b, 0xc8e6eb2c, 0x7846b4cf, 0xbd2acec9, 0x5a2c3c14, 0xa628c7b5, 0x59fb3bac, 
    0x7fdee73f, 0xfe68f6fb, 0xf7f94fd6, 0x9afdfe9f, 0xa9be146d, 0x34fbe41e, 0x6f42fb3f, 0xfb6ff3f9, 0x8fc67fed, 0xe7bf09ed, 0xb5efbfcd, 0x651a00ff, 
    0x4fa9fe14, 0x479c3dcc, 0x4d6800ff, 0x6d3e00ff, 0xaf7d00ff, 0xe14dd7f8, 0xa445189f, 0x3d41d3e9, 0x42de81a4, 0x003d0cc3, 0x51cb95fe, 0x4eb0b054, 
    0x2e0a46e5, 0x9f74ece8, 0x9362491c, 0xbd26d91b, 0xe98b8d2d, 0xaee59af8, 0x6f6e79f5, 0x2c16b826, 0xfb8c6c9e, 0x3919af43, 0x87a257c5, 0x50d38386, 
    0x7f584d71, 0xf3df84f6, 0xdaf7dfe6, 0x1f8d00ff, 0xcf7f13da, 0x6bdf7f9b, 0x2aca34fe, 0xcc4fa97e, 0x4613679f, 0x7bddcb8a, 0x6b3f00ff, 0xff7e00ff, 
    0x6ef4fa00, 0x9f00ffbd, 0xbf00ffb5, 0xe47afd7f, 0xc65eb5fa, 0xa546ce7e, 0x04049e77, 0x1c20f7e8, 0xfdc73913, 0xf7cb2bf2, 0xcf00ff5e, 0xdf00ffda, 
    0x6bbdfebf, 0xd5233e69, 0x2d499b74, 0x64199de2, 0xc794c462, 0xb84a7f6c, 0x7627ea61, 0x5d1c848b, 0x4dbae9d9, 0xc5a7a79e, 0x9b5e5f3b, 0x832840d2, 
    0xf5b9c7a8, 0x4cd439af, 0x69b95287, 0x4abb3062, 0xc33f63cc, 0x1d559c93, 0xf4d45927, 0x2b9a868b, 0x6e97c5ad, 0x961fb8dd, 0x514b2d6a, 0xe73b75d4, 
    0x15e592bb, 0x3f02199f, 0x725a8f41, 0x87ad51a1, 0x6a91b628, 0x7bddcb8a, 0x6b3f00ff, 0xff7e00ff, 0x6ef4fa00, 0x9f00ffbd, 0xbf00ffb5, 0xcf7afd7f, 
    0x197bd5ea, 0x941a39fb, 0x99734551, 0x049e7785, 0x20f7e804, 0xc739131c, 0x832bf2fd, 0x37c1dfae, 0x1769f116, 0x71c43529, 0x3be09896, 0xade87e80, 
    0x9446fc29, 0x496323be, 0xf8f4d4b3, 0xd3eb6ba7, 0x1005487a, 0x3ef71875, 0x893ae7b5, 0x2d57ea90, 0x6917462c, 0xf8678c59, 0xec8a7372, 0x4f336df4, 
    0xa97b27d0, 0x05e5b835, 0x5108da48, 0xd79c8cf8, 0xc5dfaf29, 0xdd336ba9, 0x888d0842, 0x20c1480a, 0xf69c660c, 0x51f85445, 0x5614459d, 0x15752646, 
    0xfd7745a3, 0x89bffb73, 0x33f2b5b7, 0x37c42fab, 0x9548c3c6, 0x27c9cad1, 0x101c84c8, 0x66f8714f, 0x3c295aba, 0x1eacd565, 0x3ce0c8d7, 0x067d7f3d, 
    0xf3b7b6ac, 0x20e2e24a, 0xd87225c8, 0xd3ebc838, 0x5a5dd78c, 0x2f8e5234, 0x88df5a95, 0x3a235f7b, 0xaba2d18a, 0xfcdd9feb, 0x19f9da43, 0x148d56d4, 
    0xbffb737d, 0x235f7b88, 0x51fcb13a, 0x79342d7a, 0x7f9e1f10, 0xeba18fdd, 0x455357fa, 0xb5ba8c27, 0x1ef9da83, 0xbaf9a075, 0xb51db93e, 0xa22edac1, 
    0x23cf3d5e, 0x2bed8afa, 0x62988a46, 0x1eac55b9, 0xa2cec8d7, 0xfaab68b4, 0x107ff7e7, 0x7546bef6, 0x1f45a315, 0xe2effe5c, 0xcec8d71e, 0x76344da6, 
    0xb6d2bcf0, 0xcc52e3d8, 0x516a057d, 0xbb3fd747, 0xf2b587f8, 0x6b75ac30, 0x6d9d451d, 0x0c0af327, 0x3f46dab0, 0x462b5731, 0xfa184b8a, 0x91af3dc4, 
    0xd168459d, 0xdd9feb4f, 0xf9da43fc, 0x7fef9b19, 0xef7fe9e7, 0x5e00ffdf, 0xf3bff78d, 0xeff7bff4, 0x5aaf00ff, 0xd21e5674, 0x247ef297, 0x99b147f3, 
    0x7efef7be, 0xfffdfe97, 0xdfe8f500, 0x3f00ff7b, 0x7e00ff4b, 0xf5fa00ff, 0xd21e45a7, 0x217ef297, 0x66c61ecd, 0xfaf9dffb, 0xfff7fb5f, 0x7da3d700, 
    0x2ffdfcef, 0x00fffbfd, 0x149dd6eb, 0xc95f4a7b, 0x7b3487f8, 0x7fef9b19, 0xef7fe9e7, 0x5e00ffdf, 0xf3bff78d, 0xeff7bff4, 0x5aaf00ff, 0x29ed5174, 
    0x1ce2277f, 0x5114ecd1, 0x85997345, 0xd113be75, 0x4d4bdd74, 0x6fdb7b9e, 0xa052d235, 0x808161ef, 0x955c117b, 0x38057e77, 0x334eaed1, 0xf01f8f89, 
    0x76055711, 0x2d274d69, 0x57fa6946, 0x95c4f585, 0x8de5ad6c, 0x7649c6a3, 0x52a76704, 0x6ee36a47, 0x93d716e0, 0x22dc86db, 0xae779391, 0xde5d330e, 
    0xac43af83, 0x7aa42d4b, 0x8452b561, 0xfcb88997, 0xc73518c0, 0xe911d6eb, 0xd1f6c4ba, 0x08526439, 0x464672dc, 0x569aaa79, 0x72692aba, 0x28ea8ca6, 
    0x0a31b2a2, 0x0a80a228, 0xa2277ceb, 0x9b96bae9, 0xdeb6f73c, 0x41a5a46b, 0x0003c3de, 0x2ab922f6, 0x710afcee, 0x679c5ca3, 0xe03f1e13, 0xec0aae22, 
    0x5a4e9ad2, 0xaff4d38c, 0x2a89eb0b, 0x1bcb5bd9, 0xec928c47, 0xa44ecf08, 0xddc6d58e, 0x27af2dc0, 0x45b80db7, 0x5cef2623, 0xbdbb661c, 0x58875e07, 
    0xf4485b96, 0x09a56ac3, 0xf971132f, 0x8f6b3080, 0xd323acd7, 0xa2ed8975, 0x11a4c872, 0x8c8ce4b8, 0xad3455f3, 0xe5d25474, 0x51d4194d, 0x14626445, 
    0x15004551, 0x454ff8d6, 0x362d75d3, 0xbc6def79, 0x834a49d7, 0x010686bd, 0x557245ec, 0xe314f8dd, 0xce38b946, 0xc07f3c26, 0xd9155c45, 0xb59c34a5, 
    0x5ee9a719, 0x5512d717, 0x3696b7b2, 0xd825198f, 0x499d9e11, 0xbb8dab1d, 0x4f5e5b80, 0x8a701b6e, 0xb8de4d46, 0x7a77cd38, 0xb10ebd0e, 0xe991b62c, 
    0x124ad586, 0xf3e3265e, 0x1fd76000, 0xa64758af, 0x44db13eb, 0x234891e5, 0x1919c971, 0x5a69aae6, 0xcaa5a9e8, 0xa2a8339a, 0x28c4c88a, 0x2b008aa2, 
    0x8b9ef0ad, 0x6c5aeaa6, 0x79dbdef3, 0x079592ae, 0x030c0c7b, 0xabe48ad8, 0xc629f0bb, 0x9c71728d, 0x00ff784c, 0x2bb88a80, 0x39694ab3, 0xd24f336a, 
    0x24ae2fbc, 0x2c6f65ab, 0x4b321e6d, 0x3a3d23b0, 0x1b573b92, 0xbcb60077, 0xe136dc9e, 0xbd9b8c14, 0xee9a7170, 0x1d7a1df4, 0x236d5962, 0x94aa0dd3, 
    0xc74dbc24, 0xaec100e6, 0x8fb05e3f, 0xb627d64d, 0x9022cb89, 0x3292e346, 0xd254cd33, 0x4b53d1b5, 0x51673495, 0x89911545, 0xffedda17, 0x7eb2e700, 
    0xdfae7d74, 0xe7277bfe, 0xadb2bf55, 0x9ce700ff, 0x51ecf75f, 0xff6f95fd, 0xffe23c00, 0xb662bf00, 0xdffca7e4, 0xeed12e83, 0xbf5dfb59, 0xce4ff6fc, 
    0x185f74b6, 0x3cdb627f, 0x0e248810, 0x3976c9fb, 0xaef407e8, 0xdf2afb77, 0xffc579fe, 0x1fc57e00, 0x00ff56d9, 0xfb2fcef3, 0xc1a829f6, 0x8dc13f6d, 
    0xd8996a59, 0xe11ef149, 0x544b8490, 0x4eb2d163, 0xe7e65a3f, 0x77e692d4, 0x79956b9e, 0x9e98e51c, 0x00ffa9a6, 0x00ff5b65, 0xefbf38cf, 0x2afba3d8, 
    0xc579fedf, 0xc57e00ff, 0xe73d1837, 0x9eb631f8, 0xbbf6b3ec, 0x9fecf97f, 0xb76b1f9d, 0xc99e00ff, 0xec6fd5f9, 0xe7f97fab, 0x14fbfd17, 0xff5b657f, 
    0xbf38cf00, 0xe4a9d8ef, 0x83dffca7, 0x1feed126, 0x00ff12da, 0x00ffa3cf, 0xf6476bdf, 0xe8f3bf84, 0xdaf700ff, 0xff64dfd4, 0xa3f46f00, 0xfeed9fec, 
    0x1b2eb795, 0xf2f59ff9, 0x7fc8d42a, 0x00ff25b4, 0x00ff479f, 0xb4b6d6be, 0xe8de1a5f, 0x3a04cfb6, 0xf71dc86a, 0xd033ee92, 0xcb6a5f0f, 0x7ffb27fb, 
    0xff641fa5, 0xa6f46f00, 0x276d1d96, 0x9c867cfd, 0x149da916, 0x5635139f, 0x894b1342, 0xd96df418, 0xdc5cebc7, 0xccd5bdfa, 0xf2d63cef, 0xcc728e3c, 
    0xef34795d, 0xfab77fb2, 0xf64ff651, 0x1a4a00ff, 0xffe4bdc3, 0xdb90af00, 0xff90dd8b, 0xff4b6800, 0xff8f3e00, 0x1fad7d00, 0x00ff12da, 0x00ffa3cf, 
    0x7d536bdf, 0xd2bffd93, 0xb77fb28f, 0xc3e552fa, 0xbefe337f, 0x0f99da44, 0xf37facf6, 0xf6fb7fc2, 0x8fd5fe68, 0xff4f78fe, 0x4dcd7e00, 0xfff64ff6, 
    0xc93e4a00, 0x53e9dffe, 0x82f943c9, 0xfd43eed0, 0xf0fc1fab, 0x9afdfe9f, 0x757cd1d9, 0xf06c8b26, 0x07f26043, 0x6dbce47d, 0x4a7f809e, 0xfb27fbcc, 
    0x641fa57f, 0xf46f00ff, 0x6d41a3a6, 0xaa45ae21, 0xc5274567, 0x1342c61b, 0xa3c7d84f, 0x5c714c79, 0xb9e1fadc, 0x3b9ae79d, 0x59ce9187, 0x4e93678c, 
    0x7ffb27fb, 0xff641fa5, 0xa1f46f00, 0x03792faa, 0x1fb27b71, 0x00ff58ed, 0x00ff84e7, 0xfdd1ecf7, 0xf0fc1fab, 0x9afdfe9f, 0xed9fec9b, 0x937d94fe, 
    0x97d2bffd, 0x15e60f25, 0xcf97dca1, 0xa77afe87, 0xf328f4fd, 0x9e00ffe1, 0x7d00ffa9, 0x99fdab0a, 0xff23f707, 0x8f62bf00, 0xb93fc8ec, 0x15fbfd1f, 
    0xe63f259f, 0x8f3619fc, 0x0f9fd772, 0xfb4ff5fc, 0x8bce56e8, 0x6dd1c6e2, 0x0956089e, 0x5df2be03, 0xf407e8b9, 0x32fb73ae, 0xff47ee0f, 0x1fc57e00, 
    0x727f90d9, 0x29f6fb3f, 0x3f6dc1a8, 0x6a598dc1, 0xf1c9d899, 0x8490e90e, 0xf418d58e, 0xd68f936c, 0x85efb9b9, 0xd73cefcc, 0xcb39f20a, 0xaac96131, 
    0x7f90d95f, 0xf6fb3f72, 0x83ccfe28, 0x00ff91fb, 0xc64db1df, 0x0cfe790f, 0x2dbba76d, 0x00fff079, 0x00ff54cf, 0x7c1e85be, 0x3fd5f33f, 0x7f55a1ef, 
    0xe4fe20b3, 0x51ecf77f, 0xf70799fd, 0xbf00ff23, 0x9f92a762, 0x9b0c7ef3, 0x8a76b947, 0x0a48ac28, 0xeaa161bf, 0x2d2da43a, 0x8a9ab79d, 0xabde49db, 
    0x7a9ff883, 0x81e75da1, 0xc83d3a01, 0x71ce0407, 0x8a7c00ff, 0x17bbaba8, 0x333ba908, 0xdac2979a, 0xac5d28dc, 0xd7ae031b, 0x35903f56, 0x04074190, 
    0xfdf48a60, 0xd353cf26, 0xafaf9de2, 0x1420e94d, 0xdc63d441, 0xea9cd7fa, 0x5ca94326, 0x5d18b1b4, 0x9f3166a5, 0x29cec9e1, 0x9c4336ca, 0xd4ca5514, 
    0x98414551, 0x00144551, 0x0f0dfb55, 0x6921d551, 0xd4bced6c, 0xf54eda56, 0xfbc41f5c, 0x3cef0ad5, 0xeed10908, 0x73263840, 0x55e4fb8f, 0xb8d85d45, 
    0x9cd94945, 0xd616bed4, 0x60ed42e1, 0xba761dd8, 0xac81fcb1, 0x23380882, 0xe9a75704, 0x9f9e7a36, 0x7a7ded14, 0xa200496f, 0xe71ea30e, 0x51e7bcd6, 
    0xe54a1d32, 0xedc288a5, 0xff8c312b, 0x714e0e00, 0x1cb2514e, 0x56aea2e0, 0x0c2a8aa2, 0xa0288ac2, 0x68d8af02, 0x0ba98e7a, 0xe66d674b, 0x77d2b6a2, 
    0x27fee0aa, 0x7957a8de, 0x8f4e40e0, 0x33c10172, 0x22df7f9c, 0xc5ee2aaa, 0xcc4e2ac2, 0xb6f0a5e6, 0x6b170ab7, 0xb5ebc006, 0x0de48fd5, 0xc1411064, 
    0x3fbd2218, 0xf4d4b349, 0xeb6ba7f8, 0x05487ad3, 0xf7187510, 0x3ae7b53e, 0x57ea9089, 0x17462c2d, 0x678c5969, 0x8a7372f8, 0xe7908d72, 0xb5721505, 
    0x66505114, 0x00455114, 0x43c37e15, 0x5a4875d4, 0x356f3b5b, 0xbd93b615, 0x3ef10757, 0xcfbb42f5, 0x7b740202, 0x9c090e90, 0x15f9fee3, 0x2e765751, 
    0x67765211, 0xb5852f35, 0x58bb50b8, 0xae5d0736, 0x6b207fac, 0x080e8220, 0xfae915c1, 0xa7a79e4d, 0x5e5f3bc5, 0x2840d29b, 0xb9c7a883, 0xd439aff5, 
    0xb952874c, 0xbb306269, 0x3f63cc4a, 0x539c93c3, 0x38876c94, 0xa895ab28, 0x30838aa2, 0x697fa9a2, 0x3c00ffc5, 0xbf00ff67, 0x38ed8f66, 0xff8ce7bf, 
    0xd5ecf700, 0xf9b04bf2, 0x7fbb7659, 0xc55bdc04, 0xd7a45ca4, 0x635ac611, 0xfb01ee80, 0xfbefbca2, 0xe3f92f4e, 0x34fbfd3f, 0xffc5697f, 0xff673c00, 
    0x9c66bf00, 0x62ef2463, 0xd8bb78e3, 0x4c1b9df4, 0xde09f4d3, 0x396e4dea, 0x82365241, 0x27237e14, 0xf76bca35, 0xcc5a6af1, 0x238250f7, 0x30920262, 
    0xac190348, 0xbf38ed1f, 0x00ff8ce7, 0xfdd1ecf7, 0xf1fc17a7, 0x9afdfe9f, 0x24ab496d, 0x91acb60d, 0xfda58a76, 0xf1fc17a7, 0x9afdfe9f, 0xffe2b43f, 
    0xff339e00, 0x53b3df00, 0x72c42ec9, 0x5715edb2, 0xf92f46fb, 0xfbfd37e7, 0xc5687f34, 0xe63c00ff, 0x66bf00ff, 0x07bb2497, 0x6f572d2b, 0x788b9be0, 
    0x9a948bb4, 0x4ccb38e2, 0x3fc01d70, 0x7f9f5774, 0x00ffc568, 0x00ffe63c, 0xed8f66bf, 0x9ce7bf18, 0xd5ecf7df, 0xd83b4945, 0xf62edea8, 0xd3461b3d, 
    0x7702fd34, 0x8e5b93ba, 0xa08d5450, 0xc9881f85, 0xfd9a72cd, 0xb3965afc, 0x8820d43d, 0x8ca480d8, 0x6bc60012, 0x2f46fb13, 0xfd37e7f9, 0x687f34fb, 
    0x3c00ffc5, 0xbf00ffe6, 0x6a529b66, 0xd5b60dc9, 0x55512d92, 0xff62b47f, 0x7f739e00, 0xf647b3df, 0xcef35f8c, 0x6af6fb6f, 0x8ed82539, 0xaaa25a56, 
    0x456800ff, 0xef7fc9fd, 0x42fba3d9, 0xff4bee2f, 0x1ccd7e00, 0xac1cec92, 0x82bf5db5, 0xd2e22d6e, 0x886b522e, 0xc0312de3, 0xd1fd0077, 0xa1fd7d5e, 
    0xff25f717, 0x8f66bf00, 0xb9bf08ed, 0x35fbfd2f, 0xf64e5251, 0xbd8b372a, 0xb4d1468f, 0x9d403fcd, 0xe3d6a4ee, 0x68231594, 0x32e24721, 0xbfa65c73, 
    0xaca5167f, 0x220875cf, 0x23292036, 0x9a318004, 0x8bd0fec4, 0x00ff92fb, 0xf647b3df, 0x97dc5f84, 0x6d9afdfe, 0x3624ab49, 0xb54856db, 0xd0fe5545, 
    0xff92fb8b, 0x47b3df00, 0xdc5f84f6, 0x9afdfe97, 0x2376498e, 0xa6a89695, 0xf5fd89f9, 0x13f3e8fc, 0xd1f9ebfb, 0x66c12ecb, 0x047fbb3a, 0xa4c55bdc, 
    0x11d7a45c, 0x80635ac6, 0xa2fb01ee, 0x3f316fb8, 0x1e9dbfbe, 0x7f7d7f62, 0x27a9a83a, 0xe216157b, 0xd1be63ef, 0x403fcdb4, 0xd6a4ee9d, 0x231594e3, 
    0xe2472168, 0xa65c7332, 0xa5167fbf, 0x0875cfac, 0x29203622, 0x31800423, 0x13f3cc9a, 0xd1f9ebfb, 0xd7f727e6, 0x35f3a1f3, 0xdae48664, 0xa6a843b2, 
    0xf5fd89f9, 0x13f3e8fc, 0xd4f9ebfb, 0x16b1cbf2, 0x00d9ff67, 
};
};
} // namespace BluePrint
