#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <GlitchMemories_vulkan.h>

namespace BluePrint
{
struct GlitchMemoriesFusionNode final : Node
{
    BP_NODE_WITH_NAME(GlitchMemoriesFusionNode, "GlitchMemories Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    GlitchMemoriesFusionNode(BP* blueprint): Node(blueprint) { m_Name = "GlitchMemories Transform"; }

    ~GlitchMemoriesFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::GlitchMemories_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return false; }
    bool Skippable() const override { return true; }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
         // if show icon then we using u8"\ue3ad"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    ImGui::GlitchMemories_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 3718;
    const unsigned int logo_data[3720/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa9a22820, 0x00fff76a, 0xb76cbad9, 
    0x18756923, 0x760bdd40, 0xc095dda4, 0xda7345bb, 0x6fae881f, 0x7bcbbeef, 0x4d177114, 0xb952edd1, 0x57fadcef, 0x52324a43, 0x51144057, 0x450b5045, 
    0x51805414, 0x55e23245, 0x6692b5b7, 0x699a8be8, 0xd94dd85d, 0xcf157d5c, 0x9a223e69, 0xee6dfdf6, 0xfb573512, 0xfe1c01a5, 0x3012ba26, 0xa9195171, 
    0x9a429736, 0x8aa22868, 0x14450ba1, 0x51149254, 0x2b376a50, 0x3ecda567, 0x43dd2771, 0xda6e68ee, 0xc48a9e8c, 0xee5935d0, 0xe3b58def, 0x2637bd13, 
    0x6fbf2f54, 0x61845b51, 0xa334f488, 0x0d742525, 0x53144509, 0xa228ea10, 0x2a8a02a4, 0x34e94e0d, 0xfc9844eb, 0x4901e7cc, 0xaeec26c5, 0xd1932bc1, 
    0x23976950, 0x5779b552, 0x5470c80a, 0xb5c4f454, 0xa2280a57, 0x45d19181, 0x5c41b115, 0x832f8c8f, 0x4b64c15d, 0x90876979, 0x00fff90e, 0xeb3a7feb, 
    0x121d3aab, 0xd467b508, 0x33c9b28c, 0x06c686e7, 0xe2f4387d, 0x59c969a2, 0xfe951c0d, 0x95fa6aaf, 0x149fe6ad, 0x56001890, 0x1dc80052, 0x2b4e1f3a, 
    0x9e5486bb, 0x94339614, 0xa80f0c75, 0xa7a30635, 0x1bdaa9c3, 0x2405cb69, 0x23a85710, 0x68639dd2, 0xdb7136b6, 0x18eb8e24, 0xe38c2fc0, 0xb818a5f0, 
    0x288a05b6, 0xb410b4a2, 0x05484551, 0xf0a27861, 0xa1b66847, 0x3f3965b0, 0xabacdd4a, 0x7aed178d, 0x32cfdda2, 0x12d24bbc, 0x1b3a7f9c, 0xc5ad2d6a, 
    0x18bab46b, 0x7a7ab717, 0xca589ba5, 0x6178e87c, 0x5de78fb0, 0xe2c2bc85, 0xe49439de, 0xae55833a, 0x8b0b8bf4, 0x483b8a67, 0x3a1c7621, 0x951f0144, 
    0x9a8c5d1a, 0x79b7a07d, 0x081ea084, 0xacf5635c, 0x51460963, 0x00ff567e, 0x9aee5d82, 0x5de6bf7e, 0x622b8aa2, 0x2a8aa245, 0xfce70a49, 0x3cad7845, 
    0x23258756, 0xff1edf3b, 0xe76ffd00, 0xb653055d, 0xd4b762d3, 0x7b00ff9e, 0x70922bc9, 0xa7cfc0d8, 0x4d32951e, 0x9fa321ab, 0xae6dd6bb, 0xab7b1b75, 
    0xc2886438, 0x64e06c00, 0xb83d9d0e, 0x4832b0ae, 0xa39cf1aa, 0x1afbc080, 0x6a0aa166, 0x51dea636, 0x97214880, 0x4bcb34a8, 0x906c6961, 0x38e18c2c, 
    0x8ad2fa05, 0x4db6b169, 0x92551445, 0xa9288a3a, 0xeb6bac00, 0x5abd6b8b, 0x0b64ee28, 0x623e6e6d, 0x4f8e044f, 0xbbef5aeb, 0x6cc16c63, 0xac999e71, 
    0x81463ffd, 0xaba4ce11, 0xc173ee70, 0xbb121538, 0x882d45b2, 0x22989b34, 0xb4b7a6d5, 0x49195a95, 0x642b1dc1, 0x6d561c8c, 0xbc1293e6, 0x9046a64f, 
    0x27393914, 0xed5cd19a, 0x7a4f8e1b, 0xc5ac7421, 0x5adcef2d, 0x43aca228, 0xb3d17b76, 0x1c459fde, 0x6cc62ecc, 0xbd67a3f7, 0x9c55953e, 0xf6b154e1, 
    0xbb307314, 0x46efd923, 0x22517acf, 0xba5a9e34, 0x3ce8fe97, 0x9dee54fe, 0x7661e668, 0x1bbd6733, 0x51f4e93d, 0x6eecc2cc, 0x7b367acf, 0xe6a9e8d3, 
    0xb319bb62, 0xf49e8dde, 0xda8978fa, 0x910f9426, 0x4acff13e, 0x6417a439, 0xd9e83d3b, 0x8b804eef, 0x9c1fc2a2, 0x9702c9a8, 0x85ed1ca5, 0xf49ecdd8, 
    0xd1a7f76c, 0xb10b3347, 0xb3d17b36, 0x4f459dde, 0xddd81533, 0xf76cf49e, 0x6e8453a7, 0x15235cca, 0x0a1c481d, 0x915dd839, 0x67a3f7ec, 0x704139bd, 
    0x75c08d4a, 0x8ea238c7, 0x76631766, 0xdeb3d17b, 0xcc1c459d, 0xefd9c42e, 0x757acf46, 0x57cc3c15, 0xd17b7663, 0x4f9ddeb3, 0xfcf2a5f2, 0x7ff62dcf, 
    0xe7c7697b, 0xb20b3347, 0x6cf49e2d, 0x3936a9f7, 0xd14ee14d, 0x36c571c6, 0x6317668e, 0xb3d17b76, 0x1c459dde, 0x51c62ecc, 0x41a11545, 0xb4c5594f, 
    0x2f7bca52, 0xd4cdca14, 0x76342f66, 0xf9999f71, 0xaba58b22, 0x65570be8, 0x5e91aad4, 0xa216c9db, 0x276d79c4, 0xf2045de3, 0x4e24eca4, 0x59e9018c, 
    0xe9bae873, 0xc25eab84, 0x4664d46d, 0x83fecf09, 0x8bd7e952, 0x9084b03d, 0xf483135e, 0xaed495ac, 0xb9ebeffa, 0xed36d6a3, 0xa2e816f9, 0x5accd48a, 
    0x41a4a228, 0x63707549, 0xfb145ad3, 0x0a3fbef2, 0x3214a75a, 0xc6831aea, 0x1c1a434b, 0x384e1909, 0x4d1a3fee, 0xb8a352db, 0xf4594bfb, 0x9a164a4d, 
    0x80ca2a53, 0xfaeba91f, 0x3389c9d5, 0x92b42b39, 0x842a3d4e, 0x519604fa, 0xb5a9939b, 0x8f895ed1, 0x51abb9fe, 0x6bdc35dd, 0x632b232b, 0xe2c13004, 
    0xdbc529a6, 0xeab0e5b8, 0x81aca228, 0x918aa268, 0x06d74e05, 0x5f44222d, 0x1fed2bbd, 0xa1820a4c, 0xee6ff3b6, 0x661808de, 0x809ee026, 0xec8666e0, 
    0xdae48e8a, 0x75d3bb50, 0x42db9700, 0xbfa783ca, 0x9f5e00ff, 0x2a670629, 0x0f1c0b30, 0x9f2eaf4a, 0xebe25bad, 0x548ebb50, 0xb3b5818f, 0xa7827e8f, 
    0x1befa87b, 0x60188fcf, 0xf45e8f33, 0xe0bfeea2, 0x366ca958, 0x66a6288a, 0x5251142d, 0x1297ab20, 0x3654fa4a, 0x5ff3f8b6, 0x3cd76724, 0xeb943e55, 
    0x28f5ee08, 0x58e5ec1d, 0xec0841dd, 0x763c0770, 0x8b553d34, 0x2dbde586, 0x1637b1e7, 0x3931e0d7, 0xf19c51c0, 0x6d41aa54, 0x0b5269a9, 0x26f14abd, 
    0x278660e4, 0x5320f718, 0x91269564, 0x39ee8fa5, 0x574abfdc, 0x451bb61c, 0x19335314, 0x57454945, 0x4947ee38, 0x5aea3ddf, 0x8c0be728, 0xf3a7dedc, 
    0x400780a6, 0xe7285a2a, 0x52d1910b, 0x5c384751, 0x15251565, 0x1db9e23c, 0x73142515, 0xa9e8c885, 0x2e9ca328, 0x45494547, 0x9471e11c, 0xf3549454, 
    0x52e8c885, 0xb9fcee53, 0xa328a9f4, 0xe382ad9f, 0x1986d919, 0xd3841e89, 0x0c600040, 0x1c8a960a, 0xe4c2eeee, 0x51945474, 0x451917ce, 0x384f454b, 
    0x194a45ae, 0x81586194, 0x284a6aec, 0xb3910be7, 0x3f89e116, 0x8a964a5a, 0x54e4c239, 0xce51b454, 0x8aa22317, 0xa115862a, 0xc9db5ba7, 0x9b4ef204, 
    0x23390eb6, 0x597d56f9, 0x726c9bb5, 0x3441ea45, 0xfa2a2a76, 0x8d2d9d06, 0x64b7e9e5, 0x29727d7e, 0x7b0b7097, 0x424e89a7, 0xeb220d9e, 0x0937d756, 
    0xc493056f, 0x115cf0d1, 0x5f52e5cf, 0x68288946, 0x3ce390d8, 0x4fd3e09c, 0x0ee92f59, 0x5ad1446b, 0x40a4288a, 0x484551b4, 0x74acb482, 0x3e8d7bfb, 
    0x459e996b, 0xa4006c64, 0xacf6a063, 0x95b0d3da, 0x4f42934d, 0xfce6661e, 0x15543485, 0xce3addd8, 0x8e7752c7, 0x062c961b, 0x457d3b46, 0x0c339651, 
    0x467513cf, 0xbb0a7f2a, 0x2fe9a867, 0x23a6ab78, 0x6f7edbc2, 0xcf0f1c93, 0xc0dfabd6, 0x8c24af6d, 0xbb73febe, 0xd0d13cd7, 0x45d74a72, 0x91a2287a, 
    0x1545d102, 0xd2d90a22, 0xd3e6acac, 0x2de29e26, 0x4eb5afee, 0x430f3be2, 0xa4b1d558, 0x22c53e4a, 0x49c8421e, 0x5c3485fc, 0x3169d815, 0xc9ab3a69, 
    0xb0224712, 0x04497250, 0x8fe7b266, 0x2092b8c9, 0xb9726c77, 0x3badc1f5, 0x4a0d721d, 0x2d1664eb, 0x6579156e, 0x18637e3c, 0xba957aaa, 0x1449df5a, 
    0x2038594c, 0xd18cbc9e, 0xd74a72d0, 0xa2284a45, 0x28ea9891, 0x5b41a4a2, 0x725ab6d6, 0xe6f602e8, 0x1637ce02, 0x029ccd60, 0x6bb0667b, 0x48bab0a1, 
    0xc72b1174, 0xe42a24e6, 0x49b0f7a7, 0x823452c5, 0xc33e4dd4, 0x66edd549, 0x9978756b, 0x7812370e, 0xfd5c433f, 0xa76e5a74, 0x4565b206, 0xb1687bb4, 
    0x07d8da86, 0x8515e33e, 0xbbb70877, 0xc26d1596, 0xad0f2a37, 0x569a600f, 0x4551114d, 0x74642615, 0xd17bb653, 0xe6b4deb3, 0xa70d5d45, 0x3bf6c9d9, 
    0xd81b3893, 0x93826ef6, 0x3d1bbd67, 0xab4539e9, 0xdd59a931, 0x73eb331a, 0x61460b4f, 0xcfef068c, 0x81a19615, 0x2467a425, 0x4fede6e7, 0xcf46efd9, 
    0xfa34a77a, 0x68e39a8b, 0xa3f76ca7, 0x642ebd67, 0x4f514217, 0xcf46efd9, 0x2b649e7a, 0x4b6b95a1, 0xe4c58eb9, 0x83f3e369, 0x0e7b21b1, 0x7b36a800, 
    0x8edeb3d1, 0x1a2b3564, 0x2236ea12, 0x364d5b16, 0x00ff1c28, 0xc81fa812, 0x64796956, 0xee70a63b, 0xa58f817b, 0x1bbd673b, 0x40e7e83d, 0x539471e5, 
    0xb3d17bf6, 0x2b648ede, 0xf653b4a1, 0xdeb3d17b, 0xe80a99a7, 0x35d35b65, 0x940bd307, 0xdd762141, 0x1fe376f3, 0xf7ecabd2, 0x1cbd67a3, 0xd8566ae8, 
    0x1df1b9d5, 0x3f26c4cd, 0x46cf3526, 0x7cac3819, 0xb3bb24b9, 0xdd2c39b1, 0xbd673f4d, 0xb9e93d1b, 0xdc570ea6, 0x9efd1465, 0xa5f76cf4, 0x257485cc, 
    0xf49eed14, 0xe6a9f76c, 0x5a1bba42, 0x2eb5663a, 0x8e216c97, 0xf9199324, 0x73f29c98, 0xd17b3654, 0x9a9adeb3, 0xc6b65243, 0x2e89dfad, 0xb1d8a2ee, 
    0xf2fe11c7, 0x58e747f2, 0x1300fffc, 0xeac93d16, 0xe83dfb69, 0x9a43efd9, 0xe3be7263, 0xf76ca768, 0x2ebd67a3, 0x94d04d64, 0x15004551, 0x3797362c, 
    0x791b5e08, 0x59705065, 0x2a3f9010, 0x0cafba8a, 0x701e5db1, 0x20a679bf, 0x9a22df7f, 0x5d456557, 0xc61ae7d8, 0x5ab314ed, 0x933aaacc, 0x15540019, 
    0x544769da, 0xab0e69b6, 0x362a95e5, 0xbf4fc688, 0xb60bb902, 0x9199bc57, 0xc548230a, 0x67608c54, 0x87ac36a5, 0x8a8ad828, 0x5a20a928, 0x02a4a228, 
    0x17e959ae, 0x2d2d84fa, 0x29621eac, 0x18f54eda, 0x75aa893f, 0x9f48f8d7, 0x1cd489ec, 0x00ff9816, 0x2aaa22e8, 0x9947a8ec, 0x0f6fc2d8, 0x8d85a86a, 
    0xed3a109b, 0x06f22765, 0xc1c148b3, 0x97ee5deb, 0xbee9a867, 0x37bbbd61, 0xa3d8809b, 0xd7e4f5a8, 0xdf5c7e13, 0x189134dc, 0x2866a49d, 0x3827877f, 
    0x0ed928a7, 0x51104971, 0x0b041545, 0x88541445, 0x8d8ef52a, 0xb4506aa8, 0x62fe96b6, 0x7a276d2b, 0xd5c41f8c, 0x177ced1a, 0x00dca393, 0xffc74c70, 
    0x51154100, 0x112a7657, 0x3d6776e6, 0x88b58627, 0x3159bbd0, 0x56d7ae03, 0x9635903f, 0x83070741, 0x59a58d5e, 0xcc725aea, 0xf486d7d7, 0xea203690, 
    0x0e5c133f, 0x37ea5ca0, 0x27462c0d, 0x678c5969, 0x8a7372f8, 0x53918d72, 0xd12b8a8a, 0x62061545, 0x221545d1, 0x616fb10a, 0xed857679, 0x419927ad, 
    0x2ce368c1, 0xbd2afc01, 0x04049e77, 0x7520f7e8, 0xef3fcef3, 0x77155591, 0x671ea162, 0xc7fe8f63, 0xc3fc07d5, 0xef00ff6e, 0x53857fc3, 0x30828320, 
    0x937e7a45, 0xc559ab6f, 0x918cf63f, 0x1803e4dc, 0xfa98d989, 0xd2039b8f, 0x0451e7bc, 0x8439576a, 0xf95899c3, 0x13547065, 0xa39c629c, 0xcae15464, 
    0x8aa256ae, 0x51c60c2a, 0x41b11545, 0x43852f5d, 0x213a654d, 0x1f9c12c1, 0x3557944f, 0x061d594e, 0x877ed911, 0x2ab3d314, 0x3a77e532, 0xd64c3fad, 
    0xf569652c, 0x8866492d, 0x66ef362e, 0x1848bec7, 0xea620dac, 0x694ecd0b, 0xc428c8ed, 0x06123a72, 0x2c8daa09, 0x33d2308e, 0xb469420f, 0x4a39e8db, 
    0x1445c1ea, 0x142d9054, 0x5d015251, 0x88e5844f, 0xb3245c58, 0xe3945924, 0x22fc0173, 0xa7296ab9, 0x95cb3866, 0xcd74ebdc, 0x9543cf2a, 0x49599fee, 
    0xc86ddc86, 0xe664f951, 0xfa62fdb9, 0x9653473d, 0x364220e6, 0x38c1c800, 0xa252cd18, 0x0d597a9b, 0x28c8eaca, 0x45928aa2, 0x442a8aa2, 0x3a78d815, 
    0xb84c1378, 0x228e6749, 0xc0dc3865, 0x3eae087f, 0x7776718a, 0x77e5322a, 0x4b274d3b, 0x7b66d0b1, 0x94a3d6a7, 0x42d0c66d, 0x3527cb8f, 0xd1776bcd, 
    0xd7b43aea, 0x62238230, 0x9c60e402, 0x51a8660c, 0xc8eaca4d, 0x4156576e, 0x90541445, 0x5251142d, 0xc1dfae20, 0x69f11637, 0xc4352917, 0xe0989671, 
    0xe87e803b, 0xa88a22ae, 0x19953bbb, 0xe69dbb72, 0xfa69a68d, 0x2675ef04, 0xa9a01cb7, 0x3f0a411b, 0xe59a9311, 0xb5f8fb35, 0xa87b662d, 0x01b11141, 
    0x01241849, 0x1475d68c, 0x0d595d39, 0x05c9eaca, 0x41525114, 0x0000d9ff, 
};
};
} // namespace BluePrint
