#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Flyeye_vulkan.h>

namespace BluePrint
{
struct FlyeyeFusionNode final : Node
{
    BP_NODE_WITH_NAME(FlyeyeFusionNode, "Flyeye Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    FlyeyeFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Flyeye Transform"; }

    ~FlyeyeFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Flyeye_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_size, m_zoom, m_colorSeparation);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _size = m_size;
        float _zoom = m_zoom;
        float _colorSeparation = m_colorSeparation;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Size##Flyeye", &_size, 0.0, 1.f, "%.2f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_size##Flyeye")) { _size = 0.04f; changed = true; }
        ImGui::SliderFloat("Zoom##Flyeye", &_zoom, 0.0, 100.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_zoom##Flyeye")) { _zoom = 50.f; changed = true; }
        ImGui::SliderFloat("Separation##Flyeye", &_colorSeparation, 0.0, 1.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_colorSeparation##Flyeye")) { _colorSeparation = 0.3f; changed = true; }
        ImGui::PopItemWidth();
        if (_size != m_size) { m_size = _size; changed = true; }
        if (_zoom != m_zoom) { m_zoom = _zoom; changed = true; }
        if (_colorSeparation != m_colorSeparation) { m_colorSeparation = _colorSeparation; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("size"))
        {
            auto& val = value["size"];
            if (val.is_number()) 
                m_size = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["size"] = imgui_json::number(m_size);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf00a"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_size        {0.04f};
    float m_zoom        {50.f};
    float m_colorSeparation {0.3f};
    ImGui::Flyeye_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 4126;
    const unsigned int logo_data[4128/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa9a22820, 0x00fff76a, 0xb76cbad9, 
    0x18756923, 0x760bdd40, 0xc095dda4, 0xda7345bb, 0x6fae881f, 0x7bcbbeef, 0x4d177114, 0xb952edd1, 0x57fadcef, 0x52324a43, 0x51144057, 0x450b5045, 
    0x51805414, 0x5545e983, 0x4e976fd5, 0x377e96b0, 0x7205dcaf, 0xd61fc809, 0x05aeec86, 0x2b4a1fac, 0xa4d64727, 0x2f4896bd, 0x7d982315, 0xe3c18bc0, 
    0xb5d2a73e, 0x4a1f63d8, 0x80aea649, 0x98a2284a, 0x5414450b, 0x5bbb1492, 0xa474fad0, 0xc42b75a8, 0x6c96b2b0, 0x809deb8d, 0x033941ae, 0x0c7bd1fa, 
    0xe10f6b9f, 0x9b15953f, 0x76edeaa5, 0xa4da15ef, 0x11b88f72, 0x3e7e3c38, 0x1be3a895, 0x491ad47d, 0x1916aea6, 0x10531445, 0x484551b4, 0x6f531405, 
    0xdeca92ee, 0x03dec856, 0x07b982b2, 0x008d7f04, 0x61a78a3a, 0xcb809ba9, 0x788eaa74, 0xcfc1894d, 0xd04a5f4f, 0xc7ec4295, 0xee840674, 0x45d1113b, 
    0x14650814, 0x15145b51, 0xf8c2f8c8, 0x4416dc35, 0x799896b7, 0xfe9fef00, 0xbaaef3b7, 0x20d1a1b3, 0x487d568b, 0x3e932ccb, 0x67606c78, 0x2a4e8fd3, 
    0x90959c26, 0xea5fc9d1, 0x5aa9aff6, 0x49f169de, 0x65058001, 0xd3810c20, 0xbbe2f4a1, 0xe14965b8, 0x47396349, 0x83fac050, 0x7c3a6a50, 0xb6a19d3a, 
    0x4152b09c, 0x3d827a05, 0x8b36d629, 0xb21d6763, 0x8cb1ee48, 0x3fcef802, 0x8b8b510a, 0x8aa25860, 0x450b412b, 0x57805414, 0x887be22d, 0x2db700ff, 
    0x14b19523, 0xc6eb6758, 0xc29e9e5b, 0x4dce9aba, 0x3dded812, 0x43fac7d5, 0xb82c1f31, 0xc51dd361, 0xc86ad344, 0x6aa98511, 0x8ef8f356, 0x4fd6f2ce, 
    0xd80e1490, 0x473da73e, 0xdb0d76a5, 0xbad759e9, 0x26dc851d, 0x271c6f31, 0x55247a1f, 0xdcaabd3d, 0x58611811, 0x1fedb3cb, 0x114d8e79, 0x6470374d, 
    0x58455194, 0x5414450b, 0x78ce1592, 0xb63fe192, 0xc456926d, 0xd7cf9051, 0xa7675880, 0xa98eaeb0, 0x6e6c8f26, 0xdf7fe25a, 0xa0c411b3, 0xd4fac030, 
    0x86ac364d, 0x514f5d8c, 0xb35e9bb7, 0xe497b6ba, 0x07dba15d, 0x3d72e4d4, 0xf893ab2b, 0x4215dd3f, 0xbbb148f7, 0x8e20c688, 0xc6310f2e, 0x98557baa, 
    0x460ac590, 0xc6689f5d, 0x14d1e458, 0x1d1b77d3, 0x92551445, 0x5251142d, 0x225e5801, 0x6db53f9d, 0x55888fc4, 0x855eb783, 0xf41c4fc6, 0x5755bb15, 
    0x5e2eb64b, 0xcb10df7f, 0x7043318f, 0xfad8733b, 0xac36c954, 0x56bd8c86, 0x7bf509fe, 0xfde4ad39, 0x700c94d2, 0x743c4647, 0xcdd135f4, 0x00ff97cf, 
    0xbc53c55c, 0x97ae6cd3, 0xf9e31802, 0xaa910d18, 0xd7cf71f2, 0x3135968a, 0x9fbd89c4, 0xad5bc668, 0x750c3409, 0x21545114, 0xb3d17b36, 0x1c459fde, 
    0x6cc62ecc, 0xbd67a3f7, 0xb1c99c3e, 0x85829959, 0x47832438, 0x4576413b, 0x9e8ddeb3, 0x256124f5, 0x8ecad152, 0x9c5ca917, 0x9532947e, 0xf48c7bc6, 
    0x6ad8a6a4, 0x8ddeb347, 0x29faf49e, 0x1bbb30f3, 0x9e8ddeb3, 0x792afaf4, 0x6cc6ae98, 0xbd67a3f7, 0x21619e3e, 0x4cc0891d, 0xf0db83e7, 0xb07374fe, 
    0xefd921bb, 0x927acf46, 0x2e63f335, 0xe91908ac, 0x43e9d393, 0xfeb94da1, 0xa3c19121, 0x23ba839d, 0xcf46efd9, 0x73147d7a, 0x6713bb30, 0xe93d1bbd, 
    0x31f354d4, 0xefd98d5d, 0x757acf46, 0x1c36e44b, 0x3f67eee7, 0xb7c7762b, 0x6acc1cbd, 0xbd6783ec, 0x45ea3d1b, 0x4e5de842, 0x0e906754, 0x71591929, 
    0x919111b8, 0xce51d491, 0xd90cddc1, 0x7acf46ef, 0x31731475, 0xefd98d5d, 0x757acf46, 0x57cc3c15, 0xd17b7663, 0x539ddeb3, 0xf93b578b, 0xf2b39bfb, 
    0xdfc36fb7, 0x6acc1cbd, 0xdeb3adec, 0x38f59e8d, 0xe0329a81, 0x0a7946e5, 0x9551e1df, 0x1941702a, 0x768ee619, 0xcf66e80e, 0xd37b367a, 0x8a99a3a8, 
    0x51146dec, 0x5315145a, 0xe578bc5a, 0xb36524fb, 0x0f9c323b, 0xf30f5056, 0x7d9175ab, 0x5da8756f, 0x8d6dd0ac, 0x5506a894, 0xe8395bee, 0xa5e61878, 
    0xc6b5b5b6, 0x499fd989, 0x5dd58eb8, 0x670ada8f, 0x3ec87700, 0x5bad74bc, 0x20ebfe8c, 0x868edd0f, 0x2f2c6fb1, 0x9a2648d6, 0x2c9a796b, 0x65c7f231, 
    0x5ec7003d, 0x3751ad78, 0x08921a9d, 0xecf3362a, 0x82a9f44f, 0x14366a69, 0x48684551, 0x484551b4, 0xb6fb8b82, 0x56b5864b, 0x0119e761, 0xa352cfc0, 
    0x95b45e3f, 0xef09e64a, 0x18b18cee, 0x3ccac7e3, 0x839cdcd1, 0x34c7f1d0, 0x2cd1b09b, 0x4373fa8e, 0x7abfb96d, 0x7006f0e0, 0x1daf0f72, 0x3feb422b, 
    0xf703c8b9, 0x4dd6d04b, 0x19759fd6, 0xd696468a, 0xf91c0e43, 0xb0177240, 0x8ae77500, 0xe4bc69d0, 0xab8de08c, 0x6a629fb7, 0x4be5a663, 0x8aa284ad, 
    0x8a16c82a, 0x5410a928, 0x7591dcf3, 0x12b0003c, 0xcf85a32c, 0xd7cfa824, 0x5500ff8f, 0x82e65541, 0x4612966b, 0x273fa9d0, 0xc47014ef, 0xf28371f0, 
    0xc5e1cff1, 0xd8a5d82b, 0xb525497b, 0x936e71b4, 0x700e4c32, 0x47908333, 0x5ecf81d3, 0xaceb7295, 0xd2fd285c, 0x1dcf39f4, 0x17d684ea, 0x6918c751, 
    0x3ea2ddac, 0x0094f261, 0x01809e42, 0xf9e3b9f7, 0xf325b9d5, 0x36822392, 0xd2d4dfa6, 0x27952b5b, 0x4551c676, 0x45614615, 0x2b885414, 0x5c234944, 
    0x8685c2dc, 0x783900ff, 0x40c5f200, 0xde3ef4eb, 0x70e2acb8, 0x8a568a33, 0x399edd49, 0x20774220, 0x71ea00f3, 0xbcfcd083, 0x4571f873, 0xc9242ef5, 
    0xb458dbe7, 0x7696bb12, 0x076df30f, 0x24fc1104, 0x6a5f3f82, 0x610cb65b, 0x50215ec0, 0xeff69c76, 0x4edb54ef, 0xde2f8ab9, 0x46bb58dd, 0x51ee6fde, 
    0x61d80b79, 0xc573cc47, 0x375f9a59, 0x20eee3cb, 0x5ea5ca5f, 0xde49e5ca, 0x455154e4, 0x2ada9051, 0xc7b92a4a, 0xe4503a72, 0xdd390e0c, 0x8a3ebdd7, 
    0xcc41fe5c, 0x08ec4a23, 0x8c112466, 0x25956912, 0x0ff97314, 0x928a8e98, 0xb8e27c8a, 0x2a4a2aca, 0x45aea07d, 0xb3888c4e, 0x9d5ca8e5, 0x34476ec7, 
    0x9ef628fa, 0x5e63e643, 0xe4109057, 0x82542ab0, 0x14f5e049, 0x31e800c0, 0x5e8ae652, 0x1d9939d0, 0xfd142515, 0x8a32aea0, 0x719e8a92, 0xb29e8e5c, 
    0x060e8c32, 0xf064c0ed, 0xcfa56869, 0x1e613ee4, 0xec929067, 0x96532a5b, 0x54d48327, 0xb4735561, 0x81939301, 0x9c4fd152, 0x151d9939, 0x8a731425, 
    0xd45474e4, 0xc885f354, 0x8c600448, 0x64594f83, 0x87918551, 0xfd3db83b, 0x7394f469, 0x3c8f3087, 0xae7c67d2, 0x2ca752d9, 0x3eea414e, 0x67001895, 
    0x6af20c00, 0xc3395a5a, 0x53d19099, 0x5c384751, 0xaa288a8e, 0x70a45618, 0xbc5db1c2, 0x9a17818d, 0xe1a9e573, 0xdaefed71, 0x37f4eab2, 0x234f0a4b, 
    0x63e60690, 0xbfe315f3, 0x1cf57140, 0x5d2dd48e, 0x21718f8a, 0x3a9d4b7b, 0xdde4984b, 0x11638cb5, 0xfa8c3380, 0x68e07955, 0xf2dfbd3c, 0xe8e330d2, 
    0x82be6369, 0x9a5862e1, 0x914ab232, 0x9c23c964, 0x012cf49c, 0x8a7b3afc, 0x0e01142e, 0x3f187336, 0xebb9e32a, 0xbde87dea, 0x3495fbec, 0x50144543, 
    0x51142d66, 0x8bad2052, 0x3704787b, 0x44fb4872, 0x2d9f5346, 0xf68f0b0f, 0x3d56fb7d, 0xac5c5b6b, 0xed48dd31, 0x7eec0c85, 0xd463bc62, 0xcf117f02, 
    0xe3720ba5, 0x3b0b8cdc, 0xb84b36ad, 0xd9b5dd65, 0x67548d38, 0x54bb7f6e, 0xe1c48c25, 0xfc56754f, 0xaed63fc0, 0x716f7d41, 0x196d2402, 0xe5b04c12, 
    0x58ce95a4, 0x7b800474, 0x8a7be074, 0x8d1875af, 0x683ec6a3, 0x7f5c38c1, 0x7b37949e, 0x047ecd31, 0x06455114, 0x1545d162, 0xd2d80a22, 0x4c93a0ed, 
    0xda66e29e, 0xf9c40e23, 0xa700dc6a, 0xf55893ba, 0xb1cea4ab, 0xe3c89368, 0x2b668572, 0xcf46aeb8, 0x6ea13850, 0x5604095c, 0xb75c5a37, 0xda17f356, 
    0x95eabfcc, 0xee9f0b79, 0xc6325983, 0xbaa77062, 0x1f607eab, 0x5d3a5aeb, 0x5e5617ec, 0x2b2c5044, 0x1a5efe34, 0x9e4a7e57, 0xc7997e7a, 0xc3dea9d2, 
    0xa97cbce4, 0x179e12dd, 0xf1f9b11d, 0xa89e2655, 0x57685a72, 0x4c2a8aa2, 0x154551c7, 0xd3d50a22, 0xcd4bab34, 0x99bb6b36, 0x72104165, 0x00001c76, 
    0xd6dcd307, 0x33686f4d, 0xb91f3eac, 0x8532d491, 0x649c2b66, 0x0a641c6c, 0x5ab8ac16, 0xa5c790fa, 0x5c1a57e9, 0x339776d7, 0xea16e5c9, 0x3d173270, 
    0x11cd65c5, 0xea9ec285, 0x7f80f9ad, 0x37e96dad, 0x8d95daf6, 0x8b50b4c5, 0x1b17cc6d, 0x8cc0f2cb, 0x2b9d1ef4, 0xecdbf626, 0xbbdd18cf, 0xa75f89cc, 
    0x957e3a4e, 0xe4d0e852, 0xd12bb495, 0x64261545, 0x7bb65374, 0xb4deb3d1, 0x0c5d45e6, 0xa7c7c139, 0x68825aad, 0x2a923292, 0x0dc967b8, 0x4e8f6c10, 
    0x836a8fa3, 0x3d1bbd67, 0x5243e7e8, 0xadae6db1, 0x31041194, 0x6c9c3646, 0xec8609b7, 0xfdbe6e78, 0x7e2e90aa, 0x39076ef7, 0xdeb39de2, 0x73f49e8d, 
    0xdab87220, 0xe83ddb29, 0x3247efd9, 0x5394d015, 0xb3d17bf6, 0x0a99a7de, 0x1cba8de8, 0x6fbb1a7a, 0xba511477, 0x93070348, 0xb23b3424, 0xe3f03e3d, 
    0xdbaaf5db, 0xefd9e83d, 0xa9214949, 0xd6d7ba58, 0x8660bdeb, 0x8d43c128, 0xdd30c196, 0xf7c10d8f, 0x33382bfd, 0x3cc925b1, 0x02e764e0, 0x46efd9a4, 
    0xc87c7acf, 0x8a32ae1c, 0x367acf7e, 0x85ccd17b, 0x768a3674, 0xfb367adf, 0x5c21f3d4, 0x55f8e961, 0x0bf632fd, 0xcdb32f4b, 0x915bf01e, 0x630487e5, 
    0xca8f3c18, 0xa3f7eda9, 0x490abd6f, 0xe6ce4a0d, 0x89966aa3, 0x026b891c, 0x763b9443, 0x7ac3845b, 0x7a1fdcf0, 0x8c242fc9, 0x709c844c, 0x0a002739, 
    0x367adf76, 0xadccd1fb, 0x6d5cb961, 0xf4beed14, 0x99a3f76d, 0x9da27013, 0x9e8ddeb3, 0x57c83cf5, 0x55fe0843, 0xbed44e7f, 0x9a6d66c3, 0xb2599114, 
    0x63e40c43, 0xaa3d7d04, 0x367acf9e, 0x93a6d07b, 0x69acd4b8, 0x4763691d, 0x20385b4b, 0x1c13840e, 0x883d487b, 0xcc7a7fc7, 0xb3952479, 0x2a002721, 
    0x14004ef2, 0xd9e83dbb, 0xb53a47ef, 0x8d2b37ae, 0xdeb39da2, 0x73f49e8d, 0xa2846e22, 0xa900288a, 0x9dbab522, 0x346dc14b, 0x42943aaa, 0xea3a6a46, 
    0xbee6333c, 0x38217485, 0x70089794, 0xc7a8180e, 0x2ebb125a, 0x9ae7ec2a, 0xbb50f9c2, 0x8e2a5c59, 0x2a70c6a4, 0xbe6ced0a, 0xff649adc, 0xe74dda00, 
    0x10c072b8, 0x4ec795ab, 0x24aef538, 0x55ebe71c, 0x6c946025, 0x5251142d, 0x4551b440, 0x0d4b0548, 0x17cadd9d, 0x559ab5b7, 0xcb48161c, 0x1515fe0c, 
    0xf315be75, 0x42d7c35b, 0x9fa5c406, 0xdb70c661, 0xeb781d17, 0xa3b22b4d, 0x6d9ab31b, 0x2e445037, 0xa32a37d6, 0x003631a9, 0x59dff5aa, 0xabf4f80b, 
    0xdab7a983, 0x52880524, 0x745cb9aa, 0xe05a8fe3, 0xa7f5eb01, 0x518ed938, 0x4551b4b0, 0x14450149, 0x782a8854, 0x902e6f2c, 0xf3a4bdbd, 0x1c2d3828, 
    0x9c3e8065, 0x78da1554, 0x1c3ecd43, 0xd93610bb, 0x9ce58f8c, 0xb8d88603, 0xa85ac7eb, 0x1ea3b2ab, 0x6d956367, 0x2e44512f, 0xaad27dda, 0x808549f2, 
    0xb5aaf203, 0x5063f6e8, 0x3ab9498b, 0x41a27dab, 0xab2a85b8, 0x8ed3db95, 0x29ce6b3d, 0xa31c36ca, 0x8aa260cb, 0x451d082a, 0x2a885414, 0xe585bdc5, 
    0xb4b617da, 0x0507659e, 0x07b08ca3, 0xdef5aaf0, 0xa3131078, 0xcfd781dc, 0xbe00ff38, 0xdd555445, 0x9d79848a, 0x1ffb3f8e, 0x0df31f54, 0xbf00ffbb, 
    0x4c15fe0d, 0xc1080e82, 0x4dfae915, 0x1469adbe, 0x32da00ff, 0x0c907347, 0x63662762, 0x0f6c3eea, 0x449df34a, 0xe65ca911, 0x63650e13, 0x50c195e5, 
    0x728a714e, 0x8753918d, 0x8a5ab92a, 0x1933a828, 0xc5561445, 0xd0a06b08, 0x6e87bf82, 0x46d1cc6d, 0x2440eef2, 0x0394606c, 0xfcb9da27, 0x46dd9553, 
    0x73808a15, 0xb38b6880, 0xe9d849b9, 0xa3332b34, 0xd4b828c7, 0x5967082d, 0x81074700, 0x27c7f59c, 0x3dacf223, 0xed3bee4e, 0x91886b46, 0x03861995, 
    0x72557a0e, 0x76e6c7ee, 0xda93633c, 0x061d009a, 0xee36cd39, 0xab2b37ac, 0x8aa26821, 0x14450b44, 0xe9878054, 0xe14fd7d8, 0xbbe18ffd, 0x313c63bb, 
    0x5f7429c9, 0x40c9b131, 0x60aef433, 0x47d6d38c, 0x51768541, 0x9ce200d7, 0x17c79d5d, 0x057a7566, 0x4a22f6a7, 0x322bb56e, 0x476c43ac, 0xce3da007, 
    0xee5ce939, 0xfe1d79ad, 0x48c435a5, 0x03468cca, 0x5501e075, 0xef1b499a, 0xd3d4373b, 0x6e4a0730, 0x951b5657, 0x51b490d5, 0x45214945, 0x4a885414, 
    0x6334bceb, 0xb617c393, 0x520c71ad, 0xf922d24c, 0x0054078e, 0x5472a51f, 0x184496e5, 0x5c471949, 0xbba88a03, 0xceeca232, 0xa3f6c3cf, 0x75638e43, 
    0x6295d9a9, 0x0372641b, 0x1ce71ed0, 0x5a63aef4, 0xd5508bbd, 0x5985b925, 0xdd80b151, 0x36550078, 0x69185796, 0xa6b9871d, 0x6175e550, 0x0b595db9, 
    0x90541445, 0xa9288a3a, 0xe06f5710, 0xb4788b9b, 0xe29a948b, 0x704ccb38, 0x743fc01d, 0x54451157, 0x8cca9d5d, 0xf3ce5db9, 0xfd34d346, 0x93ba7702, 
    0x54508e5b, 0x1f85a08d, 0x72cdc988, 0x5afcfd9a, 0xd43db396, 0x80d88820, 0x00128ca4, 0x8a3a6bc6, 0x86acae1c, 0x826475e5, 0x20a9288a, 0x0000d9ff, 
};
};
} // namespace BluePrint
