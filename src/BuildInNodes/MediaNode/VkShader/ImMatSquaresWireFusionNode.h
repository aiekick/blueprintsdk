#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <SquaresWire_vulkan.h>

namespace BluePrint
{
struct SquaresWireFusionNode final : Node
{
    BP_NODE_WITH_NAME(SquaresWireFusionNode, "SquaresWire Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    SquaresWireFusionNode(BP* blueprint): Node(blueprint) { m_Name = "SquaresWire Transform"; }

    ~SquaresWireFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::SquaresWire_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_smoothness, m_size, m_direction.x, m_direction.y);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _smoothness = m_smoothness;
        int _size = m_size;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Smoothness##SquaresWire", &_smoothness, 0.0, 4.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_smoothness##SquaresWire")) { _smoothness = 1.6f; changed = true; }
        ImGui::SliderInt("Size##SquaresWire", &_size, 1, 50, "%d", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_size##SquaresWire")) { _size = 10; changed = true; }
        ImGui::PopItemWidth();
        if (_smoothness != m_smoothness) { m_smoothness = _smoothness; changed = true; }
        if (_size != m_size) { m_size = _size; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("smoothness"))
        {
            auto& val = value["smoothness"];
            if (val.is_number()) 
                m_smoothness = val.get<imgui_json::number>();
        }
        if (value.contains("size"))
        {
            auto& val = value["size"];
            if (val.is_number()) 
                m_size = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["smoothness"] = imgui_json::number(m_smoothness);
        value["size"] = imgui_json::number(m_size);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf43c"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_smoothness  {1.6f};
    int m_size          {10};
    ImVec2 m_direction  {1.0, -0.5};
    ImGui::SquaresWire_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 6228;
    const unsigned int logo_data[6228/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0x280aa08a, 0x280a80a2, 0xf1dd1aaa, 0xa7a9b4d3, 0x3626db46, 0x3dda7fc6, 0x7693c63f, 0x15fd0257, 0x5b7bf8cb, 0x7ed4b8be, 0xbb49a8cb, 0x79748fcd, 
    0x87fdbe50, 0xa8abfc71, 0x2b2919a5, 0xa2280aa0, 0x288a02a8, 0x2a8a02a0, 0x747cb786, 0xd1692aed, 0xb18dc9b6, 0x4f8ff69f, 0x95dda4f1, 0x7245bfc0, 
    0xefd61efe, 0xb21f35ae, 0xf36e12ea, 0x541edd63, 0xdc61bf2f, 0x29ea2a7f, 0xe84a4a46, 0xaa288a02, 0xef6e5701, 0xa4f6389b, 0x28008aa2, 0x776ba8a2, 
    0xa6d24ec7, 0x986c1b9d, 0x00ff19db, 0x00fff468, 0x5cd94d1a, 0x2f57f40b, 0xfa6eede1, 0x2efb51e3, 0x36ef26a1, 0x42e5d13d, 0xc71df6fb, 0x94a2aef2, 
    0x80aea464, 0xa08aa228, 0x80a2280a, 0x617ce40a, 0x6f79af7a, 0x3fb27364, 0xff7b4c9e, 0x9dbff500, 0x0e9dd575, 0xb35a0489, 0x645946ea, 0x63c3f399, 
    0x7a9c3e03, 0xe4345171, 0x4f8e86ac, 0xa62dd651, 0x6c6fedd4, 0x802696a3, 0x1980c100, 0xfad0f100, 0x0c755764, 0x2c293ca9, 0x18ea2867, 0x0d6a501f, 
    0x53874f47, 0x96d336b4, 0xaf20480a, 0x3aa54750, 0x6c6cd1c6, 0x1d49b6e3, 0x5f8031d6, 0x4ae1c719, 0xe06e7131, 0x2b8aa258, 0x51140541, 0x3e720540, 
    0xbc57bd30, 0xd939b2b7, 0x3d26cf1f, 0xdffa00ff, 0xceeabace, 0x2d824487, 0x2c23f559, 0xe1f94cb2, 0x4e9f81b1, 0x9aa8383d, 0x47435672, 0x16eba827, 
    0xb7766ad3, 0x13cb51b6, 0xc0600040, 0xe878800c, 0xba2b327d, 0x149e5486, 0x75943396, 0x35a80f0c, 0xc3a7a306, 0x691bdaa9, 0x102405cb, 0xd223a857, 
    0xb668639d, 0x24db7136, 0xc018eb8e, 0xf0e38c2f, 0xb7b818a5, 0x45512c70, 0x8a82a015, 0xb902a028, 0xab5e181f, 0x1cd95bde, 0x93e78fec, 0xfd00ff1e, 
    0x755de76f, 0x41a24367, 0x91faac16, 0x7c265996, 0xcfc0d8f0, 0x549c1ea7, 0x212b394d, 0x75d493a3, 0x3bb5698b, 0xe528db5b, 0x3000a089, 0x3c400660, 
    0x15993e74, 0x4f2a43dd, 0xca194b0a, 0xd407863a, 0xd351831a, 0x0dedd4e1, 0x9282e5b4, 0x11d42b08, 0xb4b14ee9, 0xed381b5b, 0x8c754792, 0x71c61760, 
    0x5c8c52f8, 0x2816b85b, 0x41d08aa2, 0x01501445, 0x2f8c8f5c, 0xec2def55, 0xf347768e, 0xfe7f8fc9, 0xbaaef3b7, 0x20d1a1b3, 0x487d568b, 0x3e932ccb, 
    0x67606c78, 0x2a4e8fd3, 0x90959c26, 0x3aeac9d1, 0x9ddab4c5, 0x7294edad, 0x1800d0c4, 0x1e200330, 0x8a4c1f3a, 0x2795a1ee, 0xe58c2585, 0xea03431d, 
    0xe9a8410d, 0x8676eaf0, 0x49c172da, 0x08ea1504, 0xda58a7f4, 0x769c8d2d, 0xc6ba23c9, 0x38e30b30, 0x2e4629fc, 0x140bdc2d, 0x21684551, 0x00389642, 
    0x1821a59f, 0xc3e83438, 0xce79c496, 0x49531c3b, 0x4fa9c9c9, 0xbba80b5b, 0x8f83334e, 0xde714a5a, 0xd34e7211, 0x698a9ad3, 0xe685b7a3, 0x8ac6b695, 
    0xa6a08f59, 0x2afad098, 0x63ad8e9d, 0xa4adb3a8, 0x964161fe, 0xe6c7481b, 0xa709e52a, 0x511405b0, 0x6d24074c, 0xe28c7626, 0x6dab9491, 0x482a8261, 
    0x2c6fb844, 0x1c5364fa, 0xefbb73b1, 0x9bd4ac77, 0xf15b5a9b, 0x15e2ee26, 0x80543260, 0x0980e27b, 0xda270338, 0x2c4fc29c, 0x6eaf2416, 0x498a6069, 
    0x118622ee, 0x88706599, 0x38b18c33, 0x54533f03, 0x19d1d09d, 0x54343818, 0xb5856b5f, 0x330fab1b, 0x34925637, 0xca0fa673, 0x7a4690c0, 0x52e9411e, 
    0x61e84ed3, 0x01531445, 0xcab813eb, 0x23ad8f8c, 0x0cc321a3, 0x2911961a, 0x03b0e543, 0x7739ea3d, 0xc93984f9, 0x27678c15, 0xd4af1b37, 0x0decdd94, 
    0x99bb8a0c, 0x34bd0770, 0x09806329, 0xacf254fa, 0xc1bd33c2, 0x6151e05e, 0x787f7567, 0x5e68b696, 0x43b53379, 0x4f06ce05, 0x8a828e27, 0x6d8b7273, 
    0x106d8ba0, 0x18c14110, 0x386df43e, 0x693d0ece, 0x6a5ac36e, 0xc95d3af7, 0x146c7bdb, 0xdb3919cd, 0x1c3902b8, 0x68e8081e, 0x46b2fc01, 0x6b9e6776, 
    0xb8136d4e, 0x4190d2c6, 0xf43e18c1, 0x7292a494, 0x50bd4f4e, 0xdddd12c9, 0x7d300243, 0x46161a69, 0xbd652455, 0xf903782a, 0x7b00862b, 0x47bdfe8f, 
    0x463d7f30, 0x15c17846, 0x75b21ac7, 0xc9dc6f1c, 0x6158f349, 0x2b094082, 0xa4a6f7c0, 0x8c76266d, 0x9f75a7e2, 0x8cd46563, 0x5271fe73, 0xfe753ae9, 
    0xfaf672a9, 0x09e4617c, 0x386081bd, 0x00ff0e04, 0xa4465a51, 0xbfba1b9c, 0x45dba4cc, 0x86434637, 0x6f793418, 0x97df7eb3, 0xb66aacd6, 0xa4665a97, 
    0x4bc02f2c, 0xb04d24af, 0x48427e10, 0xaa8e2307, 0x98b2106a, 0x1eb333f2, 0x95ef7cb5, 0xdbdda13b, 0x70323052, 0x38954a29, 0x20ad8f20, 0xe9143938, 
    0x99c48603, 0xd59c3bce, 0xd487adb7, 0x6e1c7711, 0xb469ea03, 0x316c01aa, 0x25c5f5c0, 0xc00aa33e, 0x45e375f1, 0x7fa4a5a7, 0x8eb1e57e, 0x7cfd1ff8, 
    0x5a72fd56, 0xb7de8d8d, 0x4b8032e2, 0xb54b0c6f, 0x719c3166, 0x51ef74dc, 0x215bbe51, 0x3e2018a2, 0xa005f11d, 0xe3b97c62, 0x78eeed0a, 0x760dae3f, 
    0xfeeac775, 0xd78abe1b, 0x9a6f1fed, 0x0823e3f9, 0xee019250, 0xd3d53e39, 0x71cb7369, 0xc824c1a6, 0x3adc2ec9, 0x387290b2, 0x779a1a3c, 0x2d03ab4d, 
    0xb0154551, 0x386f2287, 0x34f5abdc, 0x9c916084, 0x0295d2e3, 0xd136f393, 0x4fd38ceb, 0xe2562a5e, 0x10ae38ea, 0x6ccfe136, 0x8bf75cf3, 0x3d2d1aaf, 
    0xf7fb232d, 0xc0778c2d, 0xe2eb00ff, 0x681702ba, 0x514fb221, 0xeac8958e, 0xdf7a3736, 0x2d01ca88, 0xd52e31bc, 0xc771c698, 0x44bdd371, 0x1ab2e5db, 
    0xe1038221, 0x065a10df, 0x309ecb27, 0x83e7deae, 0x67d7e0fa, 0xe1af7e5c, 0x7eade8bb, 0xaff9f6d1, 0x8530329e, 0xe31e2009, 0x365ded93, 0x1ab73c97, 
    0x8c4c126c, 0xabc3ed92, 0x83230729, 0xe94ea5c1, 0xd5b261b5, 0x085b5114, 0xd0d9189e, 0x7a5e2191, 0x2b558e0a, 0x1fb70521, 0x46124b53, 0xdcb68bc1, 
    0xd898e674, 0xedf476dc, 0xf637c69a, 0xf5c35f8f, 0xd9437c25, 0x8a4cc04e, 0xb91b3870, 0xc2ab9315, 0xd1b61775, 0xb2b4bda3, 0xcf23d67b, 0x89cb97bc, 
    0xb6dc8202, 0x0340320e, 0x2ad48adc, 0x930f41a1, 0x72a563dc, 0xfa745a97, 0xd28a00ff, 0xca966419, 0xb54f08d1, 0x00825918, 0xcf386079, 0x14e7b127, 
    0x225bbe49, 0x347d36a2, 0xb0c53bf8, 0x37ccb55a, 0xad6abc31, 0x8defbb3d, 0x1f9c018b, 0x00eb8a63, 0xc79193ca, 0x75e45a6f, 0x5b5d0cef, 0xaac3922c, 
    0x32aca94d, 0xd8988c15, 0xe0fd5c16, 0x38762409, 0x9e4b8fae, 0x09368d5b, 0x76494626, 0x8394d5e1, 0xd1e0c191, 0xb241eb4e, 0x5b5114d5, 0x331ab508, 
    0x2a64bb40, 0x0cf59e3e, 0xcbb8d1ca, 0x69ce3896, 0x52368e62, 0xeb73f05d, 0xb92a904c, 0x6b3d720a, 0x8df70b9a, 0x4cfdf05f, 0xf04ec4d7, 0x662646b8, 
    0x2c291d38, 0xb8bf642d, 0x122fd29a, 0xb7300f1f, 0x6de8b532, 0xbbe850b8, 0x9671b973, 0x924def75, 0x57099538, 0xaec8f4c9, 0xf1b6f451, 0xded68b17, 
    0x366de6ea, 0xf62b35ca, 0x13ce6eb3, 0x0c202768, 0x07c72d67, 0xf22da6de, 0xb1f26f3d, 0x56d62650, 0xf14200ff, 0x5aeaa295, 0xed19d6d9, 0x17b936d6, 
    0x2719300f, 0x03bb192a, 0x3e0307ce, 0x2e84aeb9, 0xc7e1b650, 0xa75cf36c, 0x2d2b3c89, 0x352d7999, 0x8884b599, 0x64618e8d, 0x40321024, 0xfc839124, 
    0x97065db3, 0x70e9dc33, 0xe66838cb, 0x212303da, 0xd6832307, 0x165a17ae, 0x36ac34cb, 0xb80f32b6, 0x0160a5a4, 0x5a8f1c20, 0xa284a8df, 0xb193a7ad, 
    0x1938b373, 0xca1b29ce, 0x311b53f3, 0x3a577ace, 0x566e6bc4, 0x55e4cf67, 0xe3feaea2, 0x95fe99fe, 0xa7122d0c, 0xf79c31ef, 0xba57a119, 0x4e8d956f, 
    0x2a0a62eb, 0x41a2bc59, 0xafa7f18f, 0xdd8db6d9, 0xd15acf71, 0xe553b4d5, 0xf6d2e663, 0x8f4ed12b, 0xeebff16e, 0xe54ba7f7, 0x8d7f7964, 0xcbbd9753, 
    0x0d5bdf61, 0xf3f9994d, 0x5b6d6a8f, 0xe762274f, 0x9c337066, 0xff71bf53, 0x00ff4c00, 0x8b78e74a, 0x39b2ee37, 0x55548afc, 0xd37fdcdf, 0x869ad23f, 
    0x70420e12, 0xfd29aec7, 0xb0f24b67, 0x512af2e7, 0xbd3c2e56, 0xe7dc6683, 0x004c48b5, 0x06fcec64, 0x137dfb69, 0x9f8f7ae5, 0x54748a4d, 0x5819e5ab, 
    0x14e7ddbf, 0x1eede44b, 0xd6fb5c5f, 0x4aded3be, 0xdada7ccc, 0x3b6713c3, 0x90627bf7, 0x3b1d27e3, 0xc009b466, 0x8917a6c9, 0xfa210b86, 0xc5915c91, 
    0x66caef36, 0xce1479aa, 0xdd1983cd, 0x6390d2df, 0xe23b3d23, 0xfee37eae, 0x8094fe99, 0xfc207bc0, 0xa7b1feaa, 0xe4cfc7c2, 0xc7c93854, 0xaba4d94e, 
    0x8de3e46f, 0xada7479d, 0xf41ff73b, 0xf5a7f4cf, 0x3f163e9d, 0xa252e469, 0xe6952fad, 0x8c6376be, 0xca9ba474, 0x99dd8ef2, 0x6fbf8aed, 0x8ff228ef, 
    0x8e585b9f, 0xf369272f, 0x99dee73a, 0x67e7dd26, 0xe857eddd, 0xb48955ae, 0xfffeac9c, 0x7e06f800, 0x98945bd3, 0x52e553c4, 0x2ea6f41b, 0x7136dfdd, 
    0xe0045aed, 0xc40bd364, 0xfd9005c3, 0x278eaa48, 0xbcbf724b, 0x4991a76a, 0x73f9eeb6, 0xb3517a8f, 0x7677ce61, 0xb87fabf4, 0x7fa600ff, 0xffb81fa5, 
    0xa57fa600, 0x3e8df569, 0x227f3e16, 0x18701595, 0xf0113949, 0x2749e978, 0x6c6c2392, 0x2ac638ce, 0x725b2396, 0x0ef9f3b1, 0x468dc08d, 0x13fea01b, 
    0x365f774d, 0xec19cf33, 0x31766269, 0x184fc82f, 0x9fc914e3, 0xa4fcb1f7, 0xe58a7310, 0xd7783f8c, 0xbd3453af, 0x109946e2, 0x0da69f73, 0xe1b5962d, 
    0xe6d20ecd, 0x5736c4e7, 0x084a4a17, 0xe7411d44, 0xdfbec43f, 0x70674695, 0xf748ee0f, 0xe3812635, 0xd7c3472d, 0x6fdab6b7, 0xc0356f86, 0x6d4e13eb, 
    0xefe77eb7, 0xea463863, 0x2b1dd733, 0x84e4715a, 0x4a13bfae, 0x5eea2871, 0xafe6f02b, 0xe8dad9a8, 0x8edd655a, 0xed977663, 0xdaf90d20, 0xed761853, 
    0x58b5d3bb, 0x010a6159, 0x780e248f, 0xf7f8cb15, 0xf15be7c5, 0x167d9f06, 0x8ba57599, 0xd216c048, 0x49cc0ff0, 0xf43a3060, 0x7ab4733c, 0xe2054557, 
    0x1f8d66cd, 0x5699aecc, 0x975663cf, 0xfc6b6d3c, 0xc2be92ca, 0x8c04c129, 0x65574a8f, 0x7f9bda38, 0x8203d21c, 0x5a8f330e, 0x3bc76d57, 0xea0afa40, 
    0xfab8de6b, 0x2370e396, 0x3fe88651, 0x2ed2d084, 0xfbd7ebe4, 0xd888d2a7, 0x31f26bf9, 0x8d7f7ae0, 0xd1f9d835, 0x1cbf87fc, 0x9ca29657, 0xcfa9cfdf, 
    0xc13c496d, 0xc9f7dfe8, 0x430defad, 0x7399b6a2, 0x7765a73e, 0x03e42c3b, 0xe0f2b405, 0x30cf7f60, 0xff71076b, 0xfa6d9e00, 0x1e748d7f, 0xba04f113, 
    0x2a7b8346, 0xa59e7ae8, 0xbc1f771c, 0x428e147b, 0x61e35509, 0x09f2e470, 0xec8391c2, 0xb9e25471, 0x9924a559, 0x7eeaaf9b, 0xe1d3b918, 0xdcad3d1a, 
    0xaa700d37, 0x22f3d64c, 0x651ca3e0, 0xd3f1dcc6, 0x1afae039, 0x737b92cd, 0x65566d23, 0x4659cacf, 0xc4f75c71, 0x761d1a1f, 0x2d9e47eb, 0xfb48e306, 
    0xcdc3ca13, 0xb6bb795c, 0x9b0e1c67, 0x7ee85a7f, 0x4c22f3d4, 0x32abceb6, 0xf29c8b2c, 0xc8080218, 0xed9173e8, 0x78255aeb, 0xcedb6ba5, 0xac6849c5, 
    0x298b8e40, 0x9e53b962, 0x5996d231, 0x98088011, 0x139be2f5, 0xbb109015, 0x4fa7a08f, 0x42017221, 0x97aef5b8, 0x3f2dde1f, 0xef2dd01f, 0xf7c5bc16, 
    0x7934453f, 0xefbfd183, 0x8f8d4d93, 0x1e23bf96, 0xd3f8a707, 0xe6f91fb7, 0xd7f8a7df, 0xb793e29a, 0x1e2c8cea, 0xfb6ff460, 0xe141d7e4, 0xd25774c8, 
    0xb2539fe7, 0x62d69dbb, 0xe2da8201, 0x66fb0f5c, 0x8ffb730d, 0xd36ff3fc, 0xf0aa6bfc, 0x6b73ab6e, 0x6f475da6, 0xa8df5ea2, 0xbc3d8b9d, 0x81530590, 
    0x29f29df2, 0x777a30ce, 0x8d5584ab, 0x9dd9a429, 0x52f8a87b, 0xfa76ecf3, 0x52e49d6d, 0x4e14794f, 0x304e5bd2, 0x2ced24a7, 0xe0e55b30, 0x71e07a72, 
    0x48c055c6, 0x4b89656e, 0x0495a3b2, 0x0f90c0c6, 0x5f551ca1, 0x9a351e88, 0x92b043eb, 0xd2b842db, 0x8a53d79a, 0x657c9b75, 0x3e7e044b, 0xd09fd753, 
    0x6fb19ed6, 0x684a2df6, 0xd478de56, 0xc84a4210, 0x8333725d, 0x9d3f88b5, 0x58c54912, 0xa3c94a73, 0x2c0b662d, 0x00ffbb85, 0x24d36c4a, 0x3eaff28b, 
    0xec4652a4, 0x240433b3, 0x4ee9f19c, 0x0074469a, 0xa69e57c6, 0xa81294ba, 0xfd75bb9d, 0xc5f6de02, 0x24a428aa, 0xf493c283, 0x5cc979c5, 0x1ce042c0, 
    0x93efbf61, 0xe287175d, 0x9a4c5fd1, 0xf2ca4e7d, 0x0c705976, 0x6012d716, 0x30cf7f60, 0x7fdc9d6b, 0x9f7e9be7, 0x846f5de3, 0x4dab4b75, 0xd060e132, 
    0xcd93afaf, 0xc003c924, 0x0e0e1c14, 0xf0e714f9, 0x731561ad, 0x1539695a, 0x3ac2e31e, 0x3ecdbe9d, 0x518a51cf, 0xb4b12034, 0x9156c0b8, 0xb982e441, 
    0x240f70c6, 0x1bac39f0, 0xcbdc9080, 0x47659712, 0x818d092a, 0x38421f20, 0x18cf9bad, 0xa269aa4b, 0xdf0a0fd6, 0x667b835a, 0x382c434b, 0x7c31e93f, 
    0x4f300eb9, 0xc079ee41, 0xbdfa19c9, 0x39b5d8bf, 0xe3795ba1, 0x56128200, 0x9c91cb42, 0xeb47ac12, 0x519c2455, 0xa3c94a53, 0xd2791c39, 0xfc711e1c, 
    0x18dc8926, 0x2afe6058, 0x743e4668, 0xc7ed219f, 0xc2c44e14, 0xe71e21df, 0x692f4915, 0x425f971f, 0x0b08d23e, 0x04852bf9, 0xb5fe9f7b, 0xcc902145, 
    0xc60da8a4, 0x2c53e307, 0x59852a52, 0x34fb0770, 0x3967b7d7, 0xdd7f3269, 0xa6e084ab, 0xd4d7dae4, 0x47dcab69, 0x5136f669, 0xe73fc740, 0x4f0ccf34, 
    0x6abde177, 0x99b152f3, 0xf6c87ba6, 0xf7c70ccb, 0x70100467, 0x0172e408, 0xb53e013d, 0x08428e31, 0xd97ff032, 0x21bba5a6, 0xfe83c9ca, 0x82d438ed, 
    0xe65f5a8b, 0x3724cd38, 0xe2cbd3c5, 0x38ed5fd6, 0xaa0826d2, 0x00c640be, 0x7992e724, 0x0b4bd5e4, 0xd2d3b067, 0xe29137d2, 0x010b108c, 0xab407d9c, 
    0xe5586cad, 0x52fac9a4, 0x850b771b, 0x563bfd94, 0x4a93d69e, 0x2ba3bff6, 0x5ca9359d, 0xa8230812, 0x6cb990a5, 0xb8e39cc9, 0x57f649c5, 0x091e5af5, 
    0x1c985930, 0xdad75a0f, 0xe84e72d3, 0x3cb9d17c, 0xc2b5fc65, 0x5ffc41af, 0x976b6afd, 0x46f9a3f3, 0xfd3fc779, 0xaaab7a6a, 0x18781980, 0x7afdbffb, 
    0x949d8947, 0xc8291f97, 0xf5fa7ff9, 0x9b799cc0, 0x53cc7d7e, 0xfe971d57, 0xdf00ffea, 0x936afd5f, 0xa5d61ac3, 0x4bbcb5e1, 0xee884b26, 0x2e99f3a6, 
    0x181b3b17, 0xe8c148f9, 0x743fe700, 0xb222e67b, 0x7d80c413, 0x34909816, 0x332edb79, 0x3955cdfe, 0xab7a3142, 0x948ccafc, 0x1800ff50, 0xbef8dcdf, 
    0x526d1bd2, 0x8958a228, 0x1c046028, 0x3ea9679c, 0xf6aaa99f, 0xa40571ab, 0xb1de2810, 0x31abb144, 0x0780aae4, 0xf04a05e8, 0x2edd9834, 0x28cdfe71, 
    0x44bb408a, 0x761f63dc, 0xe22055ae, 0x6eccbfb6, 0xa84aad69, 0x19151cc5, 0x6964a93d, 0x78268118, 0x988a91e9, 0x49e4e05a, 0x6e4952fa, 0x37194bdb, 
    0x47d73b10, 0x9de6a4b6, 0xc98de6ca, 0xaee52f63, 0xe20f7a15, 0x52eb00ff, 0xf9159096, 0xedeb9357, 0xd555a1f4, 0x0cbc0c40, 0xbdfedf7d, 0x9db21c05, 
    0x7ff68fe3, 0x78c1f5fa, 0xe2a737b9, 0xcbc5a563, 0x7f7500ff, 0xb5feafef, 0xbbc6f05f, 0x7bcbe173, 0x278960d8, 0x4ed34dfb, 0x523956c6, 0x03035755, 
    0x862a0aa0, 0xffcbfb1f, 0x00ff7c00, 0x8eaae9f5, 0x4e0ec3b9, 0x00ffef7e, 0x14659c5e, 0xe388df9e, 0xf15d6c2b, 0x8b2faf9e, 0x6fd34574, 0x3186e36d, 
    0x261eca32, 0x8e008125, 0x555300ff, 0x6eaf2e2e, 0x46791eae, 0x669673f7, 0x24992639, 0xb800204d, 0x2e2d7a00, 0xb7e77fc9, 0xf92a3afe, 0xbfb6e2e2, 
    0xad2ba7cc, 0x09d2e84a, 0x8e05d58e, 0x69672972, 0x8122814a, 0x452a46ce, 0x96db2ab6, 0xcdfe114c, 0x63d2c02b, 0xfbc7b974, 0x4fabb335, 0x1b3f3d9d, 
    0xdc1bcd95, 0x10feee94, 0x93e2d40f, 0xffd5fd2f, 0xfabfbe00, 0x005c81d4, 0x558f8337, 0xd2eb00ff, 0xbc00ffe1, 0xffcff7bf, 0xf4b85e00, 0x744cfcf2, 
    0x57f7bf0c, 0x00fffafe, 0x87af56eb, 0xa07747bc, 0x0c6d49d9, 0x99244e11, 0x1c232de4, 0x0e9c9e8c, 0xffb0b282, 0xfb5fde00, 0xaf00ffe7, 0xc0c01548, 
    0xbb9feb65, 0xaad700ff, 0xbfa5254d, 0xc6b69312, 0x0be3afee, 0x2dcd46ed, 0xb108dade, 0xcaaa0c71, 0xc8d190c4, 0xd95e2fb2, 0xdcf35841, 0xf3ce5c5c, 
    0xe7c843cc, 0x9fbac52c, 0x7664a1ca, 0x737058c6, 0xf4fa7ff7, 0x97f73fec, 0x00fff9fe, 0x9394d3eb, 0x72c46f4b, 0x8d22f795, 0x0026cdd8, 0x3f7da6cf, 
    0x4dde490a, 0x4f0114a4, 0xc269ce19, 0x495c0e06, 0xa1d97f82, 0x691877e1, 0xaddd3f72, 0xa9a9a954, 0x3bee745d, 0xa226f7c6, 0xc88c2b8a, 0x8786fd2a, 
    0xb490eaa8, 0x6ade76b6, 0x7a276d2b, 0x7de20fae, 0x9e7785ea, 0xf7e80404, 0x3c1f1c20, 0x15f9fee3, 0x2e765751, 0x67765211, 0xb5852f35, 0x58bb50b8, 
    0xae5d0736, 0x6b207fac, 0xe080ac18, 0xd93f82b2, 0xd7eb00ff, 0x7a68d8a1, 0x354dabed, 0xa72f89df, 0x24829407, 0x5ea68f84, 0xc1b5fe3c, 0xfec224df, 
    0x92c8387f, 0xb8b21819, 0x3c274150, 0x56f901e0, 0xa9282a8e, 0x611045c1, 0xbfbc00ff, 0x00ffcff7, 0x7f209b5e, 0xd0cbb22d, 0xff0f00ff, 0xb49d5e00, 
    0x46cf00ff, 0x9bc23ffd, 0xbe2d9f22, 0x4f1f3c76, 0xef17a5f0, 0xf2f5572d, 0x45496e21, 0x85445614, 0xf5d0b05f, 0x9616521d, 0x45cddbce, 0x55efa46d, 
    0xbd4ffcc1, 0xc0f3ae50, 0xe41e9d80, 0x9ce78303, 0xaa22df7f, 0xc2c5ee2a, 0xe6cc4e2a, 0xb7b6f0a5, 0x066b170a, 0xd5b5ebc0, 0x640de48f, 0x18c14110, 
    0x493fbd22, 0xf8f4d4b3, 0xd3eb6ba7, 0x1005487a, 0x3ef71875, 0x893ae7b5, 0x2d57ea90, 0x6917462c, 0xf8678c59, 0x728a7372, 0x05e7908d, 0x47b57215, 
    0xb22d7f20, 0x00ffd0cb, 0x5e00ff0f, 0xf793549e, 0xa618f6c8, 0x6fcba748, 0xd3078f9d, 0x46c329fc, 0x496e25b5, 0x64561445, 0xd0b05f85, 0x16521df5, 
    0xcddbce96, 0xefa46d45, 0x4ffcc155, 0xf3ae50bd, 0x1e9d80c0, 0xe78303e4, 0x22df7f9c, 0xc5ee2aaa, 0xcc4e2ac2, 0xb6f0a5e6, 0x6b170ab7, 0xb5ebc006, 
    0x0de48fd5, 0xc1411064, 0x3fbd2218, 0xf4d4b349, 0xeb6ba7f8, 0x05487ad3, 0xf7187510, 0x3ae7b53e, 0x57ea9089, 0x17462c2d, 0x678c5969, 0x8a7372f8, 
    0xe7908d72, 0xb5721505, 0xda315214, 0x35c39ea4, 0x45d16206, 0xfb550014, 0xd5510f0d, 0xed6c6921, 0xda56d4bc, 0x1f5cf54e, 0x0ad5fbc4, 0x09083cef, 
    0x3840eed1, 0xfdc7793e, 0xaea22af2, 0xa4225cec, 0x5f6aceec, 0xa1706b0b, 0x0e6cb076, 0xfe585dbb, 0x0441d640, 0x2b82111c, 0x3d9bf4d3, 0x768a4f4f, 
    0xa437bdbe, 0x51075180, 0x5eeb738f, 0x0e99a873, 0xc4d272a5, 0x98957661, 0x27877fc6, 0xd928a738, 0x5751700e, 0x1545512b, 0x14456106, 0x38c90012, 
    0x5700f41e, 0x378de14f, 0xe6d3bd4d, 0xa8dbdb7b, 0x850af324, 0xdc9a528b, 0xd4ce8111, 0x8aeb0775, 0xc3c44be5, 0x48fd9005, 0xfdc7fda4, 0x582bfd33, 
    0xcbec9da6, 0x3a77e583, 0x1ac23bed, 0x3def8c16, 0xddae88c7, 0xd423c608, 0xe37f88e6, 0x06d6e4b2, 0xd6b52db1, 0xa6b634a7, 0x29200963, 0x20765792, 
    0x2496640c, 0x38f973d6, 0xe95167e3, 0xc7fd4eeb, 0x2afd33fd, 0xcaa5eddd, 0x81acae94, 0xcb751754, 0x7dbc7f70, 0xb1502529, 0x1f8ff931, 0xf2d534de, 
    0xccced7bc, 0x4d948e71, 0x6e4779e5, 0xad62fbcc, 0xbd96ce27, 0x3d516d05, 0x865c5114, 0x82bf5d61, 0xd2e22d6e, 0x886b522e, 0xc0312de3, 0xd1fd0077, 
    0xe004455c, 0xd945d564, 0x95cba8dc, 0x6d34efdc, 0x27d04f33, 0xb835a97b, 0xda4805e5, 0x8cf85108, 0xe227d79c, 0x4d75d80b, 0x43a87b66, 0xa780d808, 
    0x8c016424, 0x987861d6, 0xa91fb260, 0xffb89f14, 0xa57fa600, 0x93acad69, 0x595d3945, 0xc7f20e2b, 0x46df7fab, 0x1b01229b, 0xfc43b71c, 0x7fdc8f46, 
    0x9ad23fd3, 0xc6c64efe, 0x18e3e0cc, 0xad6b1ea7, 0x6a72afc4, 0x20b0a228, 0x4df0b72b, 0x455abcc5, 0x1c714dca, 0x0e38a665, 0x2bba1fe0, 0x2eaaa288, 
    0x5c46e5ce, 0xa379e7ae, 0x817e9a69, 0xad49dd3b, 0x462a28c7, 0xc48f42d0, 0x4db9e664, 0x4b2dfe7e, 0x10ea9e59, 0x52406c44, 0x63000946, 0x38419d35, 
    0xaedc3419, 0x75e586ac, 0x28998264, 0xf03c3606, 0xc40b7a0f, 0xfd9005c3, 0x933fa648, 0x38b3b1b1, 0xa12ac638, 0x49dc9a16, 0x14454d6a, 0x76854456, 
    0xb7b809fe, 0x49b9488b, 0xb48c23ae, 0x03dc01c7, 0x147145f7, 0xdcd94555, 0xdc95cba8, 0x336d34ef, 0x7b27d04f, 0xe5b835a9, 0x08da4805, 0x9c8cf851, 
    0xdfaf29d7, 0x336ba9c5, 0x8d0842dd, 0xc1480a88, 0xb3660c20, 0xeacaa1a8, 0x56576ec8, 0x8aa22848, 0xd9ff0f92, 
};
};
} // namespace BluePrint
