#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Heart_vulkan.h>

namespace BluePrint
{
struct HeartFusionNode final : Node
{
    BP_NODE_WITH_NAME(HeartFusionNode, "Heart Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    HeartFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Heart Transform"; }

    ~HeartFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Heart_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return false; }
    bool Skippable() const override { return true; }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue87d"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    ImGui::Heart_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 5250;
    const unsigned int logo_data[5252/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0x280aa08a, 0x280a80a2, 0xf1dd1aaa, 0xa7a9b4d3, 0x3626db46, 0x3dda7fc6, 0x7693c63f, 0x15fd0257, 0x5b7bf8cb, 0x7ed4b8be, 0xbb49a8cb, 0x79748fcd, 
    0x87fdbe50, 0xa8abfc71, 0x2b2919a5, 0xa2280aa0, 0x288a02a8, 0x2a8a02a0, 0x747cb786, 0xd1692aed, 0xb18dc9b6, 0x4f8ff69f, 0x95dda4f1, 0x7245bfc0, 
    0xefd61efe, 0xb21f35ae, 0xf36e12ea, 0x541edd63, 0xdc61bf2f, 0x29ea2a7f, 0xe84a4a46, 0xaa288a02, 0x288aa200, 0x1c9fa200, 0x1cdd274f, 0xe79e9a7a, 
    0x34eed640, 0x26edab1b, 0x4a3cddd4, 0x16646cc3, 0x0a390052, 0x8007f77e, 0x743a4e32, 0x13a46ece, 0xea8a7ab3, 0x4dd12af6, 0x3c873ff0, 0xb907e255, 
    0x2882c76b, 0xf36544e3, 0xe72456c8, 0x9c3e55a0, 0xf1bd1de7, 0x4bd2f266, 0x9060992b, 0xa1dc18ab, 0x83043964, 0x588d288e, 0xa23b66cb, 0xb4a2280a, 
    0x288aa200, 0xc647ae00, 0x96f7aa17, 0x233b47f6, 0xbfc7e4f9, 0xf95b00ff, 0xd0595dd7, 0xab4590e8, 0x9665a43e, 0x363c9f49, 0xc7e93330, 0x4e1315a7, 
    0xe468c84a, 0xda621df5, 0xf6d64e6d, 0x686239ca, 0x01180c00, 0x0f1d0f90, 0x507745a6, 0x92c293ca, 0xa18e72c6, 0xa006f581, 0x75f874d4, 0x396d433b, 
    0x0a82a460, 0x537a04f5, 0xc6166dac, 0x91643bce, 0x051863dd, 0x147e9cf1, 0xee1617a3, 0xa2288a05, 0x455110b4, 0x76540014, 0xd7119ed6, 0xbf341935, 
    0x69136b13, 0x96ac12cd, 0xd25824fb, 0x0c964342, 0x000ca4cc, 0xdd19c9b8, 0xb3929a81, 0x8b20d1a1, 0xcb487d56, 0x783e932c, 0xd367606c, 0x262a4e8f, 
    0xd190959c, 0xddcbe28f, 0xc25a1d0e, 0x4c6942e7, 0x663671b0, 0x36062e12, 0xd05185e0, 0x0a7f3db0, 0x2795a1e9, 0xe58c2585, 0xea03431d, 0xe9a8410d, 
    0x8676eaf0, 0x49c172da, 0x08ea1504, 0xda58a7f4, 0x769c8d2d, 0xc6ba23c9, 0x38e30b30, 0xc2692afc, 0x8bbb7a51, 0x288a62a1, 0xa22840ad, 0x3855008a, 
    0x0fce4860, 0x14fcef4a, 0x4153cd34, 0x8eb9b0bf, 0x5016f1d6, 0x15ca5ad3, 0x770518c0, 0xe375cf29, 0x79b5b723, 0xd3b251fd, 0x75b88605, 0x16ae2e88, 
    0x2b6be7e8, 0x8e91dbed, 0xc5e9c108, 0x3d9f5663, 0x736b0b9a, 0x7ec79bd1, 0xabf4d21c, 0x22ec6f88, 0x963cadd3, 0x730504db, 0x54514037, 0x873bc905, 
    0x074eceb0, 0xf0f9c335, 0x5bb41fdd, 0xf965c8ae, 0xc2d95de3, 0x7ecf409e, 0xdb621d2a, 0x4b1772fb, 0x9c91a5e9, 0xdc666582, 0x39391df9, 0xc636c5ed, 
    0xe36c6cd1, 0xd61d49b6, 0x195f8031, 0x954ae1c7, 0xb8ab0737, 0x512cb52d, 0x05b81545, 0x16405114, 0x0555a52d, 0xe69c8c1b, 0xa7c013bd, 0xc6c9351a, 
    0xfee33171, 0xeacc2b02, 0x6df587d7, 0x9397c353, 0x4da8694d, 0xe7b6332c, 0x160d9fb5, 0x5507c679, 0xe08cd8eb, 0x5aae3867, 0x682e2f94, 0x5c69a392, 
    0x5e078df4, 0x5b965887, 0x6ac3f448, 0x132f09a5, 0x3080f971, 0xbed7806b, 0x91849ac2, 0x7549d769, 0x2ae9906d, 0x8c207538, 0xd783c3f0, 0x7de243ad, 
    0x5df15063, 0xd757969c, 0x98b4154f, 0x00ff36cc, 0xe741f022, 0x795079ae, 0xb2623bce, 0xc6166dac, 0x91643bce, 0x051863dd, 0x147e9cf1, 0x4ed3a053, 
    0xc572b743, 0x435d5114, 0x80a2280a, 0x37c2290a, 0x54fe103d, 0xd9daab93, 0xbaf1ec3d, 0xd270465b, 0xc6413b94, 0x765c9f71, 0xc25de6a9, 0xa44951e2, 
    0x0fec9af9, 0x756d973e, 0xb56d0c77, 0xcadd8ea4, 0x9c71c686, 0x8f233863, 0x52345271, 0x0c23772e, 0x1ca5e375, 0x2803eed1, 0x0aa08aa2, 0x8523a928, 
    0x3d70e4e4, 0xa2a44c4d, 0x5bdac4ae, 0x7e56d191, 0xe9dffec9, 0xfef06056, 0x356777a5, 0x5cb3a5e5, 0xf9770e43, 0xc9c02d78, 0xec937a01, 0x8db32601, 
    0x4c76727a, 0x8ce8494a, 0x3f662bda, 0x6a8f6b09, 0x44c22697, 0x0d38d48d, 0x9e11e080, 0xd8073953, 0x36cf8a8c, 0xc1171c64, 0xbd4ad41e, 0x0e36bb38, 
    0xa2566e49, 0x8f1792a4, 0x15f5c893, 0x2919691d, 0x9ea6a12b, 0x343a45c1, 0xf9513832, 0x3582b5d5, 0x6bfd1cfe, 0x4fe3b52a, 0x9a32b947, 0xbe8a4a89, 
    0x6c8c8c62, 0xd9adca5f, 0x00ff6af8, 0xb0a68555, 0x76aadeb7, 0x1928e693, 0xd6fbdceb, 0x4e42c571, 0x4c5409cd, 0x16baa2c5, 0x04b166f0, 0x76b0e565, 
    0xab6be7c0, 0xb3e6807e, 0x0c5ea47c, 0x14398e63, 0x5e8c8ae5, 0x856ee7c0, 0x41eb2a0a, 0x3e0e7f1b, 0x31445295, 0xd5f953b9, 0x9a1aafd2, 0xa919c72d, 
    0x0227030d, 0xba91219e, 0xab78fc21, 0x03114630, 0x9a332c75, 0x8ba9b096, 0x8928da69, 0x8942d754, 0x87ea4586, 0x4698e6f0, 0xd5680d0e, 0x50033ddb, 
    0x2d69e0d5, 0x56d4bc2d, 0xae7a5bda, 0x94e65e0f, 0x49bb6d31, 0xd0376a04, 0x022703c1, 0xba91219e, 0xae78fc21, 0xac25bc8d, 0xe95844db, 0xda3980ed, 
    0x07f2c7ea, 0x07419435, 0x278a6004, 0x39646b8b, 0x44a16b54, 0x43f522c3, 0x234c73f8, 0x6ab40607, 0x850ee329, 0xcd1915ba, 0xddb6783a, 0x9a1a85a4, 
    0xc4a753ea, 0xbaa1ca14, 0x76459966, 0x6c345dc9, 0x3cee1acd, 0x5a770415, 0xd1bced05, 0x234bb1a4, 0x65a8a323, 0x08025060, 0xf479453d, 0x5f612477, 
    0xe75deb91, 0x260b3581, 0xdd90eed1, 0x91e78d44, 0x1c69dbb5, 0x711e9c01, 0x95d7fac1, 0x5a4ea5ec, 0x322ec298, 0xf4d0d9d4, 0xcd1eedcb, 0x5ce09ee2, 
    0xc12a1a47, 0x20144a04, 0xa0178051, 0xe9181803, 0xa2e679c5, 0xcb953a64, 0xda85114b, 0xfe196356, 0xbae29c1c, 0x7f7438bb, 0x859a7908, 0x26b2bade, 
    0x6a5cbedd, 0x3e909c58, 0xfc6696e2, 0x6bc71507, 0xe63afc7a, 0x9ced3da7, 0xdb2e2472, 0x1985c854, 0x3c38e380, 0xf63ce38c, 0x51a554aa, 0x5c948a24, 
    0x42e98ca2, 0x4c2f5889, 0xbda228d3, 0x8d24ab38, 0x76cb5510, 0xe4012006, 0xe474aa75, 0x4fb98d72, 0x7e6a9535, 0x712636d2, 0xeffa45e6, 0xd109083c, 
    0x3e3840ee, 0xf2fdc779, 0x9de3cf2b, 0x9ff2831f, 0x82df5d43, 0xd2e22d6e, 0x886b522e, 0xc0312de3, 0xd1fd0077, 0xe3626c5e, 0x9aca482b, 0x1a9b5a6a, 
    0xa7a79e4d, 0x5e5f3bc5, 0x2840d29b, 0xb9c7a883, 0xd439aff5, 0xb952874c, 0xbb306269, 0x3f63cc4a, 0x579c93c3, 0x9a69a367, 0xdd3b817e, 0x28c7ad49, 
    0x42d0462a, 0xe664c48f, 0x1100ffb8, 0xfaf7d66a, 0x1cccc5c5, 0xdf1710a3, 0x953f1903, 0x92241737, 0xda34955a, 0x60b8ce48, 0x4f9e2022, 0x774ea74a, 
    0xf398db2e, 0x8d46af4d, 0x171b673f, 0x48a2f208, 0x9ea0641f, 0x6b578387, 0xe386a73a, 0x8fdc0a60, 0x13c74a5f, 0x89decf45, 0x517d2115, 0x02cfbb6a, 
    0x907b7402, 0x719e0f0e, 0x8a7c00ff, 0x0c8395e0, 0xe3aec8a9, 0xf11637c1, 0x35291769, 0x989671c4, 0x7e803be0, 0x6918aee8, 0xf1a5492d, 0x9e4d1a1b, 
    0x3bc5a7a7, 0xd29b5e5f, 0xa8832840, 0xaff5b9c7, 0x874cd439, 0x6269b952, 0xcc4abb30, 0x93c33f63, 0xa367579c, 0x817e9a69, 0xad49dd3b, 0x462a28c7, 
    0xc48f42d0, 0x3fb9e664, 0xea306a10, 0x71f7bc1a, 0x0131b17c, 0x0c9ce049, 0xe94aaa66, 0xa3f0a722, 0xfb4ea93e, 0x1c7424e5, 0x1bd77c0a, 0x7ae055c1, 
    0xd915d4fa, 0xefe1a286, 0xdac22948, 0xbe0fecb2, 0x15af3b20, 0x28475025, 0x56f394db, 0x835f9da2, 0xc23a7fc3, 0xe41607bd, 0x6b7022b6, 0xe75d4b54, 
    0x3d3a0181, 0xcf0707c8, 0xbe00ff38, 0xdb757045, 0xdee226f8, 0x26e5222d, 0xd3328eb8, 0x0f70071c, 0x3f8515dd, 0x467c2988, 0xa96793c6, 0xd74ef1e9, 
    0x90f4a6d7, 0x31ea200a, 0xce6b7dee, 0xd4211375, 0x8c585aae, 0x18b3d22e, 0xe7e4f0cf, 0xdae8d915, 0x4ea09f66, 0x716b52f7, 0xb4910aca, 0x19f1a310, 
    0x5f53ae39, 0xd6528bbf, 0x1184ba67, 0x9114101b, 0xcd184082, 0xa98aec39, 0xa33aa3f0, 0x4744f69d, 0x5992e276, 0xb71c38d5, 0xe5aeaaf2, 0x6b1e73db, 
    0x9a1c146a, 0x4198d893, 0x2ada58bd, 0x8f9146fa, 0xea347e94, 0xf415e3d5, 0x235f7b45, 0x0e12943a, 0xadf6c141, 0x23180102, 0x7ba2de23, 0xca476e74, 
    0x17c7a97d, 0x8695a417, 0x50b927aa, 0xc9494e92, 0x89aba4f7, 0xf9c98b6e, 0x004abd8f, 0x7b600003, 0x565c2c51, 0x51075791, 0x2bea8c2d, 0xa4f19a46, 
    0x8d1fe683, 0xd5578c25, 0x14f9da0b, 0x291aad28, 0xbffb737d, 0x235f7b88, 0x3c939e3a, 0x861e0f7d, 0x2b3252af, 0x27cd308c, 0x94b48c8a, 0x9e680f74, 
    0x3cf3a4e8, 0x821e4f9d, 0x8a0a5a99, 0x4b310a83, 0x3a46c542, 0xb4073a46, 0x5167644b, 0xfa53345a, 0x107ff7e7, 0x7546bef6, 0x1f45a315, 0xe2effe5c, 
    0xcfc8d71e, 0xa7722a56, 0xa24ba706, 0x719f7138, 0xe7ac6856, 0x28fe8488, 0xe89ee692, 0xf044f7ac, 0xa0e61e83, 0xc7722c66, 0xa228b426, 0xe1438818, 
    0xb2a52988, 0x1aada833, 0x7fae4f2b, 0xda2bf177, 0x56d419f9, 0x737d148d, 0x7b88bffb, 0x4e92225f, 0x470e30e8, 0x7009aba1, 0x4ff9c18d, 0x61454bbd, 
    0xf627ac52, 0x931c127f, 0x08f744e8, 0xfb980fbc, 0xdc9d7755, 0x410f9c60, 0x9da26857, 0xfeec4358, 0x4397a420, 0xa2d18a3a, 0xf7e7fab7, 0xaffd127f, 
    0xc5515190, 0x307a9428, 0xe24a2aea, 0x995d5c94, 0x85d15693, 0xd113be75, 0x4d4bdd74, 0x6fdb7b9e, 0xa052d235, 0x808161ef, 0x955c117b, 0x38057e77, 
    0x334eaed1, 0xf01f8f89, 0xec0a4e11, 0x6a3969ba, 0xbcd24f33, 0xab24ae2f, 0x6d2c6f65, 0xb04b321e, 0x923a3d23, 0x771b573b, 0x9ebcb600, 0x14e136dc, 
    0x70bd9b8c, 0xf4ee9a71, 0x621d7a1d, 0xd3236d59, 0x2494aa0d, 0xe6c74dbc, 0x3faec100, 0x4d8fb05e, 0x89b627d6, 0x469022cb, 0x333292e3, 0xb5d254cd, 
    0x954b53d1, 0x45516734, 0x21a22c47, 0xa8a0c7ea, 0x919d5c8c, 0x12d15792, 0x19394051, 0x2b885414, 0x8b9ef0ad, 0x6c5aeaa6, 0x79dbdef3, 0x079592ae, 
    0x030c0c7b, 0xabe48ad8, 0xc629f0bb, 0x9c71728d, 0x00ff784c, 0x2bb88a80, 0x39694ab3, 0xd24f336a, 0x24ae2fbc, 0x2c6f65ab, 0x4b321e6d, 0x3a3d23b0, 
    0x1b573b92, 0xbcb60077, 0xe136dc9e, 0xbd9b8c14, 0xee9a7170, 0x1d7a1df4, 0x236d5962, 0x94aa0dd3, 0xc74dbc24, 0xaec100e6, 0x8fb05e3f, 0xb627d64d, 
    0x9022cb89, 0x3292e346, 0xd254cd33, 0x4b53d1b5, 0x51673495, 0x64e00445, 0x452146d6, 0x5d015014, 0x5df4846f, 0x67d35237, 0xcddbf69e, 0x3ba89474, 
    0x1e6060d8, 0x5d2557c4, 0x344e81df, 0xe28c936b, 0x04fcc763, 0x9a5dc155, 0x51cb4953, 0xe1957e9a, 0x5b25717d, 0x6863792b, 0x815d92f1, 0x91d4e919, 
    0xb8dbb8da, 0xf6e4b505, 0xa408b7e1, 0x83ebdd64, 0xa077d78c, 0x12ebd0eb, 0x981e69cb, 0x25a1546d, 0x303f6ee2, 0xfa710d06, 0x6e7a84f5, 0x4eb43db1, 
    0x37821459, 0x9e91911c, 0xae95a66a, 0xa95c9a8a, 0x288a3aa3, 0x8a428cac, 0xba02a028, 0xbae809df, 0xcfa6a56e, 0x9ab7ed3d, 0x775029e9, 0x3dc0c0b0, 
    0xbb4aae88, 0x689c02bf, 0xc41927d7, 0x08f88fc7, 0x34bb82ab, 0xa39693a6, 0xc22bfd34, 0xb64ae2fa, 0xd1c6f256, 0x02bb24e3, 0x23a9d333, 0x70b771b5, 
    0xedc96b0b, 0x48116ec3, 0x07d7bbc9, 0x41efae19, 0x25d6a1d7, 0x303dd296, 0x4b42a9da, 0x607edcc4, 0xf5e31a0c, 0xddf408eb, 0x9c687b62, 0x6e0429b2, 
    0x3c232339, 0x5d2b4dd5, 0x53b93415, 0x51147546, 0xe0991859, 0x0f0e7290, 0xeb8e58b5, 0x51c48fb3, 0xfff64ff6, 0xc93e4a00, 0x5ee9dffe, 0x9a50ea9c, 
    0x94bb99f7, 0xc1eae41e, 0x56e45486, 0x5be28bde, 0xe0d9168d, 0x0ee40886, 0x7372c9fb, 0x5ce90fd0, 0x722ab6e8, 0x2ae82325, 0xcc070c75, 0x8af1bddb, 
    0x758c92e1, 0xf067ae84, 0x4c9dc5bb, 0x19d43c9e, 0x11684b08, 0xe3e4468f, 0xe66aaef5, 0xee99e7e5, 0xee2c242e, 0xcdddcc72, 0xf988c146, 0x33be6f5b, 
    0xc7621b50, 0xa27e5226, 0xf165799c, 0x6f7ec1ca, 0x5d978489, 0xab267e90, 0x39c94992, 0xec63f53e, 0x94feed9f, 0xbffd937d, 0x5261bbd2, 0xcdba1784, 
    0x22b6a014, 0xf188568e, 0xccaa3dc8, 0x9cf1a373, 0xfd51431f, 0xd2bffd93, 0xb77fb28f, 0x1e7556fa, 0xd4b7a61e, 0x8a657052, 0x4b7cd1da, 0x3cdba271, 
    0x811cc110, 0x4e2e79df, 0x2bfd017a, 0x38912301, 0x117ae412, 0xb41bd752, 0x67eeba5f, 0x3aa3577e, 0xa8793c89, 0xd0961032, 0xc98d1e23, 0xdc5cebc7, 
    0x3b73cbf3, 0x919733cf, 0x738f59ce, 0x1c4fd451, 0x0397c18f, 0xde6b0ad0, 0xf9b0f37e, 0xc962b79c, 0xc919273a, 0x495a15f4, 0x00cf535a, 0xc97ea976, 
    0x47e9dffe, 0xfddb3fd9, 0xc39bae2b, 0x97fad6d3, 0x77240417, 0xc5fca43d, 0x010c5658, 0x1fd42007, 0x6f00ff64, 0x625ba5f4, 0x0f262ba7, 0xa8a8b3d2, 
    0x7dbb584b, 0xec41c9e4, 0x456bebc9, 0x8bc62df1, 0x0443f06c, 0xe47d0772, 0x07e839b9, 0x0445acf4, 0xfae4980f, 0xcbb514e3, 0x4d083d7b, 0x49d4a1a7, 
    0x9041cde3, 0x1881b684, 0x3f4e6ef4, 0x9ee7e65a, 0x79de995b, 0x728ebc9c, 0x8e9a7bcc, 0xe5238191, 0xcdb83e38, 0x1bbbb73b, 0xcce09693, 0x004e1214, 
    0xf65cf2aa, 0xe634f38f, 0xd2722cb6, 0x3e29fd64, 0xe9dffec9, 0x08d5345d, 0xbc7f27eb, 0xd92da8a8, 0x9d2c7324, 0xa4863e38, 0x6400ffaa, 0xf46f00ff, 
    0x5e2411a9, 0xe21e6eb2, 0x5b1aa9b3, 0xa4985fc2, 0x5692d1a3, 0x5be28bd6, 0xe0d9168d, 0x0ee40886, 0x7372c9fb, 0x58e90fd0, 0xb52956b4, 0xaab529b1, 
    0x793c893a, 0x961032a8, 0x8d1e23d0, 0x5cebc7c9, 0x73cbf3dc, 0x9733cf3b, 0x8f59ce91, 0x43d15173, 0xc98d7b93, 0x92a3c2bd, 0x27af8f65, 0x23e950d0, 
    0xf6689374, 0x3fd91f15, 0x6a2bfddb, 0xe5bca571, 0x3d2a8ef9, 0x288a6259, 0xbf0a08ac, 0x3aeaa161, 0x9d2d2da4, 0xdb8a9ab7, 0x83abde49, 0xa17a9ff8, 
    0x0181e75d, 0x07c83d3a, 0xff38cf07, 0x5445be00, 0x848bdd55, 0xcd999d54, 0x6e6de14b, 0x0dd62e14, 0xab6bd781, 0xc81ac81f, 0x30828320, 0x937e7a45, 
    0xf1e9a967, 0xa6d7d74e, 0x200a90f4, 0x7dee31ea, 0x1375ce6b, 0x5aaed421, 0xd22e8c58, 0xf0cf18b3, 0xe514e7e4, 0x0ace211b, 0x286ae52a, 0x28cca0a2, 
    0x2a008aa2, 0xa88786fd, 0xb6b490ea, 0x2b6ade76, 0xae7a276d, 0xea7de20f, 0x049e7785, 0x20f7e804, 0xe33c1f1c, 0x5115f9fe, 0x112e7657, 0x35677652, 
    0xb8b5852f, 0x3658bb50, 0xacae5d07, 0x206b207f, 0xc1080e82, 0x4dfae915, 0xc5a7a79e, 0x9b5e5f3b, 0x832840d2, 0xf5b9c7a8, 0x4cd439af, 0x69b95287, 
    0x4abb3062, 0xc33f63cc, 0x94539c93, 0x2838876c, 0xa2a895ab, 0xa230838a, 0xab00288a, 0xa31e1af6, 0xd9d242aa, 0xada879db, 0xb8ea9db4, 0xaaf7893f, 
    0x1078de15, 0x80dca313, 0x8ff37c70, 0x4555e4fb, 0x45b8d85d, 0xd49cd949, 0xe1d616be, 0xd860ed42, 0xb1ba761d, 0x82ac81fc, 0x04233808, 0x36e9a757, 
    0x149f9e7a, 0x6f7a7ded, 0x0ea20049, 0xd6e71ea3, 0x3251e7bc, 0xa5e54a1d, 0x2bedc288, 0x00ff8c31, 0x4e714e0e, 0xe01cb251, 0xa256aea2, 0xc20c2a8a, 
    0x02a0288a, 0x7a68d8af, 0x4b0ba98e, 0xa2e66d67, 0xaa77d2b6, 0xde27fee0, 0xe07957a8, 0x728f4e40, 0xcef3c101, 0x5591ef3f, 0xe1627715, 0x73662715, 
    0x5b5bf852, 0x83b50b85, 0xeada7560, 0xb206f2c7, 0x8ce02008, 0xa49f5e11, 0x7c7aead9, 0xe9f5b553, 0x880224bd, 0x9f7b8c3a, 0x449df35a, 0x962b75c8, 
    0xb40b2396, 0xfc33c6ac, 0x39c53939, 0x8273c846, 0x8a5ab98a, 0x0a33a828, 0x2377bc2a, 0xad0f7e18, 0x90110458, 0x49ab3d72, 0xa41d94d3, 0xe1d6e286, 
    0x6e82bf5d, 0x2ed2e22d, 0xe3886b52, 0x77c0312d, 0x5cd1fd00, 0x76311545, 0xca651c77, 0x369a77ee, 0x13e8a799, 0xdc9ad4bd, 0x6da48272, 0x46fc2804, 
    0xd7946b4e, 0xb5d4e2ef, 0x04a1ee99, 0x2405c446, 0x33069060, 0xe550d459, 0x2b376475, 0x501424ab, 0xe0240348, 0x2e79d57b, 0x9f9c3046, 0x9453a85a, 
    0x5189a2dd, 0x14c5626f, 0xe82499c4, 0xfa34f479, 0xd9c54589, 0x156eab89, 0xe226f8db, 0xe5222dde, 0x328eb826, 0x70071cd3, 0xc415dd0f, 0xce2e4e51, 
    0xae5c46e5, 0x69a379e7, 0x3b817e9a, 0xc7ad49dd, 0xd0462a28, 0x64c48f42, 0x7e4db9e6, 0x594b2dfe, 0x4410ea9e, 0x4652406c, 0x35630009, 0x570e459d, 
    0xba724356, 0x144541b2, 0xea2399c7, 0xa314f479, 0x42642717, 0x147dd857, 0x39c80802, 0x0052d41e, 0x37c1dfae, 0x1769f116, 0x71c43529, 0x3be09896, 
    0xaee87e80, 0xbba88a22, 0x7219953b, 0x8de69dbb, 0x04fa69a6, 0xb72675ef, 0x1ba9a01c, 0x113f0a41, 0x35e59a93, 0x2db5f8fb, 0x41a87b66, 0x4901b111, 
    0x8c012418, 0x391475d6, 0xca0d595d, 0x1405c9ea, 0x24034850, 0x90d47be0, 0x00455114, 0x26f8db15, 0x222ddee2, 0x8eb826e5, 0x071cd332, 0x15dd0f70, 
    0x175551c4, 0x2ea37267, 0xd1bc7357, 0x403fcdb4, 0xd6a4ee9d, 0x231594e3, 0xe2472168, 0xa65c7332, 0xa5167fbf, 0x0875cfac, 0x29203622, 0x31800423, 
    0x87a2ce9a, 0xb921ab2b, 0xa220595d, 0x3f482a8a, 0x0000d9ff, 
};
};
} // namespace BluePrint
