#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <GlitchDisplace_vulkan.h>

namespace BluePrint
{
struct GlitchDisplaceFusionNode final : Node
{
    BP_NODE_WITH_NAME(GlitchDisplaceFusionNode, "GlitchDisplace Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    GlitchDisplaceFusionNode(BP* blueprint): Node(blueprint) { m_Name = "GlitchDisplace Transform"; }

    ~GlitchDisplaceFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::GlitchDisplace_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return false; }
    bool Skippable() const override { return true; }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uea53"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    ImGui::GlitchDisplace_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 4920;
    const unsigned int logo_data[4920/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0xa224a08a, 0x5100298a, 0x97eb6745, 0xa6d24ee7, 0x982c189d, 0xf3eb19db, 0x49e39f1e, 0xa1812bbb, 0x1dde7245, 0x35ee2fd7, 0x12eab21f, 0xbac7126f, 
    0xdf575522, 0x953feeb0, 0x25a33475, 0x45017425, 0x6a015514, 0x00a9288a, 0xd7cd8aa2, 0xddec2fb5, 0x1ce1e222, 0x8ce4a32c, 0x4f8ff9f5, 0x95dda4f1, 
    0xb9a2d2c0, 0x7a6b0d3f, 0xb7f8c59d, 0xb30ee4d4, 0x5512bac7, 0x1df6fa54, 0xac2bfdc1, 0x2b2919a5, 0x511485a1, 0x14ed2254, 0x288c5951, 0x8d3503a5, 
    0x603f6bae, 0x626e6fd1, 0xfe46b260, 0x9783474c, 0x6c8f7320, 0xa087ca9f, 0x2957141b, 0x585bcde1, 0x6bdb823a, 0xe6822413, 0xa0f0d03d, 0x80e31ca9, 
    0xe9f59133, 0xee245d5d, 0x8aa22880, 0x45516260, 0xb982b815, 0xab5e181f, 0x1cd95bde, 0x93e78fec, 0xfd00ff1e, 0x755de76f, 0x41a24367, 0x91faac16, 
    0x7c265996, 0xcfc0d8f0, 0x549c1ea7, 0x212b394d, 0x75d493a3, 0x3bb5698b, 0xe528db5b, 0x3000a089, 0x3c400660, 0x15993e74, 0x4f2a43dd, 0xca194b0a, 
    0xd407863a, 0xd351831a, 0x0dedd4e1, 0x9282e5b4, 0x11d42b08, 0xb4b14ee9, 0xed381b5b, 0x8c754792, 0x71c61760, 0x5c8c52f8, 0x2816b85b, 0x44d08aa2, 
    0x20455194, 0x5f3ce30a, 0x415eb27c, 0x71f9c466, 0xdf63f29d, 0xebfce58f, 0x8e2023b2, 0xa16f9b95, 0xbeaac15b, 0x499265a4, 0x30363c9b, 0xa7c7e933, 
    0x4a4e1315, 0xb5e468c8, 0x6dda661d, 0xc6fad652, 0x00682229, 0x9001180c, 0xb23d1d0f, 0x5486bd2b, 0x339a149e, 0xa40c7594, 0xeaab0677, 0xa55a747a, 
    0x9598b6a1, 0xf5ca4152, 0xec537a04, 0xd2c6166d, 0x7576643b, 0xe34b618c, 0xb418a538, 0x45b1c0dd, 0x2d825614, 0x20154551, 0x58aa6021, 0xb82603f4, 
    0x226a152f, 0xe46cc87b, 0xf357ca27, 0x1fbfc724, 0x73d7f9cb, 0x25248f70, 0xd7132023, 0x5967b527, 0xd7da7678, 0x4b933a53, 0x7210dc23, 0x7d461b09, 
    0xa2e2f438, 0x3464b569, 0xb386da71, 0x69a52e6b, 0xd642d8a8, 0x64856fed, 0xe980f938, 0x7e647b8c, 0xcc70e855, 0x34471097, 0xa1487267, 0xd5e08e94, 
    0x1a4d574d, 0x9f651fbc, 0xdbe0060b, 0x8fc0fc94, 0x65b18a4c, 0x9136b66a, 0x243323db, 0xae5b0a63, 0x362d4629, 0x4551f404, 0x14ed2268, 0x8e8c5951, 
    0xda5ae0e6, 0x15fe31c9, 0xbcdaebe3, 0x12be5ed3, 0x34636d4b, 0x3cf3c887, 0x82e448e9, 0x09f0fc78, 0x75d06bfc, 0xd88b4b5b, 0x010a1816, 0x8f63b19c, 
    0x63ad6aa7, 0x1d1b7be1, 0xf24a6a50, 0x2048fb34, 0xdf932bb0, 0x49a6dad7, 0x9d3860b5, 0x7bb25943, 0x4e631ddb, 0x6e495b88, 0x721c3c42, 0x6e0f7c07, 
    0x99a0d22b, 0x9ee32d2e, 0x28920c36, 0x23b82365, 0xe9aa9f35, 0x6dc6ad8f, 0xae25c22e, 0x72c6c0e0, 0x23391df9, 0x5bdaae02, 0x5bb29d25, 0xc64849c6, 
    0x7ae03817, 0x304d4271, 0x2a8aa226, 0x13fb8780, 0xf13f9efe, 0x1fbdfecf, 0xf1f49fd8, 0x7f8e00ff, 0x8a56ebf5, 0x2b03f25c, 0x9efe13fb, 0xfecff13f, 
    0x9fd81fbd, 0x00fff1f4, 0xebf57f8e, 0xb9b9a356, 0x4bdace86, 0x14d9879b, 0x19db5d4a, 0xe7681dc0, 0xd8df1990, 0xfff1f49f, 0xf57f8e00, 0xffc4fee8, 
    0xfc8fa700, 0xaf00ff73, 0xfe7a6952, 0x8b34ad97, 0x9a09dda7, 0x8c8d0b20, 0x03f503a4, 0x3b47a335, 0xf65706ee, 0x7f3cfd27, 0x7afd9fe3, 0xe93fb13f, 
    0x1c00ffe3, 0xd6eb00ff, 0xc87314ad, 0x8ef07f0a, 0xd7d300ff, 0x00ff43fe, 0x00ffd1eb, 0x3dfdef08, 0xfe3fe47f, 0x51516dbd, 0x2cdc25ed, 0xc200ff62, 
    0x4f00ff3b, 0xff0ff95f, 0xfc47af00, 0xf5f4bf23, 0xff9000ff, 0xb5f5fa00, 0xc35c5d51, 0xd52d6b67, 0xc270f9c3, 0x9cb1dda5, 0x1ea5d701, 0xc6c25dd2, 
    0xbf23fc57, 0x00fff5f4, 0xfa00ff90, 0x3bc27ff4, 0x5f4f00ff, 0x00ff0ff9, 0x3ee953af, 0xc675d222, 0xb1eb3495, 0x7101443b, 0x7f8094b1, 0x2b3d03de, 
    0x2e698f4e, 0xfe1763e1, 0x7afadf11, 0x7fc800ff, 0xe13f7afd, 0xa700ff1d, 0xff87fcaf, 0xaaadd700, 0xee92f628, 0xe17f3316, 0xa700ff1f, 0xff87fcaf, 
    0xfea3d700, 0xfa00ff11, 0xc800ff7a, 0xd97afd7f, 0x4bdaa3a2, 0xf0df18b8, 0xd300ff8f, 0xff43fed7, 0xffd1eb00, 0x00ff0800, 0xe47f3dfd, 0x6cbdfe3f, 
    0x305757d4, 0x75cbdad9, 0x305cfe70, 0x336277a1, 0xa3f43a80, 0x19b84bda, 0xff8ff07f, 0xfed7d300, 0xeb00ff43, 0x0800ffd1, 0x3dfd00ff, 0xfe3fe47f, 
    0xf8a44fbd, 0x1ad7498b, 0xc46ed355, 0xc60510ed, 0xe90152c6, 0x4acf80f7, 0x4bdaa3d2, 0xf0df18b8, 0xd300ff8f, 0xff43fed7, 0xffd1eb00, 0x00ff0800, 
    0xe47f3dfd, 0x6cbdfe3f, 0x97b447d1, 0x00ff3270, 0xe900ffb2, 0xff3bfeb7, 0xfba3d700, 0x7f9bfe2f, 0x7afdbfe3, 0xed6745bf, 0x949bdc25, 0x00ffb23f, 
    0x3bfeb7e9, 0xa3d700ff, 0x9bfe2ffb, 0xfdbfe37f, 0xdc51bf7a, 0x6f6b455c, 0xb2efc425, 0xb6b39428, 0xf6288033, 0x2a17ee92, 0x00ff657f, 0x77fc6fd3, 
    0x47af00ff, 0x36fd5ff6, 0x7fc700ff, 0xba69f4fa, 0xb4ab9bde, 0x2572638b, 0x6c588031, 0x503f2365, 0xd21efd2a, 0x0fe5c25d, 0x6dfabfec, 0xff8e00ff, 
    0xfee8f500, 0xa600ffcb, 0xffeff8df, 0xd1af5e00, 0x7097b447, 0x14459fb9, 0x2e434157, 0xd6d2122e, 0xec3e896b, 0x15fe5848, 0xadb61ae7, 0x4b5af822, 
    0x1ae91f35, 0xea73e195, 0xfee38c53, 0x4f5d3104, 0x3b1aef8b, 0x3fa3ac28, 0x0772c33d, 0x00ff0752, 0x8fcb155f, 0xa77aeb0e, 0x9a60ad88, 0x484bb017, 
    0x23709787, 0x126ba3de, 0xdc165c0f, 0xb0656a7d, 0xf0e3e5cb, 0xb8b48adf, 0x250bc25e, 0x2caf3d9e, 0xdc60486c, 0xf8a39d60, 0xaef5f582, 0x00ffbcea, 
    0xd4055ac4, 0x9fbe3d5a, 0xa31ea706, 0x2cc00475, 0x03251649, 0x631cef1f, 0x7a8ce3b9, 0xc669dc73, 0xfd5ba773, 0x8d781ea7, 0x02049844, 0xfb8c73c0, 
    0x019a8ed2, 0xab288a62, 0x288a7a11, 0x5932c6ac, 0x4b86b5e3, 0xc4118889, 0x409fd885, 0xab635e33, 0xebe29278, 0xb3d993c2, 0x17eadcbb, 0x123354ec, 
    0x0b075844, 0x748cbbed, 0x8e575deb, 0xa36b13f5, 0xf767a4ad, 0x03b76f97, 0xfec9d1ae, 0x46aef183, 0xf5d540cb, 0x25c672bd, 0x96d2b9b2, 0xcc0510c6, 
    0x95053190, 0x00c16e8b, 0x9ee99664, 0x6dc09ed4, 0x1b1e344b, 0x6e916ef1, 0x9eb665da, 0x49b6c5b3, 0x835562a2, 0xa390b471, 0x9fbc6038, 0x77d7dc5e, 
    0xf48a0f5c, 0x2bec8f6b, 0x54d7221d, 0xb6bd508b, 0x54c95395, 0x80e0f1fd, 0x00daf17e, 0x3be64fea, 0x7102d6f6, 0xd1addba7, 0xa8b17053, 0xc042af94, 
    0x68b64772, 0x8aa25840, 0x143d8129, 0x47885951, 0x29d28ab8, 0x4520272e, 0x3eb93312, 0xbfbc6680, 0xc535f154, 0x2cae84df, 0xb5eeddd9, 0x0c95400d, 
    0x008b95c4, 0xc36d5fed, 0xbad6e918, 0x66ea1f8f, 0xce8e47d3, 0xc7dbfb33, 0x68d781d9, 0x4100ffe4, 0x632dd7f8, 0x5967fde1, 0x52d8b4d6, 0xfb49ebc2, 
    0x32170304, 0x5716c440, 0x01041b2e, 0x7ba65b92, 0xe66e3350, 0xe2373c68, 0xb4d922ed, 0x4f344dab, 0x269e5711, 0x1b375825, 0x86330a49, 0xedf5c90b, 
    0xc3f576cd, 0xb946b778, 0xe8580f6f, 0x5a9c7ad6, 0xa8a4f595, 0xef270aad, 0xf93160ba, 0x1901c08e, 0x8e9c8e27, 0x59b1b287, 0x6eddc2d2, 0x63e15a99, 
    0x854e2951, 0xd91ec9b1, 0x51f444a0, 0x45450045, 0x21105414, 0xf6513b9e, 0x8bd44e89, 0x39ec63e7, 0xd7553fae, 0x0a1ff5ee, 0x796ed9dc, 0x4b6f6f6e, 
    0x5849ec00, 0xf65cc0f8, 0xabf323c8, 0x0dd434de, 0xa4159bae, 0x7297f767, 0xb4ebc085, 0x3fe89f1c, 0xa269a51a, 0xe5a5fa6a, 0x73654192, 0x41acbda5, 
    0x1e90c445, 0x779b5d59, 0x9a5a1d38, 0xbe586c29, 0xc577f830, 0xd3a95d1a, 0xd1446cad, 0x8989e661, 0x6963180c, 0xc070463b, 0x4e477d72, 0x63aea86b, 
    0xc82d7ac5, 0xcbb42cd0, 0x422d4a7d, 0x5744daf6, 0x8e321389, 0x8e3b0930, 0x4f3232d0, 0x0f1d391d, 0x25b36a45, 0xca702ba4, 0x246a2cd3, 0x39b6d02b, 
    0x0969b6c7, 0x1445d192, 0xa1a2cf08, 0xf9dbafa2, 0x9604da0b, 0xb34cb376, 0x92146d4b, 0x20bb362e, 0x0d9e6324, 0xc748de58, 0x3d8a5e15, 0x407b90bf, 
    0xd4d6ce82, 0x8ab7b7b1, 0x627bdf22, 0x53e5cf05, 0xed513454, 0x13da83fc, 0x47d15051, 0x680ff2b7, 0xfd5c516a, 0xc8db1e15, 0xd0c8d75e, 0xfd34d1bd, 
    0xbb1bf246, 0xc3924cb8, 0x0076998d, 0x38a0e760, 0xb29026ad, 0x23086095, 0xdab96204, 0x41def628, 0x1d8d7ced, 0xd2b04537, 0xc4b0cf3c, 0xb87109d1, 
    0x1f07666f, 0x9feb5753, 0xe46d8fa2, 0xe8c8d71e, 0x8a7eae28, 0x7b90b73d, 0xa2a7235f, 0x3d2a4ab9, 0xafbd90af, 0xa07db791, 0xf495dae9, 0x1970b717, 
    0x5e1e8366, 0x0e066064, 0xd58a037a, 0x2a75876b, 0x042348c1, 0x29fab862, 0xf6205ffb, 0x99e646be, 0x39fa69a2, 0xb430ec97, 0x066e5c42, 0xb1c76146, 
    0xe5fa553c, 0x7ceda528, 0x1df9da83, 0x51ca155d, 0x0ff2b547, 0xd474e46b, 0x4f452f57, 0xda27f2b4, 0x9a371b79, 0x79a1862d, 0x4dccdd0d, 0xcb63b024, 
    0xc105d83b, 0xd67140cf, 0xe1ee5ab5, 0xc44aab94, 0x912b8211, 0x1e688fa2, 0xd2b0dbd4, 0x21c3f46c, 0x334f47b4, 0x9891811b, 0x553cf571, 0xa3e8e5da, 
    0xf2b407da, 0x972b8a3a, 0xe4698fa2, 0xd2c8d31e, 0x00288aa2, 0xdaa643ad, 0xef7978dc, 0x2e95a66d, 0xe377b531, 0xd80efc6e, 0xdf61cde9, 0xca9a7ddc, 
    0x63c30149, 0x6e35f50b, 0x1a36e138, 0x873a372c, 0xce2ad0d9, 0xb3053850, 0xfea24fc7, 0xe52aaaa6, 0x344426c1, 0xbd4d53ed, 0xb1acfa16, 0x6836f67e, 
    0x54c64899, 0x5a071d67, 0x18e34975, 0xd2b7b6a3, 0xc806ed6f, 0x1c7605e3, 0xc79fbc1e, 0x44bd4fae, 0x7545248e, 0x06010c39, 0xc9645693, 0x285ad859, 
    0x748a90a2, 0x01414551, 0xa299065d, 0x09daf769, 0x48e296be, 0x18c82c64, 0x3808dab0, 0xebf57f1c, 0xb8fc999c, 0xaef6bb99, 0x415b499b, 0x5157f8e0, 
    0xe5acb662, 0x00ff8cdc, 0xedb91d7f, 0x5c760557, 0x6d516f12, 0x472424fc, 0x6c12d465, 0x7095b183, 0xfcc70e37, 0x8c70aef6, 0x66b32b12, 0xd7d1bdb6, 
    0x85540efb, 0x1e14c601, 0x603a903b, 0x187121d7, 0x7d45778a, 0x3b0c0fea, 0xd29cc68e, 0x2b690e5b, 0x288a8a58, 0xe8c8ccac, 0x15048aa2, 0x0e7a68d3, 
    0x9ba17d9b, 0x4899b7fb, 0x00abb82d, 0x72851f00, 0xd62f1cd2, 0xb40d9fbb, 0x994c7851, 0x7943bcd4, 0x4ec61d75, 0x6693e06a, 0x526fd294, 0xd2191ebc, 
    0x7d771b35, 0x6547ea3e, 0x193916e0, 0x935ce9f4, 0xce65d7ae, 0xde5d7170, 0xeaa77f93, 0x695bd376, 0xf265c9b0, 0x0f80b6e5, 0xbf8beb3d, 0xf41dfbb5, 
    0x79b7fbd6, 0x697d466c, 0x87262bc9, 0x2b9aac34, 0x991545d1, 0xa228da90, 0xafba8290, 0x6d1a680f, 0xb7d78cfe, 0x9b55669e, 0x02003624, 0xbbd243b9, 
    0x69340acf, 0x551a79e1, 0x592e182d, 0x04577147, 0x9ad2d49b, 0xb656ea4d, 0xaa87eef0, 0x7cdac85b, 0xe55e96b2, 0x2a1fd7bb, 0x67ba7279, 0xfa8c583b, 
    0x6aa37dd7, 0x33ac3a76, 0x3ddb585a, 0x2996db98, 0xc4f5fe8e, 0xc78296ea, 0x36d89a51, 0xd38c8de0, 0x0e4d569a, 0x55345969, 0x332b8aa2, 0xad8a4a23, 
    0x67facff6, 0xcff6d1fa, 0xd5fa67fa, 0x567417dd, 0x2eeeadd5, 0x8ca228da, 0x36cbc198, 0x62b51547, 0xc49d4d9a, 0x35694f17, 0x22c0d0c4, 0x4ea9230b, 
    0x758c3306, 0x7fb6efac, 0x8fd63fd3, 0x3fd37fb6, 0x86959ad6, 0xf74e63a5, 0x8cc53a58, 0x8be913b6, 0x60486c69, 0x8324c3a8, 0xe8e9a39e, 0x5451b53e, 
    0x0050852a, 0xd50e0003, 0xf49fed5f, 0xeda3f5cf, 0xf5cff49f, 0xe5e0caa1, 0x5534cb7d, 0xd37fb66f, 0xb68fd63f, 0xd63fd37f, 0x86aed095, 0x7df34c51, 
    0xdf3c5abf, 0x92a4d66f, 0x0a79943b, 0xdccbafaa, 0xf8a54bd7, 0xd34fdb82, 0xc792b5e3, 0x48a5d8cd, 0x86dfdac8, 0xbce73a3f, 0x8fd66fdf, 0xa6f5db37, 
    0x528a6da5, 0xde48c7b6, 0xc503532c, 0x6d47a66d, 0x63dc469e, 0x92cf15f4, 0xfca8c949, 0x8fd66fdf, 0xa1f5db37, 0xc9c1bdc9, 0x4cd1c7bd, 0x5abf7df3, 
    0xd66fdf3c, 0x4d512291, 0xef46eddd, 0xa96b006a, 0x5d711c66, 0x48e28f16, 0x5930bdb4, 0x3e9e9fb5, 0x8361ee6c, 0x7faed89e, 0xbd1bb577, 0x866da7a9, 
    0x52c7d6a4, 0x030933de, 0x149ba625, 0x31c6f404, 0xa9b9e2f5, 0x79e57965, 0xe4ce6264, 0xa8b92796, 0xbb517bf7, 0xf72687da, 0x1df72607, 0xb5773745, 
    0x08a9bd1b, 0x90a2a428, 0xe89a8c80, 0x0d137f34, 0x21fb4e2b, 0x490213b4, 0x35078f3b, 0x364dd1cf, 0x5b931ab6, 0xdd78531d, 0x5d5b16d2, 0xf758183e, 
    0x5c013fec, 0x7149d3cc, 0x162bcd33, 0x3d663977, 0x0e4547cd, 0x2737ee4d, 0x92a2c52d, 0x1485448a, 0x5d054051, 0x0bf5d1b3, 0xb6b68cf8, 0x82032aaf, 
    0x956a1dc3, 0xde0cbe77, 0x8f283d7c, 0xb78df9ef, 0x8aaab83e, 0x8f70b1bb, 0xcbc9b133, 0x145afde1, 0x818c252f, 0x77d6d047, 0x9d5e8343, 0x59a943a7, 
    0x9cda4e5a, 0x6c6a00ff, 0x2783a87c, 0x65f7e615, 0xe3c5e48d, 0x4a72b131, 0x293dd99e, 0xe01c36ca, 0x144543a2, 0x14851954, 0x5e054051, 0x1d75d1b1, 
    0xa52d2346, 0xb61595b1, 0x7f0e1892, 0xbc6b5413, 0xa16340f0, 0xbce1104e, 0x05ae8fd3, 0x8bdd5554, 0x999d7984, 0xade1cbcb, 0xf62e1462, 0x0cd7812f, 
    0xcb1af9a7, 0xbd060723, 0xd4b64b3b, 0x6de76dac, 0x12dee846, 0x9fa38832, 0x5f9cd7cc, 0xb4f33717, 0xa49d9891, 0x877f2866, 0x28a73827, 0x8a8273d8, 
    0x2a8aa220, 0x288ac20c, 0xd8af02a0, 0xa78e9a68, 0x6d674b0b, 0xd2b6a2e6, 0xf1e7a877, 0xbfbb4235, 0x5b748202, 0xcc04a780, 0x22e07f70, 0xc5ee2aaa, 
    0xcc4e2ac2, 0xbef0a5e6, 0x7b170ab5, 0xb5ebc016, 0x0de48fd5, 0xc1419064, 0x69a7d7e0, 0x849d9a56, 0xe1fdb533, 0x116524bd, 0xfac48f7a, 0x06ea9cd7, 
    0xb4dca843, 0xa55d18b1, 0xe19f3166, 0xca29cec9, 0x149c4336, 0x45d12b52, 0x45610615, 0x57015014, 0x473d34ec, 0xb3a58554, 0x5b51f3b6, 0x70d53b69, 
    0x54ef137f, 0x20f0bc2b, 0x00b94727, 0x3fce99e0, 0x155591ef, 0x15e16277, 0x52736627, 0x855b5bf8, 0x6083b50b, 0xc7eada75, 0x08b206f2, 0x118ce020, 
    0xd9a49f5e, 0x537c7aea, 0xbde9f5b5, 0x3a880224, 0x5a9f7b8c, 0xc8449df3, 0x96962b75, 0xacb40b23, 0x39fc33c6, 0x4639c539, 0x8a8273c8, 0x288a5ab9, 
    0x280a33a8, 0x5d0380a2, 0x3f1d84d7, 0x33961fe1, 0xecec4432, 0xb763b314, 0x4369e15a, 0x400c1830, 0x5646d5fa, 0xe5322a77, 0x1ffd3b77, 0x69438b4f, 
    0x88b52e2e, 0xc6b85de5, 0xd6ef01ec, 0xee6addb8, 0x7b5aed2b, 0x66234688, 0x47c678f9, 0x4f2c52ad, 0x49e34f52, 0xc3eaca4d, 0x82acee94, 0x20a8288a, 
    0x008aa228, 0x6cf0b82b, 0x3c8726d1, 0x33713c6f, 0x80b9714a, 0xa5872bec, 0x5135f5c9, 0x322a7776, 0xdd3b77e5, 0xd0b44d1b, 0x7de69265, 0x6e57396a, 
    0x7f00ee36, 0x75e49a33, 0x0db5d8cb, 0x41987b5e, 0xe4c2b111, 0x660c2063, 0xf49e64a8, 0xacaedc94, 0xc8ea4e39, 0x828aa228, 0xa0288a02, 0x057fbb02, 
    0x3d7a044f, 0x1ccf72c4, 0x6f1cd34c, 0x57843f70, 0x5d544511, 0xb98cca9d, 0x46f3ce5d, 0x09342cd3, 0x6e4dea9e, 0x6d5c4139, 0x597e140c, 0x5e53ae39, 
    0xd6518bbe, 0x1184b927, 0x9114101b, 0x9a31808c, 0x959ba2ce, 0x2be590d5, 0x8aa220ab, 0x280a082a, 0xed0a80a2, 0x6f7113fc, 0x93729116, 0x6919475c, 
    0x07b8038e, 0x28e28aee, 0xb9b38baa, 0xb92b9751, 0x66da68de, 0xf74ea09f, 0xca716b52, 0x10b4910a, 0x3919f1a3, 0xbf5f53ae, 0x67d6528b, 0x1b1184ba, 
    0x82911410, 0x67cd1840, 0xd5954351, 0xacaedc90, 0x15455190, 0xd9ff1f24, 
};
};
} // namespace BluePrint
