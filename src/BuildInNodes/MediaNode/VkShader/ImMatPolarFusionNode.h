#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Polar_vulkan.h>

namespace BluePrint
{
struct PolarFusionNode final : Node
{
    BP_NODE_WITH_NAME(PolarFusionNode, "Polar Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    PolarFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Polar Transform"; }

    ~PolarFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Polar_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_segments);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        int _segments = m_segments;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderInt("Segments##Polar", &_segments, 3, 20, "%d", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_segments##Polar")) { _segments = 5; changed = true; }
        ImGui::PopItemWidth();
        if (_segments != m_segments) { m_segments = _segments; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("segments"))
        {
            auto& val = value["segments"];
            if (val.is_number()) 
                m_segments = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["segments"] = imgui_json::number(m_segments);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf666"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    int m_segments      {5};
    ImGui::Polar_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 5172;
    const unsigned int logo_data[5172/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0x280aa08a, 0x280a80a2, 0xccad7aaa, 0x6d2cd6d6, 0x42e69e95, 0x77118123, 0x001c3b33, 0x49ed7307, 0x72812bbb, 0x1d74e68a, 0x55935163, 0xb6501d6b, 
    0xbaaa4cf6, 0x6c472a04, 0x2a7f3b00, 0x4a46a9e9, 0x8a02e84a, 0xa200aa28, 0xa200288a, 0x2b703280, 0xdef04b4b, 0x2219afa5, 0xaab26fb4, 0x2473cdaf, 
    0x3372aa64, 0x0358308e, 0xe38ca490, 0x4b72a9a8, 0xaa683370, 0x886f1a96, 0xc89a5c13, 0xb6b5faac, 0xdbdcf1cd, 0xf30bb0da, 0x70610310, 0x32ce40ac, 
    0xeb6aea71, 0x8eec46a3, 0x194e59a5, 0xe9836058, 0x5753134a, 0x288a3640, 0x8aa200ab, 0xa4a20028, 0x08606458, 0x75bd0f5e, 0xcdf00cde, 0x716da38e, 
    0x65c6a87b, 0x2d16db08, 0x25c001c4, 0x713d0fb2, 0xca19fef9, 0x265117ac, 0x451b879e, 0x878f5a75, 0x1797b5ec, 0x628a171e, 0xb526e1d1, 0x72800272, 
    0xd7638643, 0xdb93118c, 0x6e9e8381, 0xa4ed497b, 0x6b533992, 0x0258c546, 0xf4e0080e, 0x92b01aa5, 0x86e8c2bd, 0x46ad288a, 0x00455114, 0xc2f8c815, 
    0xdef25ef5, 0x7f64e7c8, 0xfff7983c, 0x3a7feb00, 0x1d3aabeb, 0x67b50812, 0xc9b28cd4, 0xc686e733, 0xf4387d06, 0xc969a2e2, 0x9e1c0d59, 0x4d5baca3, 
    0xd9dedaa9, 0x004d2c47, 0x32008301, 0xf4a1e301, 0x19eaaec8, 0x58527852, 0x30d451ce, 0x1ad4a03e, 0xa70e9f8e, 0x2ca76d68, 0x5e419014, 0x754a8fa0, 
    0xd9d8a28d, 0x3b926cc7, 0xbe0063ac, 0x94c28f33, 0xc0dde262, 0x561445b1, 0xa2280a82, 0x6faf0a80, 0x21fce8e3, 0x69e6c7af, 0x9108ea70, 0x8f08c131, 
    0xe506b61b, 0xcb87a572, 0x778063b8, 0x87ce8a55, 0x592d8244, 0xb22c23f5, 0xb1e1f94c, 0x3d4e9f81, 0x5c9ca838, 0x9bd19095, 0x5a1d2fe3, 0xb4568bf8, 
    0xb8b4d3bd, 0x6b87f5b4, 0xb718a248, 0xf37902bb, 0x0ec68602, 0x0a1ce736, 0x279521e8, 0xe58c2585, 0xea03431d, 0xe9a8410d, 0x8676eaf0, 0x49c172da, 
    0x08ea1504, 0xda58a7f4, 0x769c8d2d, 0xc6ba23c9, 0x38e30b30, 0x07612afc, 0x58806e17, 0x512b8aa2, 0x40511405, 0x8254ac0a, 0xbfae080e, 0xf033bec3, 
    0x39f486f7, 0x5835b67f, 0xc0e79121, 0x39e46588, 0x0545c951, 0x8cf3e080, 0xd0591f57, 0xab4590e8, 0x9665a43e, 0x363c9f49, 0xc7e93330, 0x5a8d15a7, 
    0x6b0bf67c, 0x8a6fbb73, 0x87f7353a, 0xc9ec4ff5, 0x98ebf4ec, 0x8b78a4ed, 0x46d905b8, 0x093b8576, 0x67043862, 0x3c18c79e, 0xa88b739c, 0xf136e0d6, 
    0xd71b0c20, 0xd3515f35, 0x0dedd4e1, 0x9282e5b4, 0x11d42b08, 0xb4b14ee9, 0xed381b5b, 0x8c754792, 0x71c61760, 0x9b4e51f8, 0x14c50283, 0x51005b51, 
    0x3c011445, 0x205c4812, 0x85fd1e39, 0xa782177a, 0xf7c3db8a, 0x91c813b7, 0xee8c14c5, 0x5455c1ee, 0x7a922420, 0x829b570c, 0x3e38c841, 0x672d55d5, 
    0x35490617, 0xdea2c91b, 0x25795b64, 0x636c2426, 0x00995e70, 0x5c439f91, 0xf379a1b3, 0x2b6d5422, 0xefe1b59e, 0x8c6bdb10, 0x7ffaf6f6, 0xf778e2d9, 
    0x543eb079, 0xd703a88f, 0x41bce08a, 0xad9b266d, 0xf96e595d, 0x1c4cfe11, 0x24234fe5, 0xdfe7c1f7, 0x57d79c35, 0xb6f666eb, 0x92eda59a, 0xd6266e33, 
    0xd7e78c76, 0xc450ed83, 0x91fe0926, 0x9fdc3d77, 0xefc335c5, 0xf49efa76, 0x5e9647e1, 0x71b7a3f6, 0x744551f4, 0x8aa2288c, 0xb5a22800, 0x6a0e9fb4, 
    0x5cbbbd1a, 0x6399db5a, 0x984fda56, 0x6ae2cfab, 0x76053527, 0xd164ec26, 0x85975a5b, 0xd1364db5, 0x29b5e7ee, 0xf9b8110a, 0x8193718a, 0x5891fad0, 
    0x6a6a42b4, 0x51b813e8, 0x0a631545, 0xcc08a528, 0xa09f1432, 0x805bdaa4, 0x81930194, 0x4e48114e, 0x5be53736, 0xf5875f7a, 0x9276fb0b, 0x55cddbca, 
    0xd4dbac6d, 0x3d728f73, 0x94b51a6b, 0x5cb29a16, 0x4684b1ad, 0xd2150d0e, 0x5a4bf8dc, 0x833db310, 0x2b3fa37c, 0x1cc81fab, 0x91623ad7, 0xc8360649, 
    0x3a45f1e0, 0x015d6bca, 0x32e8fb4a, 0xa38c528a, 0x8afa4825, 0xf634d94a, 0x2ca72828, 0x7500ff6e, 0x9e7da749, 0xa2feee5f, 0x460bcea5, 0xea8874c5, 
    0x1977b754, 0xa5d90ee0, 0x372e774b, 0xd6fc0e8c, 0xa88786d5, 0xb6b490ea, 0x2b6ade76, 0xae7a276d, 0xeb7de20f, 0xda22b69a, 0x3e255243, 0xdd1e3191, 
    0x3b8267d0, 0xa2aea2e2, 0x706b0b5f, 0x6cb076a1, 0x585dbb0e, 0x3dd740fe, 0x90abb325, 0xa7f2c7ab, 0x277d1147, 0xed4f46a0, 0x7d525110, 0xfeee5f9e, 
    0xbad19aa2, 0xba22e57d, 0x4cf4e014, 0x8a36a6bb, 0x79be5a9c, 0x29b50760, 0xfd87e3b4, 0xa488372b, 0x1ecf93ba, 0x88a50ae4, 0x9c9a6400, 0xfecb715a, 
    0x08502495, 0x7b7276db, 0x1a965a71, 0x42aaa31e, 0x79dbd9d2, 0x9db4ada8, 0x893fb8ea, 0xb86aaef7, 0x646a3799, 0x44bb6d4a, 0x709c36c7, 0x40a500ff, 
    0x469054ca, 0x5f9eae08, 0xa1706b0b, 0x0e6cb076, 0xfe585dbb, 0xd61cd640, 0xda39dffb, 0x298a0747, 0xaa9d6462, 0x3f6d0a6c, 0x5845a778, 0xff729c16, 
    0xb521a500, 0x8fc0f07c, 0x8a58e97a, 0xf17ca94f, 0x425241ee, 0x301fabd1, 0x9ce71e64, 0xb2567454, 0x29b3328f, 0x8217abab, 0x5021c344, 0xffae00fd, 
    0x9d80c000, 0x8203e41e, 0x00ff3867, 0xed7945be, 0x411e51b0, 0xafaef5e4, 0xd226bec3, 0x68225df4, 0x9a66e66e, 0x51a45859, 0x05206621, 0x5e873d07, 
    0x190767e4, 0xaf9c79c5, 0x6cad38da, 0x75260d65, 0xa79e4d5a, 0x5f3bc5a7, 0x40d29b5e, 0xc7a88328, 0x35aff5b9, 0xbf4423d4, 0x922df3b8, 0xf91899d8, 
    0x93d94045, 0xe14f579c, 0xcd128d4b, 0x68fbf3de, 0x60da6dab, 0x9347449d, 0xf11892e9, 0xcfb59ed8, 0x0dfaa278, 0xea9e554f, 0x1390102e, 0x0100163c, 
    0x77e5539c, 0x2d157a51, 0xcd3c4652, 0xc6f2301b, 0xcd38ee00, 0xe9154547, 0xc8aa3c46, 0x2aacacb4, 0x6724309c, 0x495da507, 0x1f1cfa91, 0xc8695443, 
    0xef28dca5, 0x19a55659, 0x136bb7ab, 0x7eb9a728, 0x0202cfbb, 0x0e907b74, 0xfee39c09, 0x28c115f9, 0xc30ea0da, 0x36f8da15, 0x46d7cef6, 0xb8ab5bb8, 
    0x404ef72d, 0x9f0b64f3, 0xf39a7a94, 0x195afc29, 0xbd8df8d2, 0xd353cf26, 0xafaf9de2, 0x1420e94d, 0xdc63d441, 0xea9cd7fa, 0x5ca94326, 0x5d18b1b4, 
    0x9f3166a5, 0x2bcec9e1, 0x74acd0b0, 0x2f5916bd, 0xc205bf06, 0x3a422a6d, 0xc770fc85, 0x106fb926, 0x6aaac55e, 0x821017f7, 0x922a7c22, 0x19034830, 
    0x32c99eaa, 0xe62a7caa, 0xd489cc63, 0xa40afae4, 0x18482cc7, 0xea4ae9c9, 0xd49eca51, 0xd268f4da, 0xbdd3158c, 0xd8528cca, 0xabea04b1, 0x43c7b8b1, 
    0x19060356, 0x67a51f04, 0x4ba8f6d4, 0xfa38ec17, 0x118a18d6, 0x26f6ce49, 0xab965b70, 0x2720f0bc, 0xe000b947, 0xef3fce99, 0x761d5c91, 0xb7b809fe, 
    0x49b9488b, 0xb48c23ae, 0x03dc01c7, 0xd37145f7, 0xf1a588f8, 0x9e4d1a1b, 0x3bc5a7a7, 0xd29b5e5f, 0xa8832840, 0xaff5b9c7, 0x874cd439, 0x6269b952, 
    0xcc4abb30, 0x93c33f63, 0xa367579c, 0x817e9a69, 0xad49dd3b, 0x462a28c7, 0xc48f42d0, 0x4db9e664, 0x4b2dfe7e, 0x10ea9e59, 0x52406c44, 0x63000946, 
    0x2ab2e734, 0xd28cc2a7, 0x034946c1, 0x9de755eb, 0x392f7659, 0x902e69ea, 0xf1d80f86, 0xaf2ba8f4, 0x292d420f, 0x1684e3de, 0x2499e4e5, 0x34f479e8, 
    0xb0abcefa, 0x31602cab, 0x9555fec9, 0xaea6117a, 0x89821399, 0x049e7725, 0x20f7e804, 0xc739131c, 0x832bf2fd, 0x37c1dfae, 0x1769f116, 0x71c43529, 
    0x3be09896, 0xace87e80, 0x4b41fc29, 0x9b3436e2, 0x8a4f4f3d, 0x37bdbe76, 0x075180a4, 0xeb738f51, 0x99a8735e, 0xd272a50e, 0x957661c4, 0x877fc698, 
    0xcfae3827, 0xfd34d346, 0x93ba7702, 0x54508e5b, 0x1f85a08d, 0x72cdc988, 0x5afcfd9a, 0xd43db396, 0x80d88820, 0x00128ca4, 0x64cf69c6, 0x19854f55, 
    0x2399c7d4, 0x14f479ea, 0x64342b93, 0x75fec129, 0x42a1b64a, 0x26db1535, 0x290a5210, 0x00ff5bde, 0x3c2abf71, 0x7ee3feb7, 0x47f3e855, 0xdad0bdb9, 
    0x65b4d52a, 0x27186641, 0xb99e9a81, 0x95518a67, 0xa99bb992, 0x8a3a6367, 0x632ea8d1, 0xc928032c, 0x0c511c1c, 0xd5ac9452, 0xb1bb5481, 0x96778a56, 
    0x6fdc00ff, 0xff2d8fca, 0x95dfb800, 0xb9477375, 0x01dad0a5, 0x3ea9c8c1, 0x7ff72fcf, 0xe52d4a51, 0xe3c7ddcf, 0xff69ed53, 0x32173200, 0x25da27ee, 
    0x29e8f7fe, 0x921c8b85, 0x46afd64f, 0xfc055a9e, 0xf5c7d5e9, 0xb1fb4598, 0x6c89f633, 0x4ec5f08c, 0x4fe92341, 0xdebf44fb, 0xa65d05fd, 0x15629ec8, 
    0xccfaa8fc, 0x87e8fd24, 0x50744fb4, 0x8a262727, 0x9fcbdb94, 0x93c69fbb, 0x00fff2ec, 0xd915f577, 0x00ff69ed, 0x5de63432, 0x6758eac8, 0xb9d2c6f2, 
    0xfba4e604, 0xa57ffb27, 0x0401680b, 0x2ba647b6, 0x28a3d619, 0x97ccbfd9, 0xa6a83538, 0x49857fed, 0xb450f1fa, 0xd8fb31f2, 0xda551cf6, 0xa915922b, 
    0x267e68c7, 0x2974496a, 0xfb29f22c, 0xd43cf6d9, 0x897fedc2, 0x5373fa48, 0x53eb44d1, 0x41fcf096, 0x39853ec9, 0xd006f3a7, 0xa2e600b8, 0x09682dab, 
    0xa6073624, 0xfb27fb28, 0xc275a57f, 0xc9c618b5, 0x708a66fe, 0xebb0424b, 0x589657eb, 0x0fb803d8, 0x957da6a9, 0x1c9d5a3d, 0x19c81929, 0xafb0a63e, 
    0xd7459556, 0xc8282742, 0x1f359a56, 0x35a71f78, 0xe131dd03, 0x5acd3d06, 0xe984b0a2, 0xe6df78c7, 0x2a746942, 0x1c0ed3a5, 0xeb54dc67, 0xf03e6c34, 
    0xf4295e1f, 0x96d33951, 0x1bccb7d1, 0x96c6a04f, 0x07ee0435, 0xeb896ae8, 0x856457e9, 0x07233924, 0xca7e53d4, 0xd05bad9e, 0xeb9a4aab, 0x629470a9, 
    0x4b57454d, 0x1ed7d1a1, 0x3457ace2, 0xd20ecae9, 0x6e2d6e46, 0x4ff8d615, 0x2d75d345, 0x6def7936, 0x4a49d7bc, 0x0686bd83, 0x7245ec01, 0x14f8dd55, 
    0x38b946e3, 0x7f3c26ce, 0x2b2845c0, 0xe5a4e9b2, 0x4a3fcda8, 0x92b8bef0, 0xb1bc95ad, 0x2ec978b4, 0xeaf48cc0, 0x6d5ced48, 0xf2da02dc, 0x84db707b, 
    0xf56e3252, 0xbb6bc6c1, 0x75e875d0, 0x8fb46589, 0x50aa364c, 0x1f37f192, 0xb8060398, 0x3dc27afd, 0xda9e5837, 0x418a2c27, 0xc8488e1b, 0x4a5335cf, 
    0x2e4d45d7, 0x459dd154, 0x87ee5d15, 0x9afb5c44, 0xbb29a750, 0xb7281945, 0x8e8a62b1, 0x074e9639, 0xa9a4d207, 0x985d5c94, 0x5de1d634, 0x5df4846f, 
    0x67d35237, 0xcddbf69e, 0x3ba89474, 0x1e6060d8, 0x5d2557c4, 0x344e81df, 0xe28c936b, 0x04fcc763, 0x2ebb8253, 0x8c5a4e9a, 0x0baff4d3, 0xd92a89eb, 
    0x471bcb5b, 0x08ec928c, 0x8ea44ecf, 0xc0ddc6d5, 0xb727af2d, 0x2345b80d, 0x1c5cef26, 0x07bdbb66, 0x9658875e, 0xc3f4485b, 0x2f09a56a, 0x80f97113, 
    0xd78f6b30, 0x75d323ac, 0x72a2ed89, 0xb811a4c8, 0xf38c8ce4, 0x74ad3455, 0x4de5d254, 0x5151d419, 0xc1c732c9, 0x4654fae4, 0xc9c84e2e, 0xa224f626, 
    0x04305891, 0x534b831c, 0xdfba82b0, 0x6ebae809, 0x3dcfa6a5, 0xe99ab7ed, 0xb0775029, 0x883dc0c0, 0xbfbb4aae, 0xd7689c02, 0xc7c41927, 0xab08f88f, 
    0xa634bb82, 0x34a39693, 0xfac22bfd, 0x56b64ae2, 0xe3d1c6f2, 0x3302bb24, 0xb523a9d3, 0x0b70b771, 0xc3edc96b, 0xc948116e, 0x1907d7bb, 0xd741efae, 
    0x9625d6a1, 0xda303dd2, 0xc44b42a9, 0x0c607edc, 0xebf5e31a, 0x62ddf408, 0xb29c687b, 0x396e0429, 0xd53c2323, 0x155d2b4d, 0x4653b934, 0x33521475, 
    0x80930405, 0x45cc2d2b, 0x00288aa2, 0x7ac2b7ae, 0x69a99b2e, 0x6d7bcfb3, 0x544abae6, 0x3030ec1d, 0x922b620f, 0xa7c0efae, 0xc6c9351a, 0xfee33171, 
    0xaee02a02, 0xe5a429cd, 0x4a3fcda8, 0x92b8bef0, 0xb1bc95ad, 0x2ec978b4, 0xeaf48cc0, 0x6d5ced48, 0xf2da02dc, 0x84db707b, 0xf56e3252, 0xbb6bc6c1, 
    0x75e875d0, 0x8fb46589, 0x50aa364c, 0x1f37f192, 0xb8060398, 0x3dc27afd, 0xda9e5837, 0x418a2c27, 0xc8488e1b, 0x4a5335cf, 0x2e4d45d7, 0x459dd154, 
    0x25465614, 0xbef7783b, 0x7215c848, 0xc4b244ab, 0x9ff3ee4f, 0x71065671, 0x6be803c8, 0xa7f912ab, 0x5169e87b, 0x5a5b8bdd, 0x346e892f, 0x1882675b, 
    0xef3b9023, 0x40cfc925, 0x9c62a53f, 0xef8383e3, 0x210fbc50, 0x31fca5f9, 0xea2bc158, 0x9d5d4cec, 0x78d275ee, 0x216450f3, 0x3d46a02d, 0xd68f931b, 
    0x96e7b9b9, 0x679e77e6, 0xb39c232f, 0xa4aae61e, 0x65f9190f, 0x0c5331fc, 0xed9393e3, 0x95744b45, 0x5bdf26c7, 0x8fb85385, 0x030ce463, 0xc071ce56, 
    0xbc6aea07, 0x7ea42cab, 0x15f718ef, 0xcef219b6, 0xdd74d0f7, 0xf678fb98, 0xaad5e3a6, 0x03c0006a, 0x4e5851f9, 0x6472724e, 0xad707737, 0xb7c417ad, 
    0xc1b32d1a, 0x1dc8110c, 0xe7e492f7, 0xb1d21fa0, 0x7eaeac69, 0x29fc85eb, 0x11ec7d47, 0xaa0e3d6d, 0x0c6a1e4f, 0x08b42584, 0x7172a3c7, 0x3c37d7fa, 
    0xf3cedcf2, 0x73e4e5cc, 0xd4dc6396, 0xf33eae2a, 0xd429fc86, 0x1cf7be49, 0x2aecdea4, 0x26f7881b, 0x6a6ad5e1, 0xf923c808, 0x249c84d3, 0x9d9d84a4, 
    0x810845c4, 0x285a6a47, 0x76b76da9, 0x17adad20, 0x2d1ab7c4, 0x110cc1b3, 0x92f71dc8, 0x1fa0e7e4, 0xa168b1d2, 0x6d1ab636, 0x4fa28e6a, 0x840c6a1e, 
    0xc708b425, 0xfa7172a3, 0xf23c37d7, 0xccf3cedc, 0x9673e4e5, 0x74d4dc63, 0xe3dee450, 0xa4706f72, 0x4f850e75, 0x4d285a7a, 0x514874a7, 0x2b801445, 
    0x2df1456b, 0xf06c8bc6, 0x07720443, 0x39b9e47d, 0xacf407e8, 0xd6a6295a, 0x51ad4dc3, 0xcde349d4, 0xb6849041, 0x6ef41881, 0xe65a3f4e, 0x995b9ee7, 
    0xbc9c79de, 0x7bcc728e, 0x1c8a8e9a, 0x4d6edc9b, 0x455114ee, 0x288a4222, 0xd8af02a0, 0xa98e7a68, 0x6d674b0b, 0xd2b6a2e6, 0xfee0aa77, 0x57a8de27, 
    0x4e40e079, 0xc101728f, 0xdf7f9c33, 0xee2aaa22, 0x4e2ac2c5, 0xf0a5e6cc, 0x170ab7b6, 0xebc0066b, 0xe48fd5b5, 0x4110640d, 0xbd2218c1, 0xd4b3493f, 
    0x6ba7f8f4, 0x487ad3eb, 0x18751005, 0xe7b53ef7, 0xea90893a, 0x462c2d57, 0x8c596917, 0x7372f867, 0x908d728a, 0x721505e7, 0x505114b5, 0x45511466, 
    0xc37e1500, 0x4875d443, 0x6f3b5b5a, 0x93b61535, 0xf10757bd, 0xbb42f53e, 0x740202cf, 0x090e907b, 0xf9fee39c, 0x76575115, 0x7652112e, 0x852f3567, 
    0xbb50b8b5, 0x5d073658, 0x207facae, 0x0e82206b, 0xe915c108, 0xa79e4dfa, 0x5f3bc5a7, 0x40d29b5e, 0xc7a88328, 0x39aff5b9, 0x52874cd4, 0x306269b9, 
    0x63cc4abb, 0x9c93c33f, 0x876c9453, 0x95ab2838, 0x838aa2a8, 0x288aa230, 0x1af6ab00, 0x42aaa31e, 0x79dbd9d2, 0x9db4ada8, 0x893fb8ea, 0xde15aaf7, 
    0xa3131078, 0x4c7080dc, 0xc8f71fe7, 0xb1bb8aaa, 0xb3938a70, 0x2d7ca939, 0xda85c2ad, 0xed3ab0c1, 0x03f96375, 0x70100459, 0x4faf0846, 0x3df56cd2, 
    0xfada293e, 0x0192def4, 0x3d461d44, 0xce79adcf, 0x953a64a2, 0x85114bcb, 0x196356da, 0xe29c1cfe, 0x3964a39c, 0xad5c45c1, 0x19541445, 0x40511485, 
    0xd0b05f05, 0x16521df5, 0xcddbce96, 0xefa46d45, 0x4ffcc155, 0xf3ae50bd, 0x1e9d80c0, 0x678203e4, 0xbe00ff38, 0xdd555445, 0x9d54848b, 0xe14bcd99, 
    0x2e146e6d, 0xd7810dd6, 0xc81fab6b, 0x8320c81a, 0x7a453082, 0xa967937e, 0xd74ef1e9, 0x90f4a6d7, 0x31ea200a, 0xce6b7dee, 0xd4211375, 0x8c585aae, 
    0x18b3d22e, 0xe7e4f0cf, 0x211be514, 0xe52a0ace, 0xa0a2286a, 0x8aa228cc, 0xf0b72b00, 0x5abcc54d, 0x714dca45, 0x38a6651c, 0xba1fe00e, 0xaaa2882b, 
    0x46e5ce2e, 0x79e7ae5c, 0x7e9a69a3, 0x49dd3b81, 0x2a28c7ad, 0x8f42d046, 0xb9e664c4, 0x2dfe7e4d, 0xea9e594b, 0x406c4410, 0x00094652, 0x459d3563, 
    0x4356570e, 0x41b2ba72, 0x90541445, 0x00455114, 0x26f8db15, 0x222ddee2, 0x8eb826e5, 0x071cd332, 0x15dd0f70, 0x175551c4, 0x2ea37267, 0xd1bc7357, 
    0x403fcdb4, 0xd6a4ee9d, 0x231594e3, 0xe2472168, 0xa65c7332, 0xa5167fbf, 0x0875cfac, 0x29203622, 0x31800423, 0x87a2ce9a, 0xb921ab2b, 0xa220595d, 
    0x0a482a8a, 0x0a80a228, 0x7113fced, 0x7291166f, 0x19475c93, 0xb8038e69, 0xe28aee07, 0xb38baa28, 0x2b9751b9, 0xda68deb9, 0x4ea09f66, 0x716b52f7, 
    0xb4910aca, 0x19f1a310, 0x5f53ae39, 0xd6528bbf, 0x1184ba67, 0x9114101b, 0xcd184082, 0x95435167, 0xaedc90d5, 0x455190ac, 0x14052415, 0x76054051, 
    0xb7b809fe, 0x49b9488b, 0xb48c23ae, 0x03dc01c7, 0x147145f7, 0xdcd94555, 0xdc95cba8, 0x336d34ef, 0x7b27d04f, 0xe5b835a9, 0x08da4805, 0x9c8cf851, 
    0xdfaf29d7, 0x336ba9c5, 0x8d0842dd, 0xc1480a88, 0xb3660c20, 0xeacaa1a8, 0x56576ec8, 0x8aa22848, 0xd9ff0f92, 
};
};
} // namespace BluePrint
