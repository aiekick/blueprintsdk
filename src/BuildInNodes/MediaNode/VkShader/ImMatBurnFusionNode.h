#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Burn_vulkan.h>

namespace BluePrint
{
struct BurnFusionNode final : Node
{
    BP_NODE_WITH_NAME(BurnFusionNode, "Burn Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Color")
    BurnFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Burn Transform"; }

    ~BurnFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Burn_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_backColor);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        ImPixel _backColor = m_backColor;
        if (ImGui::ColorEdit4("##BackColor##Burn", (float*)&_backColor, ImGuiColorEditFlags_NoLabel | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_AlphaBar))
        {
            m_backColor = _backColor; changed = true;
        } ImGui::SameLine(); ImGui::TextUnformatted("Burn Color");
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_fromcolor##CrazyParametric")) { m_backColor = {0.9f, 0.4f, 0.2f, 1.0f}; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("backColor"))
        {
            auto& val = value["backColor"];
            if (val.is_vec4())
            {
                ImVec4 val4 = val.get<imgui_json::vec4>();
                m_backColor = ImPixel(val4.x, val4.y, val4.z, val4.w);
            }
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["backColor"] = imgui_json::vec4(ImVec4(m_backColor.r, m_backColor.g, m_backColor.b, m_backColor.a));
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf1fd"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    ImPixel m_backColor {0.9f, 0.4f, 0.2f, 1.0f};
    ImGui::Burn_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 4260;
    const unsigned int logo_data[4260/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0x512fa08a, 0xb0811545, 0xd5544551, 0xa5c33eaf, 0x9338384d, 0x00ffa1ee, 0xbba1f468, 0x8a6e812b, 0xac3fbce7, 0x06eadc5d, 0x79cbf9d6, 0x2a8fee91, 
    0xeeb0df17, 0x4774953f, 0x92518a83, 0x9418ba92, 0x17314551, 0xc48aa268, 0xa0a228d4, 0xcf566ed4, 0xe27c9a4b, 0xdc87ba4f, 0x3d19f4d0, 0x6aa08915, 
    0x1bdfddb3, 0x7a27c66b, 0x2f54426e, 0x5b516fbf, 0xf4886184, 0x2525a334, 0x8a121674, 0xd522a628, 0x1a595114, 0x2f531405, 0x2e5d4b26, 0xc1facf69, 
    0x34f7a1f2, 0x8a3e063d, 0x1775d0cb, 0xd736bdbc, 0xb9e99d44, 0xfb7d0109, 0x61d58a7a, 0x1cfacab5, 0xbaba8b52, 0x8aa28406, 0xa8e68829, 0x8ef48aa2, 
    0xc647ae00, 0x96f7aa17, 0x233b47f6, 0xbfc7e4f9, 0xf95b00ff, 0xd0595dd7, 0xab4590e8, 0x9665a43e, 0x363c9f49, 0xc7e93330, 0x4e1315a7, 0xe468c84a, 
    0xda621df5, 0xf6d64e6d, 0x686239ca, 0x01180c00, 0x0f1d0f90, 0x507745a6, 0x92c293ca, 0xa18e72c6, 0xa006f581, 0x75f874d4, 0x396d433b, 0x0a82a460, 
    0x537a04f5, 0xc6166dac, 0x91643bce, 0x051863dd, 0x147e9cf1, 0xee1617a3, 0xa2288a05, 0x8a7a11b4, 0x820dac28, 0xde148fb9, 0x66c35c2b, 0x9e3f5272, 
    0x00ff7b4c, 0x749dbff5, 0x260d46f5, 0xd4473518, 0x2b49920c, 0x032386e7, 0x547a9c3e, 0x86ac36cd, 0x58fb628e, 0xb6529fb6, 0x488ab2bc, 0x0d06208c, 
    0x743a9081, 0xd1aec8f6, 0x59634924, 0x50473923, 0x871afbc0, 0x528fb450, 0x64f336b4, 0xbd822029, 0xda591441, 0x5baa95ad, 0x9cea8eac, 0x29cef802, 
    0x70372d46, 0x4551f464, 0x51b48b58, 0x156a6245, 0xf18a78cf, 0x0ead785a, 0xbe77464a, 0xfa00ff3d, 0x1abacedf, 0xc5a66da7, 0xfe3da96f, 0x275792f7, 
    0x7d06c686, 0x92a9f438, 0x1c0d596d, 0x6db3def5, 0xdddba871, 0x4624c359, 0x81030310, 0xf6743a90, 0xc9d0bae2, 0x72c6ab22, 0xec03038e, 0x14423d6a, 
    0xbc4d6dd4, 0x439000a3, 0xb669502f, 0xd9d2c296, 0x09675720, 0x94d62fc0, 0x64834d53, 0x584551d4, 0x4551548b, 0x8d156864, 0x49abddad, 0x44c9a91d, 
    0xff1edf3b, 0xe76ffd00, 0xd65a355b, 0xf75b3bca, 0x48f2dcbd, 0x18319ce4, 0x26994a1f, 0x89d190d5, 0x5ddbac71, 0x5a5c106a, 0x20262441, 0x20036703, 
    0x5dede974, 0x346c142b, 0x0618b96d, 0x5fd2d807, 0x4c2dd485, 0x90a08d12, 0x6a502f43, 0xb505582b, 0x9c1dc2ba, 0x68dd422f, 0xb28d698a, 0xa8a2285a, 
    0x0ff68f92, 0x00ff3cfd, 0x7afd9fe3, 0xe97fb03f, 0x1c00ffe7, 0xd6eb00ff, 0xbdfd14bd, 0x50f6e24e, 0x607f64ec, 0xcfd300ff, 0x00ff39fe, 0x07fba3d7, 
    0xf17f9efe, 0x6bbdfecf, 0x8530b6d3, 0x83c8c7e6, 0x8fd2732c, 0x7bb8536f, 0xbf317628, 0xe7e97fb0, 0xff1c00ff, 0xfdd1eb00, 0x4f00ff83, 0xffe7f83f, 
    0x2db55e00, 0xc2b24ba5, 0xc9a0bc03, 0x8f3ec518, 0x7bb8536f, 0x3f327618, 0xe7e97fb0, 0xff1c00ff, 0xfdd1eb00, 0x4f00ff83, 0xffe7f83f, 0xe8b55e00, 
    0xeed4dba3, 0x8a1dca1e, 0xf4dfd87f, 0x8e00fff1, 0xfee8f57f, 0xa700ffc6, 0xff73fc8f, 0x745aaf00, 0x7dda5e56, 0xec71f6cb, 0x7f637f66, 0x39fec7d3, 
    0xa3d700ff, 0x9efe1bfb, 0xfecff13f, 0xc4d369bd, 0x8079614e, 0x1cef13f9, 0x4fdba3f4, 0xf6387bb8, 0xbfb17f32, 0x00ffe3e9, 0xeb00ff1c, 0xff8dfdd1, 
    0xf81f4f00, 0x5e00ffe7, 0xdacfedb4, 0x3e3f79b7, 0x140592d1, 0x0ff7697b, 0x67c61e65, 0x3cfd37f6, 0xfd9fe37f, 0xbfb13f7a, 0x00ffe3e9, 0xeb00ff1c, 
    0x7b149dd6, 0x670ff769, 0xec5fc51e, 0xff6dfabf, 0x00ff8e00, 0xcbfee8f5, 0xdfa600ff, 0x00ffeff8, 0x59d1af5e, 0x2bf759fb, 0xec0f2592, 0xff6dfabf, 
    0x00ff8e00, 0xcbfee8f5, 0xdfa600ff, 0x00ffeff8, 0x8bd4af5e, 0x4a138f04, 0xde27f2ab, 0xed511c39, 0x2239dc67, 0xff657f66, 0xfc6fd300, 0xaf00ff77, 
    0xfd5ff647, 0xc700ff36, 0xa3f5fa7f, 0xefc6350a, 0xc9db6e28, 0xd61e25c5, 0x7691c37d, 0xb200ff33, 0xb7e900ff, 0x00ff3bfe, 0x2ffba3d7, 0xe37f9bfe, 
    0xbf7afdbf, 0x7dd61e45, 0x6f2592c3, 0xfa00ffec, 0x8e00ff6b, 0xe8f500ff, 0x00ffcffe, 0xeff8bfa6, 0xae5e00ff, 0x25ed5151, 0xa7a87cdc, 0x00ff9ffd, 
    0xdff17f4d, 0xd91fbdfe, 0xd7f400ff, 0xff1d00ff, 0xcad5eb00, 0x92e52d95, 0x28179526, 0x14474ebd, 0x0ef7497b, 0x677f6754, 0x5fd300ff, 0x00ff77fc, 
    0x7ff647af, 0x00ff35fd, 0xf5fa7fc7, 0xcd121ca1, 0xdb42cbbb, 0xe8a83879, 0x1cee93f6, 0x9ffda7a8, 0x7f4d00ff, 0xbdfedff1, 0x00ffd91f, 0x00ffd7f4, 
    0xeb00ff1d, 0xf628cad5, 0xa81cee92, 0x561445a1, 0xa94185c4, 0xdff4185c, 0x9edfa7b3, 0x7f1c7e4c, 0xcd7aaaf5, 0x2db5795b, 0x8297d051, 0x1959f838, 
    0x3aee384e, 0xd696a977, 0xd6714745, 0x3a68d396, 0x866c3ebc, 0x27009544, 0x71fdf5dc, 0xcde7525a, 0x49d24662, 0xabacf438, 0x67cd0faf, 0x933ab909, 
    0x1370b2dd, 0x71cfc869, 0x6e08adc9, 0x9914ee5a, 0x808a91d1, 0x470e86c1, 0x9a8e281d, 0x147dd803, 0x3d495451, 0x94595114, 0x05779714, 0x7d02c334, 
    0xe1c7a4f9, 0xd600ff81, 0x4190aaa5, 0x48a8a12e, 0xd0089a85, 0x386564e1, 0x3b1d75e0, 0x54687bd2, 0xb6b32477, 0x22d5439f, 0xac32a5f3, 0x9efa01a8, 
    0xd42aaebf, 0x653933d9, 0x8f134bda, 0x833ea14a, 0xe4668c25, 0xcb766fea, 0xfa744cc0, 0x5cda6a72, 0x66d6b89b, 0x02205646, 0x71e46018, 0xd07494d2, 
    0x285ad872, 0x5a82a8a2, 0x61a0a228, 0x4d31c952, 0x7a9fc234, 0x60f83159, 0xa4155554, 0xc85d5f52, 0x43149a85, 0x831e7685, 0x3f69fca8, 0x2db9a322, 
    0x8dc6b595, 0x319f27a8, 0x3f406499, 0xae00ff1e, 0x67b2492a, 0x96b4cb72, 0x55b50727, 0x10ac0d7d, 0xd7a6b6dc, 0x8f097825, 0xfea9b9fe, 0x98006fd4, 
    0x022029ab, 0x71e46018, 0x7a40d342, 0x144589ab, 0x147d2453, 0xab305051, 0x395d2949, 0x24bd5fa2, 0x5505fd98, 0xbb47b0a5, 0x3166549e, 0x9815b62a, 
    0xe3470e7b, 0x6be3a047, 0x6d654dea, 0xafdea473, 0x4898319f, 0xff3d7ea0, 0xfb645a00, 0x290bf9bc, 0x0f925852, 0xa7688c6a, 0xb5e5064f, 0x312ab826, 
    0xa6fe18b7, 0x6c5ff79c, 0x5cd6763e, 0x07c3108c, 0x40db288e, 0xa28dab7a, 0x4211288a, 0xb4a2d08a, 0x5844bef6, 0x28b4a2cf, 0x05f9daa3, 0x422bfa8c, 
    0x90af3d8a, 0xb4a2cf58, 0xf9daa328, 0x55d48a05, 0xa77d2a8a, 0x55f4ca90, 0x9ef6288a, 0xaca25740, 0xf2b44751, 0x6215bd02, 0x90a73d8a, 0x8a96a20c, 
    0x0973718e, 0x73142d45, 0x52943087, 0x733847d1, 0x142d4509, 0xea308773, 0x73290a2a, 0x893ced13, 0xa328a8e8, 0x91a73d98, 0x1405153d, 0xf2b40773, 
    0xa2a0a227, 0x9ef6608e, 0xa2288a45, 0xd6ab4083, 0x9fb6dbb0, 0x58a6d22c, 0xfae41436, 0x6db31a55, 0x67343030, 0xfc96af90, 0x34ec3485, 0x7b4bc3ae, 
    0x8857462d, 0x11b48323, 0x192a829c, 0xd399cb53, 0x67c4da39, 0xac6d9dd6, 0xa2747fc1, 0x6a87470b, 0x8fe341f2, 0x24f23aa5, 0x3696e58a, 0x9f119cca, 
    0x3eb0347a, 0x455114e4, 0x14450921, 0x4a2b2452, 0x4bdadac6, 0x3d9a6509, 0x7280adcc, 0xb5596147, 0xfb2861a1, 0xaf50a733, 0x690af993, 0x895d69d8, 
    0xea677fa6, 0x38aaf12e, 0xc8c94121, 0x9c2a3d23, 0xf14ce5c9, 0x8c183be7, 0x9bd5e0fa, 0x421d663d, 0x8f362ce4, 0x83e45508, 0xdf51e9c7, 0x325d9042, 
    0x04afc446, 0x969ede67, 0x5eb94fd0, 0x01a9288a, 0x224551b4, 0xdb74b502, 0x25ac594b, 0x32f76896, 0x47dc01be, 0xab555961, 0xc83e48a5, 0x992cd4e9, 
    0x8eaa903f, 0xa6896be1, 0x33a999a6, 0x20b871a4, 0x23489203, 0x683a2b3d, 0x8ce4a9fc, 0xb962ec1c, 0x0badc1f5, 0x461d661d, 0x6d3664e3, 0x94e55500, 
    0x5d55faf1, 0xbcb70442, 0x5762e378, 0x4def3382, 0x9907dada, 0xa8288a5a, 0xa2282a02, 0x9dad3083, 0xe3d2c626, 0xe269964f, 0x07f8eade, 0xa1871d71, 
    0xd1dc6aac, 0x45867d1c, 0x9f8404ea, 0xd7c255c8, 0x9b26ae1d, 0x19aa9106, 0x4a9d2812, 0x1124c981, 0x22eb9d9e, 0x899bfc78, 0x1c3b0722, 0x6b707dae, 
    0x61d64e63, 0x453167d4, 0xb900d064, 0xcc8fa72c, 0xa99b1563, 0xf4ada55b, 0x97c54691, 0xe4793282, 0x2eb79b66, 0x8aa25580, 0x2816312b, 0xfed33ea8, 
    0xda47ebc7, 0x6afdd87f, 0x7ba4bd8d, 0x33b6d493, 0x9147867d, 0xdbce9847, 0xb5d363be, 0xfb4ffb53, 0x691fad1f, 0xf56300ff, 0x23ede1a2, 0xd5b8d5dc, 
    0xc784b824, 0xb8e7aae5, 0x034115e7, 0x9c9de12a, 0xba7900ff, 0xff693fd4, 0xa3f56300, 0x7eec3fed, 0xacbedbb4, 0x5829d25e, 0xed838a9e, 0xb47eec3f, 
    0x8ffda77d, 0xa4fd90d6, 0x5551937b, 0x00ffdd3e, 0xf100ff4c, 0xffdd3eea, 0x00ff4c00, 0x7b44eaf1, 0xd42d7758, 0xc14617f6, 0xc27c959d, 0x3de6bbed, 
    0xacf4c738, 0xd37fb7df, 0x8f7afc3f, 0x3fd37fb7, 0xc19e7afc, 0xdcdc61ed, 0x789a599f, 0xb968798a, 0x9c15d7ef, 0x76e76337, 0xd6cdee76, 0xfebb7daa, 
    0xe300ff99, 0xfebb7dd4, 0xe300ff99, 0xe0de36d4, 0x7269c1aa, 0xed5315dd, 0xffcff4df, 0xeda31e00, 0xffcff4df, 0x1ea41e00, 0x34cb1dd6, 0x3fed0f55, 
    0x00ff63fa, 0xa8f57f8f, 0x00ffd3fe, 0xf7f83fa6, 0x8b5a00ff, 0x0e6d3f33, 0xa7b3fae5, 0xbf9fb6de, 0xb60b096a, 0xe3f498ef, 0xffb1d21f, 0x00ffb400, 
    0x3dfe8fe9, 0xa3d600ff, 0x98fe4ffb, 0xdfe300ff, 0x35696afd, 0x77687ba8, 0xd9f5393a, 0x89a088e6, 0x71fd9e14, 0x49727959, 0x72626777, 0x0fd5ba59, 
    0x63fa3fed, 0x7f8f00ff, 0xd3fea8f5, 0x3fa600ff, 0x00fff7f8, 0xf7cc875a, 0xd29a5a05, 0x872afae5, 0x31fd9ff6, 0xbfc700ff, 0x697fd4fa, 0x1fd300ff, 
    0x00ff7bfc, 0x3dcc4aad, 0xa8963bb4, 0x8feddfac, 0x00ff61fa, 0xf500ff8f, 0xffd8fea8, 0xf81fa600, 0x00ff00ff, 0x322b9f5a, 0x9afbf4f6, 0xd44d7355, 
    0x09574d9f, 0x6e7b9318, 0x019c1ecb, 0xfb072bfd, 0x7f98fe63, 0xfd00ffe3, 0x3fb63f6a, 0x3ffe87e9, 0xa6d600ff, 0x3da89694, 0x53e73ebd, 0x25ae8837, 
    0x3586a08c, 0x1527bf27, 0x8bdd5992, 0x9cd8e548, 0xb3a66e96, 0xe93fb63f, 0xff3ffe87, 0xfba3d600, 0x7f98fe63, 0xfd00ffe3, 0xdc331f6a, 0xe63ebd3d, 
    0xfd9b1595, 0x4c00ffb1, 0x00fff13f, 0xdb1fb5fe, 0xffc3f41f, 0x00ff1f00, 0x61e552eb, 0x2ef7e9ed, 0x8a144551, 0xa66bb50a, 0xd2445e5e, 0x14bdc3db, 
    0x73c09de0, 0x5dab9af8, 0xfe09872f, 0x534795cb, 0xaa42fe29, 0x19a83729, 0x42d44507, 0x2031fb96, 0x7f02c375, 0x0723519d, 0x3afdba06, 0x2e4ffbd6, 
    0xd68dee6e, 0xeda836e0, 0x5aaec9eb, 0x9cbd79f7, 0x9a8d19c9, 0xd91e4a42, 0xd928a739, 0x51140d01, 0x286a0550, 0x558899a2, 0xf62a4dcb, 0xda9626fa, 
    0xed14310f, 0x7f8e7a27, 0xadeb5413, 0xd93fa9f0, 0xccd40153, 0x5711f47f, 0x1ab39b14, 0x40db3057, 0x1b4b15d5, 0xb5eb4042, 0x1ac89f94, 0x070723cf, 
    0x653a77ad, 0x9080fda5, 0xb29b5dde, 0xd4516dc0, 0x8d6bf27a, 0xe76f2ebe, 0x3b312369, 0xff50cc48, 0x714e0e00, 0x1bb2514e, 0xa2287a45, 0x45ab24b3, 
    0x85985514, 0xefd1b25d, 0x5b9a18f5, 0x15317f4b, 0x47bd93b6, 0xaaf7893f, 0x3778da55, 0x039c4827, 0x00ff98c9, 0x2aaa22e8, 0xbb8ac3ee, 0xdef0e739, 
    0x6b171aaf, 0xda752026, 0x06f2c7ea, 0xe02008b3, 0x267a45f0, 0xd8a86997, 0xf0f6a624, 0xc50612de, 0x7de2471d, 0x0bd4836b, 0xa4e1429d, 0x2bedc488, 
    0x39fc4331, 0x4639c539, 0x8a8d72c8, 0x414551f4, 0xa2283a25, 0xbf0ae7a8, 0x3aeaa161, 0x9d2d2da4, 0xdb8a9ab7, 0x83abde49, 0xa17a9ff8, 0x0181e75d, 
    0x07c83d3a, 0xff71ce04, 0xa88a7c00, 0x0817bbab, 0x9a333ba9, 0xdcdac297, 0x1bac5d28, 0x56d7ae03, 0x9035903f, 0x60040741, 0x26fdf48a, 0xe2d353cf, 
    0x4dafaf9d, 0x411420e9, 0xfadc63d4, 0x26ea9cd7, 0xb45ca943, 0xa55d18b1, 0xe19f3166, 0xca29cec9, 0x149c4336, 0x51d4ca55, 0xbf994145, 0x27561445, 
    0x78d015a8, 0x9336446e, 0xfeb1ca23, 0xc771e3f4, 0x14fd5c61, 0x27b8b3d3, 0xd2b0a263, 0x1e79f4ed, 0x9855f5e5, 0x80dcc66d, 0x63cd993f, 0x7d8977ea, 
    0x82f1247f, 0x8c0ce014, 0xd58c8113, 0x69b9295a, 0x14450164, 0x8a5a8154, 0x1562a628, 0x5856f8d3, 0x24e98485, 0x4ef319a9, 0xc21f3037, 0xaaa2982b, 
    0x4ee3ce2e, 0x69a655c7, 0xaf2c9a76, 0xcabafa72, 0x426ee336, 0x3527cb8f, 0xc75eab85, 0x714ba97f, 0x000e2110, 0x1838c1c8, 0x9ba252cd, 0x5f90d595, 
    0x5114054b, 0x14ad2250, 0x15625651, 0x783ef8d7, 0x49b84c53, 0x98c94866, 0xfc0173e3, 0x290ab922, 0x71dcd9c5, 0x3d3b7776, 0xd0b24c27, 0xd6a77be6, 
    0x1bb75152, 0x597e1472, 0x5b6fae39, 0xd5518fbe, 0x1184b966, 0x462e601b, 0x6ac6c009, 0xaedc1485, 0x75e586ac, 0x2a8aa260, 0x45d12949, 0x57384715, 
    0x8b9be06f, 0x948bb478, 0xcb38e29a, 0xc01d704c, 0x1157743f, 0x9d5d5445, 0x5db98cca, 0xd346f3ce, 0x7702fd34, 0x8e5b93ba, 0xa08d5450, 0xc9881f85, 
    0xfd9a72cd, 0xb3965afc, 0x8820d43d, 0x8ca480d8, 0x6bc60012, 0xae1c8a3a, 0x75e586ac, 0x288a8264, 0xd9ff20a9, 
};
};
} // namespace BluePrint
