#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Wipe_vulkan.h>

namespace BluePrint
{
struct WipeFusionNode final : Node
{
    BP_NODE_WITH_NAME(WipeFusionNode, "Wipe Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Move")
    WipeFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Wipe Transform"; }

    ~WipeFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Wipe_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_type);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        int _type = m_type;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::RadioButton("Right", &_type, 0); ImGui::SameLine();
        ImGui::RadioButton("Left", &_type, 1); ImGui::SameLine();
        ImGui::RadioButton("Down", &_type, 2); ImGui::SameLine();
        ImGui::RadioButton("Up", &_type, 3);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_type##Wipe")) { m_type = 0; changed = true; }
        ImGui::PopItemWidth();
        if (_type != m_type) { m_type = _type; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("type"))
        {
            auto& val = value["type"];
            if (val.is_number()) 
                m_type = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["type"] = imgui_json::number(m_type);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf72e"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    int m_type          {0};
    ImGui::Wipe_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 4634;
    const unsigned int logo_data[4636/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xa3003f00, 0xffd7fa27, 0x69d37800, 0x7fad7fd2, 0xbd368df7, 
    0xcd28fc08, 0x5451146c, 0xa7e3bb35, 0x8d4e5369, 0x8c6d4cb6, 0x7ab400ff, 0xec368d7f, 0x15fd32ae, 0x5b7bf8cb, 0x7ed4b8be, 0xbb49a8cb, 0x79748fcd, 
    0x87fdbe50, 0xa8abfc71, 0x2b2919a5, 0xa2280aa0, 0x5f770ba8, 0xd5fb87ea, 0x7fddad52, 0x55ef1faa, 0xffc2e64a, 0x9fce0c00, 0x545114c2, 0xa7e3bb35, 
    0x8d4e5369, 0x8c6d4cb6, 0x7ab400ff, 0x37748d7f, 0xfd427365, 0x7bf8cb15, 0xd4b8be5b, 0x49a8cb7e, 0x748fcdbb, 0xfdbe5079, 0xabfc7187, 0x2919a5a8, 
    0x280aa02b, 0x1a0da8a2, 0xd7fa27a1, 0xd57800ff, 0xfa27a1fa, 0x7800ffd7, 0xf8839dd7, 0xc62d8599, 0xd65045d1, 0xa59d8eef, 0xd9363a4d, 0xfe33b631, 
    0x35fee9d1, 0x736537e8, 0xcb15fd72, 0xbe5b7bf8, 0xcb7ed4b8, 0xcdbb49a8, 0x5079748f, 0x7187fdbe, 0xa5a8abfc, 0xa02b2919, 0xa8a2280a, 0xeb861a0d, 
    0x00ff50fd, 0x6ea8a67a, 0xf70fd5bf, 0xfca1c7ab, 0xe2c37244, 0xaa284a45, 0xd3f1dd1a, 0x46a7a9b4, 0xc63626db, 0x3f3dda7f, 0xec76bdc6, 0xe81775ae, 
    0xdac35fae, 0xa3c6f5dd, 0x4d425df6, 0xa37b6cde, 0xecf785ca, 0x5de58f3b, 0x49c92845, 0x4551005d, 0x4f3a4015, 0xf1feaff5, 0xffa4d3a6, 0x00ff5a00, 
    0x4c6d1aef, 0xb025147e, 0x0be32357, 0x7bcb7bd5, 0xfc919d23, 0xffdf63f2, 0xebfcad00, 0x74e8acae, 0x9fd52248, 0x24cb3252, 0x181b9ecf, 0xd3e3f419, 
    0x4a4e538a, 0x7a72a4c8, 0x366db18e, 0x657b6ba7, 0x0034b11c, 0xc8000c06, 0xd3878e07, 0x65a8bb22, 0x6349e149, 0xc0504739, 0x6a5083fa, 0x9d3a7c3a, 
    0xb09cb6a1, 0x7a054152, 0xd6293d82, 0x67638b36, 0xee48b21d, 0xf8028cb1, 0x510a3fce, 0x02778b8b, 0x5a5114c5, 0xfe75b708, 0x55bd7fa8, 0xfad7dd2a, 
    0x54f5fea1, 0xf02f6cae, 0x21fce9cc, 0x2f8c8f5c, 0xec2def55, 0xf347768e, 0xfe7f8fc9, 0xbaaef3b7, 0x20d1a1b3, 0x487d568b, 0x3e932ccb, 0x67606c78, 
    0x2b4e8fd3, 0x6425a769, 0x514f8e6a, 0xd4a62dd6, 0xa36c6fed, 0x00802696, 0x001980c1, 0x64fad0f1, 0xa90c7557, 0x672c293c, 0x1f18ea28, 0x470d6a50, 
    0xb453874f, 0x0a96d336, 0x50af2048, 0xc63aa547, 0xe36c6cd1, 0xd61d49b6, 0x195f8031, 0x314ae1c7, 0x58e06e71, 0x412b8aa2, 0x4f42351a, 0xf1feaff5, 
    0x4f42f5ab, 0xf1feaff5, 0xf1073baf, 0x8d5b0a33, 0x17c647ae, 0xf696f7aa, 0xf9233b47, 0xffbfc7e4, 0xd7f95b00, 0xe8d0595d, 0x3eab4590, 0x499665a4, 
    0x30363c9f, 0xa7c7e933, 0xe434dd15, 0x72848eac, 0x6db18e7a, 0x7b6ba736, 0x34b11c65, 0x000c0600, 0x878e07c8, 0xa8bb22d3, 0x49e14965, 0x50473963, 
    0x5083fac0, 0x3a7c3a6a, 0x9cb6a19d, 0x054152b0, 0x293d827a, 0x638b36d6, 0x48b21d67, 0x028cb1ee, 0x0a3fcef8, 0x778b8b51, 0x5114c502, 0xa8d1085a, 
    0x0fd5bf6e, 0x866aaaf7, 0xff50fdeb, 0x7abc7a00, 0x2c47c41f, 0xae54243e, 0xaa17c647, 0x47f696f7, 0xe4f9233b, 0x00ffbfc7, 0x5dd7f95b, 0x90e8d059, 
    0xa43eab45, 0x9f499665, 0x3330363c, 0x15a7c7e9, 0x2b39cdea, 0x9e1cad23, 0x4d5baca3, 0xd9dedaa9, 0x004d2c47, 0x32008301, 0xf4a1e301, 0x19eaaec8, 
    0x58527852, 0x30d451ce, 0x1ad4a03e, 0xa70e9f8e, 0x2ca76d68, 0x5e419014, 0x754a8fa0, 0xd9d8a28d, 0x3b926cc7, 0xbe0063ac, 0x94c28f33, 0xc0dde262, 
    0x561445b1, 0xae352d82, 0xa9bf2de6, 0xb24f4acf, 0x55fab77f, 0x58c82b8a, 0xcda9ab8a, 0x863d23cf, 0x71e82bd6, 0xfd934e49, 0xbc00ff6b, 0x8ea6296a, 
    0x569a17de, 0x66291adb, 0x58bd823e, 0x4a6713bd, 0x4e157dd8, 0xd4b156c7, 0x7fd2d659, 0x0dcba030, 0x15f363a4, 0xec699a72, 0x53144501, 0xf9b1f402, 
    0xe73817aa, 0x3fd91735, 0xc52afddb, 0xb442e315, 0x7216ade0, 0x52b135a9, 0x0b2d7f4b, 0xaa3dce6f, 0xfe71bb1a, 0xe70fbfa1, 0x1d4df359, 0xad342fbc, 
    0xcc5234b6, 0x187a057d, 0x6e70ca79, 0xb50dde4c, 0x9d2afaa8, 0xa863ad8e, 0xfea4adb3, 0x1b964161, 0x2ae6c748, 0x9e2674e5, 0x511485c5, 0x811a0d4c, 
    0x6d3177ad, 0x547a4efd, 0x0a8957f4, 0xcec28792, 0x2bb62645, 0xbffd93fd, 0x3c91a0d2, 0xe29c2bb7, 0xf47dd6af, 0xb3f9dbd1, 0x4563db4a, 0x62d0c7dc, 
    0xa7f570bb, 0xd0273539, 0xea6d12d6, 0xc74e1525, 0x59d4b156, 0x307fd2d6, 0xa40dcba0, 0x7215f363, 0x634f53bb, 0x298aa260, 0x964ca381, 0xe742353f, 
    0x459fe61c, 0x8b935178, 0xb1d338ba, 0xed9fec5f, 0x2dc994fe, 0xbf2db4fc, 0x74abf638, 0x9359abeb, 0x59d5ba43, 0x8f6d6731, 0x978f5c36, 0xeaa9db91, 
    0xa7e90a3a, 0x4d9aa35e, 0x6c72469a, 0xd8a9a2cc, 0x8b3ad6ea, 0xe64fda3a, 0xb4611914, 0xae627e8c, 0x7b9aa657, 0x1445011d, 0x8a460353, 0xe304af28, 
    0xb5fe4928, 0x35de00ff, 0xf1ba78cf, 0xd2d2d3a2, 0xd872bf3f, 0xfe0f7cc7, 0x93a12bbe, 0x00ff6bfd, 0xd4906bbc, 0xbff56e6c, 0x5b029411, 0xab5d6278, 
    0x8ee38c31, 0xf67aa7e3, 0x4822df24, 0x100c89ec, 0x82f80e1f, 0x5c3e31d0, 0xf77685f1, 0x06d71f3c, 0xf5e33abb, 0x45df0d7f, 0xb78ff66b, 0x91f17ccd, 
    0x00492884, 0x6a9f1cf7, 0xe5b9b4e9, 0x9260d3b8, 0x6e976464, 0x3948591d, 0x140d1e1c, 0x1b569bee, 0x1545512d, 0x281a8db0, 0x8c13bca2, 0x43fde38e, 
    0xb9ce1f7e, 0x345e173f, 0x475a7a5a, 0x185beef7, 0x00ff81ef, 0x9775c5d7, 0xf01bea1f, 0xeac275fe, 0xdf7a3736, 0x2d01ca88, 0xd52e31bc, 0xc771c698, 
    0x77bdd371, 0x34d96fd0, 0xb6149dbb, 0xe1038221, 0x065a10df, 0x309ecb27, 0x83e7deae, 0x67d7e0fa, 0xe1af7e5c, 0x7eade8bb, 0xaff9f6d1, 0x8530329e, 
    0xe31e2009, 0x365ded93, 0x1ab73c97, 0x8c4c126c, 0xabc3ed92, 0x83230729, 0x779aaec1, 0xb21aab4d, 0x5b5114d5, 0x8aa2d108, 0xc238c12b, 0x5e1b3fb9, 
    0xd2a25634, 0xc072bf3f, 0xff07be63, 0xd6155f00, 0xe9ae1157, 0x8bbf7ab7, 0x43de2f1e, 0x66bb480c, 0x018e4ad8, 0x3e39a7e3, 0x85a2abbd, 0x8d5d9af9, 
    0x28457c69, 0xf11d3e20, 0x7c62a005, 0xed0ae3b9, 0xae3f78ee, 0xc775760d, 0xbe1bfeea, 0x1fedd78a, 0xe3f99a6f, 0x92500823, 0x3e39ee01, 0x7369d3d5, 
    0xc1a671cb, 0x2ec9c824, 0x90b23adc, 0x1a3c3872, 0x36dd29f4, 0xd53274ac, 0x085b5114, 0x2b8aa2d1, 0xadc238c1, 0xe1bfbbeb, 0x33c1eb4e, 0x1808cfb8, 
    0x152299ef, 0x60afb452, 0x3a86ef4b, 0x58b980c5, 0x8a789665, 0xc6c3ad9e, 0xa5470672, 0x58594b69, 0x79c497d2, 0x0e1f104c, 0x31d082f8, 0x85f15c3e, 
    0x1f3cf776, 0x3abb06d7, 0x0d7ff5e3, 0xf66b45df, 0x7ccdb78f, 0x288491f1, 0x1cf70049, 0xb4e96a9f, 0xd3b8e5b9, 0x64649260, 0x591d6e97, 0x1e1c3948, 
    0xee947a0d, 0x593a569b, 0xad288a6a, 0x45d16884, 0x659ce015, 0xbfd63f09, 0x5a9bc6fb, 0xc6725734, 0xf1975b59, 0x46bef636, 0xc7251575, 0x3ffcf6fa, 
    0xd15d4795, 0x35533497, 0x45e1ea4e, 0xd10c5514, 0xc12b8aa2, 0x3feec838, 0xfce137d4, 0xd16895ea, 0x1e71345d, 0xa4b136ce, 0x67acca67, 0x3f6e5751, 
    0xfce137d4, 0xd17795ea, 0x7b23edab, 0xca5c461b, 0x561445e1, 0x51341ac5, 0x18277845, 0xf58f2b55, 0x2a7ff8ed, 0x466d45bb, 0xec95b3af, 0xeeca6554, 
    0x355a5167, 0x68fdeb52, 0xbb7600ff, 0xa43d62a9, 0x196d6cb9, 0xd1103bf3, 0x68d41545, 0x1545d168, 0x51619ce0, 0x6fa87fdc, 0x94d4f9c3, 0xb25c4655, 
    0xdcd9694c, 0x69b4a2ce, 0x7faa7fb2, 0x2c774df7, 0x7fb9dd65, 0xe46b5f13, 0x2b8aa250, 0xa2d1d8b8, 0x38c12b8a, 0x09dfbac2, 0xa56ebae8, 0xed3dcfa6, 
    0x29e99ab7, 0xc0b07750, 0xae883dc0, 0x02bfbb4a, 0x27d7689c, 0x8fc7c419, 0x82ab08f8, 0x93a634bb, 0xea94a796, 0xe207b4ba, 0xa085fd05, 0x4364b064, 
    0x53398c6c, 0x4f6ea9e5, 0x53772727, 0xf19bab56, 0xcf05b3fe, 0xd6fe9a8e, 0x17c9dad8, 0x2335be97, 0x31bd0a6f, 0xe239a38e, 0x496518ba, 0x396349e1, 
    0xfac05047, 0x09a55e83, 0x3a3a365e, 0x2b8aa20f, 0xa2683470, 0x304ef08a, 0x7ac2b7ae, 0x69a99b2e, 0x6d7bcfb3, 0x544abae6, 0x3030ec1d, 0x922b620f, 
    0xa7c0efae, 0xc6c9351a, 0xfee33171, 0xaee02a02, 0xe5a429cd, 0x41ab8fa9, 0x0e9fdbe1, 0x76e95c5f, 0xfed61cef, 0xc6cd2e5f, 0x23b903e7, 0xe9bab8d6, 
    0x94e263fc, 0xab26f0b9, 0xda306df6, 0x370946f9, 0x89534146, 0x3af0e0e3, 0xa90c2bd7, 0x672c293c, 0x1f18ea28, 0xc3d16b50, 0x6f64cb35, 0xf4415b1b, 
    0x0c754551, 0x2b8aa2d1, 0xbac238c1, 0xbae809df, 0xcfa6a56e, 0x9ab7ed3d, 0x775029e9, 0x3dc0c0b0, 0xbb4aae88, 0x689c02bf, 0xc41927d7, 0x08f88fc7, 
    0x34bb82ab, 0xa39693a6, 0xc22bfd34, 0xb64ae2fa, 0xd1c6f256, 0x02bb24e3, 0x23a9d333, 0xac5a70b5, 0x9a51db02, 0x13e136dc, 0xc1f56eb2, 0xdae83523, 
    0xb10ebd0e, 0xe991b62c, 0x124ad586, 0xf3e3265e, 0x09d76000, 0xf4088be2, 0x686b76dd, 0x0428b29c, 0x3c23396e, 0x74785df3, 0xa946d3b9, 0x28321a2d, 
    0x0bf48aa2, 0x8aa26834, 0xae304ef0, 0x2e7ac2b7, 0xb369a99b, 0xe66d7bcf, 0x1d544aba, 0x0f3030ec, 0xae922b62, 0x1aa7c0ef, 0x71c6c935, 0x02fee331, 
    0xcdaee02a, 0xa8e5a429, 0xf04a3fcd, 0xad92b8be, 0xb4b1bc95, 0xc02ec978, 0x48eaf48c, 0xfc5d5ced, 0xe6e2da02, 0x13e136dc, 0xc1f56eba, 0xe8de3523, 
    0xc43af43a, 0xa647dab2, 0x4928551b, 0xcc8f9b78, 0x6f5c8301, 0xd323ac88, 0x689b4b75, 0xc828b29c, 0x464672dc, 0xd1b2ab79, 0x9395a4a2, 0x14453f47, 
    0x686cb057, 0xe01545d1, 0x5a5b619c, 0x346e892f, 0x1882675b, 0xef3b9023, 0x40cfc925, 0xd162a53f, 0x1ab6364d, 0x7e8a6a6d, 0x7be2092c, 0xd72e89cb, 
    0x1f4af3cb, 0x0900ffdd, 0xfa19070a, 0xc64ab57e, 0xe36c6cd1, 0xd61d49b6, 0x195f8031, 0x725ae1c7, 0x5b8ef95b, 0x4ded337e, 0x7ffb27fb, 0xaf507aa5, 
    0xeb5d4549, 0x5b517563, 0x9fa25656, 0x05537e2c, 0x32cd78ce, 0x2525a3ba, 0xcd9d6874, 0xbca2281a, 0x6b2b8c23, 0xc62df145, 0x43f06c8b, 0x7d077204, 
    0xe839b9e4, 0x5aacf407, 0xc3d6a629, 0xa751ad4d, 0xcd10bfe2, 0x5d0e5fe2, 0x47301769, 0x371b3714, 0x1bee643c, 0x3e63585d, 0x632757e0, 0x7136b668, 
    0xeb8e24db, 0x8c2fc018, 0x79adf0e3, 0xb942cc13, 0xb21f6ac6, 0x57fab77f, 0x23b41e6e, 0x6dea791f, 0xcc7b9a1a, 0x6b5845ad, 0x7f5baa5d, 0x5e959e41, 
    0x335261bb, 0x92a259f8, 0x51341a7b, 0x20877845, 0xe28bd656, 0xd9168d5b, 0xe40886e0, 0x72c9fb0e, 0xe90fd073, 0x4d53b458, 0x5a9b86ad, 0xc793a8a3, 
    0x0921839a, 0xe831026d, 0xb57e9cdc, 0xcb336ac8, 0xccd37873, 0x597ee4e5, 0xd453738f, 0xb0e6c152, 0x1de3d86d, 0x14157a2b, 0xe3327967, 0x94797f37, 
    0x643fabe8, 0xf46f00ff, 0xca8f65a8, 0x19cfb960, 0xa11546af, 0x65b36837, 0x512ff624, 0x1ce31545, 0x2f5a5ba1, 0x5b346e89, 0x23188267, 0x25ef3b90, 
    0x3f40cfc9, 0x4dd162a5, 0x6d1ab636, 0x4fa28e6a, 0x840c6a1e, 0xc708b425, 0xfa7172a3, 0x3c7733d7, 0xf32c2db7, 0x251f7939, 0xda34f798, 0xaf941b46, 
    0x9352c5a8, 0x9bdcb8ba, 0xaca2cfdc, 0xbffd93fd, 0x7fb28fd2, 0xa957fab7, 0xcd5d9af5, 0x144ba4fd, 0x07794551, 0x0dfb5530, 0x21d5510f, 0xbced6c69, 
    0x4eda56d4, 0xc41f5cf5, 0xef0ad5fb, 0xd109083c, 0x3e3840ee, 0xf2fdc779, 0xecaea22a, 0xeca4225c, 0x0b5f6ace, 0x76a1706b, 0xbb0e6cb0, 0x40fe585d, 
    0x1c0441d6, 0xd32b8211, 0x4f3d9bf4, 0xbe768a4f, 0x80a437bd, 0x8f510751, 0x735eeb73, 0xa50e99a8, 0x61c4d272, 0xc6989576, 0x3827877f, 0x0ed928a7, 
    0x32575170, 0x8fd6bfee, 0x9a1a6af7, 0xff68fdeb, 0xafa17600, 0xd1f08756, 0x68143eb4, 0xe31545d1, 0xec57a19c, 0x54473d34, 0xb6b3a585, 0x695b51f3, 
    0x7f70d53b, 0x2b54ef13, 0x2720f0bc, 0xe000b947, 0xf71fe7f9, 0xbb8aaac8, 0x938a70b1, 0x7ca939b3, 0x85c2ad2d, 0x3ab0c1da, 0xf96375ed, 0x10045903, 
    0xaf084670, 0xf56cd24f, 0xda293e3d, 0x92def4fa, 0x461d4401, 0x79adcf3d, 0x3a64a2ce, 0x114bcb95, 0x6356da85, 0x9c1cfe19, 0x64a39ce2, 0x5c45c139, 
    0xa7fa27a9, 0xd57400ff, 0xfa27bf0a, 0x7400ffa7, 0xc1ee0ad5, 0x5bba2cfc, 0x4551341a, 0x5701c679, 0x473d34ec, 0xb3a58554, 0x5b51f3b6, 0x70d53b69, 
    0x54ef137f, 0x20f0bc2b, 0x00b94727, 0x1fe7f9e0, 0x8aaac8f7, 0x8a70b1bb, 0xa939b393, 0xc2ad2d7c, 0xb0c1da85, 0x6375ed3a, 0x045903f9, 0x08467010, 
    0x6cd24faf, 0x293e3df5, 0xdef4fada, 0x1d440192, 0xadcf3d46, 0x64a2ce79, 0x4bcb953a, 0x56da8511, 0x1cfe1963, 0xa39ce29c, 0x45c13964, 0x2e55ad5c, 
    0xf78fd6bf, 0xba54dd6a, 0x3f5a00ff, 0xbfb0addd, 0x117f0ac4, 0xae288a6e, 0xf6ab3063, 0xaaa31e1a, 0xdbd9d242, 0xb4ada879, 0x3fb8ea9d, 0x15aaf789, 
    0x131078de, 0x7080dca3, 0xfb8ff37c, 0x5d4555e4, 0x4945b8d8, 0xbed49cd9, 0x42e1d616, 0x1dd860ed, 0xfcb1ba76, 0x0882ac81, 0x57042338, 0x7a36e9a7, 
    0xed149f9e, 0x496f7a7d, 0xa30ea200, 0xbcd6e71e, 0x1d3251e7, 0x88a5e54a, 0x312bedc2, 0x0e00ff8c, 0x514e714e, 0xa2e01cb2, 0x8aa256ae, 0x8ac20c2a, 
    0xbb02a028, 0x5bdc047f, 0xa45ca4c5, 0x5ac611d7, 0x01ee8063, 0x8ab8a2fb, 0xeeeca22a, 0xeeca6554, 0x99369a77, 0xbd13e8a7, 0x72dc9ad4, 0x046da482, 
    0x4e46fc28, 0xefd7946b, 0x99b5d4e2, 0x4604a1ee, 0x602405c4, 0x59330690, 0x75e550d4, 0xab2b3764, 0xffba5424, 0xdd3f5a00, 0xaf6b6aa8, 0xdafda3f5, 
    0x1f6abd86, 0xf8f046c3, 0x1445a351, 0x85728e57, 0xb809fe76, 0xb9488bb7, 0x8c23ae49, 0xdc01c7b4, 0x7145f703, 0xd9455514, 0x95cba8dc, 0x6d34efdc, 
    0x27d04f33, 0xb835a97b, 0xda4805e5, 0x8cf85108, 0xaf29d79c, 0x6ba9c5df, 0x0842dd33, 0x480a888d, 0x660c20c1, 0xcaa1a8b3, 0x576ec8ea, 0x9f6c4856, 
    0xd3fd9fea, 0x9ffc2a54, 0xd3fd9fea, 0x07bf2b54, 0x5b4ab3f0, 0x4551341a, 0x5d01c679, 0x2d6e82bf, 0x522ed2e2, 0x2de3886b, 0x0077c031, 0x455cd1fd, 
    0x77765115, 0x77e5322a, 0x4c1bcd3b, 0xde09f4d3, 0x396e4dea, 0x82365241, 0x27237e14, 0xf76bca35, 0xcc5a6af1, 0x238250f7, 0x30920262, 0xac190348, 
    0xba7228ea, 0xd5951bb2, 0x75a90a92, 0xbb7fb4fe, 0xd7a5ea56, 0xedfed1fa, 0x20fe856f, 0xba45fce9, 0x8cb9a228, 0x047fbbc2, 0xa4c55bdc, 0x11d7a45c, 
    0x80635ac6, 0xa2fb01ee, 0xa22a8ab8, 0x6554eeec, 0x9a77eeca, 0xe8a79936, 0x9ad4bd13, 0xa48272dc, 0xfc28046d, 0x946b4e46, 0xd4e2efd7, 0xa1ee99b5, 
    0x05c44604, 0x06906024, 0x50d45933, 0x376475e5, 0x1424ab2b, 0x07494551, 0x0000d9ff, 
};
};
} // namespace BluePrint
