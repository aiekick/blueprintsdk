#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Pinwheel_vulkan.h>

namespace BluePrint
{
struct PinwheelFusionNode final : Node
{
    BP_NODE_WITH_NAME(PinwheelFusionNode, "Pinwheel Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    PinwheelFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Pinwheel Transform"; }

    ~PinwheelFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Pinwheel_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_speed);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _speed = m_speed;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Speed##Pinwheel", &_speed, 1.f, 10.f, "%.0f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_speed##Pinwheel")) { _speed = 2.f; changed = true; }
        ImGui::PopItemWidth();
        if (_speed != m_speed) { m_speed = _speed; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("speed"))
        {
            auto& val = value["speed"];
            if (val.is_number()) 
                m_speed = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["speed"] = imgui_json::number(m_speed);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue332"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_speed       {2.f};
    ImGui::Pinwheel_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 7028;
    const unsigned int logo_data[7028/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0xae1ca08a, 0x14a772c8, 0x749f2cec, 0xc64e6f05, 0xc6a5a2a3, 0x5871ebee, 0x23380852, 0x9c92de07, 0xc80d231b, 0x862aeef5, 0x9f2675b7, 0x99764fa3, 
    0xc0156104, 0xc0d90ec8, 0x3d4ef0fa, 0x5ad61c8d, 0x2293d18c, 0x838ed438, 0x58479d3f, 0xa9a54eda, 0x92201e6a, 0xa2d5e2c2, 0x598de0f2, 0xbab1024b, 
    0x6c764684, 0xe79c1500, 0x0cb88193, 0x06dad8d6, 0x057dcc4f, 0x5d2e3945, 0x1280b005, 0xb54f0670, 0xfda9623f, 0xc90b7ee3, 0x602497a6, 0x4d410f60, 
    0x909fb4aa, 0x4f3a156a, 0x985f5290, 0x6fd3f41e, 0xee333d28, 0x20c5300d, 0x95dfd838, 0x8b3a9d44, 0x0e593e71, 0x20873d92, 0xd4d053ee, 0xa890e474, 
    0x413d55c7, 0xd9ed3aaa, 0x6e8974d3, 0xb21970a3, 0xc182e491, 0x7d8e9fbe, 0xaaa10f0e, 0x435ac54d, 0x709ad957, 0xbf0b97b7, 0x09a800be, 0x1aaac9c9, 
    0x85dab07e, 0x5ba297de, 0xc3dd2547, 0x95660959, 0x99e52162, 0xa05021b3, 0x85505590, 0x58e500c8, 0x88366d9f, 0x8e242345, 0xb18353b9, 0x47e86783, 
    0xd6da1415, 0x6dad585d, 0x8144ea48, 0x0f0c64dc, 0x58254a53, 0xea83c8cf, 0x4a639adc, 0x9f98f7ef, 0xf6e6a66a, 0xc35e0d56, 0xd1caf169, 0x15773a9e, 
    0x01228621, 0x9afa4059, 0x657cb769, 0x6aec6148, 0x56724a5d, 0x682ee297, 0x51a4c9bd, 0xa893613c, 0xaa3800ff, 0x42e6f194, 0x6e47b0db, 0xd7a20647, 
    0x873ffb24, 0x694bb52e, 0x08099d07, 0x26cb05f1, 0xd39305ec, 0xa10f4e6e, 0x54eafddb, 0xa67700ff, 0x69ab08f1, 0xb96cb1d0, 0x45f77793, 0x6def1217, 
    0xd68feea3, 0xdd1ae9a8, 0x765ae9b3, 0x5cf3f68e, 0xd3ea57eb, 0x846131cb, 0x1a77bf05, 0xa02c752a, 0x3d23cf31, 0x36ddf2f3, 0x5f528eee, 0x2a3830dd, 
    0x54f811fc, 0xf65396c7, 0x5a03f992, 0xaa5291dd, 0x93513896, 0x9890af52, 0x29fd5cce, 0x8481d57e, 0xa9a3b540, 0xefc7f037, 0xa2cf7cd0, 0x2b8aa220, 
    0x1fb98262, 0xdeab5e18, 0xec1cd95b, 0x1e93e78f, 0x6ffd00ff, 0x67755de7, 0x1641a243, 0x9691faac, 0xf07c2659, 0xa7cfc0d8, 0x4d549c1e, 0xa3212b39, 
    0x8b75d493, 0x5b3bb569, 0x89e528db, 0x603000a0, 0xd0e94006, 0x755764fa, 0x293ca90c, 0xea28672c, 0x50631f18, 0x3a7c3a6a, 0x9cb6a19d, 0x054152b0, 
    0x293d827a, 0x638b36d6, 0x48b21d67, 0x028cb1ee, 0x0a3fcef8, 0x778b8b51, 0x5114c502, 0x9877085a, 0x6fdf00ff, 0x37b390ce, 0xa67e62de, 0x5f3d239c, 
    0x00ff1ee4, 0x57b949e1, 0xdb7daeee, 0xcb352bfc, 0xe8b450f6, 0x2029b80b, 0x2b907a0c, 0xd535f198, 0x69a3c68d, 0xf04a5da6, 0x4d23e7c7, 0x48acbc70, 
    0x01760c49, 0x8c602096, 0x1c8cd011, 0x2c16d3f1, 0xae6a4e72, 0x6143a699, 0xf9abcfad, 0xc3334992, 0xb4f1612a, 0x609c426f, 0x52530d76, 0x6a5ac32e, 
    0xf06ad372, 0x9716ea5e, 0x16636e36, 0x6bf6cd20, 0x9b1cd9a7, 0x0729e476, 0x07a932ef, 0x01504890, 0x47bb0227, 0x010d7127, 0xa3f9c185, 0xb8878220, 
    0xf708f220, 0x9f8e7aaa, 0x6d68a70e, 0x90142ca7, 0x8fa05e41, 0x11ce9a4a, 0xb31d696b, 0x12cb24cd, 0x0b725785, 0xe8033800, 0x0ad00706, 0xf75d5c14, 
    0xff364a06, 0xe8271000, 0xfe944b71, 0x5fdf7feb, 0x0a196afd, 0xb1570ef2, 0x5ad1da14, 0x146ea15a, 0x140eccaa, 0x944a9f91, 0x4f8e11ac, 0x4a077d98, 
    0x084f4c6b, 0x51e90302, 0xd3b2e7ce, 0xc8be57cc, 0x77189308, 0x7fcc1e20, 0x926a63a5, 0x3dfa529d, 0xd5456c21, 0x5f3394b5, 0x48a1925e, 0x1d3d238d, 
    0x3390b254, 0x99a5928c, 0x54e73a32, 0x7e9a9c9c, 0x970e6d9d, 0x23c8a96d, 0x4235aef3, 0x0648d38a, 0x765b91e8, 0x1220e3d5, 0x6ae77906, 0x594d54fa, 
    0x4d6bdc25, 0xf77575ce, 0x690aaed6, 0x5edf327a, 0xcdcaae1d, 0xa9ca9928, 0xe4486455, 0xb1a0ec0a, 0x996f5639, 0x8dddc889, 0x788a26e8, 0x2bcb5512, 
    0xea4160a8, 0xdd50e10f, 0xd5a88bda, 0xf1c2b244, 0xb11cc9ba, 0x948dd736, 0xc79e32e4, 0xaee5aede, 0x6fb23c8b, 0xf22c76b8, 0xc7980710, 0x320ec492, 
    0x760a3c4f, 0x0decd5e4, 0x4622228d, 0x66d4c719, 0x38114794, 0xa835bff3, 0x309c4ad9, 0xe5aba4c1, 0xc82f696d, 0x9ec2ec56, 0x21ba9121, 0x5aa978fc, 
    0x342257e5, 0xe5895a1f, 0x8f9be177, 0x52a55241, 0x17ea2d5d, 0x693be893, 0x3d2e838b, 0xcfa8e694, 0xf592307d, 0x6bc531e1, 0xf7345aa7, 0x09db1397, 
    0x5c1e1683, 0x95cb2f51, 0x82206666, 0x0c4959db, 0x5a2b4319, 0x47c12e55, 0xcb4d5753, 0xa48d685a, 0x6ec94ec6, 0x832bd37e, 0x00c62183, 0xe340706c, 
    0xfaeafe19, 0xa36a4d54, 0x9326587d, 0xa4d7b739, 0x74d564be, 0x87502f2d, 0x9a4db74f, 0xc3751aa4, 0x9f8ace46, 0x971b9321, 0x097603cb, 0x12839b5e, 
    0x59d86a7e, 0x66512ead, 0x522412b7, 0x83b9c900, 0x03a847f0, 0x27cd55f9, 0x6fd1bb57, 0xca66d53e, 0x0c46a11c, 0xff4f05b9, 0xf8035c00, 0x1a697355, 
    0x55656b21, 0xa0114942, 0x00f68cc2, 0xa8dd1e74, 0x27ad1cfe, 0x51d7e4b8, 0xe5c32804, 0x46e81394, 0x98ac4d29, 0xa8f1a7ea, 0xfd324369, 0x6be823d6, 
    0x259d1a47, 0xeed20af8, 0x48802a25, 0xd47ae004, 0xeee36acd, 0x42a5df90, 0xc070c8c8, 0x09a9718a, 0x496a2cfc, 0x722d4eec, 0x2afd2432, 0x1e240802, 
    0x6f86a5a2, 0xbb6fed2c, 0xf84baafc, 0x6d4ddf1a, 0xd116405a, 0x9cc9631b, 0x9d9eb1e1, 0xca4a0f7a, 0x726a9c12, 0x21f6e8cd, 0x95592939, 0xabc0c940, 
    0xc9c0651f, 0x52bc1e93, 0xbb363168, 0x69a87169, 0xb6f6bcf1, 0xb0cb1287, 0xf58c83aa, 0xc9813360, 0xf58c4cc7, 0xe64d9314, 0x7ff7ab1d, 0xe594139d, 
    0x3a3d583e, 0xf69acbb1, 0x1c144c44, 0xb81e6e2b, 0x562825c5, 0xfda4ba6f, 0xceb64a05, 0xb516f67e, 0xef05e394, 0x724b9b32, 0x27394922, 0xae92de27, 
    0x24bf11bc, 0x818afa60, 0x1f799ded, 0x2a6bfd30, 0xd3728a78, 0x08d35462, 0x1888c4ed, 0x598ae13f, 0x2363f223, 0x3ee36eef, 0x34721c95, 0x8af8914f, 
    0xe6c696d0, 0x55e70e5d, 0x2dad5948, 0x5e646941, 0x4e32004a, 0xaf032707, 0x23751315, 0x2cde5d51, 0xc89b9b4f, 0xb6a3a9cc, 0x638b812e, 0x6851b13d, 
    0xce23f118, 0xe892a534, 0x8a69285b, 0x3d68c3c6, 0xc1c9813a, 0x55fad8e3, 0x9d11a7b9, 0x8fbb65a0, 0x25b5aa4a, 0x8e7b1a75, 0x7986ec6d, 0xe62d485e, 
    0xeb6ddc71, 0x7e423950, 0x9a7b2045, 0x96736646, 0x0ce13439, 0xe30fd18d, 0xc9635cc5, 0xf7eb4def, 0xb1d55602, 0x9cd38164, 0x8e8a7a64, 0x7d2b03b4, 
    0x6ae807d6, 0x86d12d39, 0xa53fe557, 0xd2154f61, 0xd1a911a1, 0x4a88e195, 0x76045b70, 0x1f9659c5, 0x681b0030, 0x5955b11d, 0x8cb38524, 0xb715a163, 
    0x86fa68a6, 0xd9d36eb1, 0xad88795b, 0x18f58eb5, 0x2339ce38, 0x3b7795d6, 0x04ddc5a9, 0x6074aff9, 0x64c490d4, 0x1d680739, 0x718bbeea, 0x5e6e8817, 
    0x732f4adf, 0xd5bd6b24, 0xfaaa6c23, 0x45ce3ff2, 0x2e909d69, 0xeb713bd6, 0x5badb6d6, 0xb61a5a95, 0x88d6e45c, 0x003a8c46, 0xa5df91fc, 0x31127857, 
    0x62f84bf3, 0x6e964b96, 0xbd1ee513, 0x8f1910ea, 0x46519300, 0xc9ab489d, 0xc91813d9, 0x641fcb6e, 0xf46f00ff, 0xa38964a8, 0x1a3b3d38, 0xdfc6b3b4, 
    0x3cad8fc5, 0xc883eb80, 0x55c48a35, 0x54f2bd84, 0x5ba59ee4, 0x695b1579, 0xa9f5585e, 0x1cf3b764, 0x627bfcb6, 0xa6dc9aa2, 0x4f5f7959, 0x34d2d34a, 
    0x2461edcb, 0xa6795016, 0xd5f96f1c, 0xa9e39c71, 0x1f7535f6, 0xfda4bdfc, 0x9a00ff46, 0xf9b05c26, 0xcfd97c40, 0x8ebc2db5, 0xc05dc50e, 0xd42595fe, 
    0x6d7e1d33, 0xd4766311, 0x90f9c22d, 0xe546dc20, 0x1e1c0fdc, 0xa9743c08, 0x5dca8b23, 0xe9dd7ca4, 0x57eea7ce, 0x4e8ead3e, 0xc986f7d1, 0x3e72ae6e, 
    0x99dedf53, 0xfff64ff6, 0xdc7b4a00, 0xe30ebd46, 0xc33d50ed, 0x1ee503b7, 0x219614d5, 0xe66527ab, 0x13c4794c, 0xfe3706ca, 0xbeb4ef74, 0xa89f4230, 
    0x743b1aa9, 0x4efdbae1, 0xc778a669, 0xd46788dc, 0xe1ad958e, 0xa11f863f, 0xcd903d5a, 0xf2d8c8d1, 0x4ff7cf88, 0xb824a9f4, 0xf31edd5b, 0x62b4f3c2, 
    0xd8fce83b, 0xf008469e, 0x38a0acc8, 0x7206e5e0, 0x8cac91fe, 0x9931180f, 0x0fb091a5, 0x5097c25e, 0x4ba06fd9, 0x5a4c6465, 0x29c6aa9e, 0xd01214af, 
    0x285620db, 0x7b576008, 0x06183d10, 0x2b8741cf, 0x4dbf77af, 0xaf8c8ecb, 0xe8a96d6b, 0x117eb697, 0xb4994b8a, 0x53ed83f6, 0xf669972e, 0xfb429a86, 
    0x422abf77, 0xf9796074, 0x8d1c674c, 0xb554e7b6, 0xb62692b9, 0xdcb70a95, 0xe851869b, 0x1f0b2a46, 0x83f8d902, 0xee2593c2, 0x96eab1bc, 0x5996fd24, 
    0xe4415081, 0x41922407, 0x5c398e20, 0xb2d08303, 0x6ed450d3, 0x454dd22d, 0x36a06be5, 0xc412e7cb, 0xeaa9e3b0, 0x5394e238, 0x5cf936d6, 0xf64f546f, 
    0x40151da7, 0x79a629ec, 0xd2efc648, 0x4644b39e, 0xc03d201e, 0x90a088a7, 0xe6a1bf7c, 0xe2c3e986, 0xa267ea87, 0xb28315dd, 0xe823068c, 0x7192556a, 
    0xba478283, 0x31e6c6d4, 0x15f493d0, 0x1f315d13, 0xd1fa812a, 0x1ffbd479, 0x82be5d78, 0x3d1f6797, 0x01eae3be, 0xeade7a15, 0x437d3478, 0x04f6864d, 
    0x6119fe8e, 0x1079da9a, 0x5219c33e, 0x2cd98df1, 0x0a3981bb, 0x3a8b559b, 0xa767b801, 0xe4fb399b, 0x7dd5840e, 0x7449f26a, 0x8cc5f087, 0x4a5e036f, 
    0xecdeddb3, 0x94d31804, 0xbf733d8f, 0x8e31eae6, 0xa3278dfb, 0x45f65be4, 0x5b634747, 0xbf75d241, 0xa3c3d80d, 0x5634df58, 0xbc65c852, 0xe6d2ca92, 
    0xdc2e63e2, 0x6c531b6d, 0x33e4aa7c, 0x0b1963ab, 0xb70134c8, 0xd7b7a307, 0xf050938a, 0x0800ff66, 0x4a8778db, 0x6bb014f1, 0x60c71636, 0x9bbc3156, 
    0xb5515741, 0x38386e8b, 0x7a70ae23, 0xae6f43e4, 0xf136eb5e, 0xba896a5e, 0x4b09d4e5, 0x1c961046, 0xf4031867, 0x25d537a2, 0x892d95f8, 0x3e48c485, 
    0xa3f02354, 0x7eec7fed, 0x9760a1b4, 0xdd9e00a0, 0x8eab3628, 0x67ad8f18, 0xe9fb8bfb, 0xdcc7ccdf, 0x79f643ea, 0x8afabb7f, 0xf4c2a57a, 0xc629e6cf, 
    0x278467ec, 0x689f69ea, 0xc10b8895, 0xebad15f6, 0x5fd17b49, 0xbaf7bd32, 0x30620625, 0x511f06f1, 0xa706ba5a, 0xf6cba371, 0xec7c289b, 0x066cfb96, 
    0x00d806e1, 0xdb0d9018, 0x92811cb2, 0xb96300bb, 0x42866590, 0x7a3feec0, 0xcd991ee7, 0x957a6b65, 0xff6da3f6, 0x9aa50800, 0x2766694b, 0x63173717, 
    0xa3602476, 0x08100c6a, 0xe09e9307, 0x69cedb74, 0xf0c7f2ab, 0x2d1cf3db, 0x8a417773, 0x99fee1e7, 0x7097162c, 0xc7d21c45, 0xb3e6fbf6, 0x8789469e, 
    0x8848b1cb, 0x04aee4a0, 0x41dc088e, 0xce8a2755, 0xe4d99162, 0x3966e49d, 0xf593732c, 0xd130deab, 0x400b6f35, 0xbff022be, 0xa87be488, 0x686b8e88, 
    0x1cba4a55, 0x2109c58d, 0x7a70cf88, 0xa6dac683, 0x467ce935, 0x366aa8a9, 0x2a756fc9, 0x152a2281, 0x07388e00, 0xe2747e24, 0xc8bfb4dd, 0x00d75ea9, 
    0x1fd3cbd6, 0xf69f2688, 0xfabdbf88, 0x8db6691a, 0xc7915486, 0x68c33418, 0xfdc0c2df, 0x19b5a878, 0x337f52fc, 0xc5ee712f, 0x3e3c8336, 0xeca3b807, 
    0x93eca0ce, 0xb5a6f207, 0x01e09cd3, 0x40a2fd42, 0xf47a2039, 0x2f592dad, 0x312f497e, 0x2a59fdfb, 0x8d52c789, 0xdc4d7a5a, 0x9d1a58fa, 0xcbbc5384, 
    0xa2e48e38, 0x04f99024, 0x00ff6d6e, 0xdac96830, 0x03f92171, 0x24400c28, 0x50b7b58c, 0x8fdb4877, 0x3efaaaa9, 0x9e6baaa3, 0x62d0b02d, 0x453f4d92, 
    0x9317bcb5, 0x672162ca, 0x31c0f068, 0x28771b38, 0xf39c7a00, 0xab490680, 0xc3ca5fbe, 0x36b4b985, 0x0f1e75b4, 0x0d352fd4, 0xeaa8abb6, 0xf392b0f3, 
    0x10c71252, 0x49a25c6e, 0x43dc69b3, 0xb6d1ac7c, 0x001919e5, 0xf68f370a, 0x96a6d9bb, 0x3392cc64, 0x04054c15, 0xffe47892, 0xaeb55a00, 0x007eea5a, 
    0x47fc2dd5, 0xda5feaa1, 0xbb7ccc96, 0xb5733dcd, 0xc780efc1, 0x7020f604, 0x83e49c57, 0xdb5a7d5e, 0x499d72c4, 0x4e930d2c, 0x300c3c03, 0xb3f9f8ca, 
    0xe739cfc0, 0xcda7f51c, 0xf454aeca, 0x785b2257, 0x7bf391b1, 0xa2b19ee6, 0x3b060ae3, 0x516ba1e2, 0xe38f958f, 0x43259851, 0x9abacf91, 0xcb7faa2c, 
    0xcacebccf, 0x958a685f, 0x46e19c55, 0x4650684d, 0xc65b0d46, 0xaffd8876, 0x08511c91, 0x73af2797, 0x317f2455, 0x24557ecb, 0x7267f9d0, 0x56e5dffd, 
    0x30327f21, 0x2934f47b, 0x7eed357b, 0x7b01fe2b, 0x2195db7b, 0x7b402e7f, 0x586a3574, 0x87d1a384, 0x08774e43, 0x00ff8f85, 0x1bc7aaae, 0x999ee44c, 
    0xf6e6d2e4, 0x36fcda8f, 0xdb7bf30b, 0x2495b211, 0x2b298211, 0x61505541, 0x3f2d0546, 0xb50779ae, 0xc98033f2, 0x5b11abc0, 0xfe930664, 0xea0aabf9, 
    0x4b732ae3, 0x37135351, 0xaa1456a2, 0x88bb863d, 0xd0e93893, 0x24491255, 0x4daea69e, 0xe39e9817, 0x8ed936a5, 0x9aaa87c2, 0xd3a96674, 0xa1be5a72, 
    0x166e9416, 0xe7ca98ad, 0x42dca6a1, 0xbd5e6430, 0xd2aa58c5, 0xb8fc99b9, 0x8a7a47ce, 0xe7aa7272, 0x4551171d, 0xbda22bb7, 0x2f12974a, 0xd57bb853, 
    0x8e11a188, 0x925a6f79, 0x8389a9b5, 0x2abae576, 0x54e81355, 0x969bd98e, 0x56eb47f9, 0x7c8c3452, 0xaca6f1a3, 0xb413dce8, 0xb0921afa, 0x76a352ad, 
    0x524a8496, 0x4bdc907b, 0xbc8f76b1, 0x5aa94a7f, 0x2e0f0235, 0x6178aee0, 0xe3cf3f90, 0xa3aad05a, 0xa8d49216, 0x544f2449, 0x6ccb8be7, 0xe56aba8f, 
    0x63044936, 0x0f7a9227, 0x498dc65a, 0x4c6a5a42, 0xa6d0d324, 0x0f7d3c93, 0x47ad861e, 0xc1193f3a, 0x85c534f4, 0xd7cbf79d, 0x1838b5fb, 0x79a51518, 
    0x5fcb96d3, 0xdc1cefeb, 0x2385c458, 0x34f539e8, 0x7e5d66fa, 0x573ddcf0, 0x83c129fc, 0xe79a830c, 0xbbd5339f, 0x5ab9ef90, 0x8b7cb779, 0xa5f5b9d3, 
    0xbf595eb4, 0x934cb30a, 0x981d293f, 0xaa6e857f, 0x15670fa7, 0xe5b4f962, 0x29439943, 0x16d5d053, 0x0384140d, 0xbf5a0f82, 0x35193841, 0x773a6b14, 
    0x8c62ba56, 0xb86148b9, 0x1b6e850f, 0xa6a6d6d7, 0x38e16716, 0xf923de1f, 0xf4029553, 0xd4937aea, 0x6ee5d4d4, 0x4ec85be9, 0xf11461c5, 0x1af9c3fd, 
    0x38559678, 0x02f78978, 0x1c88679e, 0xbf29fd6e, 0xabc25369, 0xb762d813, 0x28fea46e, 0xf7ea857e, 0xdc789643, 0x35f63863, 0x2eade1b5, 0x9d8bdcd4, 
    0xc2322f46, 0xde063056, 0xc1294754, 0x8623c75d, 0xc4ead1ce, 0x2e56a40e, 0xcb635ce9, 0x8df82303, 0xccba686a, 0xc3cfea86, 0x0d93549a, 0xe69aee45, 
    0x8ee58777, 0x5619710b, 0x49603869, 0x1829f2dd, 0x18b710de, 0x6db2310d, 0x1c37bd2e, 0xdb87bd12, 0xb3785bd9, 0x685812c6, 0xa3696ff6, 0xe6a642d8, 
    0xf2dcc9e5, 0xcbd5ceb1, 0xecb8fc1c, 0x3f677730, 0x26973928, 0x58e2d6de, 0x48649523, 0x395995dd, 0x0fea010c, 0x561a74bd, 0x3be263a3, 0x5a0f8fbb, 
    0xcf5a5b58, 0xdbd6ad0b, 0x6cd24df8, 0x7f741308, 0x7e721032, 0x5fdc49fe, 0x8d357b3f, 0xa44fd9aa, 0x91a43ddf, 0x27005946, 0x125472c9, 0x3440c633, 
    0xe992a4dd, 0x9a3415f7, 0xeeb42856, 0x1e47e47e, 0x5c4a53a4, 0xead30d3f, 0xa6b44f2a, 0xa80f4370, 0x6ea309a7, 0x281e3f8e, 0x3fb4a1bc, 0xc8563d53, 
    0x72aeda8c, 0x9ce654ac, 0x43e86416, 0x82b47e8f, 0x56c009e9, 0xb244a9fc, 0xfc099111, 0x6b3f294e, 0xb0f17f6f, 0x0947dd7b, 0xa7d4f771, 0x5be7a7d7, 
    0x6a971e3a, 0x7aa71ecd, 0xd362c9b1, 0x9694698b, 0x88f65905, 0xe53c6dd8, 0x39db57d9, 0xf71b23f5, 0x0e549e84, 0xc377ebdd, 0xd7a22e0b, 0xa1765a16, 
    0x48d0bc3d, 0x41b45e92, 0x94315115, 0x98b92bc9, 0x7650d890, 0x87e11d0c, 0xc9c224c9, 0x9c3455e8, 0xe959128b, 0x7adcfdba, 0x0a2c877f, 0xbcbc3905, 
    0x00ff4692, 0x01151c46, 0x738bf949, 0x7106a6d3, 0x758111b8, 0xdc851d6f, 0x88d4c1d6, 0xfddd64a4, 0xb7661cec, 0x0e7f37fc, 0xdadda9b1, 0x2386d6e9, 
    0x77c5320c, 0x2b73716b, 0x638681ac, 0x3c160c19, 0x76ecf3f1, 0xdd393923, 0xd0563d9c, 0xb6949a69, 0x05795bf2, 0x3818801b, 0x00ccb703, 0xda3440fd, 
    0xe1bf6cbc, 0xa1ad34c7, 0x07c6dc50, 0xa6a09f04, 0xb673d2b4, 0x5424f616, 0xdd3722ab, 0x9dda7360, 0xebc57851, 0x46fabf1f, 0x8ca04b57, 0x010ce38a, 
    0x9fb608a6, 0x1efbca91, 0x27e50145, 0xcb3d56fd, 0x3c378f52, 0x34f10394, 0xbf743497, 0x43a11aea, 0xfe321f30, 0xe96fcd2b, 0xdebd4d5a, 0xd4c6b78e, 
    0xa10ecbdc, 0x1caa6e14, 0x519989ee, 0xda18e9fe, 0x6d7bbe18, 0x08d68ce7, 0x3f489e0d, 0x826f5d41, 0x97561722, 0x9766cfb1, 0x1e598536, 0x6d158249, 
    0xae1a73c1, 0xf381c032, 0x0084e364, 0x426d9b1f, 0xd345d7dc, 0xd712c849, 0x9bc7bac3, 0x48d9a267, 0xcc6e826f, 0x0e91ea8e, 0x4672ce70, 0x53073032, 
    0x470c38ce, 0x2c68712d, 0x7f8727ef, 0xc8c8d198, 0x38d8fb5f, 0xd544a3ae, 0xaa72c553, 0xffb684a5, 0x7f256700, 0xb6e5aed1, 0xd926cb42, 0x86b3bc19, 
    0x60551918, 0x7123637a, 0x6dd69e23, 0x25d5b4a2, 0x5824c584, 0x699fec20, 0x09cec865, 0xb1d78304, 0xa7c3df34, 0xbbd754e0, 0xa9ba50a1, 0xa63e60c1, 
    0x1c886798, 0xc2a9fc6f, 0x17210734, 0x5e56a7f2, 0x818e99e7, 0x9e135448, 0x0350d487, 0x7b0496e7, 0x29bdfe0f, 0xb353e9e9, 0x474e88d1, 0x1ffe74bd, 
    0x9fcb74d3, 0x176adf0f, 0x355e13b6, 0xc21166a9, 0xaa70cc5b, 0x23a86a1b, 0x7a0f7b2c, 0xc991f6e5, 0xe27ae090, 0x3602dfbb, 0x47a26b34, 0xf2e3cf49, 
    0x5c09d28a, 0x444e9ad6, 0x85775a56, 0xd9d180b5, 0xe7235cdb, 0x1de6e16e, 0x797282a4, 0xf2940f20, 0x5207ce78, 0xb7b88c2b, 0x61a97b6b, 0x279a9591, 
    0x8e9cf229, 0xed1a3f0e, 0x9d134f74, 0x9a961d62, 0xc4ab9004, 0x40129164, 0x42d2068e, 0x4ede008e, 0xe4280b06, 0x29cff19c, 0x63c158ae, 0xc25b5cac, 
    0x712b32f2, 0xf323b0bc, 0xd3fa7dfe, 0x34c7b576, 0x548a6eb9, 0xa4183850, 0xa8e48428, 0x4a56dc27, 0xd6484cdd, 0xcb3930da, 0x8c428154, 0x96d20700, 
    0x85118391, 0x19d7a76d, 0xdf9473aa, 0x7bdbc6bc, 0x9637cd91, 0xfedeaf36, 0xe6843f55, 0x5fdf0c5f, 0xb7c2516a, 0x43fb7737, 0x8d093649, 0x81543b07, 
    0xe7190f90, 0x55e9ab9d, 0x92cdaf45, 0x3a9ee7f9, 0x72da8ad5, 0x0fa36284, 0x45992f9b, 0x11afa57b, 0xbd5a17eb, 0x09a3aedd, 0x84963736, 0x6fb7e718, 
    0xc1f16098, 0x082cc7c8, 0x398821c7, 0x49de5415, 0x3bcd2b7d, 0x5cce9997, 0x0182e69e, 0xab861e04, 0x0852a9ad, 0x507b0493, 0xd3c209a5, 0xe6606b76, 
    0x279356e6, 0x60185764, 0xa8d6420d, 0xfa2be97e, 0x34a7e3d4, 0x38a95156, 0x26852c7c, 0x180000b6, 0x82da0303, 0xa8683270, 0x18a48de5, 0x8ae981df, 
    0xbcdfa498, 0xa8570bec, 0xfc9d95c7, 0xad16bfb8, 0x935e03dd, 0xdb92d6c3, 0xe2c4dada, 0xcdae4c59, 0x1cc0969c, 0x62b142fe, 0x493d4484, 0x935652ef, 
    0x36ec5e9a, 0xb772cafc, 0xf8dd69c2, 0xc535f5a2, 0x86e2edd5, 0x262f5e09, 0xe390a940, 0x4fbf4f3d, 0xe276e4fb, 0x92b8e6b3, 0x9ab866ee, 0x77c82343, 
    0x0cf51e33, 0x6e138991, 0x5144ef71, 0xb705c198, 0xa774dc0e, 0x57532929, 0x73b9a17a, 0x283c582d, 0xa80f46fd, 0x27128ca8, 0xd3ebb931, 0xa6a258a5, 
    0x3a1da735, 0x52d0a412, 0xb10c2a33, 0x383da5c0, 0xd28dbca8, 0xeddd766f, 0xbf28988a, 0xa85b8989, 0x4e00d30d, 0xb53b3d55, 0x25be686f, 0x7bb5449f, 
    0x91e26d78, 0xb3e5f75d, 0xfa7600c7, 0x39143556, 0x990f9abe, 0x07b5a1a7, 0x6fad6f8c, 0x2d887c2f, 0x12b75be3, 0xb6c20b85, 0x493d6200, 0x3d7d4ec6, 
    0x79e226eb, 0xa779a62e, 0x1c922473, 0xae7a37b3, 0x70756ef1, 0xa9f523d8, 0x9a4baa2a, 0x4dca31cd, 0x83c38cd8, 0xc39e6294, 0xf34de5a7, 0xa6ef8f25, 
    0x35b5eae1, 0xe64f9514, 0x70371757, 0xc0c197a6, 0xb7833e19, 0xb79495d6, 0xf88eb601, 0x51a842eb, 0x2a151885, 0x418b5dc9, 0xb9e5e402, 0x6e859d3e, 
    0xb825be68, 0x089e6dd1, 0xef408e60, 0x3d2797bc, 0x8b95fe00, 0x14cc1c45, 0x4847779a, 0x8cd43cbe, 0x3728a22c, 0x07396cef, 0x8f819381, 0x57f88161, 
    0x9734713d, 0xb9d3bc53, 0x98e51c79, 0x55a326f5, 0xce1dbb0b, 0x57ca6969, 0x6c520e7a, 0x1d7a196e, 0xa1f5d0c3, 0xa3e30464, 0x23751a7a, 0x19866128, 
    0xe29eae14, 0x288a16f5, 0xfb5510a9, 0xd5510f0d, 0xed6c6921, 0xda56d4bc, 0x1f5cf54e, 0x0ad5fbc4, 0x09083cef, 0x3840eed1, 0xfb8f7326, 0x5d4555e4, 
    0x4945b8d8, 0xbed49cd9, 0x42e1d616, 0x1dd860ed, 0xfcb1ba76, 0x0882ac81, 0x57042338, 0x7a36e9a7, 0xed149f9e, 0x496f7a7d, 0xa30ea200, 0xbcd6e71e, 
    0x1d3251e7, 0x88a5e54a, 0x312bedc2, 0x0e00ff8c, 0x514e714e, 0xa2e01cb2, 0x8aa256ae, 0x8ac20c2a, 0xaf02a028, 0x8e7a68d8, 0x674b0ba9, 0xb6a2e66d, 
    0xe0aa77d2, 0xa8de27fe, 0x40e07957, 0x01728f4e, 0x7f9c33c1, 0x2aaa22df, 0x2ac2c5ee, 0xa5e6cc4e, 0x0ab7b6f0, 0xc0066b17, 0x8fd5b5eb, 0x10640de4, 
    0x2218c141, 0xb3493fbd, 0xa7f8f4d4, 0x7ad3eb6b, 0x75100548, 0xb53ef718, 0x90893ae7, 0x2c2d57ea, 0x59691746, 0x72f8678c, 0x8d728a73, 0x1505e790, 
    0x5114b572, 0x51146650, 0x7e150045, 0x75d443c3, 0x3b5b5a48, 0xb615356f, 0x0757bd93, 0x42f53ef1, 0x0202cfbb, 0x0e907b74, 0xfee39c09, 0x575115f9, 
    0x52112e76, 0x2f356776, 0x50b8b585, 0x073658bb, 0x7facae5d, 0x82206b20, 0x15c1080e, 0x9e4dfae9, 0x3bc5a7a7, 0xd29b5e5f, 0xa8832840, 0xaff5b9c7, 
    0x874cd439, 0x6269b952, 0xcc4abb30, 0x93c33f63, 0x6c94539c, 0xab283887, 0x8aa2a895, 0x8aa23083, 0xf6ab0028, 0xaaa31e1a, 0xdbd9d242, 0xb4ada879, 
    0x3fb8ea9d, 0x15aaf789, 0x131078de, 0x7080dca3, 0xf71fe74c, 0xbb8aaac8, 0x938a70b1, 0x7ca939b3, 0x85c2ad2d, 0x3ab0c1da, 0xf96375ed, 0x10045903, 
    0xaf084670, 0xf56cd24f, 0xda293e3d, 0x92def4fa, 0x461d4401, 0x79adcf3d, 0x3a64a2ce, 0x114bcb95, 0x6356da85, 0x9c1cfe19, 0x64a39ce2, 0x5c45c139, 
    0x541445ad, 0x51148519, 0xfe760540, 0x8bb7b809, 0xae49b948, 0xc7b48c23, 0xf703dc01, 0x55147145, 0xa8dcd945, 0xefdc95cb, 0x4f336d34, 0xa97b27d0, 
    0x05e5b835, 0x5108da48, 0xd79c8cf8, 0xc5dfaf29, 0xdd336ba9, 0x888d0842, 0x20c1480a, 0xa8b3660c, 0xc8eacaa1, 0x4856576e, 0x928aa228, 0xa0288a02, 
    0x047fbb02, 0xa4c55bdc, 0x11d7a45c, 0x80635ac6, 0xa2fb01ee, 0xa22a8ab8, 0x6554eeec, 0x9a77eeca, 0xe8a79936, 0x9ad4bd13, 0xa48272dc, 0xfc28046d, 
    0x946b4e46, 0xd4e2efd7, 0xa1ee99b5, 0x05c44604, 0x06906024, 0x50d45933, 0x376475e5, 0x1424ab2b, 0x01494551, 0x01501445, 0x6e82bf5d, 0x2ed2e22d, 
    0xe3886b52, 0x77c0312d, 0x5cd1fd00, 0x76511545, 0xe5322a77, 0x1bcd3b77, 0x09f4d34c, 0x6e4deade, 0x36524139, 0x237e1482, 0x6bca3527, 0x5a6af1f7, 
    0x8250f7cc, 0x92026223, 0x19034830, 0x7228eaac, 0x951bb2ba, 0x280a92d5, 0xa280a4a2, 0xae00288a, 0x1637c1df, 0x291769f1, 0x9671c435, 0x803be098, 
    0x22aee87e, 0x3bbba88a, 0xbb721995, 0xa68de69d, 0xef04fa69, 0x1cb72675, 0x411ba9a0, 0x93113f0a, 0xfb35e59a, 0x662db5f8, 0x1141a87b, 0x184901b1, 
    0xd68c0124, 0x5d391475, 0xeaca0d59, 0x511405c9, 0xd9ff4152, 
};
};
} // namespace BluePrint
