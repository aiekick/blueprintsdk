#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Swap_vulkan.h>

namespace BluePrint
{
struct SwapFusionNode final : Node
{
    BP_NODE_WITH_NAME(SwapFusionNode, "Swap Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Move")
    SwapFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Swap Transform"; }

    ~SwapFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Swap_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_reflection, m_perspective, m_depth);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _reflection = m_reflection;
        float _perspective = m_perspective;
        float _depth = m_depth;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Reflection##Swap", &_reflection, 0.0, 1.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_reflection##Swap")) { _reflection = 0.4f; changed = true; }
        ImGui::SliderFloat("Perspective##Swap", &_perspective, 0.0, 1.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_perspective##Swap")) { _perspective = 0.2f; changed = true; }
        ImGui::SliderFloat("Depth##Swap", &_depth, 1.0, 10.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_depth##Sqap")) { _depth = 3.0f; changed = true; }
        ImGui::PopItemWidth();
        if (_reflection != m_reflection) { m_reflection = _reflection; changed = true; }
        if (_perspective != m_perspective) { m_perspective = _perspective; changed = true; }
        if (_depth != m_depth) { m_depth = _depth; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("reflection"))
        {
            auto& val = value["reflection"];
            if (val.is_number()) 
                m_reflection = val.get<imgui_json::number>();
        }
        if (value.contains("perspective"))
        {
            auto& val = value["perspective"];
            if (val.is_number()) 
                m_perspective = val.get<imgui_json::number>();
        }
        if (value.contains("depth"))
        {
            auto& val = value["depth"];
            if (val.is_number()) 
                m_depth = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["reflection"] = imgui_json::number(m_reflection);
        value["perspective"] = imgui_json::number(m_perspective);
        value["depth"] = imgui_json::number(m_depth);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue525"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_reflection  {0.4f};
    float m_perspective {0.2f};
    float m_depth       {3.f};
    ImGui::Swap_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 8587;
    const unsigned int logo_data[8588/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xe6003f00, 0xc232cdf4, 0xded12a4d, 0xa099d9c6, 0xa4c45842, 
    0xd273b493, 0x6500ffac, 0x0ff4bf69, 0xbf00ffb5, 0x6914fe2b, 0xb207f25f, 0x78af00ff, 0x11f400ff, 0x49d0eb56, 0xf6a78258, 0x00ff9b56, 0xfb5ffb40, 
    0x47e1bff2, 0xff9b56f6, 0x5ffb4000, 0xe1bff2fb, 0xaf96ea56, 0xa69bfd7f, 0x973672cb, 0xd00d8451, 0x491a6ab7, 0x657f075c, 0x0ff4bf69, 0xbf00ffb5, 
    0x7f14fe2b, 0xf4bf6965, 0x00ffb50f, 0x15fe2bbf, 0x8af8a193, 0xecfbfee6, 0x1147b1b7, 0xd51edd74, 0xcffd9e2b, 0xa33474a5, 0x327425cb, 0x9b56f6a7, 
    0xfb4000ff, 0xbff2fb5f, 0x56f647e1, 0x4000ff9b, 0xf2fb5ffb, 0xe856e1bf, 0xcc11b2aa, 0xc24a7859, 0x77dec2e6, 0xb134e49a, 0x7119902b, 0xa9f40192, 
    0x0be100ff, 0xbde77fd3, 0xbff6fdd7, 0xe96a4dfc, 0xb207f25f, 0x78af00ff, 0x11f400ff, 0x3815ea56, 0xe7dc61db, 0x0be100ff, 0xbde77fd3, 0xbff6fdd7, 
    0xf01f4dfc, 0xf3bfe985, 0xfbfeebde, 0xba26fe5f, 0x7ff5e60a, 0xeaa74f13, 0xa318de86, 0xe6db6378, 0x3c390912, 0xd2710e90, 0xab08a394, 0x7f921ab4, 
    0xffa617c2, 0xaf7bcf00, 0xf87fedfb, 0x0be13f9a, 0xbde77fd3, 0xbff6fdd7, 0xa36f4dfc, 0xa7ae88ac, 0xd220c32a, 0x76387bd5, 0xefc59c0b, 0xac2dac84, 
    0xae49272e, 0x3813454b, 0x00199705, 0x2be44a9f, 0xedd35ad5, 0xe7f06ce8, 0xc2ca03ed, 0xe3ee980f, 0xa46a7e8f, 0xedd1075e, 0xbc3d4543, 0x9363b8d2, 
    0xfb328434, 0xabfc7161, 0x06e31093, 0xdc517389, 0x1d3cade6, 0x6e38abf6, 0xcdb7df3e, 0x936f5f8d, 0x1f67649c, 0x00ffa67a, 0xa2fe1f84, 0xff03f93f, 
    0x83aeb200, 0x9000ff4a, 0x7bfd973d, 0xa000ffc7, 0x2a5db78a, 0x57b12d94, 0x41f84f39, 0x23ea00ff, 0x3f9000ff, 0xe13f2afb, 0xa800ff07, 0xff40fe8f, 
    0xa7abec00, 0x81b6649e, 0x23e194e6, 0xab7dcc52, 0x13d7453f, 0x0f031257, 0x3b782491, 0x3dc86e0b, 0xce5e0afa, 0xb30b769a, 0x7f10fe23, 0x00ff88fa, 
    0xcafe0fe4, 0x57c19ba0, 0x7741e06a, 0x4b8e8b0c, 0x413f8782, 0xa7a8ec9a, 0x2ed8a1ec, 0x2dc46d79, 0x0e2c736d, 0xa19c6841, 0xc541a623, 0x0f975e47, 
    0x4e5dfbc3, 0x8aa3eee9, 0xfc99e5fa, 0x573e12c9, 0x2e1c9c93, 0x9edeeb40, 0x03a11f7c, 0x3f826183, 0x00ffabe9, 0xcae755f1, 0x581d3269, 0xc38b84a3, 
    0xa4f0b49a, 0x496edad1, 0x319f3214, 0x77e44146, 0x2fc27fa7, 0xcf00ffac, 0x4f45fe9f, 0x4adbaef1, 0x3d9000ff, 0xc77bfd97, 0x8aa000ff, 0x8cca5db7, 
    0x9fe72e5a, 0xac2fc27f, 0x9fcf00ff, 0xf14f45fe, 0x7d11fea3, 0xff7cfe67, 0x7f2af200, 0xa67a768d, 0x47a46daf, 0x8d2cdc1b, 0x201412e6, 0x22f5f104, 
    0x255cdbac, 0x1157b4d5, 0x18aa64e7, 0x2fcda867, 0xe1da0b63, 0x00ff8373, 0xff595f84, 0xfc3f9f00, 0x55e39f8a, 0xcdbbb42f, 0xe1da6737, 0xedccfcf2, 
    0x31ce81f9, 0x57dc879e, 0xed4b55a6, 0xd95cd302, 0x4f26a9f6, 0xa67c3b27, 0x73c63903, 0x6a2a7d90, 0xe4228c53, 0xcf6a2b27, 0x4abda234, 0x655ac0d3, 
    0xd2607bc4, 0x8031b9a7, 0x63a4d51d, 0x064e3bf5, 0xf82f6a70, 0xf91f3444, 0xc800fff0, 0xc500ffcf, 0x44b41f57, 0xd28d58fb, 0x650fe4bf, 0xf15e00ff, 
    0x22e800ff, 0x2b4dd5ad, 0x5ff640fe, 0xfe1feff5, 0x7add2a82, 0xb98262ab, 0x065f181f, 0x96c882bb, 0x200fd3f2, 0x00fff31d, 0xd775fed6, 0x243a7456, 
    0xa9cf6a11, 0x67926519, 0x0c8c0dcf, 0xc5e971fa, 0xb292d34c, 0xfd2b391a, 0x2bf5d55e, 0x293ecd5b, 0xac003020, 0x3a9001a4, 0x579c3e74, 0x3ca90c77, 
    0x28672c29, 0x501f18ea, 0x4f470d6a, 0x36b45387, 0x480a96d3, 0x4750af20, 0xd1c63aa5, 0xb6e36c6c, 0x31d61d49, 0xc7195f80, 0x71314ae1, 0x51140b6c, 
    0xa6226845, 0x2000ff95, 0xf7fa2f7b, 0x4100ff8f, 0x69aa6e15, 0xb207f25f, 0x78af00ff, 0x11f400ff, 0x802de956, 0x6ce5f682, 0x6eb9a6ec, 0x7a6ca191, 
    0xa31e09d7, 0xe465fa68, 0xf7485157, 0x82793277, 0xf6000355, 0xce9febef, 0x28cbbbbb, 0x2ef2e02f, 0x72329a15, 0xfcb96240, 0xf1f6f6a9, 0x10a45b5a, 
    0x60d04820, 0xc9c1890a, 0xc5f0cd8c, 0x3834dacf, 0x16cf7d41, 0x78b0bd51, 0x5a2b961f, 0xd6695aab, 0x5b2b2fb6, 0x4ef36346, 0x338e01e6, 0xb30a3aec, 
    0xb3d21455, 0x4fc26211, 0x93b6512b, 0x4626bb28, 0x605482cb, 0x1fe7b88e, 0xe5d4d34a, 0xee527d8a, 0x72b45868, 0x7bacec4c, 0x73cd4982, 0x9cad64f7, 
    0x112933e4, 0x084e05b1, 0x73bdb7e3, 0xd6976b71, 0xb94ba281, 0xc83c6e18, 0xb6f9c37c, 0x785ce14f, 0x7346dbb4, 0x95f6668b, 0x7b2000ff, 0x8ff7fa2f, 
    0x154100ff, 0x5f69aa6e, 0xffb207f2, 0xff78af00, 0x5611f400, 0x686cb5eb, 0xb92fde73, 0xb2206d95, 0xe59a5985, 0x928c428e, 0xc8fc3806, 0x5e92aafc, 
    0x2c89b72d, 0x8b3b5be7, 0x408c772b, 0xddedb144, 0xeec30fd4, 0xbdd455fe, 0x93cc12b4, 0x913c0a49, 0xc965c6fd, 0xdb13a55f, 0x4f147241, 0xe5144a0a, 
    0x3538a877, 0xf76e839b, 0x54142d19, 0x40dbdd52, 0x8ab826fb, 0xbb76c636, 0x5aeb7180, 0x25fcec88, 0xf1e95aa9, 0x48662e4c, 0xbb1286cc, 0x5b2188d5, 
    0xb88eee27, 0xc98aefe9, 0xbfe478bd, 0x672792b8, 0xac62a58d, 0xe06458fd, 0x1ae07a9f, 0x9abf77fa, 0x02e7af48, 0x4c807239, 0x1ccf08c5, 0x187e8c03, 
    0x3589b7a7, 0xe4a67225, 0x8b701c64, 0xcee315fe, 0x4219b32d, 0xd2d9584d, 0x650fe4bf, 0xf15e00ff, 0x22e800ff, 0x9d2ed6ad, 0x69f1e9ad, 0xaebcb196, 
    0x60452119, 0x51c87321, 0xb77f56ed, 0xedf9dff4, 0x93f8fd27, 0xaf8900ff, 0xdc364a55, 0x6fd5c5dc, 0x11f1246e, 0x7949d811, 0xd9149a15, 0xbc2e4f1e, 
    0xf4384092, 0x84df2afc, 0x9eb708ee, 0xe47855c6, 0x1bcb4282, 0x6f4f55f0, 0x5a9d3fcf, 0xa1d1578f, 0x76bf7877, 0x2dbb1cd2, 0xdfc782b3, 0x0bade7e5, 
    0x3bcbe8ab, 0xc34abc4e, 0x7db6200d, 0xbe9d7bc4, 0x4a59a1c2, 0xac5a03f7, 0xe11f7fda, 0xe9aec958, 0x6f2770ce, 0xcc1f27c6, 0xa9b37e56, 0xa50d88a3, 
    0x603ecad4, 0x1e8f5cde, 0x33c6757a, 0x53a95d53, 0xae243269, 0x858f7aac, 0x5a6cadaf, 0x189ab957, 0x996f2cf1, 0xae801303, 0x177f5c09, 0x9afa3acc, 
    0xc7c938c0, 0xb5ade24a, 0x08a345dd, 0x85097897, 0x3f31d41b, 0x137f8253, 0x0900ff49, 0x00ffa32e, 0xe2f83f3f, 0x798500ff, 0x32d62eae, 0x64ac9570, 
    0xfeb6f8db, 0x1228dada, 0x20b1621b, 0x70b64a40, 0x4f6a3d06, 0x2f354df8, 0xff6be1f9, 0xff377c00, 0xec571500, 0x736125bc, 0xcd3b6f61, 0x95581a72, 
    0xc9b80cc8, 0xff54fa00, 0xe985f000, 0xebdef3bf, 0xfe5ffbfe, 0x1a05bd26, 0xd0e9dcb6, 0x8400ffc9, 0x00ff52d3, 0xf7bf169e, 0x54f17fc3, 0xa969c27f, 
    0x5f0bcf7f, 0xf8bfe1fb, 0x00ffd6aa, 0xff4d2f84, 0x5ff79e00, 0x00ffdaf7, 0xc27f34f1, 0x00ffa617, 0xfbaf7bcf, 0x9af87fed, 0x867bb57c, 0x26fc4f86, 
    0xf0fc979a, 0xbe00ffb5, 0x8a00ff1b, 0x4d13fea3, 0x5a78fe4b, 0x2ddf00ff, 0x55c500ff, 0x5809dffb, 0x4e5c585b, 0x8a965c93, 0x2e0b7026, 0x953e0132, 
    0xbde16787, 0x2ed5fe5a, 0xc83c6dad, 0xcc5b3b5f, 0x1e1c9c41, 0x9c15f509, 0xc56e38e5, 0x00ff5e74, 0xff51d384, 0xdf169e00, 0xf17fcbf7, 0x69c27f54, 
    0xbdcf7fa8, 0xdff2fdb7, 0x00ff55e3, 0xbfd710e1, 0x00ffc3e7, 0x00ff2723, 0x22fc4715, 0xf8fcf71a, 0xff64e47f, 0x3daae200, 0xd11ceeb3, 0x588b56ee, 
    0x3192289e, 0xa108c025, 0x0e5c2e46, 0xff53bb3d, 0x3f2eb700, 0xfed7ade7, 0xd6f83f05, 0xbe83a795, 0xc70d67d5, 0xb1f9f6db, 0x73f2edab, 0xefe38c8c, 
    0x83f0df54, 0x47d400ff, 0x7f2000ff, 0x85a255f6, 0xff63e841, 0x7f5c6e00, 0xfcaf5bcf, 0xa3f17f0a, 0xfee372fb, 0xe07fdd7a, 0x8d00ff53, 0x0fc27f6c, 
    0x1f5100ff, 0x00ff81fc, 0x00ff51d9, 0x44fd3f08, 0xff07f27f, 0x25476500, 0xfec7d040, 0x00ffb8dc, 0xf85fb79e, 0xe300ff14, 0x016ed740, 0x7f7299cf, 
    0x00ffe9ed, 0x68ae9dc6, 0x47ded87f, 0xe79d4ffa, 0xb80dfe6e, 0xadcf3dc6, 0x0800ff49, 0x00ffbd86, 0x19f91f3e, 0xceaaf83f, 0x6c767152, 0x37724b1b, 
    0xdd68a7d7, 0x52ee9809, 0x23866b3e, 0xed4735f2, 0x7224496e, 0xfe4beb7d, 0xfe7b0d11, 0x32f23f7c, 0x6655f17f, 0xc4fac0df, 0x419096d1, 0xd9c6416e, 
    0xff3ec924, 0xa1222800, 0x3cd93dcd, 0x4765eed1, 0x54e318a9, 0x01b4b3f2, 0x6afddf9d, 0xffa9f677, 0xf85f9e00, 0x5a00fff7, 0x1d3cadb5, 0x6e38abf6, 
    0xcdb7df3e, 0x936f5f8d, 0x1f67649c, 0x822f9b7a, 0x438444af, 0x66a70373, 0xe14fca7d, 0x6eebfc83, 0x6568854a, 0x9f6a00ff, 0x00ffe5f9, 0xa8f57f8f, 
    0xf33fd5fe, 0x1e00ffcb, 0x56eb00ff, 0x7a21fc8f, 0xb5f7fc97, 0xdbbe00ff, 0xa38900ff, 0x4bbd10fe, 0xffda7bfe, 0xff6ddf00, 0xcbd1c400, 0x6768b053, 
    0xf99f6a7f, 0x8f00ffe5, 0xf1a9f57f, 0x711e2deb, 0xbff65f17, 0x3d5ed5fa, 0x4d6dea36, 0x4b10e8b4, 0x01931d70, 0x73ae0480, 0xaba1c7c9, 0x88f000ff, 
    0xe1f3df6b, 0x939100ff, 0xac8a00ff, 0x13bbeddc, 0xfe506e69, 0x77cd93d0, 0x71ce1b03, 0xdb6f7a9f, 0xebc7391f, 0x80f0df5b, 0xf1f3bfea, 0x7d00ff67, 
    0x1300ffb7, 0x3a20fc47, 0x59fcfcaf, 0x6ddf00ff, 0xd4c400ff, 0xb9b84773, 0x4dc5dce3, 0x9e6aa444, 0x3380765e, 0xa6fd9dba, 0xfe97e77f, 0xd600ff3d, 
    0x12fed6ab, 0x8ab6b9bf, 0x2cd89a74, 0xcd021ca8, 0x4a9f119c, 0xbd10fe93, 0xda7bfe4b, 0x6ddf00ff, 0xd6c400ff, 0x56ecb3fc, 0xdfd46086, 0x8e607427, 
    0x6aa038d8, 0x31e6b86f, 0x35cfb0b7, 0xb5832fa1, 0xad2ce338, 0x027fa404, 0xc0fcc939, 0xba52ad1f, 0x2b3b75d0, 0xb6b8b876, 0x736312d9, 0x9c8c536f, 
    0x9af43e76, 0x7f03e89a, 0xf2fccfb4, 0xbfc700ff, 0xb71cd5fa, 0xd9a82aed, 0xbf9ea48d, 0xe8acd2e7, 0xb9de05da, 0x48967de7, 0xbbdbc953, 0x9c3362cd, 
    0xd20718e3, 0xe100ffb4, 0xe77fd501, 0xfbfecfe2, 0xb226fe6f, 0x27365b73, 0x8519ad28, 0xe791fc1d, 0x49ef7300, 0xeffec6f6, 0xf0df5beb, 0xf3bfea80, 
    0x00ff67f1, 0x00ffb77d, 0x20fc4713, 0xfcfcaf3a, 0xdf00ff59, 0xc400ff6d, 0x5c44f3d4, 0xba74eef1, 0xec81fc57, 0x3fdeebbf, 0xba5504fd, 0xc87fa5a9, 
    0xbdfecb1e, 0xd000ffe3, 0xe6705945, 0xae901136, 0xc848da41, 0xa25ee907, 0xff5e0ed8, 0x4dba5300, 0xeec85b6a, 0x93761624, 0x33c60bc7, 0xe20e82b4, 
    0xf307b147, 0x07abd415, 0x0872ca50, 0x88b53ec8, 0xf6662b3c, 0x7b3f2eae, 0xb889fb76, 0x93980fcb, 0xe338b783, 0x6e61a935, 0xdb3096f6, 0xa2912049, 
    0xe382bb5d, 0xe9e37420, 0xf5240551, 0xfe57cd18, 0xf5bff740, 0x82fe27ef, 0xff10de69, 0xcf5e9100, 0x00ff07fe, 0x5537b5a1, 0x3d9000ff, 0xc97bfdef, 
    0x9aa000ff, 0x5e7de1ab, 0xd6c3d7c2, 0xd93ecdb0, 0xd6467e17, 0xf4c9f938, 0x435f5cae, 0x3df18a3a, 0x6dd1440f, 0x24411b35, 0xf2f226ed, 0x55e55828, 
    0x8d54b563, 0x4e2c41a8, 0x0a2b467d, 0x5be36799, 0x5644186b, 0x310c51f7, 0xdcb77675, 0x900048c8, 0x2a80e348, 0x4b8bf883, 0x63b8198f, 0xedc2ee9f, 
    0xb57085fc, 0x682dc6a6, 0x57ba8aac, 0xbfec81fc, 0xfd3fdeeb, 0x60a65504, 0x008859aa, 0x557b920c, 0x40fe2b5d, 0xeff55ff6, 0x2a82fe1f, 0xbb77eb4b, 
    0x25d99ab2, 0xae541911, 0x0fb0bbe2, 0x573b325e, 0x4c3ab6b4, 0xbd532b7d, 0xdd885097, 0xf2b50d4a, 0xb4e9d6c8, 0x80a74d06, 0x6fcdfe71, 0x1a5e4cd6, 
    0x0992a0d3, 0x588a5760, 0x73f53658, 0x07b163f3, 0xa5d61a3c, 0x67d4d204, 0xf98fe329, 0xb600ff71, 0x772dfb9f, 0xe3f8c195, 0xed7f5cfe, 0x5dcbfea7, 
    0x99f6f667, 0x5f3f00ff, 0x857fe3f8, 0xefa5f879, 0xd84dd598, 0x6df46cee, 0xe2c2e33e, 0x00ffede5, 0xd2b44dd2, 0xbb6382f9, 0xb301c428, 0xfca71ea1, 
    0x8fa4966b, 0x76f6f6c7, 0x8d4ecc02, 0xabf1961f, 0x90d9997d, 0x8160cb31, 0xf5ed5491, 0x32e63e8d, 0x0020ddf1, 0x8c99f7e3, 0x5c834dfe, 0x67685bf2, 
    0x28b2a225, 0x07f25f69, 0xaf00ffb2, 0xf400ff78, 0x6ed44e11, 0x3d9f86c5, 0xd0eec7d1, 0xd8730f90, 0xe9a6787e, 0xb207f25f, 0x78af00ff, 0x11f400ff, 
    0xa64fea50, 0xbbb66ddc, 0x2e3f86bd, 0xa48d7645, 0x801cbb51, 0xd96bec41, 0xcd4827fb, 0x65eaf20e, 0xd5fdd69e, 0x6ed8adee, 0x58f9002a, 0xd6e37464, 
    0x13222bb5, 0x9b5f5ba2, 0x48db7bbb, 0x31cb8f49, 0x1e2a22c7, 0xf50e9c73, 0x4fdbf6a3, 0xfe87faf9, 0x7a510afe, 0xa227076a, 0xfec800ff, 0x7fe2eb7f, 
    0x75e8f5e4, 0xcc5dfae6, 0xaedd7830, 0x84089024, 0x91c31df3, 0xae746cc8, 0x6d12fecf, 0xc97bfe27, 0xf28000ff, 0xe535f17f, 0xc6c84d55, 0x77e86daa, 
    0x80359af7, 0x059fe7f0, 0x6b4917a8, 0x6296e50c, 0xb8b1dbcc, 0x9331ec94, 0x56aef09f, 0x34e349af, 0x2468017b, 0x02f793d3, 0x79a4ccdc, 0xce380685, 
    0x7fb2e27b, 0xe7bf2cb4, 0xf8fb0ff2, 0x96b3c63f, 0x3d2b11bb, 0xfe2bbd8c, 0xf55ff640, 0x82fe1fef, 0xdcc59a29, 0xc0049696, 0xd695b840, 0xe6fd7328, 
    0xf8b3fe3f, 0xbbbb7453, 0xd56cd265, 0x400462ae, 0x8fe38280, 0xc75d5294, 0x04cddea6, 0x3a311797, 0xcb8858c0, 0x632446a9, 0xb5e37a90, 0x74f7377b, 
    0x7b34893a, 0x62d3bec6, 0xcbf55f96, 0x500f4af2, 0x4f9f83c3, 0x78abc65f, 0xeb45fea3, 0xfe07f8af, 0x36f02986, 0xc42da597, 0x8ea8dc90, 0x42620e46, 
    0xf2e92918, 0x56fa8caa, 0x8b35887f, 0xe212ad1b, 0x76766518, 0x716280db, 0x23f540fc, 0xe37e3215, 0x3c7c804d, 0x879800ff, 0x00ffb2fd, 0xaeb4ebd9, 
    0x1037c01f, 0x00fff641, 0xdde3683a, 0x017be3e5, 0x5debbd9f, 0x9785f687, 0xff41fefc, 0xf8077f00, 0x883f93d7, 0xe6bda8e6, 0xd121de76, 0x365dcb34, 
    0x6f4b6be6, 0x55794b2a, 0x9331773f, 0x135c8e83, 0x5efef5f2, 0xfdd5c8b5, 0xa88bc643, 0x490bcbdb, 0x2a2742a7, 0x1a706865, 0x4932bd4d, 0xfb0f2b3d, 
    0x00ff4a6b, 0xfd9f9da0, 0xf15f00ff, 0x05bd5aa2, 0xe0885e3d, 0x5ba6ee6d, 0x5c5d9468, 0x02000828, 0xe9710077, 0x9cbc799a, 0xbafbf80f, 0x87c000ff, 
    0xc01a00ff, 0xce39bba2, 0x793575b3, 0xe90b4b11, 0x13338dbe, 0xae5213f9, 0x18ea72ab, 0xfe834d5d, 0x8a76aed9, 0xde58d839, 0x5e2ed4b9, 0x996b54d6, 
    0x82206448, 0x852a9ee7, 0x75cbc6ad, 0xf3cff45c, 0xc95414aa, 0xeb8d05f3, 0xfef2b57b, 0xcec90860, 0x5e8fe740, 0xf7ba08d5, 0x6c2a7aac, 0x58213516, 
    0x48cc947c, 0x5492d14e, 0xe4c9527a, 0x461016aa, 0x68e30cc4, 0xca0a00ff, 0x6698afa2, 0x81c6dd9a, 0xf3c62416, 0x357e0cd0, 0x58ef9f3f, 0x05cc51b4, 
    0xf9f745dd, 0x95fed97e, 0xd67b5d64, 0x512f154d, 0xdc517434, 0x54726d44, 0xef79da16, 0xbdcf8555, 0xc14a5163, 0xb1195a63, 0x47d16304, 0xe99aa4f2, 
    0x202f0391, 0x95957e1e, 0xcd305f45, 0x9467bb45, 0x7354618c, 0xf9a7b99e, 0x4591f5fe, 0x8959c01c, 0xff05eaf6, 0xeb6fda00, 0xf76a1f5a, 0xbad87faa, 
    0x2f03fdaf, 0x7fc3ef3f, 0xbad81f85, 0x2f03fdaf, 0x7fc3ef3f, 0xc9ec6685, 0x9ab16676, 0x0038231f, 0x9c2007ec, 0x7f55f9e7, 0x1fd5fbb4, 0xfe575dec, 
    0xf79f9781, 0x8fc2bfe1, 0xfe575dec, 0xf79f9781, 0x8dc2bfe1, 0x533ca105, 0xe81914e2, 0x6653f9a3, 0xc8da75b9, 0x35a803c3, 0xcc69459b, 0xcb0da359, 
    0x1c7696b2, 0x29e8009e, 0xb76f53b7, 0x7f5ccf65, 0xd356a13a, 0x8da4d449, 0xba4e8f64, 0xb20a6074, 0x7b10c4c2, 0xc25c8a83, 0xe54ba71d, 0xfef89ef9, 
    0x3eed7bb5, 0x031d52f5, 0x1a519e57, 0x9b21b769, 0x0fca78a1, 0xb30ae0cc, 0x860800ff, 0x3e00ffbd, 0x3f19f91f, 0x6e87aaf8, 0xe51eb7e4, 0x8d159ed9, 
    0x2015e4ca, 0xaa399b0f, 0xa8f769df, 0x10e100ff, 0xc3e7bfd7, 0x272300ff, 0x471500ff, 0xf71a22fc, 0xe47ff8fc, 0xe200ff64, 0xc53d5ea9, 0xf437f778, 
    0x690e00ff, 0xb3b6e933, 0xe4b96949, 0x988f1985, 0x4f8024c3, 0x0f6f927a, 0x03d97ef8, 0x29710ccf, 0xb2f30c38, 0xd572fa8c, 0x00ff4a7f, 0xfd973d90, 
    0x00ffc77b, 0xabab8aa0, 0xdc5f5dda, 0x23700445, 0xcdeca8c0, 0x8805ed23, 0x39c131da, 0xbdd29300, 0xeca8580e, 0x8bf09f50, 0xe7f3dfe8, 0x5f9100ff, 
    0xf19f6bfc, 0xa6679756, 0x90ec97fd, 0xfd667ef9, 0xc63931df, 0xe63e75dc, 0xae39ddba, 0xb51fc21a, 0x80c249a1, 0x477290e0, 0xadd7e319, 0xff38be73, 
    0xfb1f9700, 0xb200ff69, 0x798cd4d4, 0x6723902e, 0x9f66dac2, 0x59cbe171, 0x96b6b167, 0x7897df46, 0xdbf98995, 0x69b915b9, 0xdb0bbbe1, 0xd2b6b694, 
    0xfb57de6c, 0xcfa0e4ab, 0x336bea19, 0x2bf21fc2, 0xc000ffd9, 0x36f400ff, 0x12c3bfae, 0xb4225e24, 0x43511d79, 0x008e5936, 0x6f794df9, 0xeeccb1e2, 
    0xe6bd62e7, 0xc1a37d85, 0x046dda17, 0x02911f11, 0x3a3090b2, 0xa9e27870, 0x48ad4b57, 0x5b8df0bf, 0xb7b630c1, 0x5bc9399e, 0x2e43697b, 0x46cc0fd2, 
    0xeff7394f, 0x29d55cef, 0xac64322b, 0x3f0d39f4, 0xfa4c9ac3, 0x5ad2ac6d, 0x4621796e, 0xc930e663, 0x9fde1320, 0x0dbde173, 0xd9272350, 0x8c0a46da, 
    0xe8932026, 0xfc091237, 0xff4a432b, 0x973d9000, 0xffc77bfd, 0xce8aa000, 0x1b756cd6, 0x547bb6cb, 0x8f306c8f, 0xef60bb28, 0xef2b1bdc, 0x3ace81f2, 
    0x15e3aed7, 0x3fb28e1d, 0xdff442f8, 0xff75eff9, 0xffaf7d00, 0x62581300, 0xc63b3dca, 0xb3b0d636, 0x0e734732, 0x254f900b, 0xe6aef54f, 0x8de09116, 
    0x422e4fa5, 0x3b67b2a0, 0xae19394e, 0x47fefb3a, 0xe6ebbfd8, 0xb296fd0f, 0x5da818ad, 0x2d7ae820, 0xb9b0b259, 0xed7865d4, 0x85c80e63, 0x05142edb, 
    0x1e494e1d, 0x3cb75ab5, 0x37b7ea2c, 0xbd44f9c0, 0x2ba98a94, 0x57625705, 0x5f474e0a, 0x5d8979ad, 0x7657719c, 0xcbb46f33, 0xf6c734cd, 0x2ab17cb8, 
    0x301842ee, 0x2241ec61, 0xe245d7aa, 0xa5630d76, 0xeb2431ef, 0x0b412b13, 0x705044ee, 0xf5f4c931, 0xed5ceded, 0x92635612, 0xd9c3b1b3, 0xe6c24a78, 
    0x9a77dec2, 0x2bb134e4, 0x92711990, 0x0fa9f401, 0x95953484, 0x02573762, 0x99aa0446, 0x410f2417, 0xaf34b6b6, 0x7fd903f9, 0xfa7fbcd7, 0xcbcbac08, 
    0x5c6d523d, 0x4204c55f, 0x8b402438, 0x0cbae691, 0xc138c7ee, 0xe848dddc, 0x8ae4d72b, 0x6fac434b, 0x6f7a21fc, 0xffbaf7fc, 0xffd7be00, 0x7ca68900, 
    0x9800ff3c, 0xffb2fd87, 0xa3ebd900, 0xe7e173ae, 0xed3fc4fc, 0x5ccffe97, 0xc7a898f8, 0xb3f02742, 0x2f6dadb4, 0xad5ab7c3, 0x3dc55d9b, 0x9eac51b4, 
    0xaf9cf359, 0xfad00738, 0xcfaec98a, 0xbc19f1c2, 0xc982722b, 0xbfda4f6f, 0x0d84b3d4, 0x9d3e77c2, 0xec2a866b, 0xa93709c2, 0x753a6acb, 0xd67695ce, 
    0x80034ab7, 0xc0902308, 0xba5615f7, 0x7f791b1f, 0x26cb8adb, 0x98af30e7, 0xf310b2a1, 0xf883e5c7, 0xd473bde7, 0x29ecaca4, 0x3d1c3b2b, 0x2eac8497, 
    0x79e72d6c, 0x124b43ae, 0x199701b9, 0x7b4a1f20, 0x2e4b43f8, 0xc2e425d0, 0x97829b7d, 0x9ce94052, 0x6ccd3863, 0x07f25fe9, 0xaf00ffb2, 0xf400ff78, 
    0xcb125411, 0x6a605d50, 0x33dd012e, 0xa25e6346, 0x931c601c, 0xc006648c, 0x2bfde419, 0x968de4d7, 0xaa875987, 0x37fb5778, 0xedef964e, 0x8f9767be, 
    0x72c6ca97, 0x7a9feb40, 0xf95fb4ee, 0xd77fd801, 0x08fa7fb4, 0x7f145fac, 0xff75bdc8, 0x00ff0000, 0x686dc5d0, 0xb003f2bf, 0x68af00ff, 0x11f400ff, 
    0xa8a8785c, 0x5d9591b4, 0xa1b77691, 0xf6fc85f0, 0x16974cd0, 0x9218cf80, 0x1842da38, 0x15d33382, 0x68915e83, 0x44937d92, 0x5d343d96, 0x98018114, 
    0x05c817ca, 0xd7831354, 0xcd55fe8c, 0x70e69e04, 0x779e7b8a, 0x3c6f2f3c, 0x24314a90, 0x7386514c, 0x470d0e82, 0x8a215e5a, 0xc5ebb528, 0x19305f8a, 
    0xc7e8134b, 0x59033f92, 0x43462fb5, 0xe63c7656, 0x8abf56db, 0xf5d218d6, 0x001455d5, 0xff183811, 0x6fa57600, 0x4246de11, 0xe7f0cfbd, 0xd29f1725, 
    0x95e916b0, 0x31e8ed42, 0xec249bd6, 0xad0fa6e3, 0xdc47fb77, 0x27d1b1ed, 0x40a4af88, 0xf50162c2, 0x0a00ff45, 0x09f5d6cc, 0x3a9fbcef, 0x6337fb4d, 
    0x7a9c3180, 0xda8f2a7d, 0x810b1848, 0x2149a6f5, 0x43ed1993, 0x75c06a9b, 0x77bf361a, 0x6d41a365, 0xdd84c102, 0xab5b88cc, 0xad87d913, 0xea135f5e, 
    0xd0a270ac, 0xff42d893, 0x715dfc00, 0xa3185ed1, 0xf7381708, 0x1ad5a2a9, 0xf3880329, 0x0eabf68f, 0x131c7245, 0x523c6e67, 0xd6aca2f1, 0xdcc0bc5f, 
    0xfa049577, 0x8f024780, 0xfe174bf8, 0xf200ff7c, 0x5a00ff2f, 0x9735c9b8, 0x5b7e8478, 0x7c96731e, 0x7f51e59f, 0xf3fc3769, 0xaac700ff, 0xd9279a7d, 
    0x5bd75e23, 0x18d286bc, 0x462a7cd6, 0xd0c106aa, 0xe336a50f, 0x8d4c37c4, 0x060e9714, 0x4f1b9433, 0x841539e6, 0x1828182e, 0x91d631e8, 0x23412ca6, 
    0xfb74bda7, 0x6ccd6d47, 0x5ca9c76c, 0xabf60da8, 0x19e44880, 0x35f3e3d8, 0x78d86e49, 0x09b90b82, 0xd8689291, 0x084e6eee, 0x4f55f8ef, 0x4282a93d, 
    0x20751225, 0x5d295383, 0x277a2c58, 0xff8b25fc, 0xf97f3e00, 0xad00ff17, 0x8b25fc47, 0x7f3e00ff, 0x00ff17f9, 0xf6375cad, 0x3fcf7f93, 0x83a47afc, 
    0x99197858, 0x07aee463, 0xacf4d3cd, 0xf6329a3d, 0xc59fec48, 0xd8e531ac, 0x9fee7aab, 0xa629fb1f, 0x5bc200ff, 0xa203fd3f, 0x93c000ff, 0x57c400ff, 
    0xf3b43621, 0xcc17dd05, 0x5f775bbd, 0xd3fea3d2, 0xffe7f96f, 0xec518f00, 0xd8357bd0, 0x3c7b6fb9, 0xea164470, 0x805105e0, 0x3d0e6c26, 0x6b738a33, 
    0x7cfb8a77, 0x0190f3f9, 0xff390ef3, 0xc4b12600, 0x740c14ec, 0xed346915, 0x5359554e, 0x6175ba4e, 0x88856595, 0x1507f720, 0x5363cfd1, 0xeb5efb47, 
    0xffa67efe, 0x9786bf00, 0xe9bbbac2, 0x6ed96a7f, 0x33bb79b3, 0xc6985dba, 0xb59e63ef, 0x5fbd749e, 0x9f9781fe, 0xc2bfe1f7, 0xf5d3b6a4, 0xd2d86d6b, 
    0x3f761baf, 0xe90f8be5, 0x2b733951, 0xb19a5d32, 0x51c27fdd, 0x3c00ff63, 0xbe00ffe7, 0xffd1f847, 0x8f450900, 0xfe9ff3fc, 0x5ce31ff9, 0xffab9367, 
    0xf31ed000, 0xf837fdfe, 0x561dd154, 0x00ffca28, 0x13bb5c61, 0x1f0bcd9d, 0xe4b196fd, 0x27ce5e46, 0x0900ff5d, 0xf3fc8f3d, 0x1ff9fe9f, 0x24fc47e3, 
    0xcef33ff6, 0x7fe4fb7f, 0xe892738d, 0xb98fecfa, 0x729c8074, 0xf963c205, 0x3cb13fd3, 0x4000ff41, 0x4f98fccf, 0x1ecba5f1, 0x728fe4e2, 0x73a7be8d, 
    0xb748b41d, 0x00a88032, 0x531ccf01, 0x91bc581f, 0x94332f8c, 0xe40c866c, 0xbb4abf82, 0x52ede06b, 0x881bceea, 0x2c09b5e7, 0xdb19ea6a, 0x9f911120, 
    0x00ffa496, 0xce571784, 0x9f67d17e, 0x00ffdbf7, 0x6a8fae89, 0xc7739bbb, 0x24718bb9, 0x4575667f, 0xe08cdd55, 0x65d73c63, 0xda9ef8a6, 0x85b44bdf, 
    0xc7982ead, 0x132a2902, 0x19070a07, 0x043ec66a, 0x9b5bcfd5, 0xbfedfb3f, 0x1fb99af8, 0xe3683585, 0x7666df54, 0xb7e63380, 0x591100ff, 0x1291514e, 
    0x66539771, 0xcbd9141f, 0xe6824728, 0xc25d3d15, 0x27263f90, 0xf0bfabf4, 0xdb6dd992, 0x8cdbe7f6, 0x7e8c0f63, 0x00ffcd55, 0xffab2fc2, 0xfecf7e00, 
    0x00ffb7fe, 0x87af5311, 0xd080c22f, 0x4f8e93d9, 0xfc9f1fda, 0x7bb4b372, 0xb9c7f299, 0xa6bbfdb5, 0xfecfcf7f, 0x47e1df38, 0xff99eef6, 0xf83f3f00, 
    0x73857fe3, 0xb1fac2e7, 0x81594362, 0xffcd79d8, 0xff51c400, 0xadbe0800, 0xfb3febfd, 0x45fcdffa, 0x1ceeb11c, 0xcd71eeb1, 0x79907665, 0xc3326bef, 
    0x19c37c80, 0xe6d0830b, 0xd24bafa1, 0x650fe4bf, 0xf15e00ff, 0x22e800ff, 0xc26ad9ab, 0xb1bc59eb, 0x8fc376f9, 0xc7c9812c, 0x22a19f0d, 0xb4620fbd, 
    0x85b9e9d4, 0xc31edde0, 0xdb67fb55, 0xad7cf3a0, 0x5c763e9b, 0x117a7667, 0xffa72be8, 0x41438400, 0x0f9f00ff, 0x00ff8cfc, 0x5a6955fc, 0x56e11f7f, 
    0xe1b5862b, 0x4e73ae36, 0x97729b4f, 0xff952ef6, 0x3fcb4000, 0xe1bff0fb, 0x952ef647, 0xcb4000ff, 0xbff0fb3f, 0x860f5de1, 0x107f8aa1, 0x6934c55a, 
    0x2a5b6c24, 0x293f08ea, 0x6db66bec, 0xa2f70226, 0xeccb1e7d, 0xf2c8a3ca, 0xf1235161, 0x9d9ee3cf, 0xd616632a, 0x955c8ce2, 0xf64779ee, 0x00ff952e, 
    0xfb3fcb40, 0x47e1bff0, 0xff952ef6, 0x3fcb4000, 0xe1bff0fb, 0xbba86857, 0x8af1ec22, 0x00ffa2bb, 0xfec372c8, 0x00ff63be, 0xda7785d0, 0xec81fc57, 
    0x3fdeebbf, 0x7a5404fd, 0x859aac46, 0x1e03f1ec, 0x65f79322, 0x92c91d1c, 0xa4f27d32, 0x45af08fd, 0xecdc56d1, 0xa2a0436f, 0x38cd2b8a, 0xfced8a82, 
    0xf88ff61d, 0xcbbe6f47, 0x6fcc3f8f, 0x6d373d2f, 0x453ca918, 0x159ecc05, 0xe9366a12, 0x3b30ea25, 0x33461ce2, 0xb4e2f2d7, 0x9ee6d2e4, 0xc2b9ddcf, 
    0x99154551, 0xeb15e399, 0x80fc2f5a, 0xdaeb3fec, 0x5504fd3f, 0x40fe2b0d, 0xeff55ff6, 0x2b82fe1f, 0xb965ce5a, 0xce7482b2, 0x5c5763d9, 0xae19c1f5, 
    0x623944bc, 0xaf8ace9d, 0x46546a42, 0x4b11d591, 0x03051c33, 0xb54a9a24, 0xc800ffa5, 0xbbfecf5a, 0x2b84fea7, 0xff43e790, 0x4fb5b100, 0xffdd06fa, 
    0xff86df00, 0x24a90a00, 0x25e54252, 0x551d4746, 0x53af0886, 0xfbd5febf, 0x7cd8af6d, 0xfa7723af, 0x4c00ff46, 0x6b869f8e, 0x9fe2f190, 0x695ba8ed, 
    0x9c81db00, 0xffe64e70, 0x4a5a1100, 0xa7b34616, 0x3473aeca, 0x64664551, 0xe47fd152, 0x00ff6107, 0x00ffd15e, 0xd5ae22e8, 0x40fe172d, 0xedf51f76, 
    0x2a82fe1f, 0xdeb837ed, 0xec2d56e1, 0xbdd02e2f, 0x28f3a4b5, 0x651c2d38, 0x57853f80, 0x80c0f3ae, 0x0ee41e9d, 0xfdc779be, 0x5dc529f2, 0x338f70d8, 
    0x00ffc7b1, 0xfe83ea63, 0xf77fb761, 0xa9c2bfe1, 0x18c14190, 0x493fbd22, 0x22add5b7, 0x4846fb9f, 0x8c0172ee, 0x7dccec44, 0xe981cd47, 0x82a8735e, 
    0xc29c2b35, 0x7caccc61, 0x092ab8b2, 0x514e31ce, 0xe5702ab2, 0x45512b57, 0x1d670615, 0x2d08e269, 0xd2789bf4, 0x85637927, 0xa9420c17, 0xe7790020, 
    0xf12353f9, 0x6df9b20d, 0xd7d518f6, 0x67b2dd76, 0x0e363f19, 0xcab59e3b, 0x55d4cead, 0x300540cf, 0x7146164a, 0xf6d2abd5, 0xe9b1eeac, 0x35a80e5a, 
    0x79113f2f, 0xe2df5e7e, 0x6f9f73ce, 0x34afd76a, 0xab3b75d1, 0xd7ec3f7f, 0xbbed0e2d, 0xf59caab6, 0xa935f0fe, 0x7faab9fd, 0xfb5f4ad0, 0x00ff1ff7, 
    0x53955c13, 0xe739db94, 0x367ae406, 0x9f167987, 0xcfdddbac, 0x928ccbbb, 0x424f46db, 0x4774ad3f, 0xad2d7ac4, 0x6aa7cef5, 0x9dbae52e, 0x54f8d840, 
    0xf7f407e8, 0x291e24af, 0x280227bc, 0xfe93ef3f, 0x17c5a734, 0x230c93a3, 0xe3df02fe, 0x04929452, 0xd59195a4, 0x9ec4dc31, 0xca9534e7, 0x55c200ff, 
    0x3c00ff79, 0xbe00ffa0, 0xffd1f84f, 0xe7550900, 0xfe83f2fc, 0x51e33ff9, 0x65e4c8c8, 0x79110f3b, 0x4dbc7d3a, 0x1a970f6a, 0xa04e22a8, 0xa7d23300, 
    0x39fbf5d3, 0xa1680b75, 0x955c8db3, 0x65585989, 0x9d8e2357, 0x5b8fab3d, 0xa007a892, 0x5da74bc5, 0xb6529ffd, 0x66212994, 0x9c71c646, 0xee5d7136, 
    0xa68eb5a3, 0x8a6a3db4, 0x2be1bfe7, 0xffe7f31f, 0xfa7f9100, 0x56c27fd4, 0xffcfe73f, 0x00ff2200, 0x9583abf5, 0x3d929c9c, 0x9e9ac327, 0xdda16f97, 
    0x4d17ead8, 0x8f1cda0f, 0xa59d1895, 0x1120c840, 0x1a6bdc53, 0xcfa09b2e, 0xcd93e9a7, 0x2fabd374, 0xb97c37ef, 0x3f902718, 0xff5f5e41, 0xff580900, 
    0xfc3f9f00, 0xd600ff8b, 0xb112fea3, 0x7f3e00ff, 0x00ff17f9, 0x5aef57ad, 0x92bc34d6, 0x8a868eb5, 0xe100ffe7, 0xe7f31f2b, 0x7f9100ff, 0xf1d7d4fa, 
    0xbbfb0163, 0xd3e86315, 0x6500ff63, 0xcfac1c35, 0x9f5d4692, 0x3a1d9288, 0xdcb606de, 0xf3431512, 0x4cc7c0f5, 0x2a635f57, 0xcadba7cd, 0x255e158a, 
    0x04a0a360, 0x7051f20a, 0x0c3b8042, 0xf8a67757, 0x320dda9e, 0x746713d6, 0x92a2704c, 0xa07030a1, 0x4d57f371, 0x8d243969, 0xa1b5c5ea, 0x3e8d55d3, 
    0xb5528b44, 0x89da4692, 0x401f3332, 0xfe6bae08, 0xf95fcb12, 0xa3fcbcf2, 0xe8e200ff, 0xb28400ff, 0xaf7cfed7, 0x00ff283f, 0xe5e6baf8, 0x3db21c66, 
    0x459f5c57, 0x93b6a6d6, 0xf26069fb, 0x9250f733, 0xb7878e73, 0x76f1cb4a, 0x9ba867af, 0x33e46c58, 0x48772a2c, 0xdc9e1c41, 0xbfcf2bfd, 0xffb52ce1, 
    0xcf2b9f00, 0x2efe3fca, 0x2d4bf88f, 0xf3cae77f, 0x00ff8ff2, 0x4f6eab8b, 0x7772a3a1, 0xb3a2ddd0, 0x74b700ff, 0xfff9f9cf, 0xfc1bc700, 0xd3ddfe28, 
    0xffe7e73f, 0xf06f1c00, 0xacccecac, 0xf2bfe8c7, 0x00ffb003, 0x00ff68af, 0x6b5711f4, 0xb4d5491f, 0x286bf4d8, 0x516dd4e4, 0xca30ded6, 0x852028d3, 
    0xb79a111c, 0x7fa5b5fd, 0xfecf4ed0, 0xf8af00ff, 0x6ddc69d3, 0xb76b973b, 0xbcc54df0, 0x4dca455a, 0xa6651c71, 0x1fe00e38, 0xffce2bba, 0xafb4b600, 
    0xffd909fa, 0xfff5df00, 0xb63f1a00, 0x09faafb4, 0xdf00ffd9, 0x1a00fff5, 0x8e3b6d71, 0xc7dec52d, 0x66dae8a4, 0xf74ea09f, 0xca716b52, 0x10b4910a, 
    0x3919f1a3, 0xbf5f53ae, 0x67d6528b, 0x1b1184ba, 0x82911410, 0x60cd1840, 0x696d00ff, 0xb313f45f, 0xebbf00ff, 0x6d7f34fe, 0x13f45f69, 0xbf00ffb3, 
    0x3634feeb, 0x6d43b2da, 0xb48b64b5, 0xaded2f55, 0x7682fe2b, 0x7ffdf77f, 0xaded8fc6, 0x7682fe2b, 0x7ffdf77f, 0x8bcca6c6, 0x00d9ff33, 
};
};
} // namespace BluePrint
