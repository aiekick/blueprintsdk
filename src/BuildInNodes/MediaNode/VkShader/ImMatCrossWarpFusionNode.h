#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <CrossWarp_vulkan.h>

namespace BluePrint
{
struct CrossWarpFusionNode final : Node
{
    BP_NODE_WITH_NAME(CrossWarpFusionNode, "CrossWarp Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    CrossWarpFusionNode(BP* blueprint): Node(blueprint) { m_Name = "CrossWarp Transform"; }

    ~CrossWarpFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::CrossWarp_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return false; }
    bool Skippable() const override { return true; }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf3c7"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    ImGui::CrossWarp_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 5048;
    const unsigned int logo_data[5048/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa9a22820, 0x00fff76a, 0xb76cbad9, 
    0x18756923, 0x760bdd40, 0xc095dda4, 0xda7345bb, 0x6fae881f, 0x7bcbbeef, 0x4d177114, 0xb952edd1, 0x57fadcef, 0x52324a43, 0x51144057, 0x14055045, 
    0x14054051, 0xff5e2d55, 0x4d37fb00, 0x2e6de496, 0xa11b08a3, 0xb29bd46e, 0xae6817b8, 0x15f1437b, 0xd9f7fdcd, 0x228e626f, 0xaa3dbae9, 0x9ffb3d57, 
    0x4669e84a, 0x02e84a4a, 0x72dab49c, 0xb401aa75, 0x14004551, 0x7bb55451, 0xddec00ff, 0xb4915b36, 0x6e208cba, 0x6e52bb85, 0xa25de0ca, 0xc40fedb9, 
    0xdff73757, 0x388abd65, 0xf6e8a68b, 0xeef75ca9, 0xa5a12b7d, 0xa02b2919, 0xd862b51c, 0xe9aad97c, 0x3040add6, 0xd129b069, 0x28c01445, 0xf76aa9a2, 
    0xbad900ff, 0x6923b76c, 0xdd401875, 0xdda4760b, 0x4ebbc095, 0x68ce955e, 0xbfb9227e, 0xec2dfbbe, 0x375dc451, 0xcf48b547, 0xa42b7de6, 0x9292514a, 
    0x474802ba, 0xcbd554ef, 0x5ff6f8cf, 0x41a5bff7, 0xaabde102, 0xcafdc66b, 0x256abe2f, 0x6dc69eb0, 0x8c5a5114, 0x85f1912b, 0x2cb86bf0, 0x302d6f89, 
    0x3fdf01f2, 0x5de76ffd, 0xa2436775, 0xfaac1641, 0x26599691, 0xc0d8f07c, 0x9c1ea7cf, 0x2b394d54, 0xbf92a321, 0x525fedd5, 0xe2d3bcb5, 0x0a000392, 
    0x031940ca, 0xc5e943a7, 0x93ca7077, 0x72c692c2, 0xf581a18e, 0x74d4a006, 0x433b75f8, 0xa460396d, 0x04f50a82, 0x6dac537a, 0x3bcec616, 0x63dd9164, 
    0x9cf10518, 0x17a3147e, 0x45b1c016, 0x0a825614, 0x0a80a228, 0x7c617ce4, 0x220bee1a, 0x3c4ccb5b, 0xffcf7780, 0xd7f95b00, 0xe8d0595d, 0x3eab4590, 
    0x499665a4, 0x30363c9f, 0xa7c7e933, 0x4a4e1315, 0xafe468c8, 0xd4577bf5, 0xf8346fad, 0x02c080a4, 0x400690b2, 0x71fad0e9, 0xa432dc5d, 0x9cb1a4f0, 
    0x7d60a8a3, 0x1d35a841, 0xd04e1d3e, 0x29584edb, 0x41bd8220, 0x1beb941e, 0x8eb3b145, 0x587724d9, 0x677c01c6, 0xc528851f, 0x532cb0c5, 0x9c36ad93, 
    0x0d416b9d, 0x00288aa2, 0x17c647ae, 0xb2e0aec1, 0xc3b4bc25, 0xff7c07c8, 0x9dbff500, 0x0e9dd575, 0xb35a0489, 0x645946ea, 0x63c3f399, 0x7a9c3e03, 
    0xe4345171, 0x4a8e86ac, 0xb55700ff, 0xf3d64a7d, 0x0c488a4f, 0x00292b00, 0x0f9d0e64, 0xc3dd15a7, 0x4b0a4f2a, 0x863aca19, 0x831ad407, 0xd4e1d351, 
    0xe5b40ded, 0x2b089282, 0x4ee911d4, 0x1b5bb4b1, 0x4792ed38, 0x17608c75, 0x52f871c6, 0x025b5c8c, 0x70ab75d2, 0x56eb44d5, 0x2962abe1, 0xc0144551, 
    0x85f1912b, 0x2cb86bf0, 0x302d6f89, 0x3fdf01f2, 0x5de76ffd, 0xa2436775, 0xfaac1641, 0x26599691, 0xc0d8f07c, 0x9c1ea7cf, 0x2b394d54, 0xbd93a321, 
    0x559facd5, 0x86b2bcb3, 0x431b4448, 0x010200a9, 0x9c3e18e3, 0x070b7d57, 0x56397555, 0xeaa80619, 0x96ea72da, 0x215c6a0f, 0x33721524, 0x00ff83b4, 
    0xbbf4a9eb, 0x8ab1b257, 0xa64449da, 0x5c30b421, 0x18a57664, 0x3570b7b8, 0x8cbba521, 0xd0ed64e1, 0x590d49f1, 0xfdcd669c, 0xc29668b0, 0x5114197b, 
    0x45016845, 0xd4d51515, 0x71ed5636, 0x4c22fb70, 0x8c136c6e, 0xd0fa769c, 0x8d66c004, 0x3f5dd5bc, 0x8bd4b155, 0x63fea4ad, 0x481bc920, 0xf82ae6c7, 
    0xd43add42, 0x9d004ddf, 0xf9d0e274, 0x0778268b, 0xf5fa7f1b, 0xe29f4558, 0xcc662bfd, 0x7103e17e, 0xb2e68cf2, 0xc9396585, 0x8a9d4c6c, 0x6e4551f4, 
    0x9a815250, 0xd4c5654a, 0x3ded7636, 0x718decc3, 0x957f8293, 0x6d12a027, 0x68dab6ab, 0xf84450b8, 0xff8000ff, 0x26ebf500, 0xd4b354cf, 0x64ed6865, 
    0x2741512e, 0xdc9e0369, 0x6b9e00ff, 0xdc66497b, 0x1c034fca, 0xdd1c757e, 0x6b46a983, 0x8d668646, 0x8eef959b, 0x3f0e8bb4, 0xfaabf48b, 0x04bc85aa, 
    0x7f02127f, 0x9e2ba85a, 0x66b66675, 0xa94c9372, 0x61571445, 0xefb9e0a0, 0xa8b6684e, 0x50fabb3b, 0xee42dd94, 0x3c231b3b, 0x03868aa1, 0xc9d4d40b, 
    0xdb7201d9, 0x8923174d, 0xcefe91f6, 0xef36ad7f, 0x00577b4e, 0x1b3de5be, 0x78a68315, 0x45be46aa, 0x62e38830, 0xb3650306, 0x31a6df91, 0x84a9bbda, 
    0x9839da77, 0x14f3e00f, 0xd13e56fa, 0x4317a3b5, 0xfc71589e, 0x6639a55f, 0x9fdbd8d8, 0xa83897c6, 0xf58dcc01, 0xf53acb35, 0x39175317, 0xee2aa70c, 
    0x12a94def, 0x547223bd, 0x78fcdfb4, 0x7acc2afc, 0x00ff9947, 0x00fff12d, 0xeb00ff00, 0x8dda41d2, 0x2cecfd52, 0xb27de299, 0x039cca95, 0xd6e019d3, 
    0xc6959572, 0xceedd454, 0x062b3396, 0xfc31e104, 0x00ffe15f, 0x7689aad6, 0xe45c18a7, 0xacd2f364, 0x77945a69, 0xdbcce5ef, 0xb88371a4, 0xf41e77e7, 
    0x5b4f47dd, 0xfff2840b, 0x32c8d500, 0xc7d5debe, 0x32ddd33a, 0x89ae7425, 0xc0b09c63, 0xaede675c, 0x0d64deb4, 0xbe67dc1e, 0xa20e366b, 0xc54a2faf, 
    0xc5dca9d7, 0x280a45ce, 0xa063bda2, 0x13c50f2b, 0x4f87b36e, 0xb9cbfb43, 0xc0194755, 0xe2f97304, 0xd4932bb7, 0x4b2df52d, 0x15ad85c4, 0x11e316a1, 
    0x9c102a4b, 0x6beaed75, 0x0d4b8f3a, 0xfb83b10c, 0x9176c407, 0x259a95e4, 0x70ab4f0c, 0xe45d517f, 0x6b821848, 0xedb4d581, 0xf2523866, 0x8429e6fa, 
    0xea630024, 0x8eee3fb9, 0x44d3aef8, 0xc9424dbf, 0x006e5c26, 0x60b30307, 0x20eafc13, 0x9a41dcec, 0x40d148d2, 0x20498236, 0xb6c25971, 0x6be35021, 
    0x95ca8a0c, 0x3f9db93c, 0x5454c4ba, 0x284a6522, 0x0a8abaa2, 0x2b4ffce7, 0x9d9e35cd, 0xf99ac719, 0x7fe0f863, 0x8f2be85a, 0xbf356f8d, 0x63714f11, 
    0xfc80292a, 0x1c00fd8e, 0xcd7d700c, 0x6ee95565, 0xeda845e3, 0xc1aa85ce, 0x341a92b4, 0x91677a2e, 0xa257d49f, 0xdca82259, 0x2b706f08, 0xfd34d481, 
    0xaf39565d, 0x5c854b65, 0x00ffd18d, 0x15787e0f, 0x515ff8d4, 0xbbc5ed59, 0xf313efb7, 0x8bb22639, 0xad6568b3, 0xe1254346, 0x30da95ca, 0xc5553132, 
    0xa811eb68, 0x0403a4f2, 0xce7a1fe4, 0xce4d8d15, 0xa254ee79, 0x36d02b8a, 0xbcb28e24, 0x2d71cd42, 0x1e879eae, 0xd09f646b, 0x8ed55a7f, 0xf392a5b9, 
    0xb865d754, 0x23da1bb0, 0x008c1cf2, 0x563ccf38, 0x1a965e35, 0x4268dc2e, 0x70dbadc9, 0x4812c062, 0xfe0c20c7, 0x6a5ad4b5, 0xb6904e1e, 0x0a2549c1, 
    0xe7000e64, 0xedebb9de, 0x2351ed52, 0xb529b7bf, 0xeba1f2f1, 0xa91527f5, 0x7347dca2, 0x69a37218, 0xa8cf831c, 0x96d256ae, 0xbb3c4780, 0x73ce014a, 
    0xcb199bde, 0xac6aea13, 0xbc8c7992, 0xcc6a02e4, 0x6e9aab3d, 0x5261e5ec, 0x91d45147, 0x9774b2d7, 0xba59ed60, 0x45cd6bb8, 0x00ff142d, 0xb76c5f00, 
    0x09a515f9, 0xcf953ec7, 0x7a79a9c5, 0x37e59784, 0x73e162ed, 0x9ad3818c, 0xb0f4aae7, 0x870fbbd1, 0xcf5b9b45, 0x3800ba9f, 0xaa7df03d, 0xf772763d, 
    0x6563c410, 0x1cc98311, 0xf2d37136, 0x91f1e2a8, 0x6c8f5db8, 0xfe78aeb1, 0xffeb712c, 0x3dadd600, 0xd1d3617f, 0xfce60db8, 0xe41afbbc, 0x87d09a9d, 
    0x1e631767, 0xb53ebc0f, 0x713b5578, 0xe82a4ef7, 0x337366ae, 0x3a968a3e, 0xf66a07bb, 0xdacc3adb, 0xedb6a52b, 0x34dd3555, 0x679b435c, 0x1b76a6f2, 
    0x39acfb81, 0xe5acb8cf, 0xc05e9553, 0xa8072064, 0x8e104fcd, 0x01a8ce00, 0xd4819373, 0xfd66bde3, 0x99d7ea82, 0x815c74e0, 0x9e948fb8, 0xbb4acfb8, 
    0x73c5b86e, 0x4cf7573c, 0xd7d0eddc, 0x2032e4d3, 0x17aaf327, 0xa7d47507, 0x144fb3fd, 0x17b194b5, 0x7ea943e8, 0x7f157586, 0xfb3759fe, 0xf48aaaa6, 
    0x371b3b25, 0x407c2a62, 0xad02c003, 0x33d7405b, 0x664028ac, 0xe9740bce, 0x6979a39a, 0x19c30573, 0x765074e0, 0x3de52386, 0x25acf4fa, 0x4fe8e588, 
    0x406e9137, 0x20c96e8d, 0xc7151cdc, 0x4d3f6bae, 0xa9becdd1, 0x32729614, 0x1bcff0ae, 0xbf07821c, 0xb55e5f5f, 0xef7ed476, 0xb922abf1, 0xa14f88e5, 
    0x5767a10e, 0x11433398, 0x8f2480e1, 0xaa00ffaf, 0xfd0067a8, 0x292b7a2a, 0x43e8e656, 0x2aeacc9d, 0xf40a5251, 0x37745b5d, 0xa48e2272, 0x036d288e, 
    0x92280ccb, 0x55667e48, 0x4def9300, 0xfb8438b8, 0xcf1560d3, 0x0e914f2c, 0x756634a0, 0x9049ce68, 0x94e6fa6d, 0x574b34c0, 0x3ec19043, 0xe927f75c, 
    0xf4d26aee, 0xad1256a7, 0x5295d0cd, 0x0e760edd, 0x5107a3d5, 0x1756345a, 0x75e6ca21, 0x294a1d49, 0xf649e1c4, 0x8b584aaf, 0x25733674, 0x46211244, 
    0xe06018ce, 0x4bd796e2, 0xe2dad286, 0x95b89438, 0xec79ca4f, 0x2855fa78, 0x7a9f58ce, 0x092bbdb6, 0x22fb5362, 0x168b7c75, 0xb7b5179e, 0x1131b65f, 
    0x4f2839ca, 0xfffa3fc8, 0x65b5a700, 0x75ed97ea, 0x44502172, 0xee017071, 0x15f56a7d, 0xb227aa84, 0xd5a52eb1, 0x1fb754ac, 0x29b45abb, 0x67aeac68, 
    0x76759c72, 0x3a4ad50e, 0xf66a07bb, 0xdb69d6d9, 0xa5baaa76, 0xca5f89cb, 0x019cc6e4, 0xcc6a82eb, 0x1e0b112c, 0xd9a86680, 0x1ed71c49, 0x30d8d86c, 
    0x8167b8cd, 0xd8abe68a, 0xa883b666, 0xbc45410d, 0x32c580d0, 0xfb1dd371, 0xa94ed6fb, 0xad9e1d6b, 0xcbe7103c, 0xe7640456, 0xd7fa07a8, 0xe95fa753, 
    0xf6964892, 0xe04682ce, 0xbebd4d05, 0x77fdb982, 0x513b6d4e, 0xa2b4e6db, 0x7533bc51, 0xaab9deeb, 0xf0a70c2d, 0x29692994, 0xe39c996b, 0x7f93e57f, 
    0xaba86aba, 0xbfc9f25f, 0x575435dd, 0x45aa33ad, 0x5eb635dd, 0x3f067aa3, 0x8aaee9f8, 0xb30d811b, 0x11dc30dc, 0xf13b900b, 0xdfede59a, 0xf20cca65, 
    0xd555fe41, 0x6c433a58, 0x464b9566, 0x19284b88, 0x98b902c8, 0x4a67b1e1, 0xfb35d1b6, 0x443b8a37, 0xb120e385, 0x9e91028d, 0xb966e09c, 0xb545a85b, 
    0xdc06d0e4, 0x77939122, 0x5d330eae, 0x69ab8fae, 0xca9291da, 0x76b725d5, 0x29107242, 0xcd3382fa, 0x81b53a72, 0x6d3975d3, 0xd2669e4c, 0x1ee46e08, 
    0x4b8b0a6b, 0x32d95499, 0x585114a5, 0x48c59418, 0x0a52312a, 0xca6e66f4, 0x2fca6df7, 0x2fbdbbd6, 0xf0a4d24c, 0x961777fc, 0x4b1ccb68, 0xac0db223, 
    0x18795e7e, 0xe1febc26, 0xa54770b3, 0x2c876e7a, 0x591bde76, 0xc7f14da6, 0x06caac6e, 0xc68e0272, 0x8ead96b9, 0x9a69461d, 0xb8758657, 0x793b4be5, 
    0xc9c06863, 0xf48cc0de, 0x5ced48ea, 0xda02dc85, 0xdb707bf2, 0x6e325284, 0x6bc6c1f5, 0xad75d2bd, 0xd8325633, 0xab35c7d9, 0x819013ba, 0x4f10d40f, 
    0xac15d73c, 0xd44be769, 0xf932b4e5, 0x77430e9b, 0x44cdf320, 0x35d1b5d2, 0xa368b212, 0x46561445, 0xe74a7125, 0x90d23711, 0x0b714c52, 0x66ae2b7d, 
    0xef2a8aac, 0x471b3d74, 0x5163c397, 0x1432b5be, 0xd8c1ce0e, 0x027b021c, 0xa1e00a3b, 0xd4f04eaf, 0x3c785bd1, 0x8a173a4f, 0x409d9135, 0x9e132007, 
    0xa805630d, 0x4abd4953, 0xf01f5e56, 0xcbe6b9f6, 0x41d42563, 0xebb0fb71, 0x9e60fef2, 0xba91ebdd, 0xcd5ddb84, 0x4e8c2101, 0x0e7290c9, 0xd1bd2b0e, 
    0x521d9b75, 0x3d7b7bfa, 0x93d1ad35, 0x0b017426, 0xd0dbb163, 0xc735c7f3, 0x34c982f8, 0xdde26afd, 0x43506724, 0x9127c702, 0x4ae34f9e, 0x26e85a49, 
    0x9bd12d97, 0x66561445, 0xecea3845, 0x45b2aa1d, 0x2afde28f, 0x6ccb9b45, 0x5ee3cf6d, 0xeed3abbc, 0xb9c47375, 0x4e8b307d, 0xe55f9e93, 0x76aaf91e, 
    0x8dd6cef1, 0xd4a57ce5, 0xce3862a0, 0x299ec92a, 0x012cd963, 0x9e9ad0d7, 0xb5b7e40b, 0xfeed786b, 0x3637ce56, 0xb9c29f71, 0x7b1252a7, 0x7b89b487, 
    0xb0b6b342, 0x387b7961, 0x031923f3, 0x9c8383a2, 0x672dd57a, 0xa09e1a51, 0x4af54f66, 0x8391c736, 0xd696c98a, 0x1e69a569, 0x4c4f8ee9, 0x75eaf57f, 
    0xd902a042, 0x79aeb83e, 0x2963354d, 0x2d64354d, 0xb2a2182d, 0x00ff1b32, 0xd3fd9b2c, 0x66584555, 0x50c7edc2, 0xc8613145, 0x7aa5dffb, 0xf54dad33, 
    0x9538253a, 0x62fb8744, 0x317b30d6, 0x00fff023, 0xa77157eb, 0x5ff66bc9, 0x51d5e92a, 0x8d13e4d4, 0xdf811cc3, 0x6928aef2, 0x760135ee, 0x050ce427, 
    0x7a8cd3d9, 0x67cedad3, 0x335dd27d, 0xfd1fd91e, 0x1575e57a, 0x8e24aac4, 0x43671dda, 0xa75192d1, 0x2e23cd42, 0xc72a1941, 0x57e424b7, 0x35777933, 
    0x3397dcf5, 0xe49064b6, 0xab40a5e3, 0x2ecdc981, 0xe64a392b, 0xa2c59572, 0x0a322b8a, 0x299c9f62, 0xb09c823e, 0x4abff8e7, 0x1bddb757, 0x63647c28, 
    0x55d9ae38, 0xb99ad983, 0xfbb62c23, 0xabf66f87, 0x11df34d0, 0x4a7ad6e9, 0x9d19495b, 0x08194a84, 0x00e55bf9, 0xaef6fa83, 0xaccd742d, 0x9c9c9d4f, 
    0xbdfedffd, 0xf7f6485b, 0xd82973cd, 0xebd8764a, 0x8d8df1a1, 0xd1b2b1a2, 0x75d885a3, 0xd70faa5d, 0xcbbbb902, 0xe4eeafb9, 0x24839cba, 0x02032787, 
    0xa596e2ab, 0x2665b2c9, 0xa2280af7, 0xa8b892a4, 0x07085bee, 0x631158ad, 0x8e4abff8, 0x94354f6b, 0xab3dc6ef, 0xd88b73a2, 0x0f45b4d1, 0x7f74ec4a, 
    0xdae9db14, 0x624fd842, 0x76bb5167, 0x24816158, 0xd77b04e3, 0xc1be1d2b, 0x54f8b3f7, 0xad54acb8, 0x3b4d2ab1, 0xc693a9a3, 0x1d8644d3, 0x680bc63a, 
    0xfb18dc47, 0x0e0cbcbe, 0x796eaeb9, 0xe79db9e5, 0xe7c8cb99, 0xa8b9c72c, 0xdee4a4e8, 0xe1dee4e0, 0x24521445, 0xe6645488, 0x840a5253, 0xac35b91c, 
    0xfb9565ca, 0xc2de6ab5, 0xdb0bedf2, 0x83324f5a, 0x58c6d182, 0x5555f803, 0xf8deb5fb, 0xdca31310, 0x38cfd781, 0x45be00ff, 0x87dd5544, 0x1c3bf308, 
    0xa83ef687, 0xdf6d3a39, 0xf06ff8fd, 0x701064aa, 0x4faf0846, 0x6bf56dd2, 0xd1fea748, 0x809c3b92, 0xccec4450, 0x81cd477d, 0x82a8735e, 0xc29c2b35, 
    0x3e562661, 0x046d5c59, 0x28a718e7, 0xe5700ed9, 0x45512b57, 0x2f640615, 0x9d4885f7, 0xf5fb272a, 0x7baa742a, 0x16ab8e8d, 0x689717f6, 0x79d2da5e, 
    0x8e161c94, 0xc21fc032, 0xe079d7ab, 0x728f4e40, 0xe33c5f07, 0x4514f9fe, 0x8f70d85d, 0xffc7b133, 0x83ea6300, 0xffdda693, 0xff86df00, 0x41a60a00, 
    0x8a600407, 0xdf26fdf4, 0x7f8ab456, 0xb92319ed, 0x4e0405c8, 0x7cd4c7cc, 0x3ae715d8, 0xb9522388, 0x651226cc, 0xc695e563, 0x8a714ed0, 0x53918d72, 
    0x5ab92a87, 0x33a8288a, 0xd429bd1a, 0xa04ee9d5, 0xd85bac02, 0x7ba15d5e, 0x50e6496b, 0xcb385a70, 0xaf0a7f00, 0x0181e75d, 0x1dc83d3a, 0xfb8ff37c, 
    0x5d4555e4, 0x9947a8d8, 0x00ffe3d8, 0xc941f5b1, 0x00ff6ed3, 0x857fc3ef, 0x82832053, 0x7e7a4530, 0x5aab6f93, 0x8cf63f45, 0x02e4dc91, 0x63662782, 
    0x0a6c3eea, 0x11449df3, 0x13e65ca9, 0xf2b13209, 0x2768e3ca, 0x4639c538, 0x95c3a9c8, 0x1445ad5c, 0x14851954, 0x58054051, 0xbbbcb0b7, 0x93d6f642, 
    0xb4e0a0cc, 0xfe009671, 0xcfbb5e15, 0x7b740202, 0xe7f93a90, 0xaac8f71f, 0x50b1bb8a, 0xc7b1338f, 0xea6300ff, 0xdda69383, 0x86df00ff, 0xa60a00ff, 
    0x60040741, 0x26fdf48a, 0x8ab456df, 0x2319ed7f, 0x0405c8b9, 0xd4c7cc4e, 0xe715d87c, 0x5223883a, 0x1226ccb9, 0x95e56365, 0x714ed0c6, 0x918d728a, 
    0xb92a8753, 0xa8288a5a, 0x2a1d2233, 0x3335f908, 0xd53e211c, 0xcbac3504, 0xb5fbb565, 0xe226f8dc, 0xe6222dde, 0x8823ae39, 0xdc01c7b4, 0xc315e10f, 
    0x44754a2f, 0x19c59d5d, 0xe69dbb72, 0xfa69a68d, 0x2675ef04, 0xa9a01cb7, 0x3f0a411b, 0xe59a9311, 0xb5f8fb35, 0xa87b662d, 0x01b11141, 0x01241849, 
    0x1475d68c, 0x0d595d39, 0x05c9eaca, 0x41525114, 0x54d6bf5d, 0x27a0d2c9, 0x53eba7f7, 0x6c6c4aaf, 0x09fe7675, 0x488bb7b8, 0x886b8eb9, 0xc0312de2, 
    0x45f80377, 0x8b531471, 0x2ee3b8b3, 0xd1bc7357, 0x403fcdb4, 0xd6a4ee9d, 0x231594e3, 0xe2472168, 0xa65c7332, 0xa5167fbf, 0x0875cfac, 0x29203622, 
    0x31800423, 0x87a2ce9a, 0xb921ab2b, 0xa220595d, 0x1a482a8a, 0xd5d429bd, 0x02a04ee9, 0xdc047fbb, 0x5ca4c55b, 0x71c435c7, 0x3be09816, 0xb822fc81, 
    0xeca22a8a, 0xca6554ee, 0x369a77ee, 0x13e8a799, 0xdc9ad4bd, 0x6da48272, 0x46fc2804, 0xd7946b4e, 0xb5d4e2ef, 0x04a1ee99, 0x2405c446, 0x33069060, 
    0xe550d459, 0x2b376475, 0x511424ab, 0x45014945, 0x5d015014, 0x2d6e82bf, 0x632ed2e2, 0x8b38e29a, 0xc01d704c, 0x455c11fe, 0x77765115, 0x77e5322a, 
    0x4c1bcd3b, 0xde09f4d3, 0x396e4dea, 0x82365241, 0x27237e14, 0xf76bca35, 0xcc5a6af1, 0x238250f7, 0x30920262, 0xac190348, 0xba7228ea, 0xd5951bb2, 
    0xa2280a92, 0xd9ff83a4, 
};
};
} // namespace BluePrint
