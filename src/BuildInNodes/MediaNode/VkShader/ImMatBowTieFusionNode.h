#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <BowTie_vulkan.h>

namespace BluePrint
{
struct BowTieFusionNode final : Node
{
    BP_NODE_WITH_NAME(BowTieFusionNode, "BowTie Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Move")
    BowTieFusionNode(BP* blueprint): Node(blueprint) { m_Name = "BowTie Transform"; }

    ~BowTieFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::BowTieHorizontal_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_bHorizon ? 0 : 1);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        int horizon = m_bHorizon ? 0 : 1;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(100, 8));
        ImGui::PushItemWidth(100);
        ImGui::BeginDisabled(!m_Enabled);
        ImGui::RadioButton("Horizon", &horizon, 0); ImGui::SameLine();
        ImGui::RadioButton("Vertical", &horizon, 1);
        if ((m_bHorizon && horizon != 0) || (!m_bHorizon && horizon != 1)) { m_bHorizon = horizon == 0; changed = true; };
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        return changed;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("horizon"))
        { 
            auto& val = value["horizon"];
            if (val.is_boolean())
                m_bHorizon = val.get<imgui_json::boolean>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["horizon"] = imgui_json::boolean(m_bHorizon);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue056"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    bool m_bHorizon     {true};
    ImGui::BowTieHorizontal_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 5362;
    const unsigned int logo_data[5364/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xb2a22820, 0xc9a9493c, 0xa0c1e9a6, 
    0xc0c8937d, 0x1d38c021, 0xf3fc074f, 0xb02bbb49, 0x7faee835, 0xddb57ac3, 0x9716d7e4, 0xf9e399ed, 0xc7295486, 0xd3073042, 0x9482aef3, 0x80aea464, 
    0xa08aa228, 0x80a2280a, 0x8fac280a, 0x69726a12, 0x1f6870ba, 0x0830f264, 0x53070e70, 0x3c00ffc1, 0xecca6ed2, 0x9f2b7a0d, 0x77addef0, 0xa5c53579, 
    0xfe7866fb, 0x710a9561, 0xf4018cd0, 0xa5a0ebfc, 0xa02b2919, 0xa8a2280a, 0xa5528a02, 0xf28c9171, 0x02dc2829, 0xc4232b8a, 0x6e9a9c9a, 0xd9071a9c, 
    0x1c028c3c, 0xf0d48103, 0x9b34cf7f, 0x5e03bbb2, 0x37fce78a, 0x4dde5dab, 0xd97e6971, 0x65983f9e, 0x23749c42, 0x3a3f7d00, 0x4a4629e8, 0x8a02e84a, 
    0x1c4b5529, 0xb0559301, 0x60484509, 0xdc80a170, 0x1d15cf08, 0x6c19654c, 0x057b9ac4, 0x89475614, 0xdd343935, 0xb20f3438, 0x38041879, 0xe0a90307, 
    0x699e00ff, 0x337665b7, 0xfce78a5e, 0xde5dab37, 0x7e69714d, 0x983f9ed9, 0x749c4265, 0x3f7d0023, 0x4629e83a, 0x02e84a4a, 0xe0482a8a, 0x1e18e777, 
    0x314a89a6, 0xa54d6c57, 0x51141db9, 0x2fae3054, 0x9361d45f, 0x950971c4, 0x03420b9e, 0x534fea05, 0x5de107fd, 0xda6967a5, 0xcc751a2c, 0xb22c29d7, 
    0x69de37cb, 0xe8c9f508, 0xcbc5392b, 0xdf723444, 0x00ff16db, 0xa32693f0, 0x1347b26e, 0x810f2590, 0xb7d383d7, 0x5ad75d43, 0x16e9aaa3, 0x1c49bcfa, 
    0xb2b1ebec, 0xa79f3119, 0xbc086e35, 0xec2d1298, 0xe62e14fb, 0x224471ea, 0x7dc0dde2, 0x085a5114, 0x008aa228, 0xf5d78b2b, 0x1cf16418, 0x82676542, 
    0x7ac180d0, 0x00ffd493, 0x6957f841, 0x8b76da59, 0x35739d06, 0xb22c4bca, 0x429af7cd, 0x0a7a723d, 0xd17271ce, 0xf6b71c0d, 0x24fcbfc5, 0xacdba8c9, 
    0x09e4c491, 0xe075e043, 0xd7d0edf4, 0xeaa8d675, 0xafbe45ba, 0x3a3b4712, 0x4c866cec, 0x5bcde967, 0x04262f82, 0xc53e7b8b, 0x9cbab90b, 0xb7b80851, 
    0x464e1f70, 0x1b2ad90a, 0xab68d3d8, 0x45ccea6a, 0x4a049986, 0x0f1c439b, 0x7aae8ac3, 0x444551fa, 0x256ca829, 0xbdb88214, 0x4f86517f, 0x5626c411, 
    0x0c082d78, 0x4f3da917, 0x76851ff4, 0x68a79d95, 0x33d769b0, 0xcbb2a45c, 0xa479df2c, 0xa027d723, 0xd17271a2, 0xfb5b8e14, 0x12fedf62, 0xd66dd464, 
    0x0472e248, 0xf03af0a1, 0x6be8767a, 0x7554ebba, 0x57df225d, 0x9d9d2389, 0x26433676, 0xade6f433, 0x029317c1, 0x629fbd45, 0x4edddc85, 0x5b5c8428, 
    0x10ab0fb8, 0x95f28bcc, 0xbd2aee0b, 0xaaa65414, 0x1465322b, 0xeaaa8bd5, 0x8f632191, 0x64695594, 0x71211b59, 0x64d4dcef, 0x59d1d493, 0xf9a0a0d3, 
    0x241893ba, 0xebc515ee, 0x78328cfa, 0xb332218e, 0x604068c1, 0x7fea49bd, 0xb42bfca0, 0x453bedac, 0x9ab94e83, 0x599625e5, 0x21cdfb66, 0x053db91e, 
    0x68b93869, 0x7fcb118d, 0x00ff5b6c, 0x8d9a4cc2, 0x4e1cc9ba, 0x073e9440, 0xdd4e0f5e, 0x6a5d770d, 0x5ba4ab8e, 0x7324f1ea, 0xc8c6aeb3, 0x9c7ec664, 
    0xf222b8d5, 0xb3b74860, 0x9bbb50ec, 0x8b10c5a9, 0x6802778b, 0xa86423dc, 0x2492b86a, 0x853fe583, 0x0e12a050, 0xeaacc141, 0xea3555d0, 0x05292867, 
    0x5046e614, 0x861e1c09, 0x9ea65b9b, 0x541485c5, 0x59705737, 0xccc5b55b, 0x8c6b5c9e, 0xf4eb09b6, 0x55d404a6, 0xd3462d6b, 0xb4a48d51, 0x3855cc9b, 
    0x3f18293f, 0x3ba1598d, 0x39455180, 0x46e19c51, 0xbb923669, 0xc654b401, 0x5306b6dd, 0xa1e28c9c, 0xa6060723, 0x62b68c33, 0x8a823d4d, 0xb8ab1b2a, 
    0xe2daad2c, 0x352e4fe6, 0xf5045bc6, 0x9a8c55fa, 0xa865ad8a, 0xb4316ada, 0x8a799396, 0x23e507a7, 0x34abf107, 0x280a7027, 0x66b6a3a9, 0xfa51bee5, 
    0x82714ed4, 0x4b9b98bc, 0xd72a1a72, 0xa744b290, 0x450e9cee, 0x1f4f2441, 0x8a7a1cde, 0xdd845688, 0x314d89ba, 0xdd505194, 0x6e65c15d, 0x793217d7, 
    0xd832ae71, 0xb6d2af27, 0xad8a9a28, 0x6adaa865, 0x9396b431, 0x07a78a79, 0xf10723e5, 0x702734ab, 0x1bc9290a, 0xf1a37048, 0xaadb31ab, 0xfd31dff2, 
    0xa1951a2b, 0x94c97d4f, 0x2b952ad2, 0x91678c8c, 0x43955749, 0x4686a142, 0x6cc950d1, 0xb1cfc77a, 0x8b89e1ac, 0xaa849676, 0xa257668b, 0x080e8294, 
    0x2ea8f7c1, 0xb7b2e0ae, 0x3c998b6b, 0x6c19d7b8, 0x5de9d713, 0x4d68ea37, 0xd4b25645, 0xda18356d, 0xc5bc494b, 0x91f28353, 0x9ed5f883, 0xad8b02a7, 
    0x4b5529c0, 0x5393011c, 0xcbcd6c47, 0xbdd3a3fc, 0x18545459, 0xa9e68a51, 0x8e748c89, 0x1255ceac, 0x62c648d8, 0x2aba7f50, 0xe5812d29, 0x4a8f3d0e, 
    0x25123d5f, 0x38dac919, 0x9e495e15, 0xd003a74e, 0xd5a91456, 0x88686de7, 0x067d658c, 0xe68a8311, 0xdc33577c, 0x50695adc, 0x0c569a9f, 0x5a7fc8df, 
    0x4d8eabe9, 0xd65bf732, 0xe7996eee, 0x8e3955b2, 0x8e838c46, 0x573b1d83, 0xcbda4b65, 0x7489d0a9, 0x135f3480, 0xf99ca7cd, 0x3d210c53, 0x2bea8ffb, 
    0x5433aeac, 0x3e0db5d0, 0xba222f48, 0x7155fa9a, 0x7159c2ce, 0xae78eec8, 0xe83c09be, 0x52a99423, 0x18d60eea, 0x778ada23, 0x72194c57, 0x6740603b, 
    0x00ab803f, 0x02031805, 0x198fa4a8, 0x56e14ff9, 0xe147b8a3, 0xd2ef53be, 0xea14f1b8, 0xe7a85ebd, 0x3f3e649c, 0xe8fe49f5, 0x0759e3a1, 0xf41e3fcc, 
    0x5261c188, 0x50d1064e, 0x31da75c9, 0x30c69af8, 0x09dca69c, 0x1ca1b749, 0x82bb98b0, 0x5cf1952b, 0x697173cf, 0x697e42a5, 0x217f3358, 0x24a76bfd, 
    0xae499293, 0xddcb3435, 0xbab95b6f, 0x54c99e67, 0x321a39e6, 0x740c3a0e, 0xb98c5eed, 0xac5e54b9, 0x92fa8de9, 0xbe6800e9, 0x394f9b27, 0x4218a6f2, 
    0xd41ff77b, 0x461c5f57, 0xae408043, 0xb5d05427, 0x2f483e0d, 0xfa9aba22, 0xc2ce7155, 0xeec87159, 0xdec2ae78, 0xcb112c53, 0x86b290b5, 0x942218c1, 
    0xb4e2ac79, 0xc768e407, 0x64d0c70a, 0x557d9afa, 0x0eafe48e, 0xd57b3d32, 0x95717595, 0xd6e71539, 0xf32e52a7, 0x9ea4a439, 0xa9fe47a2, 0xe214dd3f, 
    0xb1693032, 0x4faa00ff, 0x493645f7, 0x9fbc3e96, 0xe5ca5141, 0x6d369136, 0x654b32e8, 0x3ee5536e, 0xf190ab9d, 0x7371af64, 0x46c4a469, 0x603358e9, 
    0x5a7fd8e7, 0xa49964ea, 0x0afac2eb, 0xbd4c93e2, 0x9bbbf5d6, 0x95ec79a6, 0xa391634e, 0xc7a0e320, 0x18dfd54e, 0x93e550d4, 0x2698cebd, 0x93d126b7, 
    0x32c51ffb, 0x77c4b9e9, 0xe0580818, 0xcc9fe31e, 0xb0156957, 0xf639e7c6, 0x533db806, 0xf934d442, 0xea8abc20, 0xc755e96b, 0xc765093b, 0xbbe2b923, 
    0x68974b2b, 0xbb029423, 0x318c12d4, 0x8d9bc28f, 0xe8181747, 0x86d6a639, 0x010c0090, 0x4545ed81, 0x1ffcea1c, 0x961afa94, 0x5146d9bc, 0xd3ca9176, 
    0xfd8f8d5b, 0x29ba7f52, 0x00ffd8d4, 0xa2fb27d5, 0x2403489c, 0x2fd17be0, 0x6bdc8389, 0x300cb2c6, 0xc60f6bfc, 0x6dbe1f9e, 0x86b84e1f, 0x756d736b, 
    0x32ad022b, 0x0b8680ac, 0x1c9713c2, 0x3bceede4, 0xd25a73e0, 0xfc84635d, 0xc70671cd, 0xb9f5d751, 0xe29a65ee, 0x17e263d1, 0xcf856c74, 0x3b467201, 
    0xae6b3d9e, 0x59c52a94, 0xd31bfaec, 0xf86e6e4d, 0x847ac233, 0x0da3e6da, 0xe26d44a3, 0x3243718f, 0xc1185b19, 0x1f71e711, 0x3a803336, 0xd0154ff2, 
    0x2b16022c, 0x070786b4, 0x0d5c5177, 0x68ab95ee, 0x9dfa56b7, 0xc5cdfd95, 0xc9f26fcc, 0xf8e96018, 0xfe3a4e82, 0xc7dbf57e, 0x8b7d4baa, 0xc97c90ab, 
    0x762577fe, 0x22274f90, 0x342aa4aa, 0x3aec76d4, 0x66a1b589, 0xc360458a, 0x6b29722a, 0x736eab85, 0xc155d419, 0xe4124912, 0x2a72b473, 0xe7742009, 
    0xeb15f5a8, 0xed24bc42, 0xd3543ab3, 0x288a8ad0, 0x280acbad, 0x290a80a2, 0x74f2c2f1, 0xada61e18, 0xce470247, 0x614d7d32, 0xa721bc52, 0x8a342552, 
    0x27638b65, 0x5749e938, 0x418919e3, 0xa4a8e8fe, 0x389407b5, 0x8eb3863e, 0x6ae51726, 0xec1555c2, 0x9595a255, 0x0d86e194, 0x7da77525, 0x298a028d, 
    0x0ce02440, 0x554a009a, 0x702aa762, 0xbd76c46a, 0xa702fedc, 0x18c02800, 0x1553c915, 0x3257a205, 0x33544495, 0xf2ab40b1, 0x45c53180, 0x00ffe357, 
    0x8aee9f54, 0x7c90351e, 0x59eff1c3, 0x3b0813c7, 0xa24ad872, 0x5128d64e, 0xe96ec952, 0xb587f9c8, 0x9cb15d45, 0x6a16af66, 0x14057b9a, 0xf2c29154, 
    0x9a7ad073, 0x76152525, 0x1db9a50d, 0x1fed1c4b, 0x861ee607, 0xc70ac7ac, 0x9afa64d0, 0xc454717d, 0xdd725ac2, 0x7aa24a19, 0x85f6af58, 0x9657d548, 
    0x072afcc0, 0x6339a491, 0xffd855f8, 0xfb27d500, 0x46469ca2, 0xd01a670d, 0xea6827a7, 0x634f924a, 0x25b58a3a, 0xf229b7b2, 0x5dd54e9f, 0x86e19091, 
    0x689dba2b, 0x32dad854, 0xaa146d4c, 0x64148ea5, 0xbbed88d5, 0x750af9c9, 0xd59ac62a, 0x955b9283, 0x540e99d5, 0xee98d5e0, 0x07e37043, 0x004eb5d7, 
    0x7b600003, 0x4a7d5e51, 0x4cbca9f0, 0x0dfa3465, 0x7f52fd8f, 0xd8d429ba, 0x27d500ff, 0x5c9da2fb, 0x0f99f8f2, 0xd12d2972, 0xf6291ff9, 0x36155fac, 
    0x91e8a2a1, 0xa213c7de, 0x291248dc, 0xf34c6ec2, 0xf9999e91, 0xdf9a074f, 0x8ff877ad, 0x780cafe1, 0xeceb3465, 0x1c4e17ea, 0x1f48943d, 0x7cdf62e5, 
    0x8e03949f, 0x1c042747, 0x95a26b10, 0x3637fc69, 0x3876dba4, 0x6f8d044f, 0x565757c4, 0x4b93044d, 0x28a40501, 0x3c076315, 0xd0010031, 0xad793de3, 
    0x7995ede8, 0x95fe986f, 0xe26378d1, 0x44fc8477, 0x07c9a28d, 0xed9419f6, 0x12c1328e, 0x194e7242, 0xe3fa0170, 0xcb9ae324, 0x7716b6bf, 0x6e2bdbf3, 
    0x1f544811, 0xb5aa1a5c, 0x3a266b67, 0xf48aadad, 0x9c714551, 0x00ff63e3, 0x8aee9f54, 0xf53f3675, 0xa7e8fe49, 0x63e24b55, 0xacca887b, 0x9d22c330, 
    0x5853f8ab, 0xac0fc293, 0x92a49268, 0x60a259ae, 0x60ab2a03, 0xc60dcfed, 0xc9f6384f, 0x48f3aea4, 0x9f746dd4, 0xe3fd3501, 0x64812044, 0x2a58f366, 
    0x3280989f, 0xf103497d, 0x51ce68ad, 0x96d24cba, 0x07f89fe7, 0xbfe67ac2, 0xac77cfa7, 0x1a6dc75c, 0x8f72133e, 0xc803e030, 0xeb390000, 0x9cd2f19c, 
    0xa330a888, 0x6bf8df15, 0x65bcd35f, 0xa525dca5, 0xeedb8ab9, 0x32f08596, 0x8301647b, 0xd73b82d3, 0x2c6c7f15, 0x56b6e7ef, 0xa89022dc, 0xea34b83e, 
    0xec4a52ce, 0xbd22bbaa, 0xe65c5114, 0x00ff6303, 0x8aee9f54, 0xf53f3675, 0xa7e8fe49, 0x63e24b55, 0x4b74857b, 0x530d4be1, 0x27786dc1, 0x07f0c692, 
    0xbe46b57f, 0xea490161, 0x7d8ce084, 0xb573bd0f, 0x9d1f3ee8, 0xe7157c6d, 0x8d5542bc, 0xa3876224, 0xe92a9e60, 0x94869e36, 0x00ff39b7, 0x4e2f780c, 
    0x7967d1b9, 0x0bf559b5, 0xde09e480, 0xc7c70a11, 0xafcf6003, 0x57f89324, 0xa38b5e3d, 0x8a7850ea, 0xecd7e2ca, 0x1810690f, 0x39c03726, 0x6b0e20f4, 
    0x16b6bf82, 0x2bdbf377, 0x5448116e, 0x751a5c1f, 0x639b951b, 0xaf4caaa9, 0x26561445, 0x00ff6323, 0x8aee9f54, 0xf53f3675, 0xa7e8fe49, 0x63e24b55, 
    0x3a76857b, 0xcfa28936, 0x6aa891e1, 0xa1528616, 0x033bd8d9, 0x47604f80, 0xd0abe36a, 0xda3a3f7c, 0x78cf2bf8, 0x481aab84, 0xc1460fc5, 0xdc53553c, 
    0x5be596d2, 0x6ff80f4f, 0x97a5d358, 0x7d4b864d, 0xcdf2aea4, 0xc979c6c1, 0x11d71c39, 0xeaa38b5e, 0xca8a7850, 0x0fecd7e2, 0x26181069, 0xf439c037, 
    0x826b0e20, 0x7716b6bf, 0x6e2bdbf3, 0x1f544811, 0x35751a5c, 0x9a6c2ad4, 0x1545d12b, 0xffd89091, 0xfb27d500, 0x239187a2, 0x29fc311f, 0x9bc418aa, 
    0x39ca6f5b, 0x6a336ac6, 0x2793c949, 0x30c65be9, 0xc56e6e72, 0x19abafa4, 0x0abfc325, 0xb56e8f76, 0xb068a791, 0x5c33d769, 0x2ccbb2a4, 0x23a479df, 
    0xada027d7, 0x1965b677, 0x23a1ba53, 0x1abd0607, 0xe15e934a, 0x0a6d6dbc, 0x6f91ae3a, 0xce91c4ab, 0x211bbbce, 0x73fa1993, 0xed59ed57, 0xed1d8e60, 
    0xcb85a222, 0xa9a438f5, 0x93dfdd92, 0x757a8ff2, 0x30af3415, 0x61a9ad95, 0x1e3a4926, 0xab3e0d7d, 0x9afe93fd, 0x2b32957e, 0xef3ec3a8, 0x91cabcc2, 
    0x3983b5a6, 0x84d1a3e4, 0xfd93ea7f, 0xc7a64ed1, 0xdd3fa9fe, 0x7922c914, 0xe881c93a, 0x9b934d05, 0x5f59b0bb, 0x55b92451, 0xeb633ee1, 0x1992b3da, 
    0xc52df3fc, 0x01cecdfd, 0x94afa411, 0x62671c88, 0x1938178e, 0xff555cc7, 0xb77fb200, 0x1b2f54fa, 0xc7617e46, 0xa2ef6aaf, 0xbdeea7a8, 0xb6caa14d, 
    0x53d4cd22, 0x7f6573c5, 0x473c6373, 0xda775b22, 0x4f3bc848, 0x9081a462, 0x6e153878, 0xf56fb63b, 0xdecf5dee, 0xa98fd573, 0xce1911a8, 0x16a66614, 
    0x00ff729c, 0x626f55a5, 0x9fe39ef4, 0x08b2cc2e, 0x51e42023, 0x190fa450, 0x31fc65f9, 0x359b5753, 0x73d7fd14, 0x6cd0a59d, 0xfd93ea7f, 0xc7a64ed1, 
    0xdd3fa9fe, 0x8c18ac14, 0xc6f5c129, 0x60e24b69, 0x50dd11f7, 0xe22a8e65, 0x8352aff8, 0xd1365d4a, 0x2425ded6, 0x309f89f9, 0xb7d793e4, 0xd6f1dc5e, 
    0x27a94db3, 0x719f4c26, 0x03567b4d, 0x747b772a, 0xc23ecaae, 0x6b76572f, 0x35f5580e, 0x1700ff74, 0x99751aeb, 0x24718eb4, 0x609e0a58, 0xd93f46cb, 
    0x9c9ee33f, 0xc489a962, 0x2cb15cec, 0x9a7a4e4e, 0xc3cc96aa, 0xc5d3762c, 0x9f440eae, 0x636f55a5, 0x9b63b62e, 0xa258ea8b, 0x30ca8a9a, 0x14dfbbcd, 
    0xcc6ae0ea, 0xea7f6cc0, 0x4ed1fd93, 0xa9fec7a6, 0xea14dd3f, 0xde98f872, 0x1e165be1, 0x34d2b835, 0xb7b7b2e5, 0xc3995d86, 0xf39c7b36, 0x7258ef83, 
    0xe671d244, 0x51017a60, 0xbffd93fd, 0xa9a4b7d2, 0xe022652d, 0x4ae7d6d2, 0x29b510df, 0xad1831e0, 0x798c90e1, 0xa68fa788, 0xb361c549, 0x31bb1899, 
    0x9324c762, 0x6951d59c, 0x53fa2fc7, 0xfba385e3, 0x45e871b2, 0x2d655f55, 0xa9cd2163, 0x8aa22675, 0x6cc8902b, 0xfd93ea7f, 0xc7a64ed1, 0xdd3fa9fe, 
    0x7ca9ea14, 0xab706f4c, 0xd418def6, 0xb9654bb5, 0x23f3b4b7, 0x2271856c, 0xcd1d878e, 0xf043af50, 0xe0cd72d4, 0x3c098ee5, 0x11485ca9, 0x77ba00ff, 
    0x77aa1a1c, 0x6abad0e6, 0xf025e3ec, 0x0961aba6, 0xda176b9a, 0x2b8325a3, 0xd604f063, 0xa47d7a7d, 0xa49d8e3a, 0x5ba9f6cd, 0xaa649c51, 0x733aa6af, 
    0x94c5bcd6, 0x416015ab, 0xd41e0407, 0xb1bb5dea, 0x12b58dd4, 0x8cac288a, 0xa9fec786, 0xea14dd3f, 0x93ea7f6c, 0xaa4ed1fd, 0xf7c6c497, 0xf0b3d20a, 
    0x5aa8abee, 0xa7b5c5ad, 0x06e40b99, 0x1c6714f3, 0xdaac091e, 0x470d3ff4, 0x580ede2c, 0x95ca93e0, 0xfb1f81c4, 0xa7c171a7, 0x22547605, 0xfb38f5a4, 
    0xf66a0d8f, 0xb1651970, 0x49468d65, 0xfcc05656, 0xa757660d, 0xe9a843da, 0x6adf4cda, 0xc619b595, 0x63faaa4a, 0xcc6b3da7, 0x56b14a59, 0x41701004, 
    0x61e344ed, 0x12b63cce, 0x33a8288a, 0xa4fa1f1b, 0x537400ff, 0x00ffb1a9, 0x45f74faa, 0x135faa3a, 0x4a2bdc1b, 0xaedac3cf, 0x36b76ca1, 0x4d64beb6, 
    0xa398379c, 0x4de83838, 0xf8a1d766, 0xf066396a, 0x9e04c772, 0x0824ae54, 0x3bdd00ff, 0x46380d8e, 0x4945a8ec, 0xcf859cd9, 0x488bf586, 0x98ac695a, 
    0xac928c22, 0x13f881ad, 0xf6e97559, 0x763aea90, 0xa5da3793, 0x9271466d, 0xe998beaa, 0x16f35acf, 0x8155ac52, 0x7b101c04, 0x73d83851, 0xa2848d8a, 
    0xc60c2a8a, 0x3fa9fec7, 0x6cea14dd, 0xfd93ea7f, 0x97aa4ed1, 0x0af7c6c4, 0xf6f0b3d2, 0x2d5ba8ab, 0x99afadcd, 0xe60d6713, 0x3a0ece28, 0xe8b55913, 
    0x598e1a7e, 0xc1b11cbc, 0x892b9527, 0x4ef73f02, 0x114e83e3, 0x52112abb, 0x73216776, 0xd262bde1, 0x266b9a16, 0xab24a308, 0x047e602b, 0x7d7a5dd6, 
    0x9d8e3aa4, 0xa9f6cda4, 0x649c515b, 0x3aa6afaa, 0xc5bcd673, 0x6015ab94, 0x1e040741, 0x1c364ed4, 0x2861a3e2, 0x31838aa2, 0xaa00ffb1, 0x3a45f74f, 
    0xa4fa1f9b, 0x537400ff, 0x31f1a5aa, 0xcdbbc2bd, 0xf067ad01, 0xbba4d87f, 0x6495168a, 0x57865942, 0xd78cf324, 0x6514cc04, 0x9257058e, 0x8f8ff4e4, 
    0x84525a73, 0xd345f4a4, 0xa447f4bd, 0xbe6930e9, 0x25798219, 0xe07012d6, 0x3880a07c, 0x354f50f4, 0xaddcdfc3, 0x7271a1e6, 0x9165b5ab, 0x4d400f98, 
    0xcb72c766, 0xd7c3fcc3, 0x575759bd, 0xaa9a5319, 0x1a0de7b4, 0xadbd73d0, 0x8aa2056d, 0x6cc89c2b, 0xfd93ea7f, 0xc7a64ed1, 0xdd3fa9fe, 0x7ca9ea14, 
    0xae706f4c, 0x596b40f3, 0x29f61ffc, 0xa585e22e, 0x61961059, 0xe33cc995, 0x72d4c135, 0xd4f1914e, 0x69aa0afa, 0x54ae64b7, 0x7a444f1b, 0x9b069326, 
    0x922798e1, 0x0e27615d, 0x0308ca07, 0xf304458f, 0xcafd3d5c, 0x17176ade, 0x5956bb2a, 0x04f48019, 0x11ee28d5, 0xf7293ff8, 0x52d469a9, 0x87d5ba8f, 
    0x82b5f636, 0x8cac288a, 0xa9fec7c6, 0xea14dd3f, 0x93ea7f6c, 0xaa4ed1fd, 0xf7c6c497, 0x0634ef0a, 0xffc19fb5, 0xee926200, 0x91555a28, 0x5c196609, 
    0x5c33ce93, 0x4621211d, 0x2ea2c049, 0x2b9771cc, 0x8349073d, 0x13ccf04d, 0x93b02ec9, 0x04e50387, 0x82a2c701, 0xfe1eae79, 0x0b356fe5, 0xab5d958b, 
    0x7ac08c2c, 0xb2b26a02, 0x8a9ccab8, 0x2c7d725a, 0xd6ea4a39, 0xa0a2280a, 0x00ffb181, 0x45f74faa, 0xfa1f9b3a, 0x7400ffa4, 0xf1a5aa53, 0xbbc2bd31, 
    0x67ad01cd, 0xa4d87ff0, 0x95168abb, 0x86594264, 0x8cf32457, 0x114507d7, 0x72198795, 0x9834d0b3, 0xc10cdf34, 0x09eb923c, 0x503e7038, 0x287a1c40, 
    0xefe19a27, 0x50f356ee, 0xda55b9b8, 0x07ccc8b2, 0xd1ab26a0, 0x87d59543, 0x28585d29, 0x0f928aa2, 0x0000d9ff, 
};
};
} // namespace BluePrint
