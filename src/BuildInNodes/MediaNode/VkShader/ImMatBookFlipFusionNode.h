#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <BookFlip_vulkan.h>

namespace BluePrint
{
struct BookFlipFusionNode final : Node
{
    BP_NODE_WITH_NAME(BookFlipFusionNode, "BookFlip Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Move")
    BookFlipFusionNode(BP* blueprint): Node(blueprint) { m_Name = "BookFlip Transform"; }

    ~BookFlipFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::BookFlip_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return false; }
    bool Skippable() const override { return true; }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue0e0"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    ImGui::BookFlip_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 4516;
    const unsigned int logo_data[4516/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0x280aa08a, 0x280a80a2, 0xf1dd1aaa, 0xa7a9b4d3, 0x3626db46, 0x3dda7fc6, 0x7693c63f, 0x56f40157, 0xdda98126, 0xb53d4b5d, 0xe46466eb, 0xee384065, 
    0x35cf3f30, 0x751751b7, 0x69698571, 0xdfeef1df, 0x4100ffef, 0xa7a5b559, 0x7fbbc77f, 0x6105fdbf, 0x9d19fe89, 0x8a86844f, 0xc2b2ae28, 0xb7862a8a, 
    0x2aed747c, 0xc9b6d169, 0xf69fb18d, 0xa4f14f8f, 0xafc095dd, 0xb7686645, 0x2ac3dc93, 0x4633315d, 0x308020f8, 0xd6f8ed31, 0xd59d649d, 0xff6b4bc6, 
    0xff701f00, 0xfe45d700, 0x39d7d175, 0x1f00ff6b, 0xd700ff70, 0xd175fe45, 0x742b16d7, 0x67745761, 0xe9154551, 0x5514059b, 0xe9f86e0d, 0xa3d354da, 
    0x631b936d, 0x9f1eed3f, 0x2bbb49e3, 0xa38a4e81, 0x73cf5ca4, 0xfde7c66a, 0xe454486a, 0x00ffd063, 0x2759bd5a, 0x9a9b7175, 0xbf79fc2f, 0xc83f74fd, 
    0xe8678556, 0xffe6f1bf, 0xffd0f500, 0x155a2100, 0xd9f856e6, 0x99893fc9, 0x7b4551d4, 0x23575027, 0x7bd50be3, 0x9d237bcb, 0x63f2fc91, 0xad00ffdf, 
    0xacaeebfc, 0x224874e8, 0x32529fd5, 0x9ecf24cb, 0xf419181b, 0x898ad3e3, 0x346425a7, 0xb18e7a72, 0x6ba7366d, 0xb11c657b, 0x0c060034, 0x8e07c800, 
    0xbb22d387, 0xe14965a8, 0x47396349, 0x83fac050, 0x7c3a6a50, 0xb6a19d3a, 0x4152b09c, 0x3d827a05, 0x8b36d629, 0xb21d6763, 0x8cb1ee48, 0x3fcef802, 
    0x8b8b510a, 0x14c50277, 0x28085a51, 0x2b008aa2, 0xea85f191, 0x91bde5bd, 0x79fec8ce, 0x00ffef31, 0xd775fed6, 0x243a7456, 0xa9cf6a11, 0x67926519, 
    0x0c8c0dcf, 0xc5e971fa, 0xb292d344, 0xbd84391a, 0x8e2a3eb7, 0xf142dae2, 0x044fc1ce, 0x9e3f4672, 0x9995750d, 0x71c1a17d, 0xc5aa35e5, 0xb84f246b, 
    0xfc394632, 0x38635ab1, 0x1344ade7, 0x6905b857, 0xeef1df69, 0x00ffefdf, 0xa5b55941, 0xbbc77fa7, 0x05fdbf7f, 0x19fe8965, 0x86844f9d, 0xb2ae288a, 
    0x181fb9c2, 0x5bdeab5e, 0x8fec1cd9, 0xff1e93e7, 0xe76ffd00, 0x4367755d, 0xac1641a2, 0x599691fa, 0xd8f07c26, 0x1ea7cfc0, 0x394d549c, 0x9ba3212b, 
    0xfc85bbb2, 0xe56eed44, 0x424fb8e3, 0xf4cf4030, 0xb37a6bfd, 0xfb63d2e5, 0xdb361764, 0x551e3120, 0x871f8653, 0x9c155ae3, 0x2d815b53, 0xc37dfcaf, 
    0x175d00ff, 0x5c47d7f9, 0x7dfcafe5, 0x5d00ffc3, 0x47d7f917, 0xd1ad785c, 0x9dd15d85, 0xa6571445, 0xf8c8156c, 0xf25ef5c2, 0x64e7c8de, 0xf7983c7f, 
    0x7feb00ff, 0x3aabeb3a, 0xb508121d, 0xb28cd467, 0x86e733c9, 0x387d06c6, 0x69a2e2f4, 0x1c0d59c9, 0x1c779bfe, 0xc2daadfa, 0x0790a3db, 0x00748c53, 
    0xd55ae71f, 0x8be4744d, 0x76a84b51, 0x34368144, 0xefdd986a, 0xb92abffc, 0x6ae9c659, 0xff8be606, 0xff6f1e00, 0xf20f5d00, 0xfa59a115, 0xbf79fc2f, 
    0xc83f74fd, 0xb5798556, 0x4f7236be, 0x147566e2, 0xd4c95e51, 0x9a4c5114, 0x79e1ed68, 0xa2b16da5, 0x28e86396, 0x8ff6af02, 0x00ff32fd, 0xd4fabfc7, 
    0xd9bcafe8, 0x1b2f3f92, 0x74772ed8, 0x3c4166cd, 0xd0ac3077, 0x876ee4b6, 0x36abf618, 0x0ff9f19f, 0xe75f74fd, 0x5d3b3959, 0xfbded803, 0xa57ffb27, 
    0x00ff641f, 0x14abf46f, 0x9af59d57, 0x696fcebd, 0x288a3a23, 0x0ae958af, 0x344da628, 0xd2bcf076, 0x4bd1d8b6, 0x0114f431, 0xf6aff69f, 0xb5d05a3f, 
    0xba4dfbb3, 0xdd6de6cd, 0xf89e319e, 0x49a558ac, 0x6d6359a2, 0xd720c3c8, 0x00ffa547, 0xc72f3ac8, 0xafe39af9, 0xe28d5152, 0x5adaa8c8, 0xffccfe0c, 
    0xf8dfa600, 0x5e00ffef, 0xf641dbac, 0xdd6eca78, 0x15e39c93, 0x2ac5152d, 0x66b39ad3, 0x67ee6d0e, 0xec154551, 0x1445419d, 0xde8ea6c9, 0xdb569a17, 
    0x3e66291a, 0xad338082, 0xc24dfb62, 0xec6ebbc3, 0xcdf68cf3, 0x6200ff68, 0xc7d300ff, 0x00ff39fe, 0x049aaad7, 0x5ba97d6f, 0xad34aaad, 0x5120b322, 
    0xe9491bc9, 0x08f2adf4, 0x57042338, 0xe3ac5e9d, 0x5499452b, 0xcdd09394, 0xa6f2488b, 0xedfc3c49, 0xaeb37160, 0xa2d21a3f, 0xe594e58a, 0xc9c5883f, 
    0x28eaccbd, 0xacb3bda2, 0x3499a228, 0xf3c2dbd1, 0x4563db4a, 0x50d0c72c, 0x57ba1604, 0x6fd66dda, 0xf1ec6e3f, 0xebf13db7, 0x6100ff52, 0xcfd300ff, 
    0x00ff39fe, 0x13bdadd7, 0x742ed541, 0xb4202f18, 0xd86d2069, 0xc3496065, 0x7bce7810, 0x70104454, 0x2aaf0846, 0x3529aa75, 0x494a0973, 0x3eadec95, 
    0x7e8f09c7, 0xe3ecb6fc, 0x58a5e71f, 0x6de78aa2, 0xb799ddc9, 0x28ea4c7d, 0xacd3bda2, 0xd7c5032b, 0x969e168d, 0x96fbfd91, 0x7fe03bc6, 0xf55bf1f5, 
    0x37366ac9, 0xca88df7a, 0x31bc2d01, 0xc698d52e, 0xd371c771, 0xbe5167bd, 0xdaa1215b, 0x9ee0f238, 0x67587e00, 0x56fa5c74, 0x7efca7b5, 0x5d00ff43, 
    0x36d6f917, 0x37cc1595, 0xea746977, 0xcac636f2, 0xfd793df4, 0xfed3662b, 0x00ff213f, 0xebfc8bae, 0xb127b02f, 0x154551d3, 0x75661ce5, 0xf15e5114, 
    0xe28115d8, 0x4f8bc6eb, 0xfdfe484b, 0xf01d63cb, 0xadf8fa3f, 0x1bb5e4fa, 0xc46fbd1b, 0xde960065, 0xcc6a9718, 0xb8e33863, 0xa8b3dee9, 0xd1902ddf, 
    0x628d4d63, 0xe22911b3, 0xe0471d39, 0x2fbdbae6, 0x7ed141fe, 0x21d7cc3f, 0x313447a5, 0x1eee14cf, 0x572c3141, 0xeb1f20a7, 0xd998865d, 0xe81860d3, 
    0xc6e37f18, 0xc31ff1b8, 0x2d765546, 0xc2154551, 0x51d49973, 0x60c77b45, 0xaf8b0756, 0x2d3d2d1a, 0x2df7fb23, 0xffc0778c, 0xb7e2eb00, 0x6cd492eb, 
    0x11bff56e, 0x785b0294, 0x31ab5d62, 0xe38ee38c, 0xa3ce7aa7, 0x4743b67c, 0x1be0f061, 0x8a69157f, 0xc73164aa, 0x9331da20, 0xb5d69b88, 0xd42113f5, 
    0x8c585aae, 0x18b3d22e, 0x39b9fbc8, 0x33fc60c5, 0x24be16b8, 0x65f69ab0, 0x12a72d5f, 0x76064e48, 0xd7a62bc8, 0xb5d4e2ef, 0x04a1ee99, 0x2405c446, 
    0x33069060, 0x869e185c, 0xa8337655, 0x39e48aa2, 0xa228eacc, 0x2bb0e3bd, 0x8dd7c503, 0x91969e16, 0xc696fbfd, 0xf57fe03b, 0xc9f55bf1, 0x7a37366a, 
    0x01ca88df, 0x2e31bc2d, 0x71c698d5, 0xbdd371c7, 0x5bbe5167, 0xfedca321, 0x0f75c51c, 0x69b8a284, 0x1cc8d08c, 0x2be302c3, 0x7df26c87, 0x897a724d, 
    0x2d57ea90, 0x6917462c, 0xf8678c59, 0xd78a7372, 0x9d0d63f8, 0x75ac858f, 0x51519d6b, 0x858680a5, 0xc47c0c98, 0x4ccff364, 0x5f4335fe, 0xd6528bbf, 
    0x1184ba67, 0x9114101b, 0xcd184082, 0x6a4c9579, 0x455167ec, 0x9d818115, 0xbc571445, 0x54140576, 0xa900ff73, 0x583e996a, 0xa9c80cb6, 0xf2e33fad, 
    0xbfe8fa1f, 0x2b6abace, 0xabab78cf, 0xf2d5c558, 0xb8a2280a, 0x28ea4ccc, 0xb0e3bda2, 0x4faaa228, 0x2aabb9fe, 0x6f9c3db5, 0x3e633761, 0xfe2f1dba, 
    0x3f7ed141, 0x2bbad5cc, 0xda5babce, 0x53c2582b, 0x280a56e6, 0xccccb9a2, 0xbda228ea, 0xa828b0e3, 0x8fd57fae, 0x6aae55ad, 0x6b25f995, 0x2666e510, 
    0x2100ff97, 0xe41fbf18, 0x8aa2a16b, 0xf6d4eaf3, 0x9430f68e, 0x8ac29db9, 0x3389ac28, 0xf78aa2a8, 0xa9a2c08e, 0xbeb1fe49, 0x6f5c9ba6, 0x196b6715, 
    0x5fba9af3, 0xfca283fc, 0x74ab997f, 0x9d7c5e51, 0xdd0d66db, 0x8aa228dc, 0x51d41991, 0x60c77b45, 0xab2e5754, 0xb9e00418, 0x7f3df7c0, 0x3a584ba5, 
    0x00ffee95, 0x2fd95812, 0x7d3bc348, 0x9f7e9c4a, 0xedacb2ce, 0xecb12706, 0xe1957efa, 0x5b25717d, 0x6863792b, 0x815d92f1, 0x91d4e919, 0xb8dbb8da, 
    0xf6e4b505, 0xa408b7e1, 0x83ebdd64, 0xa077d78c, 0x12ebd0eb, 0x981e69cb, 0x25a1546d, 0x303f6ee2, 0xfa710d06, 0x6e7a84f5, 0x4eb43db1, 0x0b821459, 
    0x9c91911c, 0x95e6f21a, 0x97a68cae, 0xa2ce682a, 0x13232b8a, 0xaf288a3a, 0x8e0aec78, 0x526dd218, 0x4719a418, 0xa8871595, 0xdb945424, 0xdb0cf94f, 
    0xfe64d77f, 0x3fb1b962, 0x4726f502, 0x57fae9a5, 0x95c4f585, 0x8de5ad6c, 0x7649c6a3, 0x52a76704, 0x6ee36a47, 0x93d716e0, 0x22dc86db, 0xae779391, 
    0xde5d330e, 0xac43af83, 0x7aa42d4b, 0x8452b561, 0xfcb88997, 0xc73518c0, 0xe911d6eb, 0xd1f6c4ba, 0x08526439, 0x464672dc, 0x9acf6b70, 0x9a33ba56, 
    0x3aa3a95c, 0x8cac288a, 0xa228ea4c, 0x8ab0e3bd, 0xfa58fde7, 0x2298b4d3, 0x86e1d4b9, 0x131bdd65, 0xc1339291, 0xffdca6f4, 0x5a1fab00, 0x00ff419b, 
    0xd4bfd590, 0x5e2300ff, 0xa6f82376, 0x233de26f, 0x2fbcd24f, 0x65ab24ae, 0x1e6d2c6f, 0x23b04b32, 0x3b923a3d, 0x00771b57, 0xdc9ebcb6, 0x8c14e136, 
    0x7170bd9b, 0x1df4ee9a, 0x59621d7a, 0x0dd3236d, 0xbc2494aa, 0x00e6c74d, 0x5e3faec1, 0xd64d8fb0, 0xcb89b627, 0xe3469022, 0x83333292, 0xd74af35c, 
    0x542ecd44, 0x14459dd1, 0x75264656, 0xf15e5114, 0xfd9352d8, 0x684d7d63, 0xf7b656e8, 0xcc1dcd97, 0x5b46d07b, 0x8f9c2319, 0xfd93ce4a, 0x6b4d7d63, 
    0xa98160f8, 0x963c3db9, 0x77bc62fe, 0x88af98f1, 0x2bfdf4ef, 0x4ae2fac2, 0xc6f256b6, 0xbb24e3d1, 0xa9d33302, 0xb771b523, 0xc96b0b70, 0x116ec3ed, 
    0xd7bbc948, 0xefae1907, 0xd6a1d741, 0x3dd29625, 0x42a9da30, 0x7edcc44b, 0xe31a0c60, 0xf408ebf5, 0x687b62dd, 0x0429b29c, 0x2323396e, 0x95a63438, 
    0x726982ae, 0x28ea8ca6, 0x3331b2a2, 0x2499a2a8, 0x19e75a9e, 0xb6ee15e7, 0xc1ceaea2, 0x587494f5, 0xd425d421, 0xcfbcb28c, 0x0c8c189e, 0xc5e971fa, 
    0xfb4ffb5e, 0xe735ad1f, 0xe37685de, 0x52cdf53e, 0xab4539b5, 0x7aace492, 0xd43c9e14, 0x684b0819, 0xe4468f11, 0x6eaef5e3, 0x9db9e579, 0xc8cb99e7, 
    0xb9c72ce7, 0x31afe8a8, 0x77cebdc9, 0x280af726, 0x752691a2, 0x6c465414, 0xf7f43612, 0x8c736eaf, 0xb4ad233e, 0xf0aa25b7, 0xa32fd93f, 0xe5498b95, 
    0xa9e724ca, 0x94fe38e7, 0xfd3f00ff, 0x7fa1d69f, 0xcd74cb9d, 0x09ab5772, 0x25b228c5, 0xa287d624, 0x41cde349, 0x81b68490, 0x4e6ef418, 0xe7e65a3f, 
    0xde995b9e, 0x8ebc9c79, 0x9a7bcc72, 0x72e08a8e, 0x2617736f, 0xa2280af7, 0x14752691, 0x6f9766a0, 0xad327bbd, 0x9d493b08, 0x416e494e, 0x7dacfe73, 
    0xa1fb3469, 0xc3157d65, 0xf0847029, 0x2ac6330e, 0x17f32159, 0x7aceb11b, 0xff645f54, 0xa59fa600, 0x659c5670, 0x52cec43b, 0xf93bba57, 0x32a8793c, 
    0x23d09610, 0xc7c98d1e, 0xf3dc5ceb, 0xcf3b73cb, 0xce919733, 0x51738f59, 0x4dce5cd1, 0xdee466ee, 0x521445e1, 0xaca2ce24, 0xbffd93fd, 0x7fb28fd2, 
    0xaf57fab7, 0xce5d9af5, 0x2613699f, 0xf58df54f, 0xbf497335, 0xccec3a5d, 0x420199f1, 0x9f1e07b8, 0x336d4fe1, 0x75e71373, 0xfdbffb39, 0xafec4f7a, 
    0x00ff6dfa, 0xf500ff8e, 0x5772cceb, 0x49e632ba, 0xf124eedc, 0x42c8a0e6, 0x7a8c405b, 0xad1f2737, 0x2dcf7373, 0xce3cefcc, 0x6639475e, 0x4547cd3d, 
    0x927b9343, 0x45e1dee4, 0xce245214, 0xd57faea8, 0x514bad8f, 0xab00ff5c, 0x6bf65a1f, 0x729d0d7f, 0xda53abd8, 0x4a5fdc59, 0x7b8fb662, 0x4046dc85, 
    0xd4faf1e3, 0x6ce1b515, 0x3a504a9d, 0xadf907f9, 0x995d4979, 0x72637725, 0x706b0b5f, 0x6cb077a1, 0x585dbb0e, 0x49d640fe, 0x82111c04, 0x9bf4d32b, 
    0x8a4f4f3d, 0x37bdbe76, 0x075180a4, 0xeb738f51, 0x99a8735e, 0xd272a50e, 0x957661c4, 0xdd47c698, 0x4a29cec9, 0x0ace4436, 0x286ae52a, 0xcecca0a2, 
    0xdbf7afaa, 0xabaa56eb, 0xd7faf6fd, 0x51f88ba5, 0xcd2a31d3, 0x7e759f9e, 0xe6c55a5c, 0x98efc614, 0x6aea670c, 0x117e74b5, 0x1cd8b504, 0x6bfdab1d, 
    0xc4ee2a8a, 0xbfd85d45, 0xb8b5852f, 0x36d8bb50, 0xacae5d07, 0x246b207f, 0xc1080e82, 0x4dfae915, 0xc5a7a79e, 0x9b5e5f3b, 0x832840d2, 0xf5b9c7a8, 
    0x4cd439af, 0x69b95287, 0x4abb3062, 0xee2363cc, 0x3215e7e4, 0x8233918d, 0x8a5ab98a, 0x3333a828, 0x9a3aadd7, 0xd7d569bd, 0xac21fe8a, 0x65bb0af7, 
    0x31eadfa3, 0x7990b634, 0x9db4ad88, 0x4dfc39ea, 0xc1cfae52, 0xe02a9d80, 0x1fe78303, 0x115604fd, 0x23147657, 0x9751eccc, 0x28dcdac2, 0x031bac5d, 
    0x3f56d7ae, 0x41903590, 0x8a600407, 0xcf26fdf4, 0x9de2d353, 0xe94dafaf, 0xd4411420, 0xd7fadc63, 0x4326ea9c, 0xb1b45ca9, 0x66a55d18, 0xc9e19f31, 
    0x364a29ce, 0xab283841, 0x8aa2a895, 0x8aa23083, 0xf6ab0028, 0xaaa31e1a, 0xdbd9d242, 0xb4ada879, 0x3fb8ea9d, 0x15aaf789, 0x131078de, 0x7080dca3, 
    0xfb8ff37c, 0x5d4555e4, 0x4945b8d8, 0xbed49cd9, 0x42e1d616, 0x1dd860ed, 0xfcb1ba76, 0x0882ac81, 0x57042338, 0x7a36e9a7, 0xed149f9e, 0x496f7a7d, 
    0xa30ea200, 0xbcd6e71e, 0x1d3251e7, 0x88a5e54a, 0x312bedc2, 0x0e00ff8c, 0x514e714e, 0xa2e01cb2, 0x8aa256ae, 0xeacc0c2a, 0x58fde78a, 0x15b5d4fa, 
    0xf5b1facf, 0xf0b766af, 0x8a2dd7d9, 0x60e1b5b5, 0x1d28a54e, 0xd6fc837c, 0xccca69b1, 0x4fc52a87, 0x4979c5b1, 0x67a798d9, 0x6db4d673, 0x27d04f33, 
    0xb835a97b, 0xda4805e5, 0x8cf85108, 0xaf29d79c, 0x6ba9c5df, 0x0842dd33, 0x480a888d, 0x660c20c1, 0x72a9a8b3, 0xca25b2ba, 0x1405c9ea, 0x9d415251, 
    0xb7ef5f55, 0x5755add6, 0xaff5edfb, 0xa3f0174b, 0x475762a6, 0x5d4b10e1, 0xff6ad781, 0x29e75a00, 0x759feeca, 0xe2d0e78a, 0xb9b353b8, 0xcf9d5d9c, 
    0xcdb4d156, 0xee9d403f, 0x94e3d6a4, 0x21682315, 0x7332e247, 0x7fbfa65c, 0xcfaca516, 0x36220875, 0x04232920, 0xce9a3180, 0xeacaa5a2, 0xab2b97c8, 
    0x45511424, 0xf57a0649, 0xad5753a7, 0x5ff1ba3a, 0xe19e35c4, 0x01839f5d, 0x1cc0553a, 0xfdc73113, 0xa78c2bf2, 0xc220b22c, 0x38f6283b, 0x3bbb78ae, 
    0x77e5328a, 0xd346233d, 0x7702fd34, 0x8e5b93ba, 0xa08d5450, 0xc9881f85, 0xfd9a72cd, 0xb3965afc, 0x8820d43d, 0x8ca480d8, 0x6bc60012, 0x574e8a3a, 
    0xba724256, 0x144541b2, 0x51149054, 0xdb150045, 0xdee226f8, 0x26e5222d, 0xd3328eb8, 0x0f70071c, 0x51c415dd, 0x72671755, 0x73572ea3, 0xcdb4d1bc, 
    0xee9d403f, 0x94e3d6a4, 0x21682315, 0x7332e247, 0x7fbfa65c, 0xcfaca516, 0x36220875, 0x04232920, 0xce9a3180, 0xab2b87a2, 0x595db921, 0x2a8aa220, 
    0xd9ff3f48, 
};
};
} // namespace BluePrint
