#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <MultiplyBlend_vulkan.h>

namespace BluePrint
{
struct MultiplyBlendFusionNode final : Node
{
    BP_NODE_WITH_NAME(MultiplyBlendFusionNode, "MultiplyBlend Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Color")
    MultiplyBlendFusionNode(BP* blueprint): Node(blueprint) { m_Name = "MultiplyBlend Transform"; }

    ~MultiplyBlendFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::MultiplyBlend_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return false; }
    bool Skippable() const override { return true; }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue9bb"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    ImGui::MultiplyBlend_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 4293;
    const unsigned int logo_data[4296/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0xa221a08a, 0x14442a8a, 0x8bf55451, 0x26fdecdf, 0x4ce2d469, 0x00ff8c6d, 0x8d7f7ab4, 0x05aeec26, 0xf09c2bca, 0x7379b3f6, 0x415d9ba8, 0xee9179f7, 
    0xef0b958c, 0xca1f77d8, 0xa5c133ba, 0xa12b2919, 0x54511485, 0xa2281a22, 0x2a8a02a4, 0x2c76abb6, 0x01ae8974, 0x33769fc4, 0xfee9d1fe, 0x8a660134, 
    0xadf6f0c0, 0x1ba87377, 0xe6ddf75b, 0x5432ba47, 0xdc61bf2f, 0x08e82a7f, 0x94d223c1, 0xa1c1d55d, 0x608aa228, 0x54144543, 0xa0a22888, 0xcb56eed4, 
    0xa4e39e47, 0xfe33769f, 0x34fee9d1, 0xc48a9e0c, 0x73a7f6f0, 0x5b1ba873, 0x47e62df7, 0x5c4032ba, 0x7187bd1e, 0x8671abfc, 0xe2d023d6, 0x06577792, 
    0x511425ac, 0x1495464c, 0x15145b51, 0xf5c2f8c8, 0xc8def25e, 0x3c7f64e7, 0x00fff798, 0xeb3a7feb, 0x121d3aab, 0xd467b508, 0x33c9b28c, 0x06c686e7, 
    0xe2f4387d, 0x59c969a2, 0xa39e1c0d, 0xa94d5bac, 0x47d9deda, 0x01004d2c, 0x01320083, 0xc8f4a1e3, 0x5219eaae, 0xce585278, 0x3e30d451, 0x8e1ad4a0, 
    0x68a70e9f, 0x142ca76d, 0xa05e4190, 0x8d754a8f, 0xc7d9d8a2, 0xac3b926c, 0x33be0063, 0x6294c28f, 0xb1c0dde2, 0x82561445, 0x2a8aa221, 0x78ca1544, 
    0xea5ef5b6, 0x919d330b, 0xdf63f2fc, 0xfcad00ff, 0x10aaabeb, 0xaa43f068, 0x9264a2be, 0x313c9b49, 0xe3f41918, 0xa6898ad3, 0xcbd190d5, 0xb4bd3a6a, 
    0xedad95da, 0xd0445294, 0x06361800, 0xdbd3e940, 0xe468bb22, 0x6349a249, 0xca504739, 0xa8438d7d, 0xdaa9c5d9, 0x14b2691b, 0xa05e4190, 0x552b5b8a, 
    0x644bb4b2, 0x608c7576, 0x4471c617, 0xc960d362, 0xb18aa2e8, 0x1545d110, 0x78cc1520, 0xe65af5a6, 0x919d330b, 0xdf63f29d, 0x9fad00ff, 0xa57abace, 
    0x0643a56f, 0x7989faa8, 0xc3b39924, 0x4e9f8111, 0x9b642a3d, 0x35474356, 0xd3f6eaa8, 0xb6b7566a, 0x42134951, 0x32706000, 0xd99e4e07, 0xa4abd815, 
    0xdb46b2a8, 0x9f32d491, 0x36ea5163, 0x8676ead1, 0x924260da, 0x11d42b08, 0xb66a6749, 0xae6ea976, 0x0b30a8ce, 0x9a24c575, 0xa2261b6c, 0x43c42a8a, 
    0x88541445, 0x35f19c2b, 0x59f0b4e2, 0x7768f99c, 0xfe7f8fc9, 0xe83a7fb6, 0x9bb6a5ea, 0xdaa6be0d, 0x5692f786, 0x06460ccf, 0x92a9387d, 0xe768586d, 
    0xda5e0d75, 0xf2d64a6d, 0x302119ce, 0x0c1c1880, 0xb6a7d381, 0x92bb7545, 0x6d235945, 0x4f19eac8, 0x4acd14b1, 0x0dedd424, 0x480ac3b4, 0x22a89721, 
    0x2d6c6999, 0x7605922d, 0x5b804175, 0xa64928ae, 0x1435d9c6, 0x37495451, 0xe900ffdb, 0x473dfe97, 0xe900ffdb, 0x553dfe97, 0x8599a328, 0xff6f7fcb, 
    0xf85fa600, 0xff6f1ff5, 0xf85fa600, 0xc6a154f5, 0xb89d77cb, 0x374b308e, 0x317314a0, 0xffdffe96, 0xf1bf4c00, 0xffdf3eea, 0xf1bf4c00, 0xbcb2cdea, 
    0x8b0bd4b7, 0x83c23c59, 0x3f46302c, 0x768e9e3a, 0xdffe961a, 0xbf4c00ff, 0xdf3eeaf1, 0xbf4c00ff, 0x45a9eaf1, 0x2657cc1c, 0x32fd7ffb, 0xa8c700ff, 
    0x32fd7ffb, 0xaac700ff, 0xcc3c159d, 0x7ffb5c2e, 0x00ff32fd, 0x7ffba8c7, 0x00ff32fd, 0x2b9daac7, 0x2e795b29, 0x04e3881b, 0x28a667b3, 0xfe1690e6, 
    0x4c00ffdf, 0x3eeaf1bf, 0x4c00ffdf, 0xceeaf1bf, 0x5087bab3, 0xcc5f2d2e, 0x04c33228, 0x2d357e60, 0x2e35cc1c, 0x99febf7d, 0x7dd4e37f, 0x7f99febf, 
    0x8a4ed5e3, 0x9b5c9839, 0xf400ffed, 0x1e00ffcb, 0x00ffeda3, 0x00ffcbf4, 0x5474aa1e, 0xb95c31f3, 0xfa00fff6, 0x8f00ff65, 0x00fff651, 0x00ff65fa, 
    0x713a558f, 0x97bc858d, 0xc1286204, 0x8ae9d92c, 0x6517a439, 0x00ffb7af, 0x7afc2fd3, 0x00ffb78f, 0x7afc2fd3, 0x8ee7ecb3, 0x6fb5b8fc, 0x00cba030, 
    0x6afcc008, 0x6a98394a, 0xfd7ffb5c, 0xc700ff32, 0xfd7ffba8, 0xc700ff32, 0x73149daa, 0xdb37b930, 0x97e900ff, 0xdb473dfe, 0x97e900ff, 0xe8543dfe, 
    0x7261e6a9, 0x00ffdbe7, 0x3dfe97e9, 0x00ffdb47, 0x3dfe97e9, 0x53fee954, 0x8c4b9afd, 0x4b30ea7e, 0xa3184736, 0x67a9419a, 0xf400ffed, 0x1e00ffcb, 
    0x00ffeda3, 0x00ffcbf4, 0x7236aa1e, 0x6a71f9a5, 0xcb18c37c, 0x7e200800, 0xa439fa34, 0xdffe961a, 0xbf4c00ff, 0xdf3eeaf1, 0xbf4c00ff, 0x45a7eaf1, 
    0x692ecc1c, 0xa0154551, 0x41bcb3c2, 0x4269d178, 0x73bf3fd2, 0x03df3126, 0xa315d71f, 0xdcd85358, 0x8fe11a6b, 0x18c55b32, 0x70c8cac2, 0xbdd3e931, 
    0x0d597b27, 0x3ff0166e, 0x50fb3587, 0x309a94e4, 0x07bf47ac, 0xc96fc5f5, 0x1889319f, 0x0dacf424, 0x16b7c357, 0x5d68bff6, 0x081def41, 0x00396dc2, 
    0xd79a1cf7, 0xea92b8b5, 0x426529d6, 0xc3011592, 0x0d8e1c0c, 0xc9064d0b, 0x648aa2a8, 0x1545d190, 0xaea50a22, 0x405a345e, 0xdcef8fb4, 0xc0778ccb, 
    0x5dc5f5c7, 0x6e6c69ac, 0xcb6f7d35, 0x46f1f6dc, 0x0e59593e, 0x773a3d06, 0x2ab2efa4, 0x81b78e3b, 0xdaaf39fc, 0x9ae40e89, 0xbf47ac30, 0x6dc5f507, 
    0x922b934b, 0xc7499236, 0xbe6a62a5, 0xd3da9e1d, 0x35a80bed, 0x4d18a1e3, 0xe31e20a7, 0xf7965a93, 0xc75b5d32, 0x4252a82c, 0x072338a0, 0x6d4f8323, 
    0x284a2207, 0x680882a2, 0x05918aa2, 0x1a6fd655, 0x91ec1f2d, 0x7199fbfd, 0xfe18f88e, 0x9455abb8, 0xdaea33d6, 0xedbd97cf, 0x2b718ce2, 0xa7c7c029, 
    0xb26bf44e, 0xb68f3b2a, 0x6b0e4f82, 0x994fa2d6, 0x112b8c26, 0x71fdc1ef, 0xcc64b35a, 0x2c6997e5, 0x2b2b3d4e, 0xd6f4f055, 0x4d689fd6, 0x08d9ae45, 
    0x07e76dc2, 0x84d6e4b8, 0xc15d3237, 0x59a1d21c, 0x8cc0800a, 0x3d0d0672, 0x51871cb4, 0x21881445, 0x002a8aa2, 0xf1561d2a, 0xc9bed1a2, 0x97b9df1f, 
    0x0780ef18, 0x594dc5f5, 0x559b61df, 0xefbd3cd6, 0x8963146f, 0x3d064e59, 0xafa6773a, 0x4beea8d0, 0x1b9e046d, 0x9f84add7, 0x56184d32, 0x3f78be23, 
    0x7c422bae, 0xbb2ce499, 0xfa4a6249, 0xe1ab7656, 0x3e6d6de9, 0xbb899ad0, 0xdbe42364, 0xc9710fce, 0xf77289ab, 0xa9d22471, 0xc0800a59, 0x0d06728c, 
    0xc841d353, 0xa0a2285a, 0xcf8a4a83, 0x0edaafa2, 0x9f1585e6, 0x2ed01e45, 0xf4595168, 0xe602ed51, 0x459f1585, 0x5a2ed01e, 0x4f459ba2, 0x8a3aae38, 
    0x8573146d, 0xa24d51c7, 0xeab8708e, 0xce51b429, 0xaea22317, 0x2bce5351, 0x94abe894, 0x2917ce51, 0xa32857d1, 0xa2532e9c, 0x384751ae, 0xb6a2cd5c, 
    0x17e7a8a8, 0x6d458b31, 0x73384751, 0xd556b418, 0x31877314, 0x516d458b, 0x18733847, 0x504551f4, 0x227fa7c2, 0xe5e2121d, 0xd98632d7, 0x47eac919, 
    0x05b57e1c, 0xc1aed451, 0x3b5bed58, 0x3bbef715, 0x3fcb1ff4, 0x2a76529d, 0xa0b1ec2a, 0xcdb7b74c, 0xe693776b, 0x083d6326, 0xf2977f3d, 0x97a712ab, 
    0xed9cc733, 0x59eb3362, 0xbdbd7ab7, 0x756fa1c6, 0xe6d66e6b, 0x7a000320, 0xe2f6f481, 0x35566eb5, 0xe8b6309b, 0xec5306d8, 0x5bbb6946, 0x5111c941, 
    0x16041545, 0x428aa228, 0x6c89b80a, 0xccc52d9a, 0x6d4399a9, 0x20f5e48c, 0x7b8e3a55, 0x635b6290, 0xf7268b9d, 0xff077ec7, 0x769a5e00, 0x9fec2a2a, 
    0xee2f6842, 0x36e0dada, 0xa187325d, 0xd500ff07, 0x53f9d144, 0xb1731ec9, 0x06d7e78a, 0x41accbab, 0xf60c7d75, 0xe56fadd6, 0xa8071b80, 0x79b74a1f, 
    0x11dc711c, 0x808d6e0b, 0x66c43e65, 0x2ab4b59b, 0xd1904b4b, 0x65261545, 0xa4a2288a, 0xb0565a41, 0x6300ff5a, 0x1ecd5c5c, 0xa1f615e9, 0x596147dc, 
    0x03773cb5, 0xce41feec, 0x637b93c5, 0x779c02bf, 0x97ec0a2e, 0x8d7a1644, 0xacc8dbcb, 0xcea95c09, 0x785a3508, 0x22899bfc, 0x578cedce, 0x2735b83e, 
    0x9717ccf6, 0x686fc9b1, 0x0314fbd6, 0xe9e3bab5, 0x63f85b8a, 0x2696ed82, 0x9401192d, 0x4d33429f, 0x4b0edada, 0xa2e8954b, 0xc532938a, 0x20505114, 
    0xd23a7dad, 0xe2224dce, 0xd22de2e2, 0xb843ed2b, 0xd6d0c38e, 0x4cd86845, 0x1cd1c63e, 0x370b5995, 0xb9e32ae4, 0x9a645770, 0xa76e5a34, 0xc151c03b, 
    0x417290db, 0x17719d15, 0x412c7193, 0xb9726cb7, 0xf0abc1f5, 0xdd5f50eb, 0x6bb2b7a9, 0x46c98b60, 0x06e8e3e0, 0x6fa5b62a, 0xc7f3b51d, 0x868f1613, 
    0x23384f52, 0xa0addd34, 0x8aae95e6, 0x664551b4, 0x5ad16366, 0xf45fd91f, 0x1d00ffdb, 0xd1eb00ff, 0x00ff95fd, 0xdff1bf4d, 0xcc6bbdfe, 0xe933ba8a, 
    0xaf6c952c, 0x4906e08d, 0xf018700e, 0xd93f5a33, 0xffdbf45f, 0x00ff1d00, 0x95fdd1eb, 0xbf4d00ff, 0xbdfedff1, 0x356a690a, 0x376a102b, 0x36b452c7, 
    0x09aac6f2, 0x04f53204, 0xf2632855, 0x33f75862, 0xad5be805, 0x7f657f6a, 0x77fc6fd3, 0x47af00ff, 0x36fd57f6, 0x7fc700ff, 0x4bddf4fa, 0x1973d8ea, 
    0xf68756f4, 0xff36fd57, 0xfa7fc700, 0x7f657ff4, 0x77fc6fd3, 0x4baf00ff, 0xafe80a99, 0x657f6845, 0xfc6fd37f, 0xaf00ff77, 0xfd57f647, 0xc700ff36, 
    0x3cf5fa7f, 0x7d4657c8, 0x85c5c13e, 0xf9aa5cdb, 0x8ff7738e, 0x00ffae02, 0x6fd37f65, 0x00ff77fc, 0x57f647af, 0x00ff36fd, 0xf4fa7fc7, 0x2b35a429, 
    0x24d5bf0d, 0x124c2dd4, 0x04098a44, 0x670dea30, 0x29109bc6, 0xddeed862, 0x2bfb4b6b, 0xe37f9bfe, 0x3f7afdbf, 0xb7e9bfb2, 0x00ff3bfe, 0x5feaa6d7, 
    0x33570e76, 0xec0fade8, 0xff6dfaaf, 0x00ff8e00, 0xcafee8f5, 0xdfa600ff, 0x00ffeff8, 0x1532975e, 0xd08a5ed1, 0x00ffcafe, 0xeff8dfa6, 0x8f5e00ff, 
    0x6dfaafec, 0xff8e00ff, 0x79eaf500, 0xfa8cae90, 0x3ab94e9b, 0xa03aed74, 0xf393d891, 0xfe5a051e, 0xa600ffca, 0xffeff8df, 0xec8f5e00, 0xff6dfaaf, 
    0x00ff8e00, 0x4853e8f5, 0x7b1d566a, 0x6c7bcdad, 0x50637861, 0xe40c434e, 0x06826256, 0x531fcb19, 0xb27fb4d6, 0xfeb7e9bf, 0xd700ff3b, 0xfe2bfba3, 
    0xbfe37f9b, 0xa56e7afd, 0x73e760f7, 0xfed08a3e, 0xa600ffca, 0xffeff8df, 0xec8f5e00, 0xff6dfaaf, 0x00ff8e00, 0x2173e9f5, 0xade8155d, 0xfaafec0f, 
    0x8e00ff6d, 0xe8f500ff, 0x00ffcafe, 0xeff8dfa6, 0xa75e00ff, 0xcfe80a99, 0xf3655aab, 0x89349269, 0x93989118, 0x37951ef3, 0x36fd57f6, 0x7fc700ff, 
    0x657ff4fa, 0xfc6fd37f, 0xaf00ff77, 0x52439a42, 0x9ef7c4b6, 0xb7bbb821, 0xae313431, 0x91330c79, 0xcb631959, 0x9e7b72b9, 0x95fda1b5, 0xbf4d00ff, 
    0xbdfedff1, 0xf45fd91f, 0x1d00ffdb, 0xd3eb00ff, 0x07bb2f75, 0xd167ee3b, 0x5fd91f5a, 0x00ffdbf4, 0xeb00ff1d, 0xff95fdd1, 0xf1bf4d00, 0x2ebdfedf, 
    0xbda22b64, 0x05405114, 0x2fd3b65a, 0xe079202f, 0x70687c87, 0xfc1870c7, 0x8bae55cd, 0x1a8d9043, 0x49ef9768, 0xaaa01f31, 0x54ea4d8a, 0x958cdd55, 
    0x59dd2fd2, 0xd1b6d896, 0x7f82b493, 0x3032d52c, 0xd3ab6b70, 0x7b746fad, 0x1b5cdd9c, 0x0730ea9d, 0xb9c29ff8, 0xfae6d2ab, 0x13339276, 0x1f4a8c34, 
    0x29cec9e1, 0x944336ca, 0x8aa22152, 0x512c082a, 0x0a221545, 0xdfa469b9, 0x5bd3425f, 0x3834be41, 0x0f46bd63, 0x759d6ae2, 0x3472195e, 0x2f4fd169, 
    0xe8f81f31, 0x2abb8aaa, 0x2fc6ee0a, 0xb5a716f6, 0x05335a98, 0x49593b19, 0xf2ac81fc, 0x1a3c3808, 0x4bcbf4ed, 0x37562afd, 0x70eb2697, 0x897f541b, 
    0xb9f83eae, 0x2269b8bf, 0xcc483b31, 0x0e00ff50, 0x514e714e, 0x49712ab2, 0x15455110, 0x288a6506, 0x5741a4a2, 0x436db46c, 0xb4a68551, 0x0e11f3b7, 
    0xc1a877d2, 0xae524dfc, 0xffc4c1cf, 0x285c6300, 0xff312d38, 0x5445d000, 0x848add55, 0xcf999d79, 0x743587bf, 0x88c9e642, 0x56d64e5e, 0x9835903f, 
    0x83070741, 0xd9a5875e, 0x9a6f3aea, 0xf066b7d7, 0x75141bb0, 0x13ae891f, 0x1b752e50, 0x13239686, 0x33c6acb4, 0xc53939fc, 0xa9c84639, 0xe81545c1, 
    0x32838aa2, 0x525114c5, 0x1af6ab20, 0x42aaa31e, 0x79dbd9d2, 0x9db4ada8, 0x893fb8ea, 0x78de15aa, 0xdca31310, 0xe74c7080, 0xaac8f71f, 0x70b1bb8a, 
    0x39b3938a, 0xad2d7c99, 0xc1da85c2, 0x75ed3ab0, 0x5903f963, 0x46701024, 0xd24faf08, 0x3e3df56c, 0xf4fada29, 0x440192de, 0xcf3d461d, 0xa2ce79ad, 
    0xcb953a64, 0xda85114b, 0xfe196356, 0x9ce29c1c, 0xc13964a3, 0x45ad5c45, 0x98195414, 0x6c4551f4, 0x87d75658, 0xb114cb82, 0xde08cbbc, 0xd871cc70, 
    0xd3142d56, 0xce2e2ab3, 0x351afce6, 0xe4ba91be, 0x063eebea, 0xea0f0c36, 0x955a5973, 0xbddedfea, 0x8001a9c2, 0x03678c1c, 0x53b4aa19, 0x951ba26f, 
    0x288a82d5, 0x45b120a9, 0x2b885414, 0x46bbf0a4, 0x244793d6, 0x0eef17c9, 0x0a3b100b, 0x9da6e8e6, 0xb98cca9d, 0xcba6ce5d, 0x59d1b448, 0x49589bae, 
    0x42d0c6b8, 0x5873e68f, 0x6aeab55a, 0x31978c1a, 0x06b01582, 0x8c813346, 0xb9293ad5, 0xca0d595d, 0x1445c1ea, 0xa2589054, 0x15442a8a, 0x5842f8d6, 
    0x723c9d46, 0xca441ccf, 0xfe80b971, 0x15955c11, 0x2a777651, 0x3b77e532, 0xb14a332d, 0xa77ba5d0, 0x6d94a3d6, 0x8f42d0c6, 0xcd3527cb, 0xead157eb, 
    0x31d7ac3a, 0x06b01102, 0x8c813346, 0x72281ad5, 0x951bb2ba, 0x455190d5, 0x28162415, 0x05918aa2, 0xb809fe76, 0xb9488bb7, 0x8c23ae49, 0xdc01c7b4, 
    0x7145f703, 0xd9455514, 0x95cba8dc, 0x6d34efdc, 0x27d04f33, 0xb835a97b, 0xda4805e5, 0x8cf85108, 0xaf29d79c, 0x6ba9c5df, 0x0842dd33, 0x480a888d, 
    0x660c20c1, 0xcaa1a8b3, 0x576ec8ea, 0xa2284856, 0xff0f928a, 0x000000d9, 
};
};
} // namespace BluePrint
