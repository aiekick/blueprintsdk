#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Wind_vulkan.h>

namespace BluePrint
{
struct WindFusionNode final : Node
{
    BP_NODE_WITH_NAME(WindFusionNode, "Wind Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Move")
    WindFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Wind Transform"; }

    ~WindFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Wind_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_size);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _size = m_size;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Size##Wind", &_size, 0.1, 1.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_size##Wind")) { _size = 0.2f; changed = true; }
        ImGui::PopItemWidth();
        if (_size != m_size) { m_size = _size; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("size"))
        {
            auto& val = value["size"];
            if (val.is_number()) 
                m_size = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["size"] = imgui_json::number(m_size);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf72e"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_size        {0.2f};
    ImGui::Wind_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 4829;
    const unsigned int logo_data[4832/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0x280aa08a, 0x280a80a2, 0xf1dd1aaa, 0xa7a9b4d3, 0x3626db46, 0x3dda7fc6, 0x7693c63f, 0x15fd0257, 0x5b7bf8cb, 0x7ed4b8be, 0xbb49a8cb, 0x79748fcd, 
    0x87fdbe50, 0xa8abfc71, 0x2b2919a5, 0xa2280aa0, 0x528a02a8, 0x5c94943e, 0x862a8a02, 0xed747cb7, 0xb6d1692a, 0x9fb18dc9, 0xf14f8ff6, 0xc095dda4, 
    0xfe7245bf, 0xaeefd61e, 0xeab21f35, 0x63f36e12, 0x2f541edd, 0x7fdc61bf, 0x4629ea2a, 0x02e84a4a, 0x00aa288a, 0xa4a2f5c9, 0x98a23e64, 0x8ca8b847, 
    0x51621293, 0xefd65045, 0x4da59d8e, 0x31d9363a, 0xd1fe33b6, 0x4d35fee9, 0xfa655cd9, 0xf6f0972b, 0xa8717db7, 0x935097fd, 0xe81e9b77, 0xfb7da1f2, 
    0x57f9e30e, 0x52324a51, 0x51144057, 0x14055045, 0x72054051, 0x57bd303e, 0x39b2b7bc, 0x26cf1fd9, 0xfa00ff3d, 0xeabacedf, 0x824487ce, 0x23f5592d, 
    0xf94cb22c, 0x9f81b1e1, 0xa8383d4e, 0x4356729a, 0xeba82747, 0x766ad316, 0xcb51b6b7, 0x60004013, 0x78800cc0, 0x2b327de8, 0x9e5486ba, 0x94339614, 
    0xa80f0c75, 0xa7a30635, 0x1bdaa9c3, 0x2405cb69, 0x23a85710, 0x68639dd2, 0xdb7136b6, 0x18eb8e24, 0xe38c2fc0, 0xb818a5f0, 0x512c70b7, 0x82a01545, 
    0x02a0288a, 0x5e181fb9, 0xd95bdeab, 0xe78fec1c, 0x00ff1e93, 0x5de76ffd, 0xa2436775, 0xfaac1641, 0x26599691, 0xc0d8f07c, 0x9c1ea7cf, 0x2b394d54, 
    0xd493a321, 0xb5698b75, 0x28db5b3b, 0x00a089e5, 0x40066030, 0x993e743c, 0x2a43dd15, 0x194b0a4f, 0x07863aca, 0x51831ad4, 0xedd4e1d3, 0x82e5b40d, 
    0xd42b0892, 0xb14ee911, 0x381b5bb4, 0x754792ed, 0xc617608c, 0x8c52f871, 0x16b85b5c, 0xd08aa228, 0x1afae042, 0x92c65f4a, 0x47ae0092, 0xf7aa17c6, 
    0x3b47f696, 0xc7e4f923, 0x5b00ffbf, 0x595dd7f9, 0x4590e8d0, 0x65a43eab, 0x3c9f4996, 0xe9333036, 0x3315a7c7, 0x68c84a4e, 0x621df5e4, 0xd64e6dda, 
    0x6239caf6, 0x180c0068, 0x1d0f9001, 0x7745a60f, 0xc293ca50, 0x8e72c692, 0x06f581a1, 0xf874d4a0, 0x6d433b75, 0x82a46039, 0x7a04f50a, 0x166dac53, 
    0x643bcec6, 0x1863dd91, 0x7e9cf105, 0x1617a314, 0x288a05ee, 0xbb10b4a2, 0xf2a7fb1b, 0xd3d007a3, 0x6800ff89, 0xf5d3b47e, 0x4a884da8, 0x7a617ce4, 
    0x646f79af, 0x9e3fb273, 0x00ff7b4c, 0x759dbff5, 0x890e9dd5, 0xeab35a04, 0x99645946, 0x0363c3f3, 0x717a9c3e, 0xb292d344, 0xa39e1c29, 0xa94d5bac, 
    0x47d9deda, 0x01004d2c, 0x01320083, 0xc8f4a1e3, 0x5219eaae, 0xce585278, 0x3e30d451, 0x8e1ad4a0, 0x68a70e9f, 0x142ca76d, 0xa05e4190, 0x8d754a8f, 
    0xc7d9d8a2, 0xac3b926c, 0x33be0063, 0x6294c28f, 0xb1c0dde2, 0x82561445, 0xf147551c, 0x7a9c947e, 0xef0f8ad3, 0x9aa6e37f, 0x00ff0e54, 0x7e6544a5, 
    0x284a4ca2, 0x76344da6, 0xb6d2bcf0, 0x314bd1d8, 0x1f6315f4, 0xd5b15345, 0x751675ac, 0x28cc9fb4, 0x1869c332, 0xa45cc5fc, 0x51007b9a, 0x90c01445, 
    0x5afe83c6, 0xfea84a53, 0x64a6d22f, 0xf73fde1f, 0x0fcaa8c9, 0xa6e37fef, 0xf53be1b9, 0x10e03ffc, 0x5a0fcc98, 0x3b50714a, 0xf21495fe, 0xcd0b6fc7, 
    0x308e6d2b, 0x001d9b59, 0x7d2c93ad, 0x56c74e15, 0xd659d4b1, 0xa0307fd2, 0x63a40dcb, 0x9a7215f3, 0x4501ec69, 0x73025314, 0x5afe6304, 0x3f684c53, 
    0x544ea5e5, 0xe4fb9f7a, 0xf70719d3, 0x6bf2fd8f, 0xf7641582, 0x62dcd77f, 0x9590fba4, 0xa57ffc51, 0x52eb8134, 0x3fde1f14, 0xe5a8c9f7, 0xee3c30c4, 
    0x128ccb5b, 0x629c10cc, 0xf52ba3ba, 0x2a4a4c34, 0x67a59ead, 0xd3b6ce7e, 0x60196417, 0x981f9751, 0x4db46a15, 0x280a8a3d, 0x4d1698a2, 0xa6df7fb4, 
    0xf21f2398, 0xf39facd2, 0xb9af30c5, 0x6bbe00ff, 0xf5698dcb, 0xee9b3a67, 0xff203157, 0xd2949600, 0xf48f3f8a, 0xf707d9a9, 0x69f2fd8f, 0x90276fad, 
    0xa39584f3, 0x44324b40, 0x57c88fcd, 0xbb372a4c, 0x1ae03ffc, 0x07127227, 0x658a37ad, 0xb3ddd1b4, 0x506222ac, 0xd3818664, 0x115281f9, 0x19d1f58e, 
    0x28b1d427, 0x93b18aa2, 0x11fec199, 0xf867324c, 0x18c73845, 0x29e6f7fe, 0xf7fe2084, 0x0a9a2be6, 0xb042449f, 0x57d8b385, 0xd3dbe23f, 0x91969c0e, 
    0x7cb96480, 0xf57fe07b, 0x6fe75bf1, 0xa65ce7bf, 0xb73e65a1, 0x2e9b12e2, 0xb5218a20, 0x8c762a66, 0xfb3b1d77, 0x6cf893d6, 0x2068458b, 0x0df11d3e, 
    0xb97c62a0, 0xdbed0ae3, 0xe0fa8327, 0x7e5c67d7, 0xd8bbe1af, 0x2fd07ead, 0xc878bda6, 0x802415c2, 0xb54f8e7b, 0xf25cda74, 0x49b069dc, 0xb74b3232, 
    0x1ca4ac0e, 0x95060f8e, 0x86d5a63b, 0x455154cb, 0xb8d1226c, 0x9c614a5f, 0xcc53747f, 0xe7d7fe49, 0xfec7314c, 0xcf2be6d7, 0x98d9a582, 0x508651ae, 
    0x2f56847f, 0x6971f589, 0xdb9aada6, 0x2f9724c7, 0x3fce498e, 0xa2ad78fd, 0xf9bd3fa8, 0x34efe68a, 0x6dadb5f8, 0x61ef5896, 0x30a90d11, 0xd063102a, 
    0xbb35d711, 0x6b14adb5, 0x4f22141b, 0x41fc47f8, 0xcb17196a, 0xdcac309e, 0xd71f3cf5, 0x27d7d715, 0x787278ac, 0x2fd07e6d, 0x329eaf2e, 0x01928730, 
    0x45d73aee, 0xc6254fa6, 0x46930c9d, 0x0e57c8f1, 0x1c3908ae, 0x4d77ba1a, 0xa25a14ab, 0x17612b8a, 0x8629aa8c, 0x98a7f475, 0xa6f3dfd7, 0xaffd9318, 
    0xaa98bcce, 0x2e736e5d, 0x7fe08651, 0x5f3d5574, 0xe9a329c5, 0x4559cc62, 0x9ccc2571, 0x300e6207, 0x2aae073d, 0xf63f8ed9, 0x525931bf, 0xb5669ae8, 
    0x2e5e33a8, 0xf2c513a7, 0x124db1a4, 0x809c03a0, 0xba26e7dc, 0xd4bd8552, 0x435f0b6d, 0xd0367539, 0xe678dbf5, 0xe1d28db6, 0xf0241714, 0xc5f5074f, 
    0x98db2c74, 0xe764a09d, 0x5bfdb902, 0x5bf0f6c2, 0x51efda19, 0xcacf78bf, 0x196e629e, 0xaf3539ee, 0x2cda3f63, 0x2cc590a2, 0x6505576c, 0x731c81e1, 
    0x464f6dc5, 0xe8098dd5, 0x46dc8aa2, 0xa6296081, 0xa0e21455, 0xd374fefa, 0xce5f9f1a, 0x75f258bc, 0x99861539, 0x00ff54d4, 0xf85a9bf0, 0xb2364b77, 
    0xb734455b, 0xd9a19232, 0xb20318c7, 0xc45cf59e, 0x747eed9f, 0x43677890, 0xd4e5d9d6, 0x588e525f, 0x37346adb, 0x01804651, 0xceb9e19c, 0x8ae85a4f, 
    0x3677f6a7, 0x0a7dcba7, 0xbe97f03f, 0x0d43ab89, 0x0b37bcdd, 0x9637aa72, 0x0f9eb461, 0x99555c6f, 0xf2ca12a7, 0x98bb6a79, 0x35830e9c, 0x56f05347, 
    0x9e016f8d, 0x5600ffe2, 0xeafe68bf, 0x8721c4a5, 0x88d524d3, 0x11688625, 0x35e28ee2, 0x46ce36c6, 0xc5713dfe, 0x3b495374, 0x38ecd558, 0x9414f69c, 
    0x95f41ea7, 0xf99480d2, 0xf73fdcbf, 0xfe8734cd, 0x573bfee7, 0xa33e09a9, 0x6239aff2, 0x158cba7f, 0x1b8e224f, 0x27a5bffb, 0xb370953e, 0xa3ca8f7a, 
    0x5b517f67, 0x0b7dbbc6, 0x52512b53, 0x98d61b99, 0xa16bbd5d, 0xa685be49, 0x934bd1c6, 0x325649eb, 0xba7ff3c1, 0x3e4c217f, 0xfd0ff76f, 0x15e52af2, 
    0xbe452ce5, 0xfcd439ca, 0xfd49248a, 0x9376fccf, 0xd2dffd0d, 0x8afa1caf, 0x1ff56669, 0x4f1c6d95, 0xa74a51f7, 0xd3074b91, 0x4caba4f4, 0x362aeaed, 
    0x6f45fd91, 0x2df4ad1a, 0x291ab249, 0x9bd6dbe5, 0xc9d67b92, 0x7f67cbb2, 0x8729fda1, 0xfce9fecd, 0xbca25885, 0x44b7d598, 0x1579a972, 0xc3fd9b0f, 
    0x8f7c00ff, 0x2791a6f0, 0xdaf13ff7, 0xea7348bb, 0xb789552b, 0x9eaa45d9, 0xf73f1c45, 0x4cdaf17f, 0xaed24f1f, 0xf2a3de92, 0xa8b733a6, 0x6f88a3ad, 
    0x457e4aa1, 0x91762a4a, 0x5d4645fd, 0x33a26bbd, 0xb669a16f, 0xa6f7395c, 0xf487fe9d, 0x25af28a9, 0x6b0edd4a, 0xfd99cf95, 0x610af9d3, 0x7fb87ff3, 
    0x15fe91ef, 0x57d58a6e, 0x2945d9b7, 0x998f14f9, 0x76fccffd, 0xeffe879b, 0xf9573bfe, 0x477d92a6, 0x4fac5ae5, 0xa74a51f7, 0xe90d4791, 0xc25552fa, 
    0x2a3feaed, 0x517fa48d, 0x7db3c65b, 0xb36c520b, 0x3445e347, 0x31aff7ee, 0x1f5c9c23, 0xfce81aef, 0x5dbbe13f, 0x9eb84a63, 0xd18de579, 0x384286ca, 
    0xf7b80718, 0xf4ef60ae, 0x45a2903f, 0xf2b3e5d7, 0xc92bcbf4, 0x23dd57a0, 0x831c6d43, 0xdd7c1c38, 0x78ebfcf1, 0xb5d1ad47, 0xbda9eb38, 0x4e7378a5, 
    0x06615ed4, 0xc02e75ad, 0x5c639938, 0x1985e975, 0x63ab2bac, 0x3e2c736f, 0xca2d6f60, 0x07e718ee, 0xcfdecf15, 0xfa4e1de2, 0x17bdb429, 0x1bc8fd51, 
    0x39243bd6, 0xe3a8fa00, 0x58622b8e, 0x937d212e, 0x804f2c41, 0x5885484a, 0x4557d467, 0x8d66df38, 0x0f19d01a, 0x574685f7, 0x6fec52dc, 0x93ca9fee, 
    0xd535f469, 0x46a36e15, 0x5e511485, 0xd415c829, 0xb0406378, 0xe6c9b4d5, 0x496f12bb, 0xc646860a, 0xb5fe0106, 0xd6fb1ccb, 0xa8fa8ae6, 0x3116a5d2, 
    0x4909b25c, 0x30511463, 0x6a3e0e3c, 0x4a530bd6, 0xd1d4f26a, 0xa03dfcd2, 0xd9771e6b, 0x8f49ef2e, 0x186d1219, 0x95ab7dce, 0xd736b5bc, 0x7789db93, 
    0x6e325279, 0x1907e7c0, 0xebaac9a6, 0x1ac0adba, 0x187f956e, 0x36acf341, 0x20fe9cd0, 0x9657540c, 0x0dd716d7, 0x1bcb9014, 0x26b2120c, 0x6b9e6718, 
    0x9a3dc178, 0x264d7134, 0xfb673486, 0x98ca00ff, 0x29bc7fc8, 0xe1fe2485, 0x3f36a9fc, 0x5de54ff7, 0xd2be8530, 0xfa655e1a, 0xa3bca228, 0xf0ac2b98, 
    0x6aa787a6, 0x5ef3647a, 0x52d25d40, 0x032387a0, 0xc935f600, 0xf6e065d7, 0x936b749d, 0x62e29410, 0xfc9cc04e, 0x70d5fba3, 0xd2946657, 0x9b76d472, 
    0x5b6bf8a2, 0xb9988559, 0xcb198f46, 0xebf48c60, 0xefe34a9f, 0x79cdfe2d, 0xb090b83d, 0xdc4d468a, 0xd78c8373, 0xeaae6941, 0x6f8fb41a, 0x5bdda663, 
    0x90b75ca8, 0x1c7f1091, 0xaa3f570c, 0x7f654bda, 0x18641b24, 0xb881c3c1, 0xd79a6764, 0x45a33595, 0x449326c9, 0xcff70f05, 0x67b451e9, 0xca00fffb, 
    0xf72f2ba3, 0x95a6f25b, 0xf2a7fb93, 0xfb4fe1ad, 0x653e4ac8, 0xb8a228da, 0xdfba420c, 0x6ebae809, 0x3dcfa6a5, 0xe99ab7ed, 0xb0775029, 0x883dc0c0, 
    0xbfbb4aae, 0x2dba1d03, 0x3171c6d1, 0x2a02fee3, 0x29cdaee0, 0xcda8e5a4, 0xc6f0493f, 0x94ad92b8, 0xe3d14613, 0x33027327, 0xb523a9d3, 0x7d709771, 
    0x707bf29a, 0x325284fb, 0xc6c1f56e, 0xf5d1b56b, 0x2dc9abe1, 0x3599bead, 0xb424ecaa, 0xf0fcb80c, 0xd7916b30, 0xf5b3bf2c, 0xb990ad59, 0xd88d2055, 
    0x9a676424, 0x455793b6, 0x4593264d, 0x1aef1f2c, 0xf3fd4369, 0xcc1b53fa, 0xa8903ff4, 0xd6fd4bd8, 0x695485fc, 0x4721aadf, 0x6846b5cc, 0x08acc0a4, 
    0xfcf7b010, 0x5e69698d, 0x81489721, 0xe1308ae2, 0xe42571df, 0x0ee8801d, 0x8d69563b, 0x87c2344d, 0x60adf3d7, 0x488b8be0, 0x55f1bed6, 0x1f2de4dd, 
    0x00ffacfa, 0x23284d12, 0xac1e00ff, 0x9279ec1d, 0x258f9577, 0x3f6666e4, 0x6c736a52, 0xe9fcb987, 0xfb8f66bf, 0x85aef3c7, 0x69769752, 0x80ec9ece, 
    0xeb87f69f, 0xb05a3f4d, 0xf9fea36d, 0x3f4630a4, 0x1a6fa5e5, 0x12a7c6d4, 0x5e5114cd, 0xad19ce51, 0xd3c41f7d, 0x04cfb6e8, 0xdf812450, 0x76582c79, 
    0xb2d2b703, 0x01a52930, 0x94498baa, 0x8ace9d9d, 0xb337c7e3, 0x8e615146, 0x5e897f32, 0xb9d68f4c, 0x691eaeb9, 0x69a6591a, 0x67966324, 0x69fc492c, 
    0x697d2a4c, 0xaf0fdda6, 0xd3a95be7, 0xc97cd9ea, 0x8f8bc8ee, 0x98d60fef, 0xf9a1fd5b, 0xb1ec9f9a, 0x9bce9ffa, 0x00ff68f6, 0xd5786bbe, 0x94b2baa4, 
    0x8aa258a2, 0x0a30cf2b, 0x4dbcd1d9, 0x3cdba271, 0x811c4111, 0x9f2f79df, 0x2b7d3b40, 0x4e538c1a, 0x74a74dc3, 0xf6f8d274, 0x962ae3fd, 0xe21f23d0, 
    0xb57e1cc3, 0xc95c5ccd, 0x34cd3371, 0xcb39f28c, 0xd3246733, 0x314d834a, 0x14adf529, 0x5326fea2, 0x6418f795, 0x98cebf1e, 0xf97b7f5c, 0x0fdd86d4, 
    0x6d48e7af, 0x9d3ff5a3, 0x5dd2196d, 0x9ac44959, 0x43ae288a, 0x17adad20, 0x2d1ab7c4, 0x110cc1b3, 0x92f71dc8, 0x1fa0e7e4, 0xa668b1d2, 0x360d5b9b, 
    0x275147b5, 0x4206358f, 0x6304da12, 0x3f4eb0d1, 0x2eaee65a, 0xe79db924, 0x73e4d99d, 0xd3dc6396, 0x4f830a29, 0xc98dfb9a, 0x3f2ec4bd, 0x418669ce, 
    0xc6e9fceb, 0x86b43e35, 0x9dbf3e04, 0xad4f1769, 0x2849b9c6, 0x80c48aa2, 0x1e1af6ab, 0xd242aaa3, 0xa879dbd9, 0xea9db4ad, 0xf7893fb8, 0x78de15aa, 
    0xdca31310, 0xf37c7080, 0x55e4fb8f, 0xb8d85d45, 0x9cd94945, 0xd616bed4, 0x60ed42e1, 0xba761dd8, 0xac81fcb1, 0x23380882, 0xe9a75704, 0x9f9e7a36, 
    0x7a7ded14, 0x5180c4d7, 0xb9c7a817, 0xd439aff5, 0xb952874c, 0xbb306269, 0x2363cc4a, 0x2acec995, 0x700e1ba5, 0x4f954951, 0x479ae2f9, 0xdba9fcb9, 
    0x1499a680, 0x886e1e51, 0x51f47185, 0xab206645, 0xa31e1af6, 0xd9d242aa, 0xada879db, 0xb8ea9db4, 0xaaf7893f, 0x1078de15, 0x80dca313, 0x8ff37c70, 
    0x4555e4fb, 0x45b8d85d, 0xd49cd949, 0xe1d616be, 0xd860ed42, 0xb1ba761d, 0x82ac81fc, 0x04233808, 0x36e9a757, 0x149f9e7a, 0x6f7a7ded, 0x0ea20049, 
    0xd6e71ea3, 0x3251e7bc, 0xa5e54a1d, 0x2bedc288, 0x5cf58c31, 0xa39ce29c, 0x45c13964, 0x6948ad5c, 0x512a3269, 0x4551b498, 0x61bf0a20, 0xa43aeaa1, 
    0xb79d2d2d, 0x49db8a9a, 0xf883abde, 0x5da17a9f, 0x3a0181e7, 0x0707c83d, 0x00ff38cf, 0x555445be, 0x54848bdd, 0x4bcd999d, 0x146e6de1, 0x810dd62e, 
    0x1fab6bd7, 0x20c81ac8, 0x45308283, 0x67937e7a, 0x4ef1e9a9, 0xf4a6d7d7, 0xea200a90, 0x6b7dee31, 0x211375ce, 0x585aaed4, 0xb3d22e8c, 0xe4f0cf18, 
    0x1be514e7, 0x2a0ace21, 0xa2286ae5, 0xa228cca0, 0xfd2a008a, 0xeaa88786, 0x76b6b490, 0x6d2b6ade, 0x0fae7a27, 0x85ea7de2, 0x04049e77, 0x1c20f7e8, 
    0xfee33c1f, 0x575115f9, 0x52112e76, 0x2f356776, 0x50b8b585, 0x073658bb, 0x7facae5d, 0x82206b20, 0x15c1080e, 0x9e4dfae9, 0x3bc5a7a7, 0xd29b5e5f, 
    0xa8832840, 0xaff5b9c7, 0x874cd439, 0x6269b952, 0xcc4abb30, 0x93c33f63, 0x6c94539c, 0xab283887, 0x8aa2a895, 0x8aa23083, 0xdfae0028, 0xf11637c1, 
    0x35291769, 0x989671c4, 0x7e803be0, 0x8a22aee8, 0x953bbba8, 0x9dbb7219, 0xe9a58fe6, 0x75ef04fa, 0xa01cb726, 0x05431ba9, 0x6b4e961f, 0xa2afd794, 
    0xee89b5d4, 0xc4460460, 0x00a92705, 0x459d3563, 0x21ab2b37, 0x09595db9, 0xce5f1fb4, 0xeb53639a, 0x7d8ed3f9, 0xa17f87e9, 0xfdc629fd, 0x28c99518, 
    0x90cc8aa2, 0x37c1dfae, 0x1769f116, 0x71c43529, 0x3be09896, 0xaee87e80, 0xbba88a22, 0x7219953b, 0x8de69dbb, 0x04fa69a6, 0xb72675ef, 0x1ba9a01c, 
    0x113f0a41, 0x35e59a93, 0x2db5f8fb, 0x41a87b66, 0x4901b111, 0x8c012418, 0x391475d6, 0xca0d595d, 0x2605c9ea, 0x4be7bf07, 0x10497348, 0x4851142d, 
    0x047fbb02, 0xa4c55bdc, 0x11d7a45c, 0x80635ac6, 0xa2fb01ee, 0xa22a8ab8, 0x6554eeec, 0x9a77eeca, 0xe8a79936, 0x9ad4bd13, 0xa48272dc, 0xfc28046d, 
    0x946b4e46, 0xd4e2efd7, 0xa1ee99b5, 0x05c44604, 0x06906024, 0x50d45933, 0x376475e5, 0x1424ab2b, 0x01494551, 0x01501445, 0x6e82bf5d, 0x2ed2e22d, 
    0xe3886b52, 0x77c0312d, 0x5cd1fd00, 0x76511545, 0xe5322a77, 0x1bcd3b77, 0x09f4d34c, 0x6e4deade, 0x36524139, 0x237e1482, 0x6bca3527, 0x5a6af1f7, 
    0x8250f7cc, 0x92026223, 0x19034830, 0x7228eaac, 0x951bb2ba, 0x280a92d5, 0xff83a4a2, 0x000000d9, 
};
};
} // namespace BluePrint
