#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Crosshatch_vulkan.h>

namespace BluePrint
{
struct CrosshatchFusionNode final : Node
{
    BP_NODE_WITH_NAME(CrosshatchFusionNode, "Crosshatch Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    CrosshatchFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Crosshatch Transform"; }

    ~CrosshatchFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Crosshatch_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_threshold, m_fadeEdge);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _threshold = m_threshold;
        float _fadeEdge = m_fadeEdge;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Threshold##Crosshatch", &_threshold, 0.0, 5.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_threshold##Crosshatch")) { _threshold = 3.0f; changed = true; }
        ImGui::SliderFloat("FadeEdge##Crosshatch", &_fadeEdge, 0.0, 1.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_fadeEdge##Crosshatch")) { _fadeEdge = 3.0f; changed = true; }
        ImGui::PopItemWidth();
        if (_threshold != m_threshold) { m_threshold = _threshold; changed = true; }
        if (_fadeEdge != m_fadeEdge) { m_fadeEdge = _fadeEdge; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("threshold"))
        {
            auto& val = value["threshold"];
            if (val.is_number()) 
                m_threshold = val.get<imgui_json::number>();
        }
        if (value.contains("fadeEdge"))
        {
            auto& val = value["fadeEdge"];
            if (val.is_number()) 
                m_fadeEdge = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["threshold"] = imgui_json::number(m_threshold);
        value["fadeEdge"] = imgui_json::number(m_fadeEdge);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue9ef"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_threshold   {3.0f};
    float m_fadeEdge    {0.1f};
    ImGui::Crosshatch_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 7518;
    const unsigned int logo_data[7520/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0x280aa08a, 0x280a80a2, 0xf1dd1aaa, 0xa7a9b4d3, 0x3626db46, 0x3dda7fc6, 0x7693c63f, 0x15fd0257, 0x5b7bf8cb, 0x7ed4b8be, 0xbb49a8cb, 0x79748fcd, 
    0x87fdbe50, 0xa8abfc71, 0x2b2919a5, 0xa2280aa0, 0x288a02a8, 0x930005a0, 0xa97d3280, 0xe3feb77c, 0xf998547e, 0x2a927a43, 0x0d9e410d, 0x8ebd520b, 
    0x00698f4d, 0xe45c7e91, 0xfe071199, 0xa1c29f87, 0x8f052ebd, 0xb800ff2d, 0x042195df, 0xef83111c, 0xb587b75c, 0x478debbb, 0x9b84baec, 0x47f7d8bc, 
    0xd8ef0b95, 0xbaca1f77, 0x652e218a, 0xa228d470, 0xb11db08a, 0x24292089, 0x4728c575, 0xea27621d, 0xeb9f240d, 0x4de3fd5f, 0x5a48d6a8, 0x68875db2, 
    0x3d394f3e, 0xe718018d, 0x8d3d3df7, 0xaa00ff30, 0xf48ff75f, 0x92b761a9, 0x2bfacaea, 0xf1748b72, 0xb9bb1dc5, 0x9e47523b, 0x671cc328, 0xfdd09f8f, 
    0x1b353b2b, 0x00fff3df, 0x6dc62431, 0xfae1f96f, 0xfcb7361a, 0x730dfdf0, 0xd4bd13be, 0xe48b3b35, 0xde229bbe, 0x31136ed1, 0x89c89c81, 0xccd7318e, 
    0xd45be1cf, 0xa72befe3, 0x9800fff9, 0x7394c7ec, 0x803e22d2, 0xfdb24ad3, 0x29ea23e5, 0x0b00cc29, 0xaba93fee, 0xda005a57, 0x61aca228, 0x2f8c8f5c, 
    0xec2def55, 0xf347768e, 0xfe7f8fc9, 0xbaaef3b7, 0x20d1a1b3, 0x487d568b, 0x3e932ccb, 0x67606c78, 0x2a4e8fd3, 0x90959c26, 0x3aeac9d1, 0x9ddab4c5, 
    0x7294edad, 0x1800d0c4, 0x1e200330, 0x8a4c1f3a, 0x2795a1ee, 0xe58c2585, 0xea03431d, 0xe9a8410d, 0x8676eaf0, 0x49c172da, 0x08ea1504, 0xda58a7f4, 
    0x769c8d2d, 0xc6ba23c9, 0x38e30b30, 0x2e4629fc, 0x140bdc2d, 0x20684551, 0x00288aa2, 0x17c647ae, 0xf696f7aa, 0xf9233b47, 0xffbfc7e4, 0xd7f95b00, 
    0xe8d0595d, 0x3eab4590, 0x499665a4, 0x30363c9f, 0xa7c7e933, 0x4a4e1315, 0xf5e468c8, 0x6dda621d, 0xcaf6d64e, 0x00686239, 0x9001180c, 0xa60f1d0f, 
    0xca507745, 0xc692c293, 0x81a18e72, 0xd4a006f5, 0x3b75f874, 0x60396d43, 0xf50a82a4, 0xac537a04, 0xcec6166d, 0xdd91643b, 0xf1051863, 0xa3147e9c, 
    0x05ee1617, 0xb4a2288a, 0x14455110, 0xa9fee300, 0xd23fde7f, 0xc60daeb3, 0x93cebaa4, 0xd43d6d67, 0x0c594d83, 0x6f772150, 0x7072abf4, 0x090a2707, 
    0x0e9df5ab, 0xb35a0489, 0x645946ea, 0x63c3f399, 0x7a9c3e03, 0x2dca5971, 0x1c5a20ab, 0x227cb3c6, 0xa32eadd5, 0x92b4b9b3, 0xc9a45c15, 0x8c0795b0, 
    0x6b57cc0f, 0x293ca90c, 0xea28672c, 0x6a501f18, 0x874f470d, 0xd336b453, 0x20480a96, 0xa54750af, 0x6cd1c63a, 0x49b6e36c, 0x8031d61d, 0xe1c7195f, 
    0xb7282344, 0xa2289671, 0xa443d08a, 0xff5a00ff, 0x401aef00, 0x4921c38c, 0x20570afa, 0x133cc7c8, 0xcdfb1346, 0xff7c00ff, 0x13eaf500, 0x0eba50b4, 
    0x0696bf31, 0x7d7beac6, 0x6f87ce2a, 0x91adcda8, 0x25759f16, 0x9ad962ac, 0x168a8555, 0x46ccb617, 0x152163ec, 0x4f00fa98, 0x7942ac6a, 0xa76ee663, 
    0xf59e7ef8, 0x82b04f57, 0xbc50fbc2, 0x4b92a559, 0x0ea77cd8, 0x88791406, 0xc0fd63fc, 0xae8c953e, 0x13d06fe3, 0xa8c35828, 0x6a00ff5d, 0x16bae95c, 
    0x7c1a25a8, 0xad168471, 0x03732b96, 0xe5d70160, 0x6c05fc56, 0x4dccb5bd, 0xa1696bb2, 0x4852027c, 0xa8cfb0ca, 0xa8a78a3c, 0x9ddad6e9, 0xe49db6a1, 
    0xaa20480a, 0x293d828c, 0x587136f6, 0x936cc7d9, 0xc018eb4a, 0xfc38a32e, 0x9bcca32a, 0xb92000ff, 0x92514631, 0x2b457da4, 0x00ffd47d, 0x309afa77, 
    0xfb6fde9f, 0xaf00ffe7, 0xcf784e48, 0xb568a503, 0x88680eb0, 0x1fbc3262, 0x2c4f0aef, 0xf4fdaffa, 0xac2a462a, 0x1b0237ec, 0xa53f361c, 0x93f7cd37, 
    0x00fffbfe, 0x556a56eb, 0x7613d11a, 0x83769427, 0xe1fdeb95, 0x79908840, 0x85f7075e, 0x03f2c93c, 0x8f7fea97, 0xed3457e9, 0x0c51eb3e, 0x08b6f66d, 
    0x14e51e52, 0x8203b0e4, 0x3e90e441, 0x39691da7, 0x0bf64ad4, 0xcff2cfc8, 0xdf00ffaa, 0xfa2c8f42, 0x2af4fdaf, 0x43e647d2, 0xdadd9034, 0x335408dc, 
    0xa6f87b8b, 0x92010b2a, 0x24038911, 0x7fd5fb0c, 0xfb4fde37, 0xad00ffef, 0xd9a34e4d, 0xe51bf20e, 0x00ff559f, 0x882985be, 0x475e3980, 0x9b2f85f7, 
    0xf7fd27ef, 0xa5d600ff, 0x90145276, 0x7bef8fc7, 0xd57c6a9f, 0xf282ae2e, 0x9e2ba111, 0xef515f47, 0x2cdf14fe, 0xf4fdaffa, 0x001f792a, 0x377bddf2, 
    0x4a0ca4b9, 0x3fea9613, 0xe3aca0e5, 0x25bb7652, 0xca8bd849, 0xf5ca413b, 0x58a5f0fe, 0x0f641c8b, 0x16941ac4, 0x9f58f031, 0xab3de8fa, 0xb5d04f4b, 
    0x6b5e4d5d, 0x3596663b, 0xcaf9a47d, 0x093d7806, 0x695daa1d, 0x3373a0ed, 0x3c48441c, 0xc2fb03af, 0xab3ecb93, 0x0a7d00ff, 0x7ac293de, 0xbd3331fc, 
    0xfc01a484, 0xbe1e2333, 0x8a4cd680, 0x20b8d4cb, 0xc7f8820c, 0xb657c5f9, 0xf9a0ed95, 0xe5afdc9a, 0x00ff559f, 0x882985be, 0x475e3980, 0x2d3f85f7, 
    0x1fd87282, 0xd250d4f4, 0x23bfbc70, 0xabe6fefb, 0xbb606f9e, 0x3823a011, 0xdf23fe20, 0x51be29fc, 0xaf574eda, 0x395985f7, 0xff9e8124, 0xfff5c500, 
    0xaafe3f00, 0xea941b41, 0xbfd093c0, 0xb15a00ff, 0xb696e455, 0xac909d27, 0xa84bae24, 0xbf4569fc, 0xbc9847cc, 0x0853f37b, 0x1c376edf, 0xf4bf00ff, 
    0x3f0dadf6, 0x3435d540, 0x32e0ec79, 0x9fb4adc6, 0x070f4635, 0x5e6ac7a1, 0x2e664fde, 0x3e32f666, 0x984f70ce, 0xf0d0fa98, 0xa9435015, 0xbf15dfe9, 
    0xd8f5842f, 0x9335cb6d, 0x2adb39f0, 0xf40ffdb1, 0xf18d87ac, 0xc0082cb7, 0xa53f363f, 0xf5346f2f, 0xb925cd61, 0x676ccb57, 0x7d00ff2b, 0x804d0c0a, 
    0xef673a72, 0xc451b20a, 0x9c13cb78, 0x78fefcf0, 0x79c112a6, 0xf3bf9d2d, 0x8ad67ad0, 0x1fd69ebc, 0xff6d183b, 0xffa2e900, 0x88d29c00, 0xa94b6617, 
    0x15371ce7, 0x93e74639, 0x7d7d00ff, 0x28181569, 0x9fbd9f04, 0xd600ffbd, 0x9abc7dac, 0xdc779edc, 0xbc4dc98b, 0xfff64fb7, 0x08d4fa00, 0xba1b7113, 
    0xf2cfb57f, 0x07314aa9, 0xc53fc993, 0xabd600ff, 0xaa817efa, 0xd9f3686a, 0x5b8d65c0, 0x8c6a3e69, 0x8e430f1e, 0x7db22ad4, 0x33f63641, 0x379bce3e, 
    0xc700ff6e, 0x48f1fcb8, 0xbb334060, 0xf57fabd3, 0x095f72ab, 0x92dbb0eb, 0x52c72fd6, 0xd01fabb2, 0x87acf4e7, 0x2cb7f18d, 0x363fc008, 0xd61ea53f, 
    0xf2c2ea49, 0x1798905b, 0xe7a84366, 0xdf14b71c, 0x89f98c23, 0x7f6a3dd3, 0x7163f62d, 0xfff773ce, 0x79d4fa00, 0x3d6e8c6f, 0xfefdf731, 0x97bc4a95, 
    0xe4bef351, 0x7b038032, 0x0d35f5b7, 0xdf29234d, 0x756c7890, 0x7954fbfa, 0xfdb7ee4f, 0xd600fff5, 0xa56daaae, 0x1c76a4b1, 0x6c9f3000, 0xd44a00ff, 
    0x5fc81ed1, 0x3c730fb4, 0xc5b6b473, 0x300c2155, 0xe7c02d2f, 0x41c5ea70, 0xe74980e3, 0x949b3918, 0xc1563e44, 0xdad3bf27, 0xd992c297, 0xefb6785f, 
    0xb09756ed, 0x5c424894, 0x3b62e134, 0x056ca06e, 0x92e1fd29, 0x7aaa7277, 0xcac91975, 0xb9e378df, 0xbae8a39f, 0xec05866f, 0xed747def, 0xa82ba477, 
    0x00852afb, 0x2d1fc5dd, 0xa3de75e6, 0xce061c8c, 0x65371849, 0x5c018c52, 0x8f71aa7c, 0xa6670d50, 0xe8d9a791, 0xb6d3bcfa, 0xd1c67cab, 0x142f4410, 
    0x233e0f33, 0xe7362685, 0x141e7a80, 0xd4f545fd, 0x8a22d5a3, 0xdb93eceb, 0xf223e97e, 0x0d7393a5, 0xb493138a, 0xe8b99d64, 0xbc53d53a, 0xee1b565b, 
    0x75df9c36, 0xa6fedd3f, 0x5bf7a78c, 0x00fffafe, 0xa69853eb, 0xa75bf9d4, 0xb5cfbdf7, 0xd0badb68, 0xee9b8e4d, 0xabbff79f, 0x5b1e1753, 0xe8c89164, 
    0xa52cb53e, 0xd7839c76, 0x60d4dcd7, 0x567e96a7, 0xeb8b3fea, 0xbe4159ed, 0xb690ba4d, 0x2779021c, 0xb7e738e6, 0xb4b4ded3, 0xfb852c59, 0xc733f7c2, 
    0xb2dbf270, 0x601842aa, 0xce815b5e, 0x838ad5e1, 0xce9300c7, 0x4f417330, 0x1ca7fc24, 0x527bfaf7, 0xafec5df8, 0xb77a5f3c, 0x18b19756, 0x864b15d6, 
    0xb64d249c, 0x52c006ea, 0x2719de9f, 0x71a42a77, 0x5f6f43d4, 0x7754e89f, 0x2ead7437, 0x57f841d7, 0x7237d734, 0x2816591b, 0xa66e8b84, 0x3d681f45, 
    0xdd9bee46, 0x9271378e, 0x7512ab7d, 0xe136800a, 0x5e19a9f2, 0x6c8a8371, 0x977ddad6, 0x266daf81, 0x00fffe96, 0xe449b27d, 0x23ab70c5, 0x948fb41f, 
    0x86f956b1, 0xf7cb8715, 0x4badd373, 0xf51d7b73, 0x04ebacbd, 0x60d9afb0, 0x05472e5f, 0x138c09d7, 0x5cc79381, 0x57a9a00f, 0x3e98b752, 0x42a07285, 
    0x80e52448, 0x35b563e4, 0xbb7feabe, 0xe42e4dfd, 0xe4d646da, 0xfabff783, 0x6a53acd4, 0xfbd3ad7c, 0xbadae7de, 0x75d5d315, 0x665203fd, 0x7b72f3db, 
    0x7a00fff6, 0x08adaa98, 0xeb97c750, 0x6d7b6a8f, 0xfb3db8f9, 0x51bd00ff, 0xf7cf3ee5, 0xfbfa374e, 0x379e2b7d, 0x8766acfe, 0xc9af5d30, 0x8a7b7bea, 
    0x9a2cd0d9, 0x8e75e469, 0x9a7100ff, 0x4d1bbe03, 0x40dd36e8, 0x8ee1b6dc, 0xa1703c99, 0xe2609c9b, 0x6c464696, 0x5f4f121c, 0xde854771, 0xf7c5f3ca, 
    0x7b6975ab, 0x54618d11, 0x44c269b8, 0x6ca06edb, 0xe1fd2905, 0xaa727792, 0xaa411d47, 0x17bafe56, 0x4d9fce0d, 0x7ed027d1, 0x796bcd16, 0x45b6e935, 
    0x2ffb2252, 0x761e62ef, 0xe0168a59, 0xc2f35872, 0x3a35d7e4, 0x701b4085, 0xaf8c54f9, 0x5ac5c138, 0x2cacd1b8, 0xcddd167e, 0xffe5d535, 0xbfaa9a00, 
    0x56e18e63, 0x9cc2c566, 0xc6d92aee, 0x7e7af733, 0xeccd0575, 0xb3f6d677, 0xbfc212ac, 0xb97c8165, 0x265c171c, 0x4f064e30, 0x823e701d, 0x797b6f94, 
    0x70085d8e, 0xc7fb679f, 0xbe3dfd1b, 0x7d3661b4, 0x3f3df7e3, 0x94d1fada, 0x38dd3ffb, 0xf4edebdf, 0xeeb329a3, 0xfeebb99f, 0xd7b5d2d7, 0x9124f2f1, 
    0x9edcfcb6, 0xa6debffd, 0xb8c6a0c6, 0x7a26712c, 0xcd6f9b53, 0xfddfefc1, 0x7c656cea, 0xeb3fc0b5, 0x5ecb7a07, 0x15127a52, 0x1f825b1e, 0xe7c0c996, 
    0x0dcfadf0, 0xf2ca5ada, 0xaf6adab3, 0x24129a29, 0x861888b7, 0x645888db, 0x7f0b36fb, 0xacf618b0, 0x48e52b06, 0xe3f17e30, 0xe19be23e, 0xf1bcb277, 
    0x5addea7d, 0x5863c45e, 0x701a2e55, 0xa8db3691, 0x7f4a011b, 0xdc9d6478, 0x51c791aa, 0xfa4fba31, 0xce3d55ec, 0x4ed045c3, 0xecf1f08f, 0x67d5636e, 
    0x764425b2, 0xca0d4091, 0xb7936c66, 0xd97f72ea, 0xf25aaec9, 0x88462a0f, 0x48453cc3, 0x657e1d01, 0x9c1ee01c, 0x351ab7d4, 0xdbc28f85, 0xbcbaa6b9, 
    0x5755f3bf, 0x2adc71ec, 0x53b8d8cc, 0x385bc59d, 0x4fef7ec6, 0xbdb9a0ce, 0xd6defa8e, 0x57588275, 0x972fb0ec, 0x84eb8223, 0xc9c009c6, 0xd007aee3, 
    0x6fef8d53, 0x11a1cb31, 0x3bf8b650, 0x7dddcd87, 0x3e9b30a9, 0x9f9efbf1, 0xca687ded, 0x9cee9f7d, 0xfaf6f56f, 0xf7d99451, 0xfff5dc4f, 0x5ae96b00, 
    0x0bf9f8eb, 0x7b3b7f50, 0x71327e63, 0x7f7fd38c, 0x3f4d00ff, 0xbed9b55a, 0xbffb835e, 0x949f6a5a, 0xbaf9987c, 0xffe3c76c, 0x95acd700, 0xa944366d, 
    0x3b9f1079, 0xc9f9fb60, 0x7ca1f6f5, 0xf9fc18e0, 0xa8cf19c7, 0x73dccfa9, 0x7af7bfb3, 0x208d00ff, 0x273fbc3f, 0xfd3dbb7e, 0x5bb7f668, 0x20f2e620, 
    0x120f7006, 0x297e8f1c, 0x00ff7f3f, 0xb35a3f4d, 0x3e2c00ff, 0x6f07fce7, 0x9f23a5bf, 0xe0997c94, 0xb43eb371, 0x147e6dd5, 0x7f45de1c, 0xd300ffdf, 
    0xde9cd64f, 0xfa1b1776, 0xd4d4d773, 0xfad7fdb9, 0xe5e9e2bf, 0xd14c00ff, 0x5ffd979f, 0xcf00fff0, 0x37ad7f3f, 0x3007c953, 0x1dcc3cd9, 0xfaf6babb, 
    0x30b5fe9f, 0x6f20c809, 0xab38c9f5, 0xede59b1d, 0x69bddefd, 0xf2517eaa, 0xb3e9e663, 0x00ff8f1f, 0x4b8db35e, 0x9612a227, 0xd9677b84, 0xfc93738e, 
    0x2c724a5f, 0xe06cc9db, 0xfad3fbfb, 0xc5bf0dab, 0x03d27add, 0x77f2c3fb, 0xd6dfb3eb, 0x3d6db497, 0x912bdc17, 0x920d9f84, 0xbdf938dd, 0x1f5c0ae9, 
    0x0200ff51, 0x1f118fa9, 0x17ec3897, 0xcf91d2df, 0xf04c3eca, 0x5a9fd938, 0xb2b755a5, 0xc8a486fb, 0x1d1c9c08, 0xcd8100ff, 0x5cd8792b, 0x5fcfe96f, 
    0xf7e75253, 0x00ffea5f, 0xfd97a78b, 0x6fc34a33, 0x7bf90101, 0x7bd57b26, 0x7c88565d, 0x714ec2c0, 0xbffefd9e, 0xad626afd, 0x9ceba9c2, 0x971aa48e, 
    0xbfbd7cb3, 0x35add7bb, 0x31f9e87e, 0xf5737ff3, 0x4ad6faeb, 0x1259cd6e, 0xd8cf8398, 0x0fbff773, 0x28bdfe6f, 0x9fc3bcf3, 0x7a3a9ebb, 0x388500ff, 
    0xf12f3f74, 0xfff5777f, 0x41d3eb00, 0x3bf9e1fd, 0xebefd9f5, 0xd1f79a4b, 0xfd70c17d, 0xbd7f96f7, 0xf05f6f8f, 0xa3edfca1, 0xf40c5c6f, 0xa7f4cff7, 
    0xf2b3fa37, 0x739b9ee7, 0xff9ad2df, 0x991d7000, 0xd2ccc6e9, 0xbf65ef4e, 0x89302661, 0xee1c3cda, 0xe24050cf, 0xc76db38d, 0xfbb89dcd, 0xcf4ef3dd, 
    0xffd5bfee, 0x2f4f1700, 0x279d66fa, 0xe567f253, 0xd67beefe, 0x593bed9c, 0x0f5cc57d, 0xf13dce9b, 0x00ffdfd3, 0x051340ad, 0x775b6019, 0xbed94be9, 
    0xebdddf5e, 0x7cd083d6, 0xdffdc5bf, 0xaf00ffd7, 0x97a55f59, 0x4b8448dc, 0x4e1d8683, 0x40e7cf3f, 0xb024ef12, 0xe3079edb, 0x7830504f, 0x18953ec7, 
    0x77f2edfb, 0xebdfb3eb, 0xd3ba7742, 0x93d801ee, 0xbfe1c6ca, 0xa58491d6, 0xe000d646, 0xb7d2fa67, 0xe7f2b3fa, 0xdf739b9e, 0x45b991d2, 0x82e37a1b, 
    0x49e1c7b9, 0x08fb4d3f, 0xc66cb34d, 0x7d3dbbf1, 0xb77f3fa9, 0x5cb76fdf, 0x198500ff, 0xbffad7fd, 0xffe5e9e2, 0xa4d34c00, 0xfc4c7eea, 0x7acfddbf, 
    0xb276f6d2, 0xc0008afb, 0x1d74c287, 0x8a34793d, 0xcefd28df, 0xe9986e3e, 0x1fce4bef, 0xcf71e886, 0x424ce9b9, 0x4f2217db, 0x00ffdcbf, 0xb524299e, 
    0x583100ff, 0xb1951f90, 0xf574f11f, 0x02bdadf7, 0x94232e38, 0xde53e85c, 0x13359605, 0x3400b823, 0x18858788, 0x3e1743f9, 0x58737bca, 0x1b6e3863, 
    0xfffbfaef, 0xf0d22a00, 0xd4f8dde5, 0x1d2b82a5, 0xc2d4ed61, 0x652668e6, 0x08739380, 0x12848d20, 0xfbb92517, 0xdc19879b, 0x7477a508, 0x536f125c, 
    0x3df40866, 0xbabc454f, 0x4d2ed1b1, 0x828cbccd, 0xec7225dd, 0x615561be, 0xd88daad7, 0x7a4fc7c1, 0x8cdc66e5, 0xe0b65b43, 0x20875570, 0xb5e3c1f3, 
    0x9af83374, 0x6a0bbf6b, 0x7a68a729, 0x77399aa8, 0x89cb58aa, 0x6420fd9f, 0xb8700806, 0x530e06ce, 0xd5c47a8f, 0xeaaccd2d, 0xbe0997aa, 0x2129e428, 
    0xe4b2d0f9, 0x193970ab, 0x5153e0c1, 0x921cd64e, 0xbbad68b2, 0x3ff259f7, 0xf5e3ee8b, 0x5e2832a4, 0xcee50361, 0x2f93d60f, 0x33d9fde4, 0xe59fd7bb, 
    0xdd6f5f46, 0xfbfaee93, 0x57d42afd, 0x00ffbd6e, 0x506293e0, 0xe884b871, 0xe7bf3e3f, 0x1859a4f1, 0x323226a8, 0xa3f5c7d8, 0xd00d3f9c, 0xd2739fe3, 
    0x2eb68598, 0xb97f9f44, 0x563c00ff, 0x42df294a, 0x9c184a6c, 0x63c3b8fc, 0x0f5defeb, 0xbdf4f486, 0xd1e799b6, 0xaa24da0d, 0xd9ba70be, 0x7c435980, 
    0xb3141db9, 0x4d1de3fb, 0x6e388373, 0xfbfaef1b, 0xdb2a00ff, 0xac5abcf0, 0xbdb513b7, 0x91d6a0a6, 0x23e91ec9, 0x2ca348bf, 0x6c988527, 0x0ce42723, 
    0x7257e849, 0x31826c75, 0x4d177a57, 0xce562327, 0x74d647cf, 0xfd34a9bb, 0xc2b54f1a, 0xb40f56e5, 0x90775990, 0x06b2b9ad, 0x6ec76e54, 0xacdcc995, 
    0x6f3cd296, 0x558cde11, 0x8ee01c94, 0xd0b58ebc, 0x7b8e785d, 0x11ea0b8f, 0xa926fae9, 0x4582a4e7, 0x00ff094b, 0x07cfe37c, 0x060e9501, 0x941f4c0f, 
    0x8951c711, 0x599b5baa, 0x42275511, 0x8e21c7f1, 0x2cc4fb43, 0x076e95a0, 0x051e9c20, 0x0ebb583e, 0x2a9a3449, 0x77b3aff9, 0x629c7394, 0x7f824396, 
    0xebe5bb75, 0xa8f4bc8e, 0xdd4ffef2, 0x79bd3b93, 0x77f954fe, 0x7e0e386e, 0xf43ee15f, 0xb29212f9, 0x91e07ffc, 0x38ef476d, 0x38f0946f, 0x4b4aebf7, 
    0xc7f7f271, 0xceb4de5e, 0x4337fc70, 0x4acf7d8e, 0x80811852, 0x7b9e7bdf, 0x5771b266, 0x7bc6c326, 0xe14d578c, 0xfaca327d, 0xf42e69c6, 0x4a4aaea9, 
    0x85924814, 0xf1a07c00, 0x63c974bc, 0x937140c7, 0xce857980, 0xd235f539, 0xe73b52f8, 0xa8fc6fd3, 0xbb0b8a2e, 0xed8e5656, 0x83123050, 0x01380626, 
    0x1a7f5846, 0x209aa39d, 0x69ba6c93, 0xb25e6a39, 0xb3def0b0, 0x1ad67069, 0x1396d86d, 0x0e931883, 0x6e044846, 0xcf38b87d, 0xe2f73827, 0xdaa8fbb8, 
    0x082279de, 0x412a4749, 0xdb072323, 0xd435f223, 0x6b5dafcb, 0xa6e52d9a, 0xc3dda193, 0x25320a72, 0xcf40da9d, 0xefcf45b6, 0xa85ced0a, 0x23a39e27, 
    0xd69e6b82, 0xf8cadeac, 0x6c6423c4, 0x4046b42b, 0x4a5009c5, 0x4e70e896, 0xc9aade33, 0x2539e8d9, 0xbc48d164, 0xf3e53381, 0xdda1999e, 0xb7109094, 
    0x21a3e219, 0x33895cc4, 0xd364b3bb, 0xe0b8dda5, 0x847ff939, 0x57e4d3fb, 0xe6eb2f5a, 0x32c99545, 0xf9ed7872, 0x7ae893d1, 0x363f30d2, 0xe678f733, 
    0xe0c08690, 0xd55eeffd, 0x0f9b4892, 0x3ac2afae, 0xd8a99d3e, 0x667d4b5c, 0xc2e418d2, 0x468090b9, 0xf30f003a, 0x5c93eb1d, 0x5d539fe3, 0x3defc397, 
    0xc58bd460, 0x0ab99127, 0xb10a4a3b, 0x7a016ec3, 0x93dc0682, 0xd5d023d7, 0xa5d92641, 0x24b59c34, 0x35bcd3b6, 0x744e5bab, 0x92970bfb, 0xc851652c, 
    0xb6377d6e, 0x21d7ccdf, 0xbcb60077, 0xe136dc9e, 0xbd9b8c14, 0xe99a7170, 0x9dcb35ae, 0xb4bc466b, 0x945bf4d1, 0xa25b1eb9, 0x0ca45dd9, 0x1e4991d8, 
    0x192f5c61, 0x232347ce, 0xd66b62bd, 0xc4bae911, 0x6439d1f6, 0x72dc0852, 0xa2794646, 0x87a67269, 0x4653b934, 0xec8ce36e, 0x18294e3f, 0xcfd5ceb0, 
    0xd91eb51e, 0xf361ac3c, 0xfefcfbbb, 0x430cf774, 0x18831e60, 0x93caa738, 0xcc7cfde9, 0x890b37ec, 0xe7a06e3e, 0x629a9c8e, 0x495c042a, 0xe31cbc91, 
    0x704ca5bf, 0x39bd7037, 0x3080c2a4, 0xf36f3ea8, 0xbd29d5f8, 0xe30ee07f, 0x2095af0a, 0x4e6ec1df, 0x2d3a543a, 0x88375ab4, 0xa668b52e, 0x689fa779, 
    0xaa7c9064, 0x0320a904, 0xf481f11e, 0x20056c35, 0xcd130c8c, 0xc7dc6d34, 0x3ef69c09, 0xbfef29f4, 0x2635e4e1, 0xa0863a8b, 0x3f041f75, 0xb60aa586, 
    0x283363b2, 0x7f93f83b, 0x67c5a8d3, 0x9c0d2924, 0x56cc7910, 0x598da328, 0x300a4986, 0x5856413f, 0x54051901, 0x94d2430f, 0xa00d9ca2, 0xa942718f, 
    0x83fcfcad, 0xed2bf59d, 0x99c7c88f, 0x7dbbeec6, 0xcf1edba8, 0xfe6d9cf5, 0x9449bdef, 0xc663f7d9, 0x54fe787d, 0xf90108e6, 0x8adf8153, 0x3d3fdad3, 
    0x37cc87fc, 0x6e3e890b, 0x9c8ee7a0, 0x042a629a, 0xbc91495c, 0xa5bfe31c, 0x00c8814f, 0x36e9fc74, 0xbd080080, 0xd700ff73, 0x5f4b95ac, 0xc33c01fe, 
    0xf3af5000, 0xe324bff1, 0x8b0635a7, 0xe28d166d, 0x295aad0b, 0xdae7699e, 0x2a1f2419, 0x00482a81, 0x7d60bcc7, 0x30da5b0d, 0xe4c95141, 0x1905d27a, 
    0x718fa224, 0x6a5185de, 0x14c800ff, 0x75d75fac, 0x2f7cd796, 0x894ea277, 0xa6d4bd1d, 0xee3c9247, 0x71e6cb04, 0xacf4f1f8, 0xb3218574, 0x8a390f82, 
    0xab7114c5, 0x4621c930, 0xd12ae807, 0x5068b751, 0x41e9a147, 0x41052345, 0x6c5528fc, 0xe743feef, 0x63fb4a7d, 0x71e631f2, 0x6adfaebb, 0x9218a174, 
    0x4c5f195f, 0x67939af1, 0x3a2d8fcb, 0xa9fcedf4, 0x57855e48, 0xfbd51ca0, 0xe0af6f4d, 0xc28cda1c, 0xa89b4fe2, 0x26a7e339, 0xa4ca2893, 0x47661e3f, 
    0xb44ba51f, 0xa0c1c073, 0xa08d8122, 0x9f959e73, 0x4dacfe3a, 0x1c00a9c6, 0xe9d87036, 0x5bb455ef, 0x106fb468, 0x4cd16a5d, 0xd03e4ff3, 0x54f920c9, 
    0x06405209, 0xe803e33d, 0xe851d86a, 0x2a90e63a, 0x0daa9de4, 0xff36690a, 0x566ac800, 0xebaebfd8, 0x5e78ae0f, 0x44b844ef, 0x4ca90b8a, 0x7067228f, 
    0x03335f26, 0x4a56fc3e, 0x5bd890c2, 0x48b1e6c1, 0x98d54863, 0x81ab9064, 0x40b00afa, 0xfba08d2b, 0x18290a1a, 0x42e10f2a, 0xbf6faaa9, 0xdcdbf990, 
    0x233fb6af, 0xba1b671e, 0xcca7f6ed, 0x7cee58aa, 0xf59ebe7c, 0x1bb7c126, 0xd44eaf17, 0xa83c41a5, 0x57b75a3f, 0xc800ff54, 0x8019b539, 0x8efdfc43, 
    0xa4c9e978, 0x9b5fb860, 0xbed3f3f8, 0xd126154f, 0xb49e03cf, 0xae831e6d, 0x497d3e6b, 0xc13126b8, 0xd4f927cf, 0xfaa616da, 0x57de971c, 0x9abb3993, 
    0xb7cc1b29, 0x64635740, 0xbd05850c, 0xd4912401, 0x6351f360, 0x2e36291d, 0xe967b473, 0xb649334a, 0xde66560a, 0x9dcbe2b9, 0xc69e4767, 0x8ea32d48, 
    0x8566b95d, 0x0f0c0366, 0xf25470dc, 0x58eb833b, 0x714f17f7, 0x529eb829, 0x99652bef, 0x820ad3bb, 0xa5c74030, 0x158c5405, 0xa3d80e04, 0xe5c63d99, 
    0x63fbca7d, 0x71e631f2, 0x6adfaebb, 0x8ea5ca7c, 0xe9cbc7e7, 0x4cec52ef, 0xa6c76863, 0xaaa72a28, 0xa715f583, 0xafaff7b6, 0x81da1ce0, 0x9127cf19, 
    0x7305a58f, 0x73f0988f, 0xf77e82d6, 0x336aa707, 0xd6d483d3, 0x1828925a, 0xa7bd9aef, 0xa58e3a68, 0x0167cd1b, 0x246d0399, 0xae07a3c8, 0xa8d62339, 
    0xf7fa9d0e, 0x5fc0efae, 0x17748f36, 0x8ea0fd20, 0xe214dd7f, 0x112edaae, 0x356776e6, 0xb835853f, 0x176b66e2, 0xea287500, 0x650de44f, 0x18c14110, 
    0xc90fbd22, 0x268d34d4, 0x6b4e6dea, 0x464b51dd, 0xc6201b16, 0x20039651, 0x04390e82, 0xb806f4e0, 0x75c8445d, 0x2396962b, 0xc6acb40b, 0x3939fc33, 
    0x928d13c5, 0x2295c709, 0xedf2979f, 0x9c73fdde, 0x27234ef3, 0x244ceda9, 0x3ad9ce6c, 0x4acf19f4, 0x3df43c79, 0x89f950ba, 0x9c735cd4, 0xe63b06d0, 
    0x5e8ff893, 0xfa9d0e94, 0x5a24a8f7, 0x7ae8a7bf, 0x4b0ba796, 0x22e76f67, 0xaa77d2b6, 0x4572fae0, 0xdf5de950, 0x6b74c680, 0xcf07a790, 0xaa08fa3f, 
    0x70b1bb8a, 0x39b3938a, 0xad2bbca9, 0xb17619c5, 0x3aee0f7c, 0x3581fcb1, 0x04074192, 0x68f48a60, 0xcd746f6d, 0x6bf5e936, 0x3be4abcb, 0xc8aaa576, 
    0xb63d0764, 0xce48dd7c, 0xe3390338, 0x266ac135, 0xb45ca943, 0xa55d18b1, 0xe19f3166, 0xca29cec9, 0x82734836, 0x1e33458a, 0x7bd81b57, 0x19719ae7, 
    0x616a4f3d, 0xc9766623, 0x7acea0d7, 0xa1e7c953, 0x7287d2ed, 0x3b8a1675, 0x1254a0f7, 0xd04f7f15, 0x164e2df5, 0xcddfce96, 0xefa46d45, 0xdcebc155, 
    0x5da15a8f, 0x3a0181e7, 0x0707c83d, 0x00ff38cf, 0xab3845be, 0xa90817bb, 0x9799333b, 0x51dcbac2, 0xc0166b97, 0x1fabebfe, 0x245913c8, 0x08467010, 
    0xb5b548af, 0x6e6cd3bf, 0x9ebc545f, 0xa9dd4ef9, 0x39b81c6e, 0xf4e657ec, 0xb866bcfe, 0x75c8440d, 0x2396962b, 0xc6acb40b, 0x3939fc33, 0x64a354c5, 
    0x2245c139, 0xf13e0eae, 0xa769fca5, 0xf08b7f1b, 0x5e4f69ce, 0x884db587, 0xa9288a16, 0x0dfb5510, 0x21d5510f, 0xbced6c69, 0x4eda56d4, 0xc41f5cf5, 
    0xef0ad5fb, 0xd109083c, 0x3e3840ee, 0xf2fdc779, 0xecaea22a, 0xeca4225c, 0x0b5f6ace, 0x76a1706b, 0xbb0e6cb0, 0x40fe585d, 0x1c0441d6, 0xd32b8211, 
    0x4f3d9bf4, 0xbe768a4f, 0x80a437bd, 0x8f510751, 0x735eeb73, 0xa50e99a8, 0x61c4d272, 0xc6989576, 0x3827877f, 0x0ed928a7, 0x2b575170, 0x06154551, 
    0xbe8c1863, 0xfaf3f047, 0x7f1b95d1, 0x797d20de, 0x36df10a7, 0xb43e6e0f, 0x9b0f6c98, 0x1575fa1c, 0xaebfd5a5, 0xc7b80ac5, 0xd7f9a71e, 0x56f3f055, 
    0x5b3578b7, 0x04281e29, 0xd9190253, 0x4160b1d4, 0x7c0c94e1, 0xf8cdc2bf, 0x67589e71, 0x0634cdb9, 0x93b3e504, 0x8c281dc7, 0x651cdbac, 0xba74eeca, 
    0x69a385ae, 0xdff3059a, 0x5ba943df, 0xa9b5a2ba, 0xff954896, 0x12a47800, 0x10fc0e62, 0x737a0a0f, 0xeb664dc6, 0x5a6af1f7, 0x8250f7cc, 0x92026223, 
    0x19034830, 0xae04d6ac, 0xe2fae014, 0xe3959396, 0xd5951264, 0xcc680191, 0x76632059, 0xa54f9f3a, 0x396ec448, 0xfdbdfb19, 0xb3cb0ae9, 0x3d5b4002, 
    0x604eed48, 0xb623edfc, 0x9e365a33, 0x407ef1cf, 0x7dde18c5, 0x635c2870, 0xe9fc538f, 0x3d5ecf79, 0xb93e0029, 0x8264b2e6, 0xd7c48f9c, 0xfb0be063, 
    0xa36fd266, 0xdbe15892, 0xb137c876, 0xc9557e52, 0x9edc01c3, 0xc7f51e99, 0xa439f78c, 0xb69cc050, 0x958ee379, 0xb24d9251, 0x73572ea3, 0x2d74d5a4, 
    0x2fd04c1b, 0x1dfafe9e, 0x15d5dd4a, 0x44b24cad, 0x20c5fbaf, 0xe0771093, 0xd3537880, 0x376b329e, 0x528bbf5f, 0x84ba67d6, 0x14101b11, 0x18408291, 
    0x25b066cd, 0xd707a770, 0xaf9cb414, 0xae94201b, 0xc71888ac, 0x320672e5, 0x914a9f3b, 0x1e39eeb6, 0xaf82ce9f, 0x1f4c02b7, 0x3988535c, 0x6aa7e3e0, 
    0xbfa625b7, 0xc661138b, 0x078aebe3, 0x7b693d4e, 0x64b2a2f5, 0x09fe7685, 0x488bb7b8, 0x23ae49b9, 0x01c7b48c, 0x45f703dc, 0x8b531471, 0x322a77e5, 
    0x7d3b77e5, 0xf4d2443f, 0x8d4b36af, 0xb86e7c77, 0x278c2922, 0xb3553da8, 0x67aeb1db, 0x528bbf5f, 0x84ba67d6, 0x14101b11, 0x18408291, 0xe31c67cd, 
    0x5db9298a, 0xba520e59, 0xa1ea18b2, 0x530f0c3a, 0x9f93714a, 0x434ae76f, 0xf5018263, 0xf51c04c5, 0x37d9fda2, 0xa8288a16, 0xe06f5710, 0xb4788b9b, 
    0xe29a948b, 0x704ccb38, 0x743fc01d, 0x54451157, 0x8cca9d5d, 0xf3ce5db9, 0xfd34d346, 0x93ba7702, 0x54508e5b, 0x1f85a08d, 0x72cdc988, 0x5afcfd9a, 
    0xd43db396, 0x80d88820, 0x00128ca4, 0x8a3a6bc6, 0x86acae1c, 0x826475e5, 0x20a9288a, 0x0000d9ff, 
};
};
} // namespace BluePrint
