#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <ColourDistance_vulkan.h>

namespace BluePrint
{
struct ColourDistanceFusionNode final : Node
{
    BP_NODE_WITH_NAME(ColourDistanceFusionNode, "ColourDistance Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Color")
    ColourDistanceFusionNode(BP* blueprint): Node(blueprint) { m_Name = "ColourDistance Transform"; }

    ~ColourDistanceFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::ColourDistance_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_power);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _power = m_power;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Power##Radial", &_power, 1.0, 10.f, "%.0f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_power##ColourDistance")) { _power = 5.0f; changed = true; }
        ImGui::PopItemWidth();
        if (_power != m_power) { m_power = _power; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("power"))
        {
            auto& val = value["power"];
            if (val.is_number()) 
                m_power = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["power"] = imgui_json::number(m_power);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf391"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_power       {5.0f};
    ImGui::ColourDistance_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};


    const unsigned int logo_size = 4188;
    const unsigned int logo_data[4188/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0x280aa08a, 0x280a80a2, 0xf1dd1aaa, 0xa7a9b4d3, 0x3626db46, 0x3dda7fc6, 0x7693c63f, 0x15fd0257, 0x5b7bf8cb, 0x7ed4b8be, 0xbb49a8cb, 0x79748fcd, 
    0x87fdbe50, 0xa8abfc71, 0x2b2919a5, 0xa2280aa0, 0x288a02a8, 0x2a8a02a0, 0x747cb786, 0xd1692aed, 0xb18dc9b6, 0x4f8ff69f, 0x95dda4f1, 0x7245bfc0, 
    0xefd61efe, 0xb21f35ae, 0xf36e12ea, 0x541edd63, 0xdc61bf2f, 0x29ea2a7f, 0xe84a4a46, 0xaa288a02, 0x288aa200, 0xa18aa200, 0x3b1ddfad, 0x6d749a4a, 
    0x676c63b2, 0xfcd3a3fd, 0x70653769, 0xbf5cd12f, 0xebbbb587, 0xbaec478d, 0xd8bc9b84, 0x0b9547f7, 0x1f77d8ef, 0x518abaca, 0x00ba9292, 0x802a8aa2, 
    0x008aa228, 0x85f1912b, 0xbde5bdea, 0xfec8ce91, 0xffef3179, 0x75fed600, 0x3a7456d7, 0xcf6a1124, 0x926519a9, 0x8c0dcf67, 0xe971fa0c, 0x92d344c5, 
    0x3d391ab2, 0x9bb65847, 0xb2bdb553, 0x009a588e, 0x64000603, 0xe943c703, 0x32d45d91, 0xb1a4f0a4, 0x60a8a39c, 0x35a8417d, 0x4e1d3e1d, 0x584edbd0, 
    0xbd822029, 0xeb941e41, 0xb3b1451b, 0x7724d98e, 0x7c01c658, 0x28851f67, 0x81bbc5c5, 0xad288a62, 0x45511404, 0xf8c81500, 0xf25ef5c2, 0x64e7c8de, 
    0xf7983c7f, 0x7feb00ff, 0x3aabeb3a, 0xb508121d, 0xb28cd467, 0x86e733c9, 0x387d06c6, 0x69a2e2f4, 0x1c0d59c9, 0x5baca39e, 0xdedaa94d, 0x4d2c47d9, 
    0x00830100, 0xa1e30132, 0xeaaec8f4, 0x52785219, 0xd451ce58, 0xd4a03e30, 0x0e9f8e1a, 0xa76d68a7, 0x4190142c, 0x4a8fa05e, 0xd8a28d75, 0x926cc7d9, 
    0x0063ac3b, 0xc28f33be, 0xdde26294, 0x1445b1c0, 0x280a8256, 0xe40a80a2, 0xaf7a617c, 0x73646f79, 0x4c9e3fb2, 0xf500ff7b, 0xd5759dbf, 0x04890e9d, 
    0x46eab35a, 0xf3996459, 0x3e0363c3, 0x51717a9c, 0x86ace434, 0xd6514f8e, 0xedd4a62d, 0x96a36c6f, 0xc1008026, 0xf1001980, 0x5764fad0, 0x3ca90c75, 
    0x28672c29, 0x501f18ea, 0x4f470d6a, 0x36b45387, 0x480a96d3, 0x4750af20, 0xd1c63aa5, 0xb6e36c6c, 0x31d61d49, 0xc7195f80, 0x71314ae1, 0xa258e06e, 
    0x05412b8a, 0x05405114, 0xbd303e72, 0xb2b7bc57, 0xcf1fd939, 0x00ff3d26, 0xbacedffa, 0x4487ceea, 0xf5592d82, 0x4cb22c23, 0x81b1e1f9, 0x383d4e9f, 
    0x56729aa8, 0xa8274743, 0x6ad316eb, 0x51b6b776, 0x004013cb, 0x800cc060, 0x327de878, 0x5486ba2b, 0x3396149e, 0x0f0c7594, 0xa30635a8, 0xdaa9c3a7, 
    0x05cb691b, 0xa8571024, 0x639dd223, 0x7136b668, 0xeb8e24db, 0x8c2fc018, 0x18a5f0e3, 0x2c70b7b8, 0xa0154551, 0xff643f8b, 0xa3f46f00, 0xfeed9fec, 
    0xf28a6295, 0xb957b37e, 0x5724edcd, 0x7ffb27fb, 0xff641fa5, 0xabf46f00, 0xdccd0d15, 0xb33c9116, 0x4b11b1c9, 0x1f38c131, 0xb35e3585, 0xa700fed9, 
    0x9fec3726, 0x7d94feed, 0xd2bffd93, 0xbaebd8ab, 0xb6cea266, 0x41613e97, 0x63181b96, 0x0ea015f3, 0xbd0e4546, 0x807fab65, 0x2bb7a6dc, 0xbffd93fd, 
    0x7fb28fd2, 0x8a55fab7, 0xaf667d29, 0x15497b71, 0xdffec9fe, 0x3fd947e9, 0xc52afddb, 0xaf667d14, 0x2b92f670, 0xbffd93fd, 0x7fb28fd2, 0x8a55fab7, 
    0x0beee686, 0xe4599e48, 0x98bb88d8, 0xc20f9ce0, 0xec59af9a, 0x530000ff, 0x4ff61b93, 0x4a00fff6, 0xdffec93e, 0x6b5850e9, 0xeca46e9a, 0x46429796, 
    0x6514645c, 0x55a07ec6, 0x233808f2, 0xd6eb5004, 0x6ec0bf5b, 0xfe955b53, 0xe9dffec9, 0xdb3fd947, 0x14c52afd, 0xb857b3be, 0xff8aa4bd, 0x00ff6400, 
    0xeca3f46f, 0x95feed9f, 0xb33e8a62, 0x497bb857, 0xfec9fe15, 0xd947e9df, 0x2afddb3f, 0x777343c5, 0x2c4fa405, 0x5d446cf2, 0x054e70cc, 0xd9b35e35, 
    0x26a700fe, 0xed9fec37, 0x937d94fe, 0xa0d2bffd, 0xdd34d7b1, 0x2e2dd949, 0xc8b88c44, 0xfd8ccb28, 0x10e4ab40, 0xa1084670, 0x7fb7acd7, 0xb7a6dc80, 
    0xfd93fd2b, 0xb28fd2bf, 0x55fab77f, 0x667d298a, 0x497b71af, 0xfec9fe15, 0xd947e9df, 0x2afddb3f, 0x667d14c5, 0x92f670af, 0xfd93fd2b, 0xb28fd2bf, 
    0x55fab77f, 0xeae28a8a, 0x599e481b, 0xee2262df, 0x29708263, 0xcf9ef5aa, 0x313905f0, 0x00ff649f, 0xeca3f46f, 0x95feed9f, 0xa6b78e05, 0x69c94eea, 
    0xc6652472, 0x675c5641, 0x205f05ea, 0x45308283, 0xbb65bd0e, 0x35e506fc, 0x9fec5fb9, 0x7d94feed, 0xd2bffd93, 0xeb4b51ac, 0xda8b7b35, 0x8aa22848, 
    0x962b20e7, 0x45e3c5f1, 0x7fa41d67, 0x8e81e47e, 0x71fc07f8, 0xfa704d5d, 0xb7e68dd5, 0xb34d96e2, 0xed0ac1db, 0x07229a49, 0xe44cc71d, 0xd4d69ce7, 
    0xada1cd2f, 0x04a7882f, 0x20bec307, 0x974f0cb4, 0xbd5d613c, 0xc1f507cf, 0x1e8f42af, 0xc783e05a, 0xaf0e5c51, 0x6d41cde1, 0xe76fd2fe, 0x004625d4, 
    0xcf2d5621, 0xbbda27a7, 0xa659162d, 0xe2de2dd2, 0x6e9b2339, 0xa452241d, 0x3a7fec11, 0x6cb4bada, 0xc5ae2ef4, 0xb8a228ea, 0x8aa270ce, 0x5bae0028, 
    0x158d17c7, 0xfd91769c, 0x3b0692fb, 0xc5f11fe0, 0xebc33575, 0xdf9a5756, 0xcf36598a, 0xb52b046f, 0x1c886826, 0x93331d77, 0x505b739e, 0xb48636bf, 
    0xbdad22be, 0xde23fcbf, 0x6256b322, 0x57359e22, 0xe0c9c863, 0xe9e719fe, 0x769b825e, 0x63b8ad0d, 0x165ceb83, 0x4cbde1ad, 0x5fa0fddb, 0x4532ea5c, 
    0x30330ad1, 0x3e39ea19, 0xf368d9d5, 0x6a8f3e4d, 0x533411d7, 0xa9abc304, 0xc69e9c53, 0xb3a2afb5, 0x17bbbad0, 0xe48aa228, 0x288ac239, 0x6fb902a0, 
    0x56b4dd1b, 0xf7c7da91, 0xef1848ee, 0x15c77f80, 0xac17d7d4, 0xffdad7e9, 0x88fc8a00, 0xa1289ee3, 0xe4cbb14d, 0x91e438b7, 0x32923cd3, 0x376a2b3d, 
    0x97d6d0e6, 0xb7b751c4, 0x7b8400ff, 0xcc6a56c4, 0xaac65344, 0xf0647aec, 0xf4f30c7f, 0xbb4d41af, 0x31dcd606, 0x1baef5c1, 0xb39ef05a, 0xa4daaf1d, 
    0x78bebcb8, 0x275e01c8, 0xc9e90324, 0x9a47bbae, 0x567bf469, 0x98a289b8, 0x4a5d1d26, 0x35f6e49c, 0xc5867fad, 0x45b9d8d5, 0xce215714, 0x00455114, 
    0xda78cc15, 0x8eb3a2ed, 0x70bf3fd6, 0x0f7cc740, 0xa72bbefe, 0xd2573bae, 0xc47f1df5, 0x5c505cfe, 0xb5290445, 0x0eb61026, 0xcf742439, 0x6a8f8c2d, 
    0xb4f98dda, 0x14f1a534, 0x1e1eb760, 0xef9a15f1, 0x95782a6f, 0x48a6db5d, 0xdc00bf01, 0x0abf2bfd, 0x180c6d14, 0xaf07192f, 0xb5465ce5, 0x3b6a5de1, 
    0xd5257141, 0xfc88f1ed, 0x2bb9f1a8, 0x7d72a49e, 0x26d2abab, 0xd5227d9a, 0xa66822ae, 0x52578709, 0x8d3d39a7, 0xb1e15b69, 0xca457675, 0x4cb9a228, 
    0xa0288a02, 0xa0288a02, 0xa0288a02, 0xa0288a02, 0xa0288a02, 0xa0288a02, 0xa0288a02, 0xa0288a02, 0xa0288a02, 0xa0288a02, 0xa0288a02, 0xa0288a02, 
    0xa0288a02, 0xa0288a02, 0xa0288a02, 0xa0288a02, 0xa0288a02, 0xfdf5b202, 0x3addf445, 0xaf7da359, 0x3fc009b7, 0xe34aad31, 0x3e746f3c, 0xc0686bdb, 
    0x47a26af9, 0x3f927cc7, 0x5aebfca1, 0xd2d4e656, 0x7c89bc9a, 0x462de23b, 0xdaec4f5d, 0x649e798b, 0x810ea35b, 0xc6838c7a, 0xc29f833a, 0x0043e0ba, 
    0xe23cc040, 0xd652ebbc, 0xecd427ad, 0x7516acef, 0x12860278, 0x8d0b03a0, 0xc67372a0, 0xe815d347, 0x56b7ce70, 0x52a9dcf1, 0xb7f12eb3, 0x2aad09a6, 
    0x75a1cba5, 0x1d9aac62, 0x31571445, 0x14455180, 0xb96e5600, 0xa79d36a8, 0xd736324b, 0x1fe084db, 0x7295d698, 0x1fba331e, 0x60b5b66c, 0x63beb07c, 
    0x1f49be63, 0xadb4d6d0, 0x35a5a9cd, 0x3ae81379, 0x90daa2e6, 0xf18ed4b6, 0xb7482234, 0x194150a8, 0x78c66d04, 0xbad647fd, 0x0632828c, 0xd43faf01, 
    0xf549ab35, 0x15db4b3b, 0xa1005e99, 0xc2008a84, 0x9e6000e3, 0x77951fd9, 0xc35c32e9, 0x727fcc1d, 0xcd390e65, 0x55b9545d, 0x6415a98a, 0x4551b4d0, 
    0x14859873, 0x51054051, 0x864d2fd6, 0xdbca2c9d, 0xf74f185f, 0x5bae5e8d, 0xed23b7c5, 0x0facf656, 0x6ccc1796, 0xfa23c977, 0xb995d61a, 0xafa634b5, 
    0x59077d22, 0x165093be, 0xe6cf87fa, 0x728b24c2, 0x90110485, 0x3f9e3146, 0x2ebad697, 0x70a5230f, 0xa5d5bad7, 0x796ba5c6, 0xc2239362, 0x80226100, 
    0xe0c0b830, 0xdc15d99e, 0x8eb86389, 0xe4be883b, 0x9e731caa, 0xe55275b5, 0x56a22a56, 0x5114054d, 0x4521e65c, 0x55015014, 0x67a12bb5, 0x38304ba7, 
    0xa63e617c, 0x8807d6ac, 0x0d9d07ee, 0x0fb003b3, 0x9cdfb131, 0xd25a437f, 0x94a636b7, 0x2ea9e5d5, 0xcd5caa87, 0xe07bf67f, 0x4988cd5b, 0x2003e51e, 
    0xd731828c, 0xb35be58f, 0x40678e20, 0x30620518, 0x1df107e3, 0x3af7718d, 0xa3d6addd, 0x1465756d, 0x0620b4d1, 0x2e0ca0de, 0xb7273830, 0xc7b3d715, 
    0xfba24928, 0xce71a892, 0x4bd4d57a, 0x89aa5895, 0x8a363459, 0x1073ae28, 0x00288aa2, 0x2bb4f8ac, 0xd4a4d515, 0x6e996be5, 0x0ab5fd1f, 0x6de018a3, 
    0xd63a06ec, 0x93511585, 0x6d1aba8b, 0xb4d4546c, 0xcd4e1d9b, 0x9459a5ad, 0x20610812, 0x03fe23c8, 0x4db3b04f, 0x483bca3e, 0x1822dddd, 0xae27c805, 
    0x2856017b, 0x5bca29a7, 0xb837b9b1, 0x04154551, 0x40511485, 0x44875005, 0x4d564db2, 0x96b8564a, 0x6d00ff77, 0x38c6a842, 0x8a017b1b, 0x645445bf, 
    0x9b86eee2, 0x2db5155b, 0xb452cb32, 0x6516696b, 0x38188204, 0x03fe23c8, 0x4bb3b14e, 0x63ed380b, 0x608c7477, 0xb99e2017, 0x454f05ec, 0xdd524e39, 
    0xc2bdc98d, 0x24a8288a, 0x008aa228, 0x451a9c2a, 0x9a9c7a9c, 0x6779868c, 0x2ad4dd73, 0xdf068ef1, 0xaa285741, 0xd05d9c8c, 0x1d626bd3, 0x51d3c646, 
    0x2cf236b4, 0x300409aa, 0x2a7f9071, 0xce962d2d, 0x76743bd6, 0x056d8c75, 0x007e9cb1, 0x9453d454, 0xdcd82de5, 0xa228dc9b, 0x8a42828a, 0xab02a028, 
    0xb0d6695b, 0xb95f12ea, 0xf79c599a, 0xc7380a75, 0xaba06f03, 0x71525334, 0xad4d4377, 0x5b10ea86, 0x07a6166a, 0x08121449, 0x7f90e060, 0x02b4652a, 
    0x5720d9d6, 0x0b300867, 0x00fc3863, 0x94aa68a9, 0xdcd82de5, 0xa228dc9b, 0x8a42828a, 0x9e02a028, 0x9bdabad0, 0x12881896, 0x02d0670b, 0x53a6987f, 
    0xbab05b75, 0xb7715614, 0xc99d64ef, 0x3fe1ec1f, 0x5484aba8, 0x8f70999d, 0x8eb6b033, 0xbbc5c5b7, 0x73d7182b, 0xf1e3ed64, 0x9052f8eb, 0x2218c141, 
    0x7de0edb3, 0x0cb6551b, 0x2a91a4c4, 0x6339c9b9, 0x8aeff3d4, 0xf6ddbad5, 0x05064ba9, 0xe4989f98, 0xbf27cff3, 0x5170aad6, 0x8e827348, 0x455154c4, 
    0x51146664, 0x32150045, 0xc6f64eda, 0x023153e1, 0xa08e6c41, 0xa8987f02, 0xb74feb6a, 0x61745b41, 0xfc7049e6, 0x4a6d9c67, 0xd94945b8, 0x3bf30897, 
    0xa6aded15, 0x135866bb, 0x00c9287b, 0xefa09f8c, 0x104454f8, 0xab084670, 0x657ff096, 0x2c07106a, 0xc8014552, 0x4c9fb125, 0x4385df9e, 0x4cdeb879, 
    0x9c59595d, 0xf2e418b6, 0x54bdd773, 0x3887a2e0, 0xd190ab28, 0x98911545, 0x00144551, 0x367dab55, 0x3c03eaee, 0x498d6e31, 0xe480db52, 0x719f7b00, 
    0xd1a16b55, 0xf186c6e4, 0x769af929, 0x56d000ff, 0xd94909ae, 0x3ba90897, 0x8b342d33, 0xb76c03f9, 0x8064b42d, 0x3ccb9fc0, 0x380822d5, 0x53570423, 
    0x993e6d65, 0xdaf9fb71, 0x3ff57175, 0x507baea9, 0xe1467d67, 0xcfc488e4, 0xfc43312b, 0xebc73939, 0x4351704e, 0xca55149c, 0x664551f4, 0x45511466, 
    0xc37e1500, 0x4875d443, 0x6f3b5b5a, 0x93b61535, 0xf10757bd, 0xbb42f53e, 0x740202cf, 0x090e907b, 0xf9fee39c, 0x76575115, 0x7652112e, 0x852f3567, 
    0xbb50b8b5, 0x5d073658, 0x207facae, 0x0e82206b, 0xe915c108, 0xa79e4dfa, 0x5f3bc5a7, 0x40d29b5e, 0xc7a88328, 0x39aff5b9, 0x52874cd4, 0x306269b9, 
    0x63cc4abb, 0x9c93c33f, 0x876c9453, 0x95ab2838, 0x838aa2a8, 0x288aa230, 0x634faa00, 0x456aa971, 0x388e2511, 0xc26e1ed7, 0xfc783d57, 0x6857e5c7, 
    0x5db98caa, 0x5db98cca, 0x0eafcbcc, 0xf643d95e, 0x2eee2f99, 0x464674ca, 0x27c73de3, 0xb862b4da, 0xa4789b6b, 0x00db2a75, 0xcfa95460, 0xaaa8d3d0, 
    0x9295f994, 0xab3be5b0, 0x59511405, 0x45511490, 0xb52d1500, 0xed7397a4, 0x7d80c80c, 0x510364fc, 0x72195551, 0x721995bb, 0xb4ef96bb, 0xcf8fb7c6, 
    0xfc098713, 0x7ffe3921, 0x1baa3d4e, 0x75ba878b, 0xb0bd4f92, 0x053de729, 0x4e394545, 0x6e58c9ea, 0x45415657, 0x14105414, 0x15004551, 0x92a0a1b5, 
    0x11a41119, 0xf678df82, 0xaa68b1e2, 0xca5db98c, 0xce5db98c, 0x74b83481, 0x5027d7d0, 0x36461549, 0xc45f0780, 0x4bf5b2e6, 0xd37c7fc1, 0xabdac0a8, 
    0x02c019d3, 0x524ed1a9, 0x7243b2ba, 0x280ab2ba, 0xa280a0a2, 0xae00288a, 0x1637c1df, 0x291769f1, 0x9671c435, 0x803be098, 0x22aee87e, 0x3bbba88a, 
    0xbb721995, 0xa68de69d, 0xef04fa69, 0x1cb72675, 0x411ba9a0, 0x93113f0a, 0xfb35e59a, 0x662db5f8, 0x1141a87b, 0x184901b1, 0xd68c0124, 0x5d391475, 
    0xeaca0d59, 0x511405c9, 0xd9ff4152, 
};
};
} // namespace BluePrint
