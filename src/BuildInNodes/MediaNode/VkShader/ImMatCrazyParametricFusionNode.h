#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <CrazyParametric_vulkan.h>

namespace BluePrint
{
struct CrazyParametricFusionNode final : Node
{
    BP_NODE_WITH_NAME(CrazyParametricFusionNode, "CrazyParametric Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    CrazyParametricFusionNode(BP* blueprint): Node(blueprint) { m_Name = "CrazyParametric Transform"; }

    ~CrazyParametricFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::CrazyParametric_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_amplitude, m_smoothness, m_pa, m_pb);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _amplitude = m_amplitude;
        float _smoothness = m_smoothness;
        float _pa = m_pa;
        float _pb = m_pb;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Amplitude##CrazyParametric", &_amplitude, 1.0, 200.f, "%.0f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_amplitude##CrazyParametric")) { _amplitude = 120.0f; changed = true; }
        ImGui::SliderFloat("Smoothness##CrazyParametric", &_smoothness, 0.0, 1.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_smoothness##CrazyParametric")) { _smoothness = 0.1f; changed = true; }
        ImGui::SliderFloat("PA##CrazyParametric", &_pa, 1.0, 10.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_pa##CrazyParametric")) { _pa = 4.0f; changed = true; }
        ImGui::SliderFloat("PB##CrazyParametric", &_pb, 1.0, 10.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_pb##CrazyParametric")) { _pb = 1.0f; changed = true; }
        ImGui::PopItemWidth();
        if (_amplitude != m_amplitude) { m_amplitude = _amplitude; changed = true; }
        if (_smoothness != m_smoothness) { m_smoothness = _smoothness; changed = true; }
        if (_pa != m_pa) { m_pa = _pa; changed = true; }
        if (_pb != m_pb) { m_pb = _pb; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("amplitude"))
        {
            auto& val = value["amplitude"];
            if (val.is_number()) 
                m_amplitude = val.get<imgui_json::number>();
        }
        if (value.contains("smoothness"))
        {
            auto& val = value["smoothness"];
            if (val.is_number()) 
                m_smoothness = val.get<imgui_json::number>();
        }
        if (value.contains("pa"))
        {
            auto& val = value["pa"];
            if (val.is_number()) 
                m_pa = val.get<imgui_json::number>();
        }
        if (value.contains("pb"))
        {
            auto& val = value["pb"];
            if (val.is_number()) 
                m_pb = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["amplitude"] = imgui_json::number(m_amplitude);
        value["smoothness"] = imgui_json::number(m_smoothness);
        value["pa"] = imgui_json::number(m_pa);
        value["pb"] = imgui_json::number(m_pb);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf551"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_amplitude   {120.0f};
    float m_smoothness  {0.1f};
    float m_pa          {4};
    float m_pb          {1};
    ImGui::CrazyParametric_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 6659;
    const unsigned int logo_data[6660/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa9a22820, 0x00fff76a, 0xb76cbad9, 
    0x18756923, 0x760bdd40, 0xc095dda4, 0xda7345bb, 0x6fae881f, 0x7bcbbeef, 0x4d177114, 0xb952edd1, 0x57fadcef, 0x52324a43, 0x51144057, 0x15055045, 
    0xdde2c5c7, 0x20f1ea4a, 0xf3550b86, 0xc39b0864, 0x64e0641c, 0x5e57fae7, 0x72288281, 0x0692630b, 0x884a3f01, 0x16604bcd, 0xeb0b2a8a, 0x71616b83, 
    0x14ddb870, 0xa11bca6c, 0x04567120, 0x1a1d55f4, 0x4c474dfe, 0xab50e28e, 0xaaae2c29, 0x7d820008, 0xa957b17d, 0x0a707527, 0x3f8f3b2a, 0x18b37fc8, 
    0x3cf9d8c4, 0xdfe74ac0, 0x880f8915, 0xaed1b9a4, 0xd2388a27, 0xf17cdcf2, 0x529f76be, 0xf678003f, 0xe096e4a4, 0x8148d16f, 0x0b722882, 0x01069263, 
    0xd61d4a3f, 0x0a766734, 0x9c5832aa, 0x806a3d00, 0x1a9d2b5a, 0x6aa8a3f6, 0xdaa46f4d, 0xcc4162c4, 0xf11d8693, 0xdb03a39e, 0xfb951faf, 0x3b3b75d9, 
    0xeb7c6e19, 0x62213157, 0xfe0c43be, 0xd314ea3b, 0xa2d30cd5, 0x503bfdb9, 0x632bf5d7, 0x7a7a1471, 0x90b86228, 0x421f3938, 0xa378ab6a, 0xf2bcb152, 
    0x55043bb5, 0x0423dc18, 0x92837b1e, 0x34fe430f, 0x2cdca2bd, 0x22535475, 0x26852795, 0x8a24b78d, 0x90314e19, 0x319c537a, 0x6c400846, 0x07c84870, 
    0x5a085ae9, 0xb148b229, 0xc239d244, 0x19c72ca0, 0x494b15c0, 0x86529bbf, 0x638da64b, 0x012267b7, 0x044745fc, 0x7b7b7d9e, 0x6c7da577, 0xbd2afa05, 
    0x7d1aecf5, 0x315c5cab, 0x1900bd0a, 0xf5007d2c, 0x108f3bac, 0x6f6aaf6a, 0x96b0f42c, 0x986492ab, 0x70ecb0e4, 0xa5bffe08, 0xe9802427, 0x1f3eae28, 
    0xb77b6a17, 0xc41b63cb, 0x2bb6b5ad, 0x72863d2f, 0xe90a7f70, 0xd756dd34, 0x6ccb8055, 0x6438e5c7, 0x327d196e, 0x7146e93d, 0x72b1c396, 0x5eaaa18a, 
    0x09f169dc, 0x42ce87a3, 0x2455ed42, 0xc78eef83, 0x751c7ba6, 0x952217cf, 0x8d268527, 0x198a24b7, 0x7990314e, 0xc2d65715, 0x5314451f, 0xc647ae00, 
    0xe0aec117, 0xb4bc25b2, 0x7c07c8c3, 0xbff500ff, 0x9dd5759d, 0x5a04890e, 0x5946eab3, 0xc3f39964, 0x9c3e0363, 0x3451717a, 0x8e86ace4, 0x5700ff4a, 
    0xd64a7db5, 0x488a4ff3, 0x292b000c, 0x9d0e6400, 0xdd15a70f, 0x0a4f2ac3, 0x3aca194b, 0x1ad40786, 0xe1d35183, 0xb40dedd4, 0x089282e5, 0xe911d42b, 
    0x5bb4b14e, 0x92ed381b, 0x608c7547, 0xf871c617, 0x5b5c8c52, 0x5114c502, 0x3fe1085a, 0x7ec834b5, 0x5726686b, 0x32704917, 0xbb1f2007, 0x35c1f49c, 
    0x573c41dc, 0xb8d02430, 0x5865dc78, 0xf0961477, 0x1516788b, 0x17065562, 0x3fec403d, 0xb646c501, 0x9ec91d49, 0x128b7817, 0xc7c64564, 0xfb7aa43e, 
    0x71d67b8c, 0x15cb888b, 0x44d9e287, 0x12ab427a, 0x5c954912, 0x9f1cc901, 0x5a9f5be9, 0xb76071ab, 0x244d5057, 0xde06b6af, 0xdd6d8cb1, 0xf78c27cf, 
    0xba92aaf5, 0x0ebf8cb0, 0x7b7b47df, 0xb20249a9, 0xb18ece42, 0x08121cb0, 0x6fc5f127, 0xa0a74355, 0x1cdfbed4, 0x9b8c1caf, 0xb836461d, 0xb58e91ed, 
    0x82238668, 0x5344e107, 0x2f08cc4a, 0xedd360af, 0xc2e1e25a, 0xd81df4aa, 0xf37a0ffa, 0xb9c4ebdb, 0x33bf3c58, 0x5989c77a, 0x62b137b0, 0xb16ca7c7, 
    0xc58641af, 0x2c4f9823, 0xfb30718f, 0xa78c4bb2, 0x00403b18, 0x4073c00f, 0x695e85b1, 0xc0342b53, 0x87e52883, 0x831335d3, 0xeb08cb90, 0x06a32b22, 
    0x0e0c1956, 0x5fb51e41, 0x2cee8151, 0x62018925, 0xc6013b40, 0xe74a0ef0, 0xe3c740b6, 0x69c60056, 0x8ed04d6b, 0x5ac4db56, 0x33aba675, 0x12689a7d, 
    0x72935465, 0x8ca4aef2, 0xcf439f91, 0xa6e63b7e, 0xa7b906f1, 0x1079a5cf, 0xcc4c09dc, 0x28d409b9, 0x4ca79f20, 0x6dbc357e, 0x8d664c94, 0x9763369a, 
    0x3b7e780a, 0xbc9ecb8f, 0x7d53710e, 0x6665396a, 0xd29733ae, 0x45a749fc, 0x9890e93d, 0x325f9622, 0x494ed835, 0xee991e00, 0xd5ce5a3f, 0x520d9bf5, 
    0x60867647, 0x9047aa76, 0x31cb1938, 0x0750afe7, 0x9abbce4f, 0x2459a08d, 0x012e210d, 0xd0fd5005, 0x3d777c47, 0x620cfa3a, 0xb59a8493, 0x267de5c2, 
    0x8d4d231f, 0x4b204604, 0xaa7ac632, 0xf70112b3, 0x52ab19c1, 0xf2c49048, 0x1451dbc8, 0x0ed813b3, 0x588eeab4, 0x98a5ac44, 0xf1425eed, 0x873ff68c, 
    0x5600ff6f, 0x8495b534, 0x9a117d47, 0xec6fd0cd, 0x80ab53c5, 0x75d42b41, 0x528d1f03, 0xb5ededf0, 0x6dcb9ede, 0xf9ca1195, 0x3354c646, 0x1ccf1d16, 
    0xb5c63ee3, 0x7e188f69, 0x18a12309, 0x3fe72038, 0xb595d6e7, 0xecba19b8, 0xf1cc8459, 0x09422c49, 0x2e0f7123, 0xc0fc8abb, 0x3f6f0377, 0xbec09ae1, 
    0xba373cf1, 0x33fbb250, 0xb9aa5846, 0x1014005c, 0xe9f81e78, 0x66d7d4db, 0xb302558a, 0x71632017, 0xc5b94fc6, 0x2512fb57, 0xde85b8d0, 0x30d1bb1e, 
    0xc9794216, 0x6afdbe1e, 0x63f61665, 0x04f10439, 0xb2f5ad11, 0x6600ffc0, 0x719f91bc, 0x3e0ce4c6, 0x4e9f0e6c, 0x5be9f778, 0x2b6b14fa, 0x32147b4b, 
    0xccac1441, 0x9cdff815, 0x8c738e73, 0x4dfc7370, 0x64cde8f8, 0x99873397, 0x470ae3dd, 0xc9ee4f90, 0xe3bf23f5, 0x59ea4cc5, 0x2494ab4a, 0x9101b811, 
    0x28c533ee, 0x03aba7c1, 0xf6f7c41b, 0x5ab26990, 0x9d65ec4c, 0xa34e457e, 0xb27d821c, 0x5ccdef31, 0xcf9eedd0, 0xc185b646, 0x119c140c, 0xc1493282, 
    0xd53c8f1d, 0x240125cf, 0xcc6d160c, 0x739f0447, 0x63c00ff8, 0x97af3ea5, 0x8a82b8de, 0x481a4b63, 0xaf8ab491, 0x38297626, 0x1db88e2d, 0x1440f5e9, 
    0x43dc7054, 0x9ae08572, 0x161c5439, 0xe9330c46, 0x51993dc5, 0xaa82dd19, 0x0027968c, 0x142d400a, 0x788ea5c8, 0x92c890c4, 0xc0c8e821, 0x248af883, 
    0x3240289a, 0x9e8391c8, 0x32e88059, 0x004d407f, 0xa1298a3e, 0xc040b9d0, 0x1e2019b0, 0x0ffce740, 0xe2074ce5, 0x4d45518c, 0x284631c0, 0x9d51e1a0, 
    0x92515588, 0x4501e0c4, 0x294631c0, 0x21966423, 0x19af4e2c, 0x83c0cae8, 0xaeacd0f8, 0x2b83d181, 0x410e820c, 0xc5055c14, 0x2e8aa218, 0x8ddeb701, 
    0x29eaf4be, 0x76e38a5d, 0xdeb7d1fb, 0xdd584e9d, 0x8b6654c6, 0xefdb23b0, 0x947adf46, 0x761f20c3, 0x0dd84599, 0xdf46efdb, 0x5d14757a, 0xefd9c485, 
    0x757acf46, 0x57cc1c15, 0x8ddeb31b, 0x92eaf49e, 0x12942538, 0xea38908b, 0x7661e628, 0x8ddeb343, 0xda60f59e, 0x674c064e, 0xa3a122f0, 0xddd88599, 
    0xf76cf49e, 0x334751a7, 0xf676990b, 0xbbabf5e5, 0x8a9254b9, 0xe048c490, 0x7e1c032e, 0x0cd7a226, 0x28162cb3, 0x87e1525d, 0x07b0d19a, 0x3a52e566, 
    0x2f3fb67f, 0x6b5b967a, 0x7943b598, 0x1b49920c, 0x27b78747, 0x23c7c8e5, 0xa7e30027, 0x8ce4e018, 0xd8aa9fe6, 0xd162a1be, 0x5c862943, 0x3f121c65, 
    0xfcc78e03, 0x466baaf4, 0x2e90248b, 0xd6b6639f, 0xb1303bdf, 0x240383c4, 0x39197ee0, 0x9d6bea27, 0x2eaf2dd5, 0x2eee2e2c, 0x399eddef, 0x41b6b47c, 
    0x06f67eb5, 0x3b72be47, 0xe89a1ce3, 0x9f7cf363, 0xd745e122, 0xb7097644, 0xa7927a7e, 0xe08c608c, 0x8a71fc9e, 0x23b4afe7, 0x6dc6a877, 0xdd092f2e, 
    0xf8c63386, 0x0c790288, 0x1cf4c8d8, 0xae666afd, 0xc16704b4, 0xd769a86d, 0xefc60257, 0xca48916c, 0x65e60762, 0x5e712755, 0x7ba66384, 0x582dec9a, 
    0xfb703aea, 0xc4ac2a5c, 0x80a788ac, 0x1e64c4ca, 0x4a8f8cdc, 0xfdf0b7c8, 0x5c206aea, 0xdb52576a, 0x39580c28, 0x773fe75d, 0x733b12ef, 0xadeb00ff, 
    0x2575a35b, 0xdb6c4ba9, 0xa85c1839, 0x18cff891, 0x60d0d1ce, 0x1a1cdf93, 0x831b1721, 0xb863d121, 0x599b4bb7, 0xde52f3a5, 0x18b1915d, 0x3e0eda38, 
    0x4e7f8c9c, 0xf6d3db94, 0x75ca6a4d, 0xc5186ee1, 0x9c240320, 0xc6ef8171, 0x522bfb4f, 0xf667dae8, 0xe48d905d, 0x176c65f3, 0xd8a3e47f, 0x4ceb537f, 
    0x5d9acffe, 0x39126a7c, 0x912d8a54, 0xafcff7a2, 0xf83ff53c, 0xab9a27ef, 0xc905543e, 0xce69db50, 0xc5c0ca96, 0x8caa1111, 0x6700079e, 0x626241ad, 
    0xe016d1b1, 0xf9dc0fa3, 0x6c66f7d2, 0xa9278965, 0xe85e9eab, 0x6c66b77c, 0xc1d9d2ae, 0xc118f93e, 0x307654fa, 0x41a2ad3d, 0x262baf24, 0x4bce9141, 
    0x00ffd773, 0x8bdedbad, 0x99b6226a, 0xb7f76001, 0xd9edba2b, 0x00ff9891, 0x6a235600, 0xef330efa, 0xefb1a69e, 0xedae6faf, 0x25de3227, 0x8aa1b2ba, 
    0x4cf331da, 0xf0d4efaf, 0x07c77170, 0xb0b5d68a, 0x77bdb1b8, 0xb6e4e98e, 0x9d188b95, 0xeb381577, 0x03f69cb8, 0xa3c65fbf, 0xaf2ed2bb, 0x6f86b73c, 
    0xd272b9b1, 0x8f8a9d84, 0xf71cb870, 0x35d7dfed, 0x02ab4d9b, 0xaaa33433, 0x6b4b5f58, 0x2b96296f, 0x72240b77, 0x63376e67, 0xcee5e320, 0x49e8f1ec, 
    0xd6d239ce, 0xa796046d, 0xb5cdb553, 0xefe64bd4, 0x07608609, 0xb7c761dd, 0x25c5f45c, 0x6b798996, 0xf0e25a76, 0x0070c0de, 0xeb31dd79, 0xa11fe495, 
    0x746fa938, 0x46fd9bdb, 0x22bc6629, 0x455822da, 0xed39941a, 0x04097dce, 0x6806ecf1, 0x19b67c51, 0x8ef6af3b, 0x18801c99, 0x4d65d1dd, 0x679ccaad, 
    0xe3f43182, 0x8dd2131c, 0xa47f7336, 0xf79b2cc1, 0xfd1c1e49, 0x46424fd2, 0x548c7a3a, 0x79ed7697, 0x79b82d6b, 0x91c0dd20, 0xc763cf08, 0xe9dd6eb7, 
    0xc4fe8165, 0xca93b760, 0x8e119b6d, 0x5e6faf58, 0xce00ffbe, 0x6c88daae, 0x6ed5695e, 0x2c76c23c, 0x9c002368, 0xc6c9ee60, 0xca8f9c71, 0x54878488, 
    0x00ff2eb8, 0x3482c62a, 0x3907780c, 0x23c97424, 0x22e7b7af, 0xa4ee08db, 0x65aa3d9e, 0x7270e6db, 0x1ddf07d8, 0xf0c76ec7, 0xcf71ac05, 0xfb49cc2d, 
    0x970d17f9, 0x19073620, 0x95e2f8ed, 0x71ac2a89, 0xd3ae37ea, 0xe1a148e2, 0x3bc06121, 0xdf114b99, 0x767b9cee, 0xf5859aaa, 0x22c4a5fb, 0x9280a148, 
    0x9b9617a8, 0xd467a49d, 0x678ca31e, 0x64cd68bd, 0xb43bf65e, 0xc064659e, 0x46081f28, 0xedc1c879, 0xb44e87fc, 0xccb5a6f3, 0xdbdb8d61, 0x3432bfc9, 
    0x8ff1a624, 0xcfe9f54c, 0x6d5a2a3d, 0x1eed8c14, 0x49c6522d, 0xb956a5ed, 0x1d9989b2, 0x558f3a19, 0xdfd3e9f5, 0x2696a4de, 0xbe58f5d2, 0xee6d9bca, 
    0x3c63899c, 0x3da83722, 0xf84ecf89, 0x685aaefc, 0x657263ef, 0x194f8b1a, 0x5c3ec9c7, 0xccc7738c, 0xc5f17d06, 0xbaf07435, 0xd435df9b, 0xa050b1f2, 
    0x407e0039, 0xd463f801, 0x06d2a2d0, 0xb0247943, 0xad4cf66a, 0xd16d8e29, 0xf44a80ba, 0xf7b1e3c8, 0xb15a1ff4, 0xe5158f3c, 0xcc0a50b0, 0xe3391fc5, 
    0xce31cc0a, 0x454a4f07, 0x97700fb3, 0xe9341f57, 0xb563989d, 0x3b803132, 0x6e5f4ffd, 0x45da7b00, 0x2e77dc25, 0x422092b9, 0xcfe5c71d, 0xd28f335e, 
    0x4d87989d, 0x586119e6, 0x972fa8d8, 0x03540e20, 0xfdf83ec7, 0x2ec89068, 0x48450261, 0xf5c0edce, 0xfd008e73, 0x964fe14f, 0x60409924, 0xe0540e32, 
    0x19b1a712, 0xda964def, 0x578aa529, 0x4a225e52, 0x3d63c410, 0x4592547a, 0xec2dc93a, 0x61191971, 0x4c30b331, 0x8f1124a9, 0xb6df7398, 0x3bf5392a, 
    0x816149e5, 0x54dc847c, 0x1e331f39, 0xbe9e1e98, 0x4dbde7b8, 0xcb729c25, 0xcf17ee14, 0x6490188b, 0xa707477d, 0xdeebb95e, 0x676445ad, 0xd076038c, 
    0x87627e80, 0x39c6b96b, 0xb5d3e320, 0xa5d89b26, 0x759416b9, 0x3b96263b, 0x89b865d9, 0xe9ac0864, 0x20c0c983, 0xfec9c893, 0xad194c55, 0x66b78635, 
    0xcb67489a, 0x2c9ff1ae, 0xa7276efa, 0xadf7f407, 0x1b1e3d2b, 0xb43f6916, 0xf9889167, 0xb30d475a, 0xcf0802dc, 0x785b866a, 0xd43dd97e, 0x8cd2042a, 
    0xd3b76c6f, 0x8ed3e9a9, 0xec2c0a3a, 0xbc619581, 0x6caed567, 0x2b2204db, 0x394e0726, 0xa422bfcf, 0xcd7d9fb5, 0x3b3bbbcd, 0x4092c0c2, 0x01e40600, 
    0x4feb418f, 0x1d28d682, 0x49c65de4, 0x89d9bd71, 0x7ed08f2d, 0x5860e814, 0xee9c8215, 0x03edc46d, 0x0ae0b927, 0x1585e46a, 0xd37e1535, 0x34c47cc8, 
    0xed51d454, 0x8698833c, 0x3d8a9a8a, 0x107390a7, 0x475153d1, 0x620ef2b4, 0xd8582a2a, 0xd166e7b2, 0xc7f520fc, 0xa33ab5d3, 0x980bf9da, 0x8a9e8a82, 
    0x7390af3d, 0xd1535110, 0x0ef2b547, 0x7a2a0a62, 0xb571a86b, 0x504f5991, 0x205f7bd4, 0x3d4519e6, 0xe7a348f7, 0x8e732f31, 0x2852f84f, 0xda0543da, 
    0xcf5990ab, 0x05fce738, 0x27f2b647, 0x24156d98, 0x66087667, 0xa0678c61, 0x8d00ff3e, 0x47546d46, 0x8f89c988, 0x1f20313c, 0xdef668a6, 0x5314cc41, 
    0x36d685a3, 0x23297157, 0xda678c1c, 0xe1105186, 0xdde90099, 0x5a00ff47, 0x1ce46d8f, 0xc6a568c3, 0x7c457748, 0xc841248e, 0xa5f2cf1f, 0x65556456, 
    0x39b7b1cc, 0xfffaa3ee, 0x1ead3f00, 0x8439c8db, 0x5151aca2, 0xcc85bced, 0x2ca7a257, 0xe33c297b, 0x51af00ff, 0x9f8c314d, 0xfce9319d, 0xe46d8f42, 
    0xa768c31c, 0x89cab924, 0x8b7f1003, 0x4f31fd1c, 0xba5c08f3, 0xefc91815, 0x90bf3d8a, 0x56511173, 0xa90c8315, 0x47517b04, 0x620ef2b6, 0x6f219ea9, 
    0x8ff882f6, 0xd4deed6e, 0x824825e9, 0x98bb6097, 0x7a72cf28, 0x0c58820a, 0x468079ba, 0xdaed4aaa, 0xd3f8815b, 0x1bc9dee6, 0x589941a4, 0x8f3cd636, 
    0x6fcf765c, 0xc987b24a, 0x233a7134, 0x85431ab6, 0xbd9a6400, 0xb4a36c6e, 0x90f1ae79, 0x93e3064e, 0xa9aca0d3, 0x279dd57c, 0x322a338e, 0xcaf05480, 
    0x1d67e439, 0xfcf43372, 0x266645ad, 0xbb10e48d, 0x64699317, 0xe0009e4c, 0xc3e918e7, 0xd9a57e7a, 0xa7bbdc51, 0xf16aa44f, 0x2b43d9b7, 0x436255af, 
    0xa8667c0f, 0xd2b49179, 0x13938fc4, 0x0441606d, 0xd3a7067e, 0x50e382a4, 0x73c37e91, 0x6f77cc6e, 0x38e740ce, 0xeb314605, 0xdd9a5493, 0xe6eed5a1, 
    0x00351a78, 0xc40cbb01, 0xff633c63, 0x51faaf00, 0x137b6077, 0x76268924, 0x07a76d30, 0xa1f4a107, 0xe840241d, 0x157acaea, 0xb6a00639, 0x4bfbe089, 
    0xa57ce732, 0x183902d4, 0xf9f34f1f, 0x488222d3, 0x950fa374, 0xd8b0cab9, 0xf5a41e58, 0x72d17a3c, 0x1dcc514b, 0x556cd85d, 0x504f3262, 0x736e9f3a, 
    0x8845664a, 0x71da494a, 0xe9790e8e, 0xe69142c5, 0x329648ca, 0x7436ce0f, 0xf4019eeb, 0x3a5283e7, 0xdbc6b1b4, 0xdb907a17, 0x513ff458, 0xce489259, 
    0xa9c78da9, 0xa935f7c0, 0x6d62c3a7, 0x32c05b1e, 0x20e6031b, 0xfab003e3, 0xc6ca3cd6, 0x3b289c48, 0x469e931b, 0xff3d3d46, 0x63bd4a00, 0x3343d26c, 
    0x5a480b47, 0x1fd3135c, 0xf6c8f12a, 0x9ae69eeb, 0xf5724765, 0x6535d180, 0xc99d6771, 0xf70892d7, 0x327facc1, 0xe3589a26, 0x9453de7d, 0xecf1603c, 
    0xbd484b6b, 0xc6925717, 0xb1db5bda, 0x6eab8305, 0x8020fceb, 0xd6fbfc00, 0xd98fdd7d, 0x0c867b35, 0x1b00b676, 0x1fbfc7f3, 0xd59b26e7, 0xc6b5560e, 
    0xf3a35109, 0xc9198533, 0xd6c71823, 0xc4a2d39a, 0xc746f5b2, 0x070090cd, 0x1535cdb9, 0x235286e2, 0xc0122341, 0xf813642b, 0x2b93a3e2, 0x29321c63, 
    0x36551d69, 0xe7f79ce7, 0x4f909b9a, 0x1f6938b8, 0xfaca29ee, 0xcebf8e11, 0xceb39190, 0x510e6494, 0xfaf43847, 0x6fdf009a, 0xf3c57f24, 0xe7a90702, 
    0x642ed1fa, 0x7b535989, 0x1cb4032b, 0xd63c0f72, 0x0b662562, 0x02a79e8c, 0x4b8bb4b6, 0x9aa46c09, 0xf82a01f1, 0x601c7107, 0xb0de0776, 0x463256e4, 
    0x72da41c1, 0x8fe97972, 0x21d1da4a, 0xb5cd5b32, 0x2c27130b, 0xa30d0041, 0xaddf9e8e, 0x2da8dc52, 0xe810164b, 0xb6c8ba3a, 0xaf93c16a, 0x7c8fc0cc, 
    0x632e5813, 0x8f441317, 0x8772cabb, 0xbb35748c, 0xe5a55fa5, 0x390d90dc, 0xf397caa1, 0xf78f7c23, 0xff63b473, 0xd758af00, 0x57cb22f6, 0x69c70ab8, 
    0xfeec06c6, 0x0e7b537c, 0xa6e85a49, 0xa27d115f, 0xce9d812c, 0x830375a4, 0x4ee13ff4, 0xcaac142c, 0x7d808f72, 0xf31f8cf3, 0x511629fd, 0x1559061c, 
    0x0024c963, 0xe235cdd9, 0x16b0642b, 0x20178e3b, 0x3f9e00ff, 0x850541a5, 0xc0f3a66c, 0x2605fd3c, 0x1f66a04a, 0xb9674c37, 0x051e42a4, 0x760c7b2a, 
    0x082c4ee9, 0xf38f1c57, 0x5c2341cd, 0x71a7040e, 0x9f8ec263, 0x0e3a7495, 0xd8dca597, 0xbae52d4b, 0x72601231, 0x851d1847, 0x1fb9cf73, 0x18c35078, 
    0x6fbac23e, 0xc25ec40d, 0xca1c1462, 0x803d4872, 0x55eba7e3, 0xbb82cb1d, 0xf8a7611d, 0x1659596b, 0x27abdcce, 0xfd8ca05e, 0xdc9a996b, 0x0c4ddd5b, 
    0xbbdc1f32, 0xc1a11b26, 0xd535fe3c, 0x7a8cfa68, 0xeb96e485, 0x65b835a7, 0xc98d64dc, 0x4621db03, 0xedd49e2b, 0xb957c716, 0x8d803040, 0x23388fa5, 
    0x6bcb693d, 0x74ad2495, 0xddb02053, 0xf2c0c817, 0xde27c008, 0x0e141c9e, 0x9906773a, 0x46bed918, 0xe01c03f9, 0x84418af1, 0x51c13bb5, 0xea18c083, 
    0x8a820c6a, 0xfc9e4590, 0xbff2287d, 0xa32bfdda, 0x7cb947da, 0x5aad8ec8, 0x65ac3ddf, 0x39811515, 0xbff2a1e6, 0xf228fdda, 0x29fddabf, 0x1ff748fb, 
    0xafb62d32, 0x03221c31, 0xda9d54eb, 0x2cc72e47, 0x95779a7a, 0x47e9d7fe, 0xe9d7fe95, 0x708fb547, 0x8a8e4ce6, 0x00ffca93, 0x68a4f46b, 0x1e4ff2f6, 
    0x23eda5b8, 0x4ac85cdc, 0xe10ecd29, 0x883dc8f7, 0xf57e79a7, 0xba22d21e, 0x5ab6ab23, 0x3451969c, 0x66b01a69, 0xf2554dce, 0x4a00fffd, 0x94fe7b0a, 
    0xa0ae487b, 0xb54563a5, 0x58b882eb, 0xc9eb53e3, 0x6924d9ac, 0x66b1bb5c, 0x2e4d9263, 0x368af3cf, 0x7b94fe7b, 0x72a3be58, 0xb66bcab8, 0xc752c8c5, 
    0x4aad178e, 0xf49b3d63, 0xa79d30a4, 0x8bdd8063, 0x5a00ff0c, 0x7445a43d, 0x1e624146, 0xe667ab3c, 0xbf3e6304, 0x0b60bafe, 0x791313e6, 0x1be51c72, 
    0xc7791ea3, 0x8955d4e1, 0x3240962d, 0x0ea32348, 0xf743a008, 0x73ec3677, 0x59735e96, 0x4357c4f3, 0x0cef634b, 0x614f3200, 0xaf7e3a5a, 0x460b9f2e, 
    0x6d862391, 0x11d56cd9, 0x88615c00, 0x6a1d6300, 0x8f34d8bb, 0x0ecee7b9, 0x1e01c847, 0xb447ebd9, 0xb152604b, 0xba25febe, 0x12c3422a, 0x644d5e9f, 
    0x2b4f3349, 0xd85dec48, 0x4ba25a92, 0x56171b21, 0xb6f8e740, 0xe669fd93, 0xc87736d4, 0xe06c0fec, 0x44dd947e, 0xf7951bf7, 0x6006942b, 0x7ddc65f2, 
    0xbf90d7d8, 0x00ffd4e7, 0x8e60794a, 0x1876f91d, 0x7ffd1c54, 0xd92f75fd, 0x581971ca, 0xce09f6d4, 0x02cb697d, 0x2739c8a9, 0x9e9a3ca9, 0x31e88a78, 
    0xe92767f3, 0x070f0648, 0x67934a8f, 0xe93d1bbd, 0x886e2273, 0x09f06a1b, 0x81a0908f, 0x00ffa7d7, 0xfee9afaa, 0x21d2b920, 0x70619568, 0xe41c715f, 
    0xfbaaf5f6, 0x04a6e93d, 0x4f309263, 0x73343852, 0x951ab3a5, 0xf1a535b6, 0xdbeaa076, 0x40870812, 0x5e1fa7cc, 0x2c8d354f, 0x4c2b71cf, 0xdcc8f3ee, 
    0xe59f7b92, 0x1820104e, 0x3ff7feeb, 0xdeb39fce, 0xc6ee3b87, 0x3cc87de7, 0x5e0693b6, 0x7800fe00, 0x7e4a6afc, 0x7b367acf, 0xba89ccd1, 0xe38c1c10, 
    0x21315214, 0xf3840e94, 0x0f8e1b41, 0x1b404a4f, 0xf1a3fb89, 0x4cdb6235, 0xcb88bfbf, 0x54951869, 0x1c6538ed, 0x11ab26fe, 0x0e7ab0b9, 0x78d7b5de, 
    0x57699c41, 0xef2f3c02, 0x4e213f8e, 0x2ba8ec2a, 0xe8fb1cbb, 0xb960cc1a, 0xf68fcab6, 0x1ac89fd4, 0x435296a3, 0x57dc31ae, 0xea5aa57f, 0xf6374b76, 
    0x73dbd785, 0x9d8e8b8d, 0x5ceb137a, 0xba98e735, 0x31e3e19c, 0xa3989117, 0x714e067f, 0x53b1514e, 0xaf8f488a, 0x709c8322, 0x895c4d33, 0x4aeb7618, 
    0xe841de09, 0x31938a31, 0x90d663d4, 0x9a67a077, 0x6c570b81, 0x4afd7b74, 0xdfd29626, 0xa46d45cd, 0xfcc155ef, 0xe638aa48, 0x6e055fbb, 0x07c8453a, 
    0xff38be1f, 0x5445be00, 0x848bdd55, 0x7e8e9d79, 0x116b0d4f, 0x6cb17721, 0xeadac928, 0xb206f2c7, 0x69a357fa, 0x9f9e9a36, 0xf0fae61c, 0x4194e7de, 
    0xd627f0d7, 0xbf400db8, 0x49c395f6, 0x56de8511, 0x5cf58c66, 0xa7f5e39c, 0x710ed928, 0xcef11549, 0x41031447, 0x0635f6a0, 0x2869a963, 0x7ab510a9, 
    0x75d443c3, 0x3b5b5a38, 0xb615357f, 0x0757bd93, 0x42f53ef1, 0x8202afbb, 0x0e907b74, 0xff719c0f, 0xb88a7c00, 0x0817bbab, 0x9b333ba9, 0xd4dac293, 
    0x58ac5d28, 0xab6bd781, 0xca1ac81f, 0xc1838320, 0x6cd24caf, 0xe7083bf5, 0x7ad3eb6b, 0x75100548, 0xb53ef718, 0x91897ae7, 0x96961bb5, 0xacb40b23, 
    0x39fc33c6, 0x4639c539, 0x8a8273c8, 0x8a925eb9, 0x2d666605, 0x05405114, 0xf5d0b05f, 0x9616521d, 0x45cddbce, 0x55efa46d, 0xbd4ffcc1, 0xc0f3ae50, 
    0xe41e9d80, 0x38678203, 0x45be00ff, 0x8bdd5554, 0x999d5484, 0x6de14bcd, 0xd62e146e, 0x6bd7810d, 0x1ac81fab, 0x828320c8, 0x7e7a4530, 0xe9a96793, 
    0xd7d74ef1, 0x0a90f4a6, 0xee31ea20, 0x75ce6b7d, 0xaed42113, 0x2e8c585a, 0xcf18b3d2, 0x14e7e4f0, 0xce211be5, 0x6ae52a0a, 0xcca0a228, 0x48b0018f, 
    0x8e8c94e6, 0x1b993438, 0x297d9eb1, 0x2784526b, 0xeb69673c, 0x26854f5d, 0x61362d8a, 0x65a6b03c, 0xcf80793f, 0x0172b902, 0x90222318, 0x99bf3ea0, 
    0xca9d9da6, 0xce5db98c, 0xacd34abb, 0xba875b74, 0x1b165e6d, 0x5008904a, 0x6b9ef13d, 0x616fd69e, 0x9ea6d5bd, 0x0062951c, 0x068093e3, 0xf7c5966a, 
    0x0028cdfc, 0x1b8a010c, 0x75e5c0d2, 0x09ae2264, 0xda938c63, 0xc0dc058c, 0x96d69f64, 0x070e9c91, 0x492ae82d, 0x9814451d, 0x06914ac7, 0xc7aec839, 
    0x9a40f3c1, 0x344bc255, 0x714ab371, 0x68e3c0b9, 0xd43e3bae, 0x0dc6196e, 0x2a777652, 0x3b77e532, 0xb04b1f6d, 0xe91e6ed0, 0x05e588f5, 0x4721b771, 
    0x5c7332e2, 0x1e7bb9ce, 0x73cdaba3, 0x10dbfd10, 0xc0192317, 0xb0386bc6, 0xc9a5a107, 0xba7228ec, 0xd5951bb2, 0x27cdb890, 0xc628ec53, 0x96c29f7a, 
    0xa26881a4, 0x5d0b918a, 0x2dee82af, 0x122ed2e3, 0xb48ce359, 0x0fdc01c7, 0x52c515e1, 0xdcd94555, 0xdc95cba8, 0x2f6df4ee, 0x7b27d04f, 0x94e2d6a7, 
    0x21682315, 0x7332e247, 0x7dbdae5c, 0x4faca516, 0x36220873, 0x32462e20, 0x3a6bc600, 0x56576e8a, 0xb2ba7243, 0x45513a0a, 0x45d10241, 0x6f570014, 
    0x788b9be0, 0x9a948bb4, 0x4c8b38e2, 0x3fc01d70, 0x45115774, 0xca9d5d54, 0xce5db98c, 0x34d346f3, 0xba7702fd, 0x508e5b93, 0x85a08d54, 0xcdc9881f, 
    0xfcfd9a72, 0x3db3965a, 0xd88820d4, 0x128ca480, 0x3a6bc600, 0xacae1c8a, 0x6475e586, 0xa9288a82, 0x00d9ff20, 
};
};
} // namespace BluePrint
