#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <WindowSlice_vulkan.h>

namespace BluePrint
{
struct WindowSliceFusionNode final : Node
{
    BP_NODE_WITH_NAME(WindowSliceFusionNode, "WindowSlice Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Move")
    WindowSliceFusionNode(BP* blueprint): Node(blueprint) { m_Name = "WindowSlice Transform"; }

    ~WindowSliceFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::WindowSlice_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_smoothness, m_count);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _smoothness = m_smoothness;
        float _count = m_count;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Smoothness##WindowSlice", &_smoothness, 0.0, 1.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_smoothness##WindowSlice")) { _smoothness = 1.f; changed = true; }
        ImGui::SliderFloat("Count##WindowSlice", &_count, 1.0, 50.f, "%.0f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_count##WindowSlice")) { _count = 10.f; changed = true; }
        ImGui::PopItemWidth();
        if (_smoothness != m_smoothness) { m_smoothness = _smoothness; changed = true; }
        if (_count != m_count) { m_count = _count; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("smoothness"))
        {
            auto& val = value["smoothness"];
            if (val.is_number()) 
                m_smoothness = val.get<imgui_json::number>();
        }
        if (value.contains("count"))
        {
            auto& val = value["count"];
            if (val.is_number()) 
                m_count = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["smoothness"] = imgui_json::number(m_smoothness);
        value["count"] = imgui_json::number(m_count);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue4e3"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_smoothness  {1.f};
    float m_count       {10.f};
    ImGui::WindowSlice_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 5148;
    const unsigned int logo_data[5148/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0x280aa08a, 0x280a80a2, 0xf1dd1aaa, 0xa7a9b4d3, 0x3626db46, 0x3dda7fc6, 0x7693c63f, 0x15fd0257, 0x5b7bf8cb, 0x7ed4b8be, 0xbb49a8cb, 0x79748fcd, 
    0x87fdbe50, 0xa8abfc71, 0x2b2919a5, 0xa2280aa0, 0x288a02a8, 0x2a8a02a0, 0x747cb786, 0xd1692aed, 0xb18dc9b6, 0x4f8ff69f, 0x95dda4f1, 0x7245bfc0, 
    0xefd61efe, 0xb21f35ae, 0xf36e12ea, 0x541edd63, 0xdc61bf2f, 0x29ea2a7f, 0xe84a4a46, 0xaa288a02, 0xe53fa900, 0xfd07fedb, 0xfe933a2a, 0x7fe0bf5d, 
    0x4f9fb3d2, 0x283a3251, 0xf1dd1aaa, 0xa7a9b4d3, 0x3626db46, 0x3dda7fc6, 0xbbadc63f, 0x45bf8c2b, 0xd61efe72, 0x1f35aeef, 0x6e12eab2, 0x1edd63f3, 
    0x61bf2f54, 0xea2a7fdc, 0x4a4a4629, 0x288a02e8, 0x8aa200aa, 0x47ae0028, 0xf7aa17c6, 0x3b47f696, 0xc7e4f923, 0x5b00ffbf, 0x595dd7f9, 0x4590e8d0, 
    0x65a43eab, 0x3c9f4996, 0xe9333036, 0x1315a7c7, 0x68c84a4e, 0x621df5e4, 0xd64e6dda, 0x6239caf6, 0x180c0068, 0x1d0f9001, 0x7745a60f, 0xc293ca50, 
    0x8e72c692, 0x06f581a1, 0xf874d4a0, 0x6d433b75, 0x82a46039, 0x7a04f50a, 0x166dac53, 0x643bcec6, 0x1863dd91, 0x7e9cf105, 0x1617a314, 0x288a05ee, 
    0x5110b4a2, 0x57001445, 0xd50be323, 0x237bcb7b, 0xf2fc919d, 0x00ffdf63, 0xaeebfcad, 0x4874e8ac, 0x529fd522, 0xcf24cb32, 0x19181b9e, 0x8ad3e3f4, 
    0x6425a789, 0x8e7a7234, 0xa7366db1, 0x1c657b6b, 0x060034b1, 0x07c8000c, 0x22d3878e, 0x4965a8bb, 0x396349e1, 0xfac05047, 0x3a6a5083, 0xa19d3a7c, 
    0x52b09cb6, 0x827a0541, 0x36d6293d, 0x1d67638b, 0xb1ee48b2, 0xcef8028c, 0x8b510a3f, 0xc502778b, 0x085a5114, 0x008aa228, 0x85f1912b, 0xbde5bdea, 
    0xfec8ce91, 0xffef3179, 0x75fed600, 0x3a7456d7, 0xcf6a1124, 0x926519a9, 0x8c0dcf67, 0xe971fa0c, 0x92d344c5, 0x3d391ab2, 0x9bb65847, 0xb2bdb553, 
    0x009a588e, 0x64000603, 0xe943c703, 0x32d45d91, 0xb1a4f0a4, 0x60a8a39c, 0x35a8417d, 0x4e1d3e1d, 0x584edbd0, 0xbd822029, 0xeb941e41, 0xb3b1451b, 
    0x7724d98e, 0x7c01c658, 0x28851f67, 0x81bbc5c5, 0xad288a62, 0xfc271504, 0xffc07fbb, 0x5247a500, 0xfcb7cb7f, 0x7356fa0f, 0x4726eae9, 0x2f8c8f5c, 
    0xec2def55, 0xf347768e, 0xfe7f8fc9, 0xbaaef3b7, 0x20d1a1b3, 0x487d568b, 0x3e932ccb, 0x67606c78, 0x294e8fd3, 0x222b39cd, 0x3aeac991, 0x9ddab4c5, 
    0x7294edad, 0x1800d0c4, 0x1e200330, 0x8a4c1f3a, 0x2795a1ee, 0xe58c2585, 0xea03431d, 0xe9a8410d, 0x8676eaf0, 0x49c172da, 0x08ea1504, 0xda58a7f4, 
    0x769c8d2d, 0xc6ba23c9, 0x38e30b30, 0x2e4629fc, 0x140bdc2d, 0x20684551, 0x911d1ea9, 0x7bceee2b, 0x33aba362, 0x7fb4c77f, 0x6aacf287, 0x2e45a949, 
    0xd1b4c9a4, 0xd386955a, 0x2969608f, 0xde8ea62e, 0xdb569a36, 0x3e66201a, 0x7aa31583, 0x2a5ad495, 0x63ad8e9d, 0xa4adb3a8, 0x964161fe, 0xe6c7481b, 
    0xd334e52a, 0x288a02d8, 0x8fe203a6, 0xc7b962cd, 0x074ba719, 0x67b7a194, 0xb5a5749c, 0x7f5a00ff, 0xbf6ea9dd, 0xabf70fd5, 0xab247592, 0x9ba1a728, 
    0x55b1e793, 0xea0be646, 0x79224b71, 0xc539576e, 0xad00ff11, 0x2585f74f, 0xf9dbd1f4, 0x63db4ab3, 0xd0c7dc45, 0x7e72b762, 0x552cddd2, 0x4509ebfd, 
    0xacd5b153, 0xb4751675, 0x3228cc9f, 0xfc1869c3, 0x4dab5cc5, 0x280a8a3d, 0x471398a2, 0x6d20e66f, 0x24b5cff8, 0x1b4a79b0, 0x4ac77976, 0xa1fe6fb1, 
    0x4de71f7f, 0x5400ffba, 0x05aede3f, 0x2db76e5a, 0x938ab9f4, 0x500cb1e6, 0x765baa79, 0x644ac739, 0x5cb9e589, 0xd76615e7, 0x00ff51fd, 0x4ddfaa7a, 
    0x349bbf1d, 0x5d34b6ad, 0x2b067dcc, 0xad935458, 0x29a2b728, 0x0034b949, 0x33e81364, 0x9a695049, 0xb7acae85, 0xcd97615f, 0xe4613cfb, 0x52ed4af9, 
    0x1dc873c1, 0x7aeafcc8, 0xcdbd8be8, 0xaa288a02, 0xeedac202, 0x8cfadb50, 0xfc58a2f4, 0x3fe702a8, 0x9e4a7f36, 0xfe49f53f, 0xbfeea8e8, 0xabf70fd5, 
    0xca598dcd, 0x5c7a8ba2, 0x58b949c1, 0xdb3fd96f, 0x13092afd, 0xceb972cb, 0xdf67fd2a, 0x9bbf1d4d, 0x34b6ad34, 0x067dcc5d, 0x693d4c2b, 0xf4494dce, 
    0xd4db241c, 0x8ffb937f, 0x8fe17733, 0xdaaf8e7a, 0x785edcd9, 0x78ab355d, 0x763ed8f7, 0x873390cd, 0xf7f3d0db, 0x0a553a86, 0x2b27a5e8, 0x6fa4b9df, 
    0x0023c5ad, 0x4a9a511f, 0xffd47d73, 0x9afa7700, 0xd19d6a6d, 0xdfcc2a48, 0xe11fedf1, 0x59b5aafc, 0xa33dfe9b, 0x63953ffc, 0xa987e257, 0xab15dd12, 
    0x8d37c60b, 0x91768c15, 0xa392fbfd, 0xfe00f01d, 0xe5daadb8, 0xef3a8df5, 0x943ff157, 0x8a61c83c, 0xc236db25, 0xf1a07c54, 0xd29f9cd3, 0x8bec4b9d, 
    0x038254ea, 0x5a10dfe1, 0x9ecb2706, 0xe7deae30, 0xd7e0fa83, 0xaf7e5c67, 0xade8bbe1, 0xf9f6d17e, 0x30329eaf, 0x1e200985, 0x5ded93e3, 0xb73c9736, 
    0x4c126c1a, 0xc3ed928c, 0x230729ab, 0x9da2c183, 0x65c36ad3, 0xb6a228aa, 0xfaaf3511, 0x4bedfed3, 0x7fa8fe75, 0xff5a51bd, 0xee3fad00, 0xea5fb7d4, 
    0xc1d5fb87, 0x6284f73f, 0x7fb432fe, 0xe1fd53eb, 0xbc365e58, 0xa445ad68, 0x80e57e7f, 0xfe0f7cc7, 0x3f762bbe, 0xf0fea9f5, 0xd35d5fae, 0x167ff56e, 
    0x86bc5f3c, 0xcd769118, 0x031c95b0, 0x7d724ec7, 0x2fd5567b, 0x7ebb2ced, 0xa5689fa6, 0xbec30704, 0x4f0cb420, 0x5d613c97, 0xf507cfbd, 0xb8ceaec1, 
    0x77c35ffd, 0xa3fd5ad1, 0x3c5ff3ed, 0x120a6164, 0x27c73d40, 0x2e6dbada, 0xd8346e79, 0x25199924, 0x525687db, 0x8307470e, 0xb5e94e57, 0x8a6ad962, 
    0x5d84ad28, 0x5000ffb7, 0xa6f38fbf, 0x1faa7fdd, 0xffad53ef, 0xe32fd400, 0x5fb7e9fc, 0xd5fb87ea, 0xe3fd47e5, 0x8caf73e6, 0x1fd57f2d, 0xf199abf7, 
    0x6a45e3b5, 0xf7fb232d, 0xe03b062c, 0x5df1f57f, 0xa3faaf35, 0xda71f5fe, 0xab779bee, 0xfde2b1f8, 0x8bc430e4, 0xa8846db6, 0x733a1ee0, 0xb4daeb93, 
    0x48d2f657, 0xb56c7cb8, 0xa031ebe1, 0x42a66a5e, 0x1e953e4a, 0xd54db65b, 0xd6d49fba, 0x0a1d61e5, 0xd643d7ea, 0x6b467de5, 0x12c95ac9, 0x939cca38, 
    0xc74998f6, 0x3f293c27, 0xe969b587, 0xa671cb73, 0xc9c824c1, 0xb23adc2e, 0x3c387290, 0xa3a7eb1a, 0xb5ccc66a, 0xc2561445, 0xa9fec72f, 0x1d15dd3f, 
    0xfea1fad7, 0xfa1f49f5, 0x7400ffa4, 0xea5f7754, 0xe4d5fb87, 0xf532fed3, 0x13f1a339, 0x6be32757, 0x5ad48ac6, 0x58eef747, 0xffc0770c, 0xbae2eb00, 
    0xdd35e2ca, 0xf157ef36, 0xc8fbc563, 0x6c178961, 0xc05109db, 0x27e7743c, 0x2f14b5d7, 0x55ecd2cc, 0x7df4882f, 0x0b6dd23a, 0xee99d3e0, 0x6272cbbc, 
    0xea1f8f54, 0x8f01b8c9, 0xcf3549e2, 0x0cdd9b55, 0xbc1ffcd9, 0x2f49ed7f, 0x5155252f, 0x17c7fb08, 0x928c732a, 0x69660570, 0xa671cb73, 0xc9c824c1, 
    0xb23adc2e, 0x3c387290, 0xf5a2ee1a, 0xdfb8dc68, 0xfedd3f75, 0x6f4e9ba6, 0xffee9fba, 0xad4d5300, 0x5590b0a3, 0xdae3bf99, 0x55f9c33f, 0xe47d6b8a, 
    0xfa7b00ff, 0x88e5f31a, 0xd87692e7, 0xa1eccec5, 0x0fef934e, 0xabf247f7, 0x5ffe5ff5, 0x6da5cf7f, 0x6e3b470c, 0x9d5226db, 0xdb55d4ca, 0xf80df58f, 
    0x5ba53a7f, 0x23edab51, 0x7319177b, 0x3515852b, 0xfed1fad7, 0xfa1f47ed, 0x7800ffd4, 0xd07c4655, 0x57771ae6, 0x00ffb524, 0xa9dd7f5a, 0x0fd5bf6e, 
    0x2b6aaaf7, 0xd46b95cd, 0xe7ceb153, 0x1fa15c79, 0x00ffd4fa, 0x3fae5378, 0xfce1b7d7, 0x7e35edaa, 0xbd00fff3, 0xf56b05fd, 0xdd9acb9b, 0xde9af60a, 
    0xed2a0ac5, 0xfc86fac7, 0x6b419d3f, 0x00ffb4fe, 0xaf315dbb, 0xdbce4dcd, 0x37de291a, 0xbaa6a221, 0x3f5a00ff, 0xffdba6dd, 0xc75faf00, 0x97aa55f9, 
    0xf361cfa7, 0xdb2cb77b, 0x5fa800ff, 0x6ed3f9c7, 0xf70fd5bf, 0xcb2b6aaa, 0x9e532d55, 0xbd373fc7, 0xf55f1b72, 0x82eafd47, 0x7e7bfde3, 0xd1aeca1f, 
    0xb5fc1a57, 0xd4b8ed1c, 0x17942bed, 0xbffbbfee, 0xed6a53d4, 0xfc86fac7, 0x3f3a9d3f, 0xe8fe49f5, 0xdaac9fae, 0x69ead63c, 0x8abd34ed, 0x5fd75414, 
    0xb5fb47eb, 0xa3faaf2d, 0x2a6df5fe, 0x62a7a6d6, 0x921bed9c, 0x3fa9fe47, 0xd71d15dd, 0xf5fea1fa, 0x9179454d, 0x8ef92c9f, 0x15eeec74, 0x7bfde34a, 
    0xaeca1f7e, 0xaf4655d1, 0x38ec95b3, 0xafdc95cb, 0x5f2e00ff, 0x55abd6e7, 0xffe83ef9, 0x3a7f7800, 0x470c6d75, 0xb6db6e22, 0x0d8a9d5a, 0xdffd53f7, 
    0x66b569ea, 0x8ff9f86f, 0x6275fef0, 0x922396b6, 0x9c72db29, 0xdf9a82ec, 0xfede3f79, 0x6f4d9d86, 0x7fef9fbc, 0x777c5e43, 0xc6aa4331, 0xdfad0581, 
    0xae6dad8a, 0x97527cd7, 0x71467205, 0xa56f371b, 0x1f9eaa57, 0x6ff1ddbe, 0x881cb346, 0x7a1c6996, 0xf4e30393, 0x07ad75fe, 0x290dfd66, 0xd5ae236b, 
    0xcfedf0a0, 0x74ae2f87, 0x6b8e77bb, 0x66972f7f, 0xdc8173e3, 0x5d5ceb91, 0xf131fe74, 0x13f85c4a, 0x9836fb55, 0x04a37c6d, 0xa920a39b, 0x78f0f1c4, 
    0x86956b1d, 0x96149e54, 0x0c759433, 0xdb35a80f, 0xc8966b86, 0x85b636da, 0xa3f5af9b, 0x3f8edafd, 0xf0fea9f5, 0xd6bf2ea9, 0x386af78f, 0xa7d600ff, 
    0x9faec2fb, 0x31a157f0, 0x51f44bf8, 0x30077945, 0x0de15757, 0xb4d44d17, 0x6defa9fb, 0xb649d7bc, 0x0686bd83, 0xae883dd5, 0x008fbb52, 0xbf49a748, 
    0x482e3bc7, 0xa9d9fe23, 0x2dadb5fe, 0x9c24add9, 0x68b532b5, 0xe1733b3c, 0x2e9debcb, 0xdf9ae3dd, 0xb8d9e5cb, 0x2477e0dc, 0x6b23d77a, 0x00ffb4fe, 
    0x8c0f5dbb, 0x3e97527c, 0xcd7ed504, 0x285f1ba6, 0xc8e826c1, 0x7c3c712a, 0xe75a071e, 0x7052f934, 0x8e72c6b2, 0x07f5819b, 0xbd16d515, 0x7634928c, 
    0xd775d0e4, 0xedfed1fa, 0x7afddf36, 0x9dca3ffe, 0x7fb4fe75, 0xffb74dbb, 0x8fbf5e00, 0xfea3adf2, 0xf812f2ef, 0x4551b40b, 0x57384779, 0x173de15b, 
    0xd9b4d44d, 0xf3b6bde7, 0x0e2a255d, 0x071818f6, 0x57c915b1, 0x8d53e077, 0x38e3e41a, 0x00fff198, 0x57701501, 0x72d29466, 0xa0d5c7d4, 0x87cfedf0, 
    0xbb74ae2f, 0x7f6b8e77, 0xe366972f, 0x91dc8173, 0x7fd45ceb, 0xd1fd93ea, 0xf1311e5b, 0x13f85c4a, 0x9836fb55, 0x04a37c6d, 0xa920a39b, 0x78f0f1c4, 
    0xe3316b1d, 0x78b6218d, 0x6d4d7a9f, 0x00ffc014, 0xadbf81be, 0x9abd366b, 0x6ea772b7, 0xeb46d154, 0x00ff68fd, 0xffb5a576, 0xde7f5400, 0xd6bfaea8, 
    0x5b6af78f, 0xfd47f55f, 0xee7fdeea, 0x4dc01fe8, 0x01571445, 0xe15b5788, 0xd44d173d, 0xbde7d9b4, 0x255df3b6, 0x18f60e2a, 0x15b10718, 0xe07757c9, 
    0xe41a8d53, 0xf19838e3, 0x150100ff, 0x94665770, 0xa2d472d2, 0xd41a3ed6, 0xf6e998ec, 0x3ce944f2, 0x64b3c408, 0xb9579507, 0xcc35a123, 0xaf2dc05d, 
    0xb80db727, 0xef262345, 0xba661c5c, 0x4510af3b, 0x6bebe9aa, 0x8ad69a0e, 0x3cb7ec6f, 0xd40dc64d, 0x30808c40, 0x5e1f6b70, 0xd64d8fb0, 0xcb89b627, 
    0xe3469022, 0xcd333292, 0xaccaed54, 0x4de5d254, 0xc77fd318, 0xf3877fcc, 0x6f5e15ab, 0xf08ff9f8, 0xae6275fe, 0x420fc3af, 0x6b0ab225, 0x00ffe47d, 
    0x751afa7b, 0xfa201921, 0xd909d61c, 0x5aaa8590, 0x4f7abc55, 0x11c4978d, 0x82c22583, 0x39f93902, 0xa5d76f8f, 0x9ffca85d, 0xbf9bf9df, 0x94567b0c, 
    0xfdde18a5, 0x73ad848b, 0x217ec55f, 0x1cbec49b, 0x602ed2ba, 0x366e288e, 0xdcc9786e, 0xc6b0ba36, 0x4eaec07d, 0x6c6cd1c6, 0x1d49b6e3, 0x5f8031d6, 
    0x5ae1c719, 0x859827f2, 0x3fd48c73, 0x6f00ff64, 0x3d9caef4, 0xf33e4668, 0x3435d2d4, 0xafcb98f7, 0xdafda3f5, 0xa9f53f8e, 0x12abf0fe, 0x17cee6c7, 
    0xfa73f938, 0x58bbb6d0, 0x3d87fe36, 0x84d5482b, 0xadb7a869, 0xd8284981, 0xaf288a9e, 0x4f2bc034, 0xdafcdac3, 0xc1917704, 0x6e2e4a0a, 0x4f2ee63c, 
    0x062e6207, 0x6645613b, 0x4f820152, 0x5d54cda9, 0x5b5b54ae, 0xf12b9e1a, 0xf025de0c, 0x7391d6e5, 0x71437104, 0x4ec673b3, 0x86d5b5e1, 0x7305ee33, 
    0xd8a23d5a, 0x23c996c0, 0x02a4c6ba, 0xed33cef8, 0x9827125a, 0xd38c7385, 0x62ca8322, 0x3ac6b3db, 0x472a4457, 0xa5de34d9, 0x322ddef3, 0xa3f5af1b, 
    0xbf6ddafd, 0x7ffcf5fa, 0x0f965895, 0xc76e8335, 0x1d49e918, 0xb7e196bf, 0xb2d51ee7, 0x964705ad, 0x4b6ad8fa, 0x51d4c496, 0x21e67945, 0x892f5a5b, 
    0x675b346e, 0x90231882, 0xc925ef3b, 0xa53f40cf, 0x364dd162, 0x6a6d1ab6, 0xf8153f8d, 0xf8126f86, 0xb948eb72, 0xb8a13882, 0x27e3b9d9, 0xc3eada70, 
    0xb102f719, 0x2cf223ed, 0xcc0ce1ad, 0x52238922, 0x802a9cc7, 0x914f413f, 0x9c2bc43c, 0xd5469566, 0x5a31e80b, 0x770d2739, 0xad4d4eb9, 0xeb5fb74a, 
    0x2db5fb47, 0xfea3faaf, 0x79b02cf5, 0x38761bac, 0x51744ac7, 0x39574af9, 0xeab435e7, 0x4f51d145, 0x4b2eb951, 0x2b8aa20f, 0x6b2bcc90, 0xc62df145, 
    0x43f06c8b, 0x7d077204, 0xe839b9e4, 0x5aacf407, 0xc3d6a629, 0xbb51ad4d, 0xefba78ab, 0x765bb252, 0xcfb62882, 0x2497c10c, 0x75558eee, 0xb1a2eeeb, 
    0x995b9ea7, 0xbc9c79de, 0x7bcc728e, 0xe186899a, 0x6969708f, 0x376a5db9, 0xcd2bf726, 0x311f00ff, 0xacce1ffe, 0xf90e6f54, 0x1d63f755, 0x955652b1, 
    0x97629c24, 0x204d9340, 0x122b8aa2, 0x68d8af42, 0x0ba98e7a, 0xe66d674b, 0x77d2b6a2, 0x27fee0aa, 0x7957a8de, 0x8f4e40e0, 0xf3c10172, 0x91ef3fce, 
    0x62771555, 0x662715e1, 0x5bf85273, 0xb50b855b, 0xda756083, 0x06f2c7ea, 0xe02008b2, 0x9f5e118c, 0x7aead9a4, 0xf5b5537c, 0x0224bde9, 0x7b8c3a88, 
    0x9df35a9f, 0x2b75c844, 0x0b239696, 0x33c6acb4, 0xc53939fc, 0x73c84639, 0x4bb98a82, 0xe07f5efe, 0xa8a4d61f, 0xe7e500ff, 0x6afd01fe, 0xe8e9734a, 
    0xa2280a43, 0xfb5510b3, 0xd5510f0d, 0xed6c6921, 0xda56d4bc, 0x1f5cf54e, 0x0ad5fbc4, 0x09083cef, 0x3840eed1, 0xfdc7793e, 0xaea22af2, 0xa4225cec, 
    0x5f6aceec, 0xa1706b0b, 0x0e6cb076, 0xfe585dbb, 0x0441d640, 0x2b82111c, 0x3d9bf4d3, 0x768a4f4f, 0xa437bdbe, 0x51075180, 0x5eeb738f, 0x0e99a873, 
    0xc4d272a5, 0x98957661, 0x27877fc6, 0xd928a738, 0x5751700e, 0x1545512b, 0x14456106, 0xec570150, 0x54473d34, 0xb6b3a585, 0x695b51f3, 0x7f70d53b, 
    0x2b54ef13, 0x2720f0bc, 0xe000b947, 0xf71fe7f9, 0xbb8aaac8, 0x938a70b1, 0x7ca939b3, 0x85c2ad2d, 0x3ab0c1da, 0xf96375ed, 0x10045903, 0xaf084670, 
    0xf56cd24f, 0xda293e3d, 0x92def4fa, 0x461d4401, 0x79adcf3d, 0x3a64a2ce, 0x114bcb95, 0x6356da85, 0x9c1cfe19, 0x64a39ce2, 0x5c45c139, 0x541445ad, 
    0x51148519, 0xb05f0540, 0x521df5d0, 0xdbce9616, 0xa46d45cd, 0xfcc155ef, 0xae50bd4f, 0x9d80c0f3, 0x8303e41e, 0xdf7f9ce7, 0xee2aaa22, 0x4e2ac2c5, 
    0xf0a5e6cc, 0x170ab7b6, 0xebc0066b, 0xe48fd5b5, 0x4110640d, 0xbd2218c1, 0xd4b3493f, 0x6ba7f8f4, 0x487ad3eb, 0x18751005, 0xe7b53ef7, 0xea90893a, 
    0x462c2d57, 0x8c596917, 0x7372f867, 0x908d728a, 0x721505e7, 0x505114b5, 0x45511466, 0xf8db1500, 0x2ddee226, 0xb826e522, 0x1cd3328e, 0xdd0f7007, 
    0x5551c415, 0xa3726717, 0xbc73572e, 0x3fcdb4d1, 0xa4ee9d40, 0x1594e3d6, 0x47216823, 0x5c7332e2, 0x167fbfa6, 0x75cfaca5, 0x20362208, 0x80042329, 
    0xa2ce9a31, 0x21ab2b87, 0x22595db9, 0xff79f93f, 0x5a7f8000, 0x00ffa392, 0x07f89f97, 0xa72aa9f5, 0x1496d0d3, 0x20664551, 0x37c1dfae, 0x1769f116, 
    0x71c43529, 0x3be09896, 0xaee87e80, 0xbba88a22, 0x7219953b, 0x8de69dbb, 0x04fa69a6, 0xb72675ef, 0x1ba9a01c, 0x113f0a41, 0x35e59a93, 0x2db5f8fb, 
    0x41a87b66, 0x4901b111, 0x8c012418, 0x391475d6, 0xca0d595d, 0x1405c9ea, 0x51405251, 0x57001445, 0x8b9be06f, 0x948bb478, 0xcb38e29a, 0xc01d704c, 
    0x1157743f, 0x9d5d5445, 0x5db98cca, 0xd346f3ce, 0x7702fd34, 0x8e5b93ba, 0xa08d5450, 0xc9881f85, 0xfd9a72cd, 0xb3965afc, 0x8820d43d, 0x8ca480d8, 
    0x6bc60012, 0xae1c8a3a, 0x75e586ac, 0x288a8264, 0xa22820a9, 0xb72b008a, 0xbcc54df0, 0x4dca455a, 0xa6651c71, 0x1fe00e38, 0xa2882bba, 0xe5ce2eaa, 
    0xe7ae5c46, 0x9a69a379, 0xdd3b817e, 0x28c7ad49, 0x42d0462a, 0xe664c48f, 0xfe7e4db9, 0x9e594b2d, 0x6c4410ea, 0x09465240, 0x9d356300, 0x56570e45, 
    0xb2ba7243, 0x54144541, 0xd9ff7f90, 
};
};
} // namespace BluePrint
