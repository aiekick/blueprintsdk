#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <LuminanceMelt_vulkan.h>

namespace BluePrint
{
struct LuminanceMeltFusionNode final : Node
{
    BP_NODE_WITH_NAME(LuminanceMeltFusionNode, "LuminanceMelt Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Mix")
    LuminanceMeltFusionNode(BP* blueprint): Node(blueprint) { m_Name = "LuminanceMelt Transform"; }

    ~LuminanceMeltFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::LuminanceMelt_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_threshold, m_direction, m_above);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _threshold = m_threshold;
        int _direction = m_direction;
        int _above = m_above;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Threshold##LuminanceMelt", &_threshold, 0.0, 1.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_threshold##LuminanceMelt")) { _threshold = 0.8f; changed = true; }
        ImGui::RadioButton("Up", (int *)&_direction, 0); ImGui::SameLine();
        ImGui::RadioButton("Down", (int *)&_direction, 1);
        ImGui::RadioButton("Above", (int *)&_above, 0); ImGui::SameLine();
        ImGui::RadioButton("Below", (int *)&_above, 1);
        ImGui::PopItemWidth();
        if (_threshold != m_threshold) { m_threshold = _threshold; changed = true; }
        if (_direction != m_direction) { m_direction = _direction; changed = true; }
        if (_above != m_above) { m_above = _above; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("threshold"))
        {
            auto& val = value["threshold"];
            if (val.is_number()) 
                m_threshold = val.get<imgui_json::number>();
        }
        if (value.contains("direction"))
        {
            auto& val = value["direction"];
            if (val.is_number()) 
                m_direction = val.get<imgui_json::number>();
        }
        if (value.contains("above"))
        {
            auto& val = value["above"];
            if (val.is_number()) 
                m_above = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["threshold"] = imgui_json::number(m_threshold);
        value["direction"] = imgui_json::number(m_direction);
        value["above"] = imgui_json::number(m_above);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue1b8"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_threshold   {0.8f};
    int m_direction     {0};
    int m_above         {0};
    ImGui::LuminanceMelt_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 5247;
    const unsigned int logo_data[5248/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0x280aa08a, 0x280a80a2, 0xf1dd1aaa, 0xa7a9b4d3, 0x3626db46, 0x3dda7fc6, 0x7693c63f, 0x15fd0257, 0x5b7bf8cb, 0x7ed4b8be, 0xbb49a8cb, 0x79748fcd, 
    0x87fdbe50, 0xa8abfc71, 0x2b2919a5, 0xa2280aa0, 0x288a02a8, 0x2a8a02a0, 0x747cb786, 0xd1692aed, 0xb18dc9b6, 0x4f8ff69f, 0x95dda4f1, 0x7245bfc0, 
    0xefd61efe, 0xb21f35ae, 0xf36e12ea, 0x541edd63, 0xdc61bf2f, 0x29ea2a7f, 0xe84a4a46, 0xaa288a02, 0x288aa200, 0xa18aa200, 0x3f1d5fad, 0x6d759a4b, 
    0x676c63b2, 0xfcd3a3fd, 0x70653769, 0xc75cd12f, 0xebbbb587, 0xbaec478d, 0xc8bc9b84, 0x0b9547f7, 0x1f77d8ef, 0x517abaca, 0x00ba9292, 0x802a8aa2, 
    0x008aa228, 0x85f1912b, 0xbde5bdea, 0xfec8ce91, 0xffef3179, 0x75fed600, 0x3a7456d7, 0xcf6a1124, 0x926519a9, 0x8c0dcf67, 0xe971fa0c, 0x92d344c5, 
    0x3d391ab2, 0x9bb65847, 0xb2bdb553, 0x009a588e, 0x64000603, 0xe943c703, 0x32d45d91, 0xb1a4f0a4, 0x60a8a39c, 0x35a8417d, 0x4e1d3e1d, 0x584edbd0, 
    0xbd822029, 0xeb941e41, 0xb3b1451b, 0x7724d98e, 0x7c01c658, 0x28851f67, 0x81bbc5c5, 0xad288a62, 0x45511404, 0xf8c81500, 0xf25ef5c2, 0x64e7c8de, 
    0xf7983c7f, 0x7feb00ff, 0x3aabeb3a, 0xb508121d, 0xb28cd467, 0x86e733c9, 0x387d06c6, 0x69a2e2f4, 0x1c0d59c9, 0x5baca39e, 0xdedaa94d, 0x4d2c47d9, 
    0x00830100, 0xa1e30132, 0xeaaec8f4, 0x52785219, 0xd451ce58, 0xd4a03e30, 0x0e9f8e1a, 0xa76d68a7, 0x4190142c, 0x4a8fa05e, 0xd8a28d75, 0x926cc7d9, 
    0x0063ac3b, 0xc28f33be, 0xdde26294, 0x1445b1c0, 0x280a8256, 0xe40a80a2, 0xaf7a617c, 0x73646f79, 0x4c9e3fb2, 0xf500ff7b, 0xd5759dbf, 0x04890e9d, 
    0x46eab35a, 0xf3996459, 0x3e0363c3, 0x59717a9c, 0x212b39cd, 0x75d493a3, 0x3bb5698b, 0xe528db5b, 0x3000a089, 0x3c400660, 0x15993e74, 0x4f2a43dd, 
    0xca194b0a, 0xd407863a, 0xd351831a, 0x0dedd4e1, 0x9282e5b4, 0x11d42b08, 0xb3b04fe9, 0x6b895616, 0x188bbc1b, 0xe38c2f38, 0xc5c528ad, 0x143d81bb, 
    0x7d4e8052, 0x450941ab, 0xae005314, 0xaaf7c547, 0x9c5970f7, 0x93e78f94, 0xfd00ff1e, 0x755de76f, 0xc1a24367, 0x91faaa16, 0x7c264996, 0xcfc0d8f0, 
    0x569c1ea7, 0xc84a4e73, 0x1d35e568, 0x4e6dda62, 0x39caf6d6, 0x0c006822, 0x0f900118, 0x45a60f1d, 0xb7485077, 0x90b12411, 0x3e70d755, 0x35a819a3, 
    0x522d3a0d, 0xdca6add1, 0x5cd99d14, 0xa6d26364, 0x1b5bb4b1, 0xd9916d38, 0x02d838d6, 0x519371fd, 0x63131bac, 0x004aa9e8, 0x877ffb84, 0x7215d3f8, 
    0x67e08c1b, 0xd314adf5, 0xd1c61557, 0x0a631545, 0x2a4da628, 0x2bcd0b41, 0x66018d6d, 0x1f80823e, 0xd5b25445, 0x7516b56c, 0x28cc9fb4, 0x1869c332, 
    0xa45bc5fc, 0xa200f69d, 0x5180298a, 0x28801445, 0xa92c99a2, 0xad342f04, 0x980534b6, 0x7d000afa, 0xbe4d5f15, 0x78e4d5b6, 0x9ef324ec, 0x29c02e34, 
    0x27095018, 0x5a0de891, 0xaa27d309, 0x00fffc93, 0xb53297c2, 0x8a36e8c1, 0x4501a628, 0x9400142d, 0x6babd452, 0x3737f670, 0x16bc0ba9, 0x8acc74a3, 
    0x39c1605b, 0x298c7320, 0x027693e6, 0xab9e662c, 0xa97a0e82, 0x96a5ce3f, 0x6a7d4bda, 0xff6549e7, 0x8fb54c00, 0x760eb174, 0x9eb39b8d, 0x34788e87, 
    0x8c94088e, 0xdb67031e, 0xa5ca5893, 0x644beaf6, 0xce788003, 0x3840e547, 0x538c7a04, 0xd95d78cc, 0xfee59fed, 0x8956cc34, 0xdda12ba9, 0xa518c530, 
    0x26e0aaa2, 0x9e71da28, 0xce76b5d4, 0x3e7de6c6, 0xf728f2fe, 0x92116741, 0xc506dc77, 0xa9e39c00, 0x13951ee0, 0x36b88a9b, 0x4a36bbca, 0x3fc03957, 
    0x079495ca, 0xbf15e8c0, 0x6f714dad, 0xd6dd5a2c, 0xbb8be998, 0x10cbf768, 0x6e36da39, 0x8e0747ce, 0x832ba478, 0x29043921, 0x734dfc18, 0xbec96eca, 
    0xb9b56dc6, 0x18b3130b, 0x95bf8ee0, 0xd8d2be22, 0x3d6d571d, 0xa79fd5bf, 0x511300ff, 0xd0c79081, 0x21adf567, 0x5b4a1d67, 0x2b8aa20c, 0x2facb0a4, 
    0x5ab45d16, 0xf7475a7a, 0xef185fee, 0xd700ff81, 0x2bd76ec5, 0x6bdea77f, 0x1660207e, 0x1be12d68, 0xda197356, 0x9c8ee708, 0xabfd9e93, 0xd9f28d3a, 
    0xb1b20c0d, 0x1df1449b, 0x92a471ac, 0xf6e5d0ac, 0x97013c29, 0xc78d413f, 0x60d70cd0, 0xa4ee7114, 0xa13a00ff, 0xd0268537, 0xda9dbb75, 0x74985fc3, 
    0xc9c994eb, 0xc1cdde05, 0xcecf73da, 0x5be903d8, 0xdfda8d5a, 0x115797ea, 0x4ed308a9, 0x47822057, 0x8d3ff898, 0x366da562, 0x14479914, 0xa8fecd54, 
    0xffbb00ff, 0x11d3c400, 0x21c70f49, 0x68abfc73, 0xa7e4eace, 0xa228caa0, 0x9aaaa0ac, 0xdfed85ed, 0xb1a62e86, 0x53cc6986, 0x5124b346, 0x57192b96, 
    0x808ee462, 0xc793006c, 0x7cb56e35, 0xe95c331d, 0x598235be, 0xb264d91a, 0x1b676048, 0x02931d77, 0x27cf3857, 0x5567b5b7, 0x3f4723da, 0x00ff8306, 
    0xb7c47f08, 0x43f751d3, 0x97719ffd, 0x8afe73ce, 0x80fb7aec, 0x67526b6b, 0x77ba5693, 0x49c6c688, 0x0ef7274b, 0x6ba8e2e6, 0x3f6d1e5e, 0xc485bac5, 
    0xa3da9f7a, 0x45941b4b, 0xb396810b, 0x79f23670, 0xadc7402c, 0xa5dd5f69, 0xccf5fdfd, 0xd334426a, 0x4810246c, 0x1e071ff3, 0x7c2a57fc, 0xb9fa5fa9, 
    0x99147a12, 0xce716617, 0xf19ff83f, 0x27c8c0a8, 0xc6a666d0, 0x00ea0be5, 0x69d000ff, 0xc72f4011, 0x15f45f1e, 0x896867b4, 0xa2a8083d, 0xaeb0dc8a, 
    0xbc05418f, 0x5ee4e219, 0xc7efe958, 0xb992b3fd, 0x7d403ed2, 0xe1b11549, 0x78583246, 0x7c59dace, 0x38c29685, 0xc93876e0, 0x5e49ca31, 0xde6ec199, 
    0x2e4995d5, 0x997a025b, 0xbad7d637, 0xafbbc557, 0xde19dcb6, 0xcbf7097b, 0x7aab05ea, 0x7b156dfa, 0x50936650, 0xbc4892bd, 0x4a4832a7, 0x9b25e11f, 
    0xc29ba722, 0xb2f870d6, 0x22ebb40f, 0xb87b474b, 0xecc26465, 0xca55b447, 0x580e909c, 0xde50ebf6, 0xa8a1aedd, 0x9012cf5e, 0x37bb348f, 0xc73c3202, 
    0x916bfcc1, 0x225f47bb, 0x53d4fd26, 0x7ae03123, 0xc534f17f, 0xf68ff353, 0x4c8dfc33, 0xb0472583, 0x200dfa3f, 0x39b2bb5d, 0x85fc41d8, 0x6265a76a, 
    0x4541e853, 0x27e56314, 0x8dbae2d0, 0x076c2005, 0xaef44fbe, 0xf85c4393, 0xa388c53b, 0xc7cde924, 0x9b2b29d6, 0xead7ea3f, 0xf86ca57f, 0x3eb6cc55, 
    0x5f96b731, 0x14614b20, 0x641cb350, 0x5fc9a598, 0xac760b52, 0xf5b7f426, 0xc17247b8, 0xfe6cefd3, 0xeaf06922, 0x5ef80617, 0x808e784d, 0x24fbb0e0, 
    0xa08ee739, 0x862afc28, 0x4a6d25a2, 0x8609cbf4, 0xc6989147, 0xc72c877f, 0x696cad1f, 0x8f8e05fa, 0x526d8be2, 0xcd395a4d, 0x24a8fbb5, 0x5a1b0bed, 
    0xff64e01c, 0xa95a1000, 0xa9c5dfaf, 0x42dd336b, 0x0a888d08, 0x0c20c148, 0x2627b966, 0x7e1391a2, 0x679431ea, 0xffe91903, 0x28d2b200, 0x3cd6c7fb, 
    0x8ca5827e, 0xaa036163, 0x1552faf3, 0x02fa9018, 0xa754413f, 0x4eb988ad, 0xe815758a, 0x6d5c1bf3, 0x7361463d, 0xb6a341e8, 0x8e78586a, 0x5267a54f, 
    0x3ffd8d76, 0x36e84931, 0x7ff9f84f, 0xa7f24ff7, 0xf690eee0, 0xd1ccdfd8, 0x91f8fe22, 0x851f23df, 0xfa64f83f, 0x966be61f, 0x6e63f752, 0x11bdcdc8, 
    0x0f800018, 0x96fd8f43, 0xbd791f85, 0x28e8c763, 0xe967f56f, 0xd4c400ff, 0xc70db96a, 0x8ab46620, 0x626bdcba, 0x57f4293a, 0xc6a53147, 0xaa7fd054, 
    0xf1dffd97, 0x7d703fa4, 0x53a9f44f, 0xe8fec9ee, 0x598d55fe, 0xb7fe36de, 0x39424f22, 0xffe5e33f, 0xca3fdd00, 0x7f19fea5, 0xd3cc3fdd, 0x7dd0fbb1, 
    0x2a00ff18, 0x33bccf76, 0xfff10fc3, 0x95e51a00, 0x24af6845, 0x22a2e566, 0x1f206e8c, 0x468bfe4c, 0xfdfcaacd, 0x14f423d5, 0x5c0f2063, 0xc5b4ec7f, 
    0xec1f9651, 0xad55f967, 0x68c8b875, 0xdc4729a9, 0x6bfd513f, 0xadb1d4ad, 0x6bf51fc6, 0xa6d23ff5, 0xfb27b94f, 0x0f53f983, 0xfd531fdc, 0x77c6682a, 
    0x3f80d003, 0x3fabe74a, 0x44eefa77, 0xf81f829e, 0xfea95ff8, 0xccc7a542, 0x05c5a84f, 0xe47a0479, 0xc7b554fe, 0x432f5d29, 0x1847ee16, 0x7fba6703, 
    0x25f70d85, 0xa83d00ff, 0xe3befb55, 0xb79bca3f, 0xb85d6f69, 0xa36905fd, 0xba72d77f, 0xfa47a995, 0xeb8ffab6, 0x519a0152, 0x7fd40ff7, 0x0d75ed5a, 
    0xea3f229b, 0xa57fead7, 0x5c028458, 0xf957851e, 0x63605853, 0x4b45ccaf, 0xbffcdd1f, 0xb37aae90, 0xe6ae3fbc, 0xdf0a7a72, 0xfede7f79, 0x15459d86, 
    0x83ccddc6, 0x2aa4c0a0, 0xbae9b00a, 0xa00f728c, 0xbe8f34c5, 0x55c8bf7e, 0x8ac67d47, 0x49b3bd74, 0xcfea1f4e, 0xf55a7fd4, 0x07d2b19b, 0x9ffa58fd, 
    0x55da5be9, 0x86c7b58d, 0x2c77437c, 0xb2b4a65b, 0x88db4232, 0x3937c2da, 0x1dc843c7, 0x00ff046b, 0xfd531fab, 0x1cf0b12b, 0xeb5adf31, 0x33307796, 
    0x7114c9da, 0xbe424e48, 0x08ca7de5, 0x8e3382ef, 0xcf58e146, 0x25b8eb6f, 0xb3b15476, 0x117fb5d2, 0xa395ad18, 0xc263fbb4, 0x0007b314, 0x33ae23db, 
    0x94e44690, 0xedc8739e, 0xd4ee2ad3, 0x5b5c5e5b, 0xda11dc86, 0x27f88e3c, 0xcb74eb9a, 0x52ddb5b8, 0xd1742dd5, 0xb5dc9066, 0x87a4c3cd, 0x8b87fb0d, 
    0xf9c10082, 0xefa1d397, 0xacd79fd7, 0x8975d323, 0xc872a2ed, 0xe4b811a4, 0x5cf38c8c, 0x9aba9773, 0x9ac29f33, 0x8c13d031, 0xb4ec7f7b, 0xf5f13e8a, 
    0xa6827e4c, 0xb26f2355, 0x5853f9e3, 0xf37b480c, 0xa95285fc, 0x2ae689ad, 0xb3fa87d3, 0x90d61ff5, 0xfe519a0c, 0xf547fdac, 0xb01ad9ae, 0xd4c7ea3f, 
    0xec4a00ff, 0xd9a1193c, 0x93b7766a, 0xa879dbdf, 0xf20e15a5, 0x1c96c3bf, 0x912bea11, 0xfba3e865, 0xbdd20fc4, 0xaff3e107, 0x39e62df6, 0xff083ed9, 
    0x6b6ab600, 0xf5d73419, 0xc86623dc, 0x0e7f34ed, 0x6c1aa76b, 0x3ee54512, 0x0eee2c66, 0x3206acd2, 0xca8feb48, 0x05b82bb9, 0xe1f6e4b5, 0x64a408b7, 
    0x8c83ebdd, 0xeba077d7, 0xcb12ebd0, 0x6d981e69, 0xe225a154, 0x06303f6e, 0xf5fa710d, 0xb16e7a84, 0x594eb43d, 0x1c378214, 0x6b9e9191, 0xc8a47a92, 
    0xa3a95c9a, 0x7205572d, 0xaf9f873f, 0xdfb8d214, 0xfa11808e, 0xcb9a960a, 0xb73abef2, 0xeb1951f8, 0x60659aa9, 0x510a7f32, 0x7fd40ff7, 0x24d7585a, 
    0xf423d773, 0x3fd57fa1, 0x97925de1, 0xb69af9e9, 0x7f14bd0c, 0x57fa8178, 0x17ede067, 0xb9b4d44d, 0xf3b6bde7, 0x0eda255d, 0x541b18f6, 0x04b922f6, 
    0xeec8b900, 0xfe77a57f, 0x3b742101, 0xf7fe8c83, 0x45f9f538, 0x187de562, 0x37665743, 0x2fbcd24f, 0x65ab24ae, 0x1e6d2c6f, 0x23b04b32, 0x3b923a3d, 
    0x00771b57, 0xdc9ebcb6, 0x8c14e136, 0x7170bd9b, 0x1df4ee9a, 0x59621d7a, 0x0dd3236d, 0xbc2494aa, 0x00e6c74d, 0x5e3faec1, 0xd64d8fb0, 0xcb89b627, 
    0xe3469022, 0xcd333292, 0x74ad3463, 0x9acaa529, 0x3e8ca933, 0x00ff3857, 0xd6d1a738, 0x26193ba1, 0x23418d57, 0xa1f423df, 0xe1bfd57f, 0x2ef3414f, 
    0x9202cf3f, 0x1ff58d3e, 0xba9cbace, 0x97667efa, 0x3917a01c, 0xbad23ff5, 0x680800ff, 0xa5a36e9a, 0xb7ed3d4d, 0x0126e99a, 0xa38dc3de, 0x97e48ad0, 
    0x9d7ffca8, 0x38029e77, 0x330eeed0, 0xf01f4f89, 0x582d5911, 0x1bb5ace1, 0x175ee9a7, 0xb25512d7, 0x8f3696b7, 0x11d82519, 0x1d499d9e, 0x80bb8dab, 
    0x6e4f5e5b, 0x468a701b, 0x38b8de4d, 0x0e7a77cd, 0x2cb10ebd, 0x86e991b6, 0x5e124ad5, 0x00f3e326, 0xaf1fd760, 0xeba64758, 0xe544db13, 0x71234891, 
    0xe61919c9, 0xe85a69a6, 0x682a9726, 0x2a23a4ce, 0x454bef40, 0x4a8c9d66, 0xacfee114, 0xa7f547fd, 0xf4dfb308, 0x8dfc11a5, 0xa45e71cf, 0x4be71ea7, 
    0x00ff6168, 0xfaa73e56, 0x8600ff56, 0x813641fc, 0x1014716d, 0x61e2a2a4, 0x8327172b, 0x1e0357b1, 0xa3152bca, 0xf10f702c, 0x8531961a, 0xae90bffc, 
    0x3a4eb37a, 0xa165e510, 0xcde3c9d5, 0xb6849041, 0x6ef41881, 0xe65a3f4e, 0x995b9ee7, 0xbc9c79de, 0x7bcc728e, 0xe38a8e9a, 0x37736f72, 0x420af726, 
    0xbd072937, 0x3e78262d, 0x24f42bd4, 0xf07b9fa8, 0xbf9cca3f, 0xa7f09fea, 0x7b3f382c, 0xb5a723a8, 0xb7fbc72a, 0xef8aeb19, 0x9fbd4895, 0xc9ddcc6f, 
    0x3ee9ae02, 0xadf24f8c, 0xf3eb0ebf, 0xc7b316e8, 0x2eca3104, 0x72b11225, 0x70153b78, 0xace8fe31, 0x3e395c84, 0x4a00ffa4, 0x1e208c72, 0xbe39cdd5, 
    0x6ccd7c86, 0xf3783275, 0x2d216450, 0x1b3d46a0, 0xb9d68f93, 0xe696e7b9, 0x2f679e77, 0x1eb39c23, 0xb1a2a3e6, 0x39716f72, 0x4551b837, 0x4822a507, 
    0x539fea22, 0x1922a9fc, 0x1fb90756, 0xc154a5ce, 0xe19f9e53, 0xc8ed9148, 0x4e5d71cf, 0x7ef977a2, 0xa8429766, 0x7f777dc3, 0xbcd0db3a, 0xd9a2714b, 
    0x39822218, 0x5ff2b603, 0x6f07e839, 0xc18562a5, 0xd2f9d7cf, 0xe881c2a8, 0xc42e172b, 0xd4b135f3, 0x41cde3c9, 0x81b68490, 0x4e6ef418, 0xe7e65a3f, 
    0xde995b9e, 0x8ebc9c79, 0x9a7bcc72, 0x26878a8e, 0xf72607f7, 0x91a2280a, 0xaf601023, 0x0a00ffb8, 0xfdfbfe48, 0x8e71e169, 0x2a520c7a, 0xd6732c6d, 
    0x7f5672b5, 0x2aae52d7, 0xf34ffcf4, 0xc417adad, 0xab251ab7, 0x7204c3db, 0xb9ecbe2b, 0xfd011c39, 0x0a0c142b, 0xeeb48b5a, 0xe84e9b84, 0xe6f124ea, 
    0x5b42c8a0, 0x377a8c40, 0x73ad1f27, 0xcc2dcf73, 0x5ece3cef, 0x3d663947, 0x274547cd, 0x931bf726, 0x5114857b, 0x18249248, 0x527bfe2b, 0xfab0ca28, 
    0xbf72d453, 0x41a4f04f, 0xadf730f3, 0xbafeb7f9, 0x7c547197, 0x8ed65cdf, 0x3aeaa19d, 0xce96b9a5, 0x3b45cddb, 0x83abde49, 0x54ef738f, 0xd7dcd717, 
    0x7f30e079, 0x1e146eb1, 0xff01e27c, 0x958a8000, 0xc5313b69, 0x9b333b29, 0xdcdac297, 0x1bac5d28, 0x56d7ae03, 0x9035903f, 0x60040741, 0x26fdf48a, 
    0xe2d353cf, 0x4dafaf9d, 0x411420e9, 0xfadc63d4, 0x26ea9cd7, 0xb45ca943, 0xa55d18b1, 0xe19f3166, 0x652acec9, 0x149c201b, 0x84d4ca55, 0x4beb1164, 
    0xd0984145, 0x456a1f3a, 0xa7f7b01c, 0x4a1fdd2f, 0xbb6ade07, 0xbf1e30ee, 0xf4d3d05a, 0x80534b3d, 0xe66f67cb, 0xefa41da2, 0xe41ee755, 0xf8e97856, 
    0x40e07bd7, 0x01728f4e, 0x3fcef3c1, 0x554491ef, 0x79848add, 0x4bcd999d, 0x146e6de1, 0x810dd62e, 0x1fab6bd7, 0x20c81ac8, 0x45308283, 0x67937e7a, 
    0x4ef1e9a9, 0xf4a6d7d7, 0xea200a90, 0x6b7dee31, 0x211375ce, 0x585aaed4, 0xb3d22e8c, 0xe4f0cf18, 0x364a14e7, 0x55149c43, 0x4551d4ca, 0x820e9841, 
    0xa3347590, 0x4d1da4a0, 0xfb551430, 0xd5510f0d, 0xed6c6921, 0xda56d4bc, 0x1f5cf54e, 0x0ad5fbc4, 0x09083cef, 0x3840eed1, 0xfdc7793e, 0xb9a22af2, 
    0x54848b9d, 0x4bcd999d, 0x146e6de1, 0x810dd62e, 0x1fab6bd7, 0x20c81ac8, 0x45308283, 0x67937e7a, 0x4ef1e9a9, 0xf4a6d7d7, 0xea200a90, 0x6b7dee31, 
    0x211375ce, 0x585aaed4, 0xb3d22e8c, 0xe4f0cf18, 0x364a14e7, 0x55149c43, 0x4551d4ca, 0x45519841, 0xfb550014, 0xd5510f0d, 0xed6c6921, 0xda56d4bc, 
    0x1f5cf54e, 0x0ad5fbc4, 0x09083cef, 0x3840eed1, 0xfb8f7326, 0x5d4555e4, 0x4945b8d8, 0xbed49cd9, 0x42e1d616, 0x1dd860ed, 0xfcb1ba76, 0x0882ac81, 
    0x57042338, 0x7a36e9a7, 0xed149f9e, 0x496f7a7d, 0xa30ea200, 0xbcd6e71e, 0x1d3251e7, 0x88a5e54a, 0x312bedc2, 0x0e00ff8c, 0x514e714e, 0xa2e01cb2, 
    0x8aa256ae, 0x5fc40c2a, 0x8b943eba, 0xa5f0dbf7, 0x943eba5f, 0xf0dbf78b, 0xe23eeeab, 0xd7c44faf, 0x8b9be071, 0x948bb478, 0xcb38e29a, 0xc01d704c, 
    0x0e57743f, 0x4b133fbd, 0xc7957642, 0x9dbb7219, 0x69a68de6, 0x75ef04fa, 0xa01cb726, 0x0a411ba9, 0x9a93113f, 0xf8fb35e5, 0x7b662db5, 0xb11141a8, 
    0x24184901, 0x75d68c01, 0xacae9c14, 0x6475e586, 0xa9288a82, 0xa3fb4520, 0xcdfb40e9, 0xf4d1fd42, 0xaae67da0, 0x4a4731ee, 0x7113fced, 0x7291166f, 
    0x19475c93, 0xb8038e69, 0xe28aee07, 0xb332a228, 0x572ee3b8, 0xb4d1bc73, 0x9d403fcd, 0xe3d6a4ee, 0x68231594, 0x32e24721, 0xbfa65c73, 0xaca5167f, 
    0x220875cf, 0x23292036, 0x9a318004, 0x2b87a2ce, 0x5db921ab, 0x8aa22059, 0xd001482a, 0xe840eb51, 0x5d01a628, 0x2d6e82bf, 0x522ed2e2, 0x2de3886b, 
    0x0077c031, 0x455cd1fd, 0xeeece214, 0xeeca6554, 0x99369a77, 0xbd13e8a7, 0x72dc9ad4, 0x046da482, 0x4e46fc28, 0xefd7946b, 0x99b5d4e2, 0x4604a1ee, 
    0x602405c4, 0x59330690, 0x75e550d4, 0xab2b3764, 0x45511424, 0x14450149, 0xbf5d0150, 0xe22d6e82, 0x6b522ed2, 0x312de388, 0xfd0077c0, 0x15455cd1, 
    0x2a777651, 0x3b77e532, 0xd34c1bcd, 0xeade09f4, 0x41396e4d, 0x14823652, 0x3527237e, 0xf1f76bca, 0xf7cc5a6a, 0x62238250, 0x48309202, 0xeaac1903, 
    0xb2ba7228, 0x92d5951b, 0xa4a2280a, 0x00d9ff83, 
};
};
} // namespace BluePrint
