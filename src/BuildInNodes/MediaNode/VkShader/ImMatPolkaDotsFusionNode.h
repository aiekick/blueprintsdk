#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <PolkaDots_vulkan.h>

namespace BluePrint
{
struct PolkaDotsFusionNode final : Node
{
    BP_NODE_WITH_NAME(PolkaDotsFusionNode, "PolkaDots Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    PolkaDotsFusionNode(BP* blueprint): Node(blueprint) { m_Name = "PolkaDots Transform"; }

    ~PolkaDotsFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::PolkaDots_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_dots);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _dots = m_dots;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Dots##PolkaDots", &_dots, 1.0, 100.f, "%.0f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_dots##PolkaDots")) { _dots = 20.f; changed = true; }
        ImGui::PopItemWidth();
        if (_dots != m_dots) { m_dots = _dots; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("dots"))
        {
            auto& val = value["dots"];
            if (val.is_number()) 
                m_dots = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["dots"] = imgui_json::number(m_dots);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf2a1"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_dots        {20.f};
    ImGui::PolkaDots_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 6037;
    const unsigned int logo_data[6040/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0x290aa08a, 0x0c9c1354, 0x0c14cff1, 0x4a9363e4, 0xc5eb21e0, 0x3939a714, 0x6e0dd5e0, 0x2aedb4f9, 0x93edd459, 0xfe38631b, 0x00fffc23, 0x6537d4fa, 
    0x3a502f70, 0x86df5cf3, 0xf24e6db5, 0x032f58fa, 0x9748beca, 0x830d8c70, 0x38700220, 0x3d197007, 0xa4eb1dc8, 0xc6d41c1c, 0x02e84a4a, 0x01ab288a, 
    0x0f723046, 0xaf8334b7, 0x214b2435, 0x8f3dc604, 0x2e066a4a, 0xd5eefd36, 0xeb5fcb1c, 0x105718fe, 0x0f0c3ce3, 0x30300e7a, 0xae34bf0f, 0xf7df3918, 
    0x7a5dd5bb, 0xc337ad5b, 0x2beca8cf, 0x292a6f19, 0x460e0830, 0x3cc7f571, 0x34f4c1f5, 0xfe932439, 0x6481e0bf, 0xfb200763, 0xf33a4873, 0x3e0e1e59, 
    0xfd9ad621, 0xde3e2fde, 0x579605d6, 0x60795a3e, 0x04c74182, 0x3dd303e4, 0x2c41612b, 0xa59f8c02, 0x3649c928, 0xaf87a037, 0x851da714, 0x0f62080c, 
    0x0243f35c, 0x388e9131, 0x0eb0afe2, 0xbd531843, 0x69b03d49, 0x70c380ab, 0x9e8aefc8, 0x50422801, 0x35230f2e, 0x5ce26a1c, 0xae97f928, 0x79751e6b, 
    0x00fff86b, 0x8cfb2256, 0x5189a562, 0xb152d881, 0x10148a4d, 0xd369cedd, 0x703ef36f, 0x6ba6f601, 0x7e36dabf, 0xd2d4b815, 0x3f30f7db, 0x07a8e797, 
    0xe402366b, 0xd7338067, 0xa5c7c918, 0xbf68653e, 0xd6b8fad7, 0xda1414b6, 0x634f5241, 0x408a949e, 0xe9919120, 0x8709de59, 0x77e41ac5, 0xdd8c7d92, 
    0x326324db, 0x78c88a7c, 0x16048561, 0x9d3ff6c8, 0x78bb4769, 0x53bbf7d9, 0xfe4d938c, 0xb087d5bf, 0x538ad7d3, 0xef030c8c, 0x0e862bcd, 0xf4eefd77, 
    0x529804e9, 0xc0711ce3, 0xd7dfbeaa, 0x8e5c38fc, 0x18ab288a, 0x0be32357, 0x7bcb7bd5, 0xfc919d23, 0xffdf63f2, 0xebfcad00, 0x74e8acae, 0x9fd52248, 
    0x24cb3252, 0x181b9ecf, 0xd3e3f419, 0x25a7898a, 0x7a723464, 0x366db18e, 0x657b6ba7, 0x0034b11c, 0xc8000c06, 0xd3878e07, 0x65a8bb22, 0x6349e149, 
    0xc0504739, 0x6a5083fa, 0x9d3a7c3a, 0xb09cb6a1, 0x7a054152, 0xd6293d82, 0x67638b36, 0xee48b21d, 0xf8028cb1, 0x510a3fce, 0x02778b8b, 0x5a5114c5, 
    0x20857208, 0x4147b0e5, 0x0483b48e, 0x5a0f9c8c, 0x43c83896, 0x8edf12ba, 0x7e07352a, 0xacf6ee0a, 0xdf6ed3d4, 0x92f7f5a7, 0x021ce29e, 0x6b3d7270, 
    0xe495f193, 0xa7ad350d, 0x9750ec98, 0x07f04299, 0x27cfc118, 0xc771bb1b, 0xaf753c27, 0xb7cb8ff7, 0xec2fd5d8, 0xb77e31bb, 0x815b08cb, 0x638673bb, 
    0x900120bf, 0xe300064e, 0xb07dea18, 0x92a29ca4, 0xf6851c29, 0xa13e63af, 0x9eb0f50d, 0x42d12d09, 0xc821c5ae, 0xb8f9c161, 0xcf734b1b, 0x47ce3140, 
    0x3ca90c6f, 0x51362a29, 0xd02330d4, 0xedac2fd3, 0x5b3a1df5, 0xbc55883b, 0xc965a5c2, 0xf80719df, 0x0e3dc779, 0x2c29fc41, 0xd2c2166d, 0x9176643b, 
    0xeb17e063, 0x8c284e8f, 0x271b9b64, 0x512b8aa2, 0x6c1cc712, 0x1e80b484, 0x54d434c3, 0x2f7c862f, 0xd0d53aae, 0x4001a38a, 0xf2a2ce1f, 0x958f91c0, 
    0x958e7190, 0xdc451cc1, 0xa918e0bf, 0x559156ee, 0x85db0a5b, 0x7d329e73, 0x8340d934, 0x1d75dd53, 0x2066dfc0, 0x4f65f96c, 0x1da7bfcf, 0x35e7f536, 
    0x1800dcd3, 0x7e9c3d62, 0xf6f61c75, 0xfdc9b14e, 0x51771499, 0x005d58c8, 0x05579043, 0x1ee0a84f, 0xa9e31c79, 0x18e7aead, 0xa4a1afdb, 0xf625c75e, 
    0x53fe02ad, 0x2eab36a9, 0x1169739b, 0xa9b5db30, 0x4605ed93, 0xc2297755, 0xd7e4eee7, 0x77246f53, 0xbf2ac711, 0x0d8622c9, 0x4b2a82d7, 0xb42f2c88, 
    0xf4aeac89, 0x929c9de4, 0x0d4706b7, 0x0001c611, 0xe479701c, 0xac55737d, 0xd6c2522d, 0x9566653b, 0x3c17e023, 0x8aabf0e3, 0x58a66c92, 0xe4e00438, 
    0x1840d07a, 0xf11ccfc1, 0x4e8283d2, 0x04a50706, 0x18170682, 0xeb5aefeb, 0x846216a0, 0x18896079, 0x350d9e67, 0x87395f22, 0x603a7298, 0xc06856f3, 
    0x7a729c04, 0xe5ed93d7, 0xcecd99af, 0xaa4c2af5, 0x4f787f1d, 0x569c9363, 0xf4ed8b77, 0xe7257c59, 0xbe95ad4f, 0x2a5fbbb5, 0x227338c0, 0xd18e1bb0, 
    0xe3cef1ca, 0xa48ecbc7, 0x09aac456, 0xe7eee543, 0xc65e919a, 0x3a842b0b, 0x12979425, 0x84b78b9c, 0xe8c0a979, 0xe9d391c3, 0xba15c7eb, 0xbf8a329f, 
    0x6c0969e4, 0xdf45ba73, 0x6b0bb586, 0x4b3cee99, 0x9010a277, 0x314189ee, 0x3ce0c7be, 0x3c789943, 0x532f3f6d, 0x47f2165a, 0xaf4a1271, 0xa70c7584, 
    0x4d6bce19, 0x449f2c2f, 0x41e73a7d, 0x0612bbb2, 0x96d134dd, 0x3dc8787e, 0x8cd08154, 0xc85aaf63, 0x4f536dd3, 0x77d98eb6, 0x1782b1cc, 0x56d05f7f, 
    0xdf5ce6f1, 0xd01b0df0, 0x850d8099, 0xa5b81e39, 0xaf8d5175, 0x0fc5f0bb, 0xb7cbcff7, 0x4296d2db, 0x9f3d62bc, 0x37d95a8f, 0xeb0ffca7, 0x91c00eee, 
    0xc8a88c3b, 0x332ad2fa, 0xf439d036, 0x295562a9, 0xf4a9b8fe, 0xa89129ce, 0x36f348f3, 0xb55efc81, 0x9777b49f, 0x9b279397, 0x878cae71, 0x6868300c, 
    0x2e3314dd, 0x004aa701, 0xf9cdfb71, 0x4b714eee, 0x4fdb1274, 0x536ec97b, 0x8de08cc9, 0x73c691e0, 0x3bc639b7, 0xb49fdae3, 0x939f8f76, 0xb118f61d, 
    0x5c65a9bb, 0xceaa4881, 0x9326a370, 0xd5b5b84b, 0xb4b8e56c, 0x64a480bf, 0x15ca8c87, 0x31760efa, 0x403d470c, 0x0b303ec5, 0xf49efdfd, 0xbe9beef9, 
    0xfbfa4fde, 0xac51ef82, 0x600449a5, 0x4046568a, 0xa5670c0b, 0x0372000e, 0xa7f5f76e, 0x8901a048, 0x55f9f137, 0xff3c3d73, 0xef90af00, 0x772561b1, 
    0x3f3ec25d, 0x9801a8de, 0x3f0cc4cc, 0xff189a7a, 0xa7c47700, 0x32b5c39e, 0xc39ec738, 0x301d39cc, 0x17c53579, 0x2f59b908, 0x5c59c9c4, 0x7f93558e, 
    0x3d3dc9cf, 0x0ae578e8, 0xdf178e0b, 0xc0783ea5, 0xcf99cc75, 0x2ea9f65c, 0x953efba0, 0xe12ca32e, 0x4bcee36d, 0x8c7132ca, 0xd49373e1, 0x55b60674, 
    0x14f98f34, 0xc502b1a5, 0x7c542e2b, 0x35addfa7, 0x83b09d15, 0xa749cd91, 0x62a3b63d, 0x1b756d2e, 0xd8095267, 0x795d512e, 0x70279423, 0x109bdae7, 
    0x36efcf05, 0xcd38b863, 0x93daa852, 0xf5ee18fd, 0xf0e1ca1a, 0xad3feec0, 0x018aa42b, 0x34077d70, 0x797c0048, 0x9d5abd9b, 0xef07802a, 0xb54a9fb7, 
    0xf9f97827, 0xc262df31, 0xd8eeba3b, 0xffad3e00, 0x59a4d600, 0x97af985d, 0xbae53a82, 0xa942a353, 0x14b7308f, 0x31128fd5, 0xbd9e9c12, 0x2ff7cd2b, 
    0x0d73c32f, 0xce9b2335, 0xe377bc2e, 0xb348b41e, 0xc86679f9, 0x583a05ee, 0x0f99e9f2, 0x6556735c, 0x8d0eeed3, 0xc531aa75, 0x5926a89d, 0xc005d459, 
    0xf5d431ce, 0x35a90318, 0x2d9766bc, 0x9e16f7ad, 0x934629d6, 0x145ec818, 0x88e93df6, 0x073b6f92, 0xa6a3b5cc, 0x861a97e9, 0x63a7fd8f, 0x055a5c22, 
    0xe80cc9cb, 0x10033ec2, 0x00a91cc0, 0x1dc14182, 0x0c4a8cea, 0xe708998d, 0xd68c8300, 0xf4c4a7aa, 0x57bb8afb, 0x9927eb18, 0x52331f87, 0x0baa48ba, 
    0xcd8103e7, 0xab79802c, 0xf99e7389, 0x506629ce, 0xc76d6210, 0xa9d59cd0, 0x98fc77bf, 0x5a61b1ef, 0x06d80142, 0x00ff167b, 0x421a50eb, 0xef81e571, 
    0xb5ab9cba, 0xeb719271, 0x3b315c40, 0xd263cf89, 0x5dc7dbbc, 0x080d333f, 0x5d4169e4, 0x5c9fbcaa, 0x79e749d2, 0xc7989d6d, 0x6ebaa738, 0xe0ca3b65, 
    0x875d05f0, 0xb0bdbd47, 0xa220ee9a, 0xd97c00da, 0x4045545e, 0x88254906, 0xd69c03c0, 0x6cf79291, 0x194bd790, 0xbefc89b1, 0x69b60308, 0xcedba491, 
    0x4d420fde, 0x8de1c76d, 0xcca5d95c, 0x74a09950, 0x2c45920e, 0x32520772, 0x0439c108, 0x714c567a, 0x98c791ed, 0x3b820377, 0xc5a7cad6, 0xda5ddcb7, 
    0xc99104b9, 0x66b961e6, 0xcad23bee, 0xf9058592, 0xcaa7f403, 0xcb5cce83, 0x6a4feac9, 0x7979d459, 0x182349f3, 0x55adf504, 0x43fe614d, 0x2892d852, 
    0xc65ccbd3, 0x39728e33, 0x9c2f22a6, 0xb6e388f9, 0x153d1547, 0xaf65edc3, 0xd4339799, 0x91a83aad, 0x79c61971, 0xf851ebc0, 0xf0617b9a, 0xfbdffafa, 
    0x994bf21a, 0xf62e4f67, 0xc3dd7f3b, 0xdc2120f3, 0x0009321e, 0xebc3f21c, 0x2331d856, 0xb8070369, 0x6fc16fcd, 0x1378a87b, 0xddb4d353, 0xe6c6de4a, 
    0x66ac42e2, 0xa88c9700, 0x0292ab0c, 0xcfc93892, 0x1ae6877e, 0x46d2a5c6, 0x8e76e5b4, 0x5676c16b, 0x91b21e1e, 0xaa1f7c2e, 0xc4deb36a, 0x5950b7a8, 
    0x0fee6319, 0xe49433ef, 0x811dede0, 0x2d86f4e4, 0x2de5c6bb, 0xd0a22bec, 0x78134fb4, 0xc3334e6b, 0x4b0e3de2, 0x22558984, 0x862157bb, 0xfcc8de79, 
    0x1b103a10, 0xd673ad3f, 0x3cdddeb3, 0x9248ddb2, 0xcf1b995c, 0x91552990, 0x0c5810f7, 0x1cc9090e, 0x65bcb50e, 0xa67ec968, 0x930d7a92, 0xa814ce1b, 
    0x0ae934f4, 0xa98c6d60, 0x6569f23c, 0x31a07912, 0x9662bbf9, 0xbd512861, 0x5bed1981, 0xfe3a7c29, 0xbec9d53f, 0xab50a5c5, 0xa4f6b880, 0xe0b6a211, 
    0x15751aa0, 0x753d73e5, 0xa4c8ee39, 0xa6842e45, 0x7f207972, 0xb4bdd43a, 0x7a866fb2, 0xd2e8b2dc, 0x2277485f, 0x5e6abc3d, 0x7215b013, 0xd8c00e72, 
    0x39e31927, 0x57a86604, 0xa589e15f, 0xc5de0d4f, 0x6d677969, 0x289fd278, 0xd1c982dd, 0x70ca807a, 0x8e071979, 0xa415e3bc, 0xd248db26, 0x7f8cf79b, 
    0x3a766804, 0xf2de8627, 0x5d32c3ef, 0xaac271b4, 0x2c8f60cb, 0x50dcc8c5, 0x12945d92, 0x1d032709, 0x0c068233, 0xe0f61681, 0x448d570b, 0x1244048c, 
    0x9ceee763, 0xf4391df7, 0xd243efae, 0x7bb64193, 0x6641fc99, 0x5c096dd7, 0x5ce5feaa, 0xe57725f4, 0x7d82fa80, 0x3515c7b3, 0x797fa1e6, 0xdbf3cd35, 
    0xf3b0c3b5, 0x3c22151a, 0x70d07de0, 0xe7758c71, 0xedd4adf1, 0x4953bf16, 0x9c52773f, 0x7cd07ca5, 0xf1d0a3b2, 0x60b6599a, 0xf5a98c6d, 0x56e91423, 
    0xaee43243, 0x6729424f, 0xca05ec12, 0xb4d51ee0, 0x7f0daf64, 0x64b12711, 0x300a0c0c, 0x9e1c2701, 0x615e51b4, 0xb62223ce, 0xeb710037, 0x6787665d, 
    0xbde07d63, 0x4f432d52, 0x640a843a, 0xef916e63, 0x107dc477, 0x60d8df75, 0x57d49383, 0x82bf5d29, 0xd2e22d6e, 0x886b522e, 0xc0312de3, 0xd1fd0077, 
    0xe66e535a, 0x3c21beb4, 0x7d6be11f, 0x3e94451f, 0x75c70a9b, 0xd66a131a, 0xe742aee8, 0xef00ff6e, 0x12f3731e, 0xc435d747, 0x1b75805c, 0x6d4dd69d, 
    0x262256ba, 0xf360794c, 0xbdab1db7, 0x3fcdb4d1, 0xa4ee9d40, 0x1594e3d6, 0x47216823, 0x5c7332e2, 0xfa7aad76, 0x7677b38e, 0x4892bd7c, 0x8c80bd7c, 
    0xcf49e1a8, 0x7a9f017c, 0x6bd09adb, 0xdd6f2ef5, 0xe7d9a532, 0x078ef228, 0x13cd7404, 0x45c4d914, 0xc5957a4e, 0xca902049, 0x9cf14a85, 0x49e09266, 
    0xe3b21ce5, 0x63ad18bf, 0xcd3fdc34, 0xf4c49e92, 0x18704551, 0xf0b82b86, 0x68dd1154, 0x46f3b617, 0x8c2cc592, 0x95a18e8e, 0x20084081, 0xd7c315f5, 
    0x8b9be06f, 0x948bb478, 0xcb38e29a, 0xc01d704c, 0x9456743f, 0x5f4a23fe, 0xdde1a511, 0xf6c3e71a, 0x8e975b12, 0x1b661448, 0x2ac2787b, 0xe0c04972, 
    0x755e930c, 0x2b759b76, 0x957ddaac, 0xbd7cac84, 0xd093d9b8, 0x69a37157, 0x3b817e9a, 0xc7ad49dd, 0xd0462a28, 0x64c48f42, 0x7a4db9e6, 0x594b3dfe, 
    0x7e84bab8, 0x910988ed, 0x66004082, 0xb1d14eae, 0x8fe97e73, 0xe62a4128, 0x079e7a32, 0xe1a2f15f, 0x39e16351, 0x48a503f5, 0x61c34de2, 0x52047700, 
    0x3bcabf4f, 0xa59fd371, 0x43ef2754, 0xf584c45f, 0x2a529444, 0x71958faa, 0x714453f8, 0xcf202486, 0xd4b2b0d2, 0x36d9f481, 0x068e3bec, 0xa88e3439, 
    0x924c6e58, 0xd0f9e37a, 0x7c5218c9, 0x9a837eb0, 0x609aa4a8, 0x1494af86, 0x7af3330f, 0x981f3182, 0xfb57787f, 0x5458a5a7, 0xbe7c668f, 0xc434c73d, 
    0xeeb7cb58, 0xbc325ecf, 0x92664457, 0xee89e696, 0xff402041, 0x3b122b00, 0x2016599a, 0x9fe49607, 0xe54b5243, 0xb3fb89f9, 0x660ce08e, 0x9cbdfc89, 
    0xdbb10721, 0x4f8de88a, 0xb9eb7f87, 0xa259ec69, 0x03180080, 0x2a90da03, 0x13a09083, 0x68e615df, 0xe4418b73, 0x8cc89a62, 0xfd046541, 0x97555929, 
    0xe929320c, 0x1710c0a0, 0x731de339, 0x1d942750, 0xff7a98cf, 0x30157b00, 0xa3800b44, 0xa998da07, 0x3901e616, 0x6bc571cf, 0xe5969206, 0x9721b526, 
    0xce2f32cb, 0x71ceef48, 0x8c02c144, 0x9cfb5848, 0x09b18ed4, 0xe8732817, 0x234c1407, 0xab00ff11, 0x8c0bc1ed, 0x6b6a4457, 0x624fcb1d, 0x0303287a, 
    0x49008c02, 0x70ad27c7, 0x85148518, 0x0e902041, 0x0890523a, 0xf41e19c1, 0x28a600f4, 0xc986ed4d, 0xe069463d, 0x07063000, 0x035531b5, 0xef08261c, 
    0x316ba58a, 0xb37c39a2, 0x7e27932a, 0x9c00ff80, 0x98e54f52, 0xc39e7cf8, 0x58466a76, 0x92c78cf7, 0xe3c7817b, 0x89202a49, 0xb0d3c18e, 0x274d88ae, 
    0x624fcb1d, 0xb9a2285a, 0x318ac20c, 0x34181941, 0xcd315000, 0x52606000, 0x00920005, 0x064ceb19, 0xee72b349, 0xd84d1f7c, 0x8ca19ca4, 0x6064bbe5, 
    0xa1b2a7f5, 0x7e827223, 0x9b40a299, 0x03c87509, 0x928cb5d2, 0xf5a4dc71, 0x8aa2a843, 0xb7ae90c4, 0x9b2e7ac2, 0xcfb369a9, 0xbae66d7b, 0xec1d544a, 
    0x620f3030, 0xefae922b, 0x351aa7c0, 0x3171c6c9, 0x2a02fee3, 0x29cdaee0, 0xcda8e5a4, 0xbef04a3f, 0x95ad92b8, 0x78b4b1bc, 0x8cc02ec9, 0xed48eaf4, 
    0x0dd45d5c, 0x6e717d6d, 0x91625959, 0xc1775891, 0xe8de3523, 0xc43af43a, 0xa647dab2, 0x4928551b, 0xcc8f9b78, 0x765c8301, 0x991e61bb, 0x445bdcac, 
    0x2308e8ec, 0x0019c971, 0xe556aae2, 0x72692aba, 0xe66f19dd, 0x02b48b79, 0x9f68aea3, 0xe376947f, 0x734a3fa7, 0x627e5900, 0x5a0f600f, 0x8ef2d86c, 
    0x5a8f1f5b, 0x4cf47e71, 0x8a92e8d6, 0x0a49ac28, 0xa2277ceb, 0x9b96bae9, 0xdeb6f73c, 0x41a5a46b, 0x0003c3de, 0x2ab922f6, 0x710afcee, 0x679c5ca3, 
    0xe03f1e13, 0xec0aae22, 0x5a4e9ad2, 0xaff4d38c, 0x2a89eb0b, 0x1bcb5bd9, 0xec928c47, 0xa44ecf08, 0x5dc6d58e, 0xd96bf6c1, 0x1106f7ed, 0x7718c848, 
    0xbc6bc6c1, 0x75e875d0, 0x8fb46589, 0x50aa364c, 0x1f37f192, 0xb8060398, 0x3dc27afd, 0xda9e5837, 0x418a2c27, 0xc8488e1b, 0xb55235cf, 0x5c9a8aae, 
    0xee34a3a9, 0xdf31c6c8, 0x31069234, 0x8e64a090, 0xa06ceaf4, 0xda16d818, 0x2fa6d631, 0x714b46de, 0x404551d4, 0x09dfba82, 0xa56ebae8, 0xed3dcfa6, 
    0x29e99ab7, 0xc0b07750, 0xae883dc0, 0x02bfbb4a, 0x27d7689c, 0x8fc7c419, 0x82ab08f8, 0x93a634bb, 0xfd34a396, 0xe2fac22b, 0xf256b64a, 0x24e3d1c6, 
    0xd33302bb, 0x71b523a9, 0x6b0b70b7, 0x6ec3edc9, 0xbbc94811, 0xae1907d7, 0xa1d741ef, 0xd29625d6, 0xa9da303d, 0xdcc44b42, 0x1a0c607e, 0x08ebf5e3, 
    0x7b62ddf4, 0x29b29c68, 0x23396e04, 0x4dd53c23, 0x34155d2b, 0x774653b9, 0xde711c39, 0x3b6cf791, 0x5a6af73e, 0x27a7fb46, 0xacf4751c, 0x8b18d5d3, 
    0x00521445, 0x7ac2b7ae, 0x69a99b2e, 0x6d7bcfb3, 0x544abae6, 0x3030ec1d, 0x922b620f, 0xa7c0efae, 0xc6c9351a, 0xfee33171, 0xaee02a02, 0xe5a429cd, 
    0x4a3fcda8, 0x92b8bef0, 0xb1bc95ad, 0x2ec978b4, 0xeaf48cc0, 0x6d5ced48, 0xf2da02dc, 0x84db707b, 0xf56e3252, 0xbb6bc6c1, 0x75e875d0, 0x8fb46589, 
    0x50aa364c, 0x1f37f192, 0xb8060398, 0x3dc27afd, 0xda9e5837, 0x418a2c27, 0xc8488e1b, 0x4a5335cf, 0x2e4d45d7, 0x419dd154, 0xf63a0ece, 0x465614cd, 
    0x50144521, 0x2f5a5b01, 0x5b346e89, 0x23188267, 0x25ef3b90, 0x3f40cfc9, 0x4dd162a5, 0x6d1ab636, 0x4fa28e6a, 0x840c6a1e, 0xc708b425, 0xfa7172a3, 
    0xf23c37d7, 0xccf3cedc, 0x9673e4e5, 0x74d4dc63, 0xc6bd6d53, 0x1ee2dee4, 0xfafb8ca3, 0x46206553, 0xa587bb72, 0xc6c8ee38, 0x9234df31, 0x63f2db6f, 
    0xbae3f43e, 0x1475dc12, 0xad205051, 0xb7c417ad, 0xc1b32d1a, 0x1dc8110c, 0xe7e492f7, 0xb1d21fa0, 0x5b9ba668, 0x47b5360d, 0x358f2751, 0xda124206, 
    0xb9d16304, 0x9b6bfd38, 0x676e799e, 0xf272e679, 0xee31cb39, 0x72283a6a, 0x37b9716f, 0xc23152b8, 0x29ec339e, 0x8ee3c879, 0x6fbb8df4, 0xd0fb8ccb, 
    0x458b44b7, 0xad005214, 0xb7c417ad, 0xc1b32d1a, 0x1dc8110c, 0xe7e492f7, 0xb1d21fa0, 0x5b9ba668, 0x47b5360d, 0x358f2751, 0xda124206, 0xb9d16304, 
    0x9b6bfd38, 0x676e799e, 0xf272e679, 0xee31cb39, 0x72283a6a, 0x37b9716f, 0x7a7a50b8, 0x0ece41d1, 0x22cdf63a, 0xa0288a42, 0x5fb4b602, 0xb668dc12, 
    0x473004cf, 0x4bde7720, 0x7f809e93, 0x9aa2c54a, 0xda346c6d, 0x9e441dd5, 0x0819d43c, 0x8f11684b, 0xf5e3e446, 0xe5796eae, 0x99e79db9, 0x2ce7c8cb, 
    0xe8a8b9c7, 0xc6bdc9a1, 0x45e1dee4, 0x28245214, 0x2a008aa2, 0xa88786fd, 0xb6b490ea, 0x2b6ade76, 0xae7a276d, 0xea7de20f, 0x049e7785, 0x20f7e804, 
    0xc739131c, 0xa22af2fd, 0x225cecae, 0x6aceeca4, 0x706b0b5f, 0x6cb076a1, 0x585dbb0e, 0x41d640fe, 0x82111c04, 0x9bf4d32b, 0x8a4f4f3d, 0x37bdbe76, 
    0x075180a4, 0xeb738f51, 0x99a8735e, 0xd272a50e, 0x957661c4, 0x877fc698, 0x28a73827, 0x51700ed9, 0x46502b57, 0x7dc61941, 0xcca0a228, 0x008aa228, 
    0x8786fd2a, 0xb490eaa8, 0x6ade76b6, 0x7a276d2b, 0x7de20fae, 0x9e7785ea, 0xf7e80404, 0x39131c20, 0x2af2fdc7, 0x5cecaea2, 0xceeca422, 0x6b0b5f6a, 
    0xb076a170, 0x5dbb0e6c, 0xd640fe58, 0x111c0441, 0xf4d32b82, 0x4f4f3d9b, 0xbdbe768a, 0x5180a437, 0x738f5107, 0xa8735eeb, 0x72a50e99, 0x7661c4d2, 
    0x7fc69895, 0xa7382787, 0x700ed928, 0x502b5751, 0x45517a7a, 0x45519841, 0xfb550014, 0xd5510f0d, 0xed6c6921, 0xda56d4bc, 0x1f5cf54e, 0x0ad5fbc4, 
    0x09083cef, 0x3840eed1, 0xfb8f7326, 0x5d4555e4, 0x4945b8d8, 0xbed49cd9, 0x42e1d616, 0x1dd860ed, 0xfcb1ba76, 0x0882ac81, 0x57042338, 0x7a36e9a7, 
    0xed149f9e, 0x496f7a7d, 0xa30ea200, 0xbcd6e71e, 0x1d3251e7, 0x88a5e54a, 0x312bedc2, 0x0e00ff8c, 0x514e714e, 0xa2e01cb2, 0x8aa256ae, 0x8ac20c2a, 
    0xaf02a028, 0x8e7a68d8, 0x674b0ba9, 0xb6a2e66d, 0xe0aa77d2, 0xa8de27fe, 0x40e07957, 0x01728f4e, 0x7f9c33c1, 0x2aaa22df, 0x2ac2c5ee, 0xa5e6cc4e, 
    0x0ab7b6f0, 0xc0066b17, 0x8fd5b5eb, 0x10640de4, 0x2218c141, 0xb3493fbd, 0xa7f8f4d4, 0x7ad3eb6b, 0x75100548, 0xb53ef718, 0x90893ae7, 0x2c2d57ea, 
    0x59691746, 0x72f8678c, 0x8d728a73, 0x1505e790, 0x5114b572, 0x51146650, 0xdb150045, 0xdee226f8, 0x26e5222d, 0xd3328eb8, 0x0f70071c, 0x51c415dd, 
    0x72671755, 0x73572ea3, 0xcdb4d1bc, 0xee9d403f, 0x94e3d6a4, 0x21682315, 0x7332e247, 0x7fbfa65c, 0xcfaca516, 0x36220875, 0x04232920, 0xce9a3180, 
    0xab2b87a2, 0x595db921, 0x2a8aa220, 0xa2280a48, 0xfced0a80, 0x166f7113, 0x5c937291, 0x8e691947, 0xee07b803, 0xaa28e28a, 0x51b9b38b, 0xdeb92b97, 
    0x9f66da68, 0x52f74ea0, 0x0aca716b, 0xa310b491, 0xae3919f1, 0x8bbf5f53, 0xba67d652, 0x101b1184, 0x40829114, 0x5167cd18, 0x90d59543, 0x90acaedc, 
    0x24154551, 0x40511405, 0x09fe7605, 0x488bb7b8, 0x23ae49b9, 0x01c7b48c, 0x45f703dc, 0x45551471, 0xcba8dcd9, 0x34efdc95, 0xd04f336d, 0x35a97b27, 
    0x4805e5b8, 0xf85108da, 0x29d79c8c, 0xa9c5dfaf, 0x42dd336b, 0x0a888d08, 0x0c20c148, 0xa1a8b366, 0x6ec8eaca, 0x28485657, 0x02928aa2, 0x02a0288a, 
    0xdc047fbb, 0x5ca4c55b, 0xc611d7a4, 0xee80635a, 0xb8a2fb01, 0xeca22a8a, 0xca6554ee, 0x369a77ee, 0x13e8a799, 0xdc9ad4bd, 0x6da48272, 0x46fc2804, 
    0xd7946b4e, 0xb5d4e2ef, 0x04a1ee99, 0x2405c446, 0x33069060, 0xe550d459, 0x2b376475, 0x511424ab, 0xff074945, 0x000000d9, 
};
};
} // namespace BluePrint
