#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <RandomSquares_vulkan.h>

namespace BluePrint
{
struct RandomSquaresFusionNode final : Node
{
    BP_NODE_WITH_NAME(RandomSquaresFusionNode, "RandomSquares Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    RandomSquaresFusionNode(BP* blueprint): Node(blueprint) { m_Name = "RandomSquares Transform"; }

    ~RandomSquaresFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::RandomSquares_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_smoothness, m_size);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _smoothness = m_smoothness;
        int _size = m_size;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Smoothness##RandomSquares", &_smoothness, 0.0, 1.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_smoothness##RandomSquares")) { _smoothness = 0.5f; changed = true; }
        ImGui::SliderInt("Size##RandomSquares", &_size, 1, 50, "%d", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_size##RandomSquares")) { _size = 10; changed = true; }
        ImGui::PopItemWidth();
        if (_smoothness != m_smoothness) { m_smoothness = _smoothness; changed = true; }
        if (_size != m_size) { m_size = _size; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("smoothness"))
        {
            auto& val = value["smoothness"];
            if (val.is_number()) 
                m_smoothness = val.get<imgui_json::number>();
        }
        if (value.contains("size"))
        {
            auto& val = value["size"];
            if (val.is_number()) 
                m_size = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["smoothness"] = imgui_json::number(m_smoothness);
        value["size"] = imgui_json::number(m_size);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf37b"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_smoothness  {0.5f};
    int m_size          {10};
    ImGui::RandomSquares_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 4900;
    const unsigned int logo_data[4900/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0x280aa08a, 0x280a80a2, 0xf1dd1aaa, 0xa7a9b4d3, 0x3626db46, 0x3dda7fc6, 0xd193c63f, 0x57f40b5c, 0x6eede12f, 0xfb51e3fa, 0xef26a12e, 0xe5d13d36, 
    0x1df6fb42, 0xa2aef2c7, 0xaea46494, 0x8aa22880, 0xa2280aa0, 0xa3a22480, 0x7aaaf5c9, 0xd2b0f1c5, 0x125b9da6, 0xfd676c63, 0x71b2d2a3, 0x5cacb8b2, 
    0x0f7fb9a2, 0x1ad7776b, 0x0975d98f, 0xeeb17937, 0xdf172a8f, 0x953feeb0, 0x92711575, 0xb918ba92, 0x9f8ca63e, 0x3b454953, 0xa2280a20, 0xa8681698, 
    0x254d7db2, 0xa56dcbd4, 0x00ff39cd, 0x39543e58, 0x908f6bee, 0x156544cd, 0x5b7bf8cb, 0x7ed4b8be, 0xbb49a8cb, 0x79748fcd, 0x87fdbe50, 0xa8abfc71, 
    0x49c9a8ae, 0xbd0b1a5d, 0x3a7fbcbf, 0x8ff7b737, 0x691445e7, 0x455142d8, 0xe40a4315, 0xaf7a617c, 0x73646f79, 0x4c9e3fb2, 0xf500ff7b, 0xd5759dbf, 
    0x04890e9d, 0x46eab35a, 0xf3996459, 0x3e0363c3, 0x51717a9c, 0x86ace434, 0xd6514f8e, 0xedd4a62d, 0x96a36c6f, 0xc1008026, 0xf1001980, 0x5764fad0, 
    0x3ca90c75, 0x28672c29, 0x501f18ea, 0x4f470d6a, 0x36b45387, 0x480a96d3, 0x4750af20, 0xd1c63aa5, 0xb6e36c6c, 0x31d61d49, 0xc7195f80, 0x71314ae1, 
    0xa258e06e, 0x05412b8a, 0x14a3b814, 0x235702ae, 0x7bd50be3, 0x9d237bcb, 0x63f2fc91, 0xad00ffdf, 0xacaeebfc, 0x224874e8, 0x32529fd5, 0x9ecf24cb, 
    0xf419181b, 0x998ad3e3, 0x346425a7, 0xb18e7a72, 0x6ba7366d, 0xb11c657b, 0x0c060034, 0x8e07c800, 0xbb22d387, 0xe14965a8, 0x47396349, 0x83fac050, 
    0x7c3a6a50, 0xb6a19d3a, 0x4152b09c, 0x3d827a05, 0x8b36d629, 0xb21d6763, 0x8cb1ee48, 0x3fcef802, 0x8b8b510a, 0x14c50277, 0x28085a51, 0x7a0f36a9, 
    0x8e7a0f36, 0x3aa22b74, 0x7e5f7ce4, 0x2c0bee1a, 0xf2fc919d, 0x00ffdf63, 0xaeebfcad, 0x4874e8ac, 0x529fd522, 0xcf24cb32, 0x19181b9e, 0x8ad3e3f4, 
    0x91959c26, 0x1df5e448, 0x4e6dda62, 0x39caf6d6, 0x0c006862, 0x0f900118, 0x45a60f1d, 0x93ca5077, 0x72c692c2, 0xf581a18e, 0xb4d4a206, 0x433b35e8, 
    0xa4e0366d, 0xc8481982, 0x758ad323, 0xda58928d, 0x3b926c47, 0xbe0063ac, 0xa2c28f33, 0x15778b37, 0x8aa2a8c9, 0x9f8a02d8, 0x47535fc8, 0xb1a6be90, 
    0x9d27f0f6, 0xb53eee10, 0x59ab78cb, 0x2cb81b96, 0x69ac90a3, 0x0e80cbf3, 0xfef6f573, 0x7456d475, 0x6a11243a, 0x6519a9cf, 0x0dcf6792, 0x71fa0c8c, 
    0xe354c5e9, 0x39526475, 0xb658473d, 0xbdb5539b, 0x9a588eb2, 0x00060300, 0x43c70364, 0xd45d91e9, 0xa4f0a432, 0xa8a39cb1, 0xa4417d60, 0x5dbbb4d4, 
    0x4ddbcc4e, 0x08922ae6, 0x47906165, 0x61634be1, 0x76a48d1d, 0xb18e24c9, 0x67e4028c, 0xe3ac801f, 0x2eee562e, 0x66343f64, 0x61a02b8a, 0x04501445, 
    0xff6600ff, 0xa3f46f00, 0xfeeddfec, 0xeff12e95, 0x346d4553, 0xc7d1b4d0, 0x72bc4f94, 0xf6ce2b06, 0xf3987bb5, 0xaba2cd48, 0x9a36ea59, 0xcdda3a83, 
    0x611914e6, 0x627e8cb4, 0x04bde2ac, 0x76d8d8d3, 0xffcdfb13, 0x00ff7c00, 0x7fc2e8f5, 0x9fefbf79, 0x0f1bbdfe, 0xb50f1bb5, 0x7c71d745, 0xa419cdc4, 
    0x65c8aea2, 0xb77fb28f, 0x4ff651fa, 0x4a00fff6, 0xbb55b8b1, 0xfaf6324d, 0x0dda9616, 0xee0487e8, 0x9af88351, 0x6ebdfdf2, 0xd9943ae7, 0xf8164589, 
    0x3b20dcbb, 0x05900cca, 0x4faf613b, 0x6140279a, 0xf7dfbc3f, 0x5e00ffcf, 0x9bf7278c, 0x00fff9fe, 0x86bcd3eb, 0x0d7914f5, 0xe3392aea, 0x77ddc4fc, 
    0xa3f6cc13, 0x51a6f6cc, 0xd911c955, 0xfec97e16, 0xd947e9df, 0x2afddb3f, 0xd1b05fc5, 0x164e1d35, 0xcddfce96, 0xefa46d45, 0x9af88351, 0x55b13ef3, 
    0x9b5330f5, 0xedddc0d8, 0xb66aef46, 0x81e4559a, 0x68bb458a, 0xd504c1c9, 0xa587257f, 0xeed05c7a, 0x841ba26f, 0xdf7ff3fe, 0x307afd3f, 0xfb6fde9f, 
    0xaf00ffe7, 0xfd997d52, 0x3fb38f56, 0x587bd4aa, 0xcb3c317f, 0xfe71beb8, 0x9c47ebef, 0xd4fabb7f, 0x851b855b, 0x833dca1e, 0x93fd1395, 0x8fd2bffd, 
    0xfab77fb2, 0x61bf8a55, 0xa43aeaa1, 0xb79d2d2d, 0x49db8a9a, 0xf883abde, 0xfae07a9f, 0xc9d457c5, 0x0f636f4e, 0x68fdf6cd, 0x5abf7df3, 0x6b0b6fd3, 
    0xae8d850a, 0xb876f242, 0xb306f227, 0x8283b38d, 0xf4ba6b46, 0xdc2a9f8d, 0xe6fd098f, 0x7fbe00ff, 0x3f61f4fa, 0xcff7dfbc, 0xa45e00ff, 0xadfa2bfb, 
    0x557f651f, 0xfc61eda7, 0xc85de6c2, 0x6f79a768, 0xa8fcc6fd, 0x8dfbdff2, 0xcbbc56f9, 0xbe4457b9, 0xe5d3fa62, 0xa59d0ef1, 0xb966dfe9, 0xb8a5f2b9, 
    0x191be593, 0x831e1889, 0x25d7aad6, 0xebddd8a8, 0x0428237e, 0xbbc4f0b6, 0xc7196356, 0xf54ec71d, 0xb4a4e98c, 0xb6981405, 0xaf3b3ce8, 0x4a8eac5a, 
    0x3856184f, 0xae3f78ee, 0x2727ad2b, 0x1e6bc935, 0xb460d513, 0xbab849fb, 0xc2c868bd, 0x0f904d34, 0xaef6c971, 0x897b4c8f, 0x9e24e8f4, 0x6e972319, 
    0x9c0a5d1d, 0x9c060f8e, 0x37a64d1a, 0xf5f5ee62, 0xd4fa7aa3, 0x34fb5574, 0x9f76512e, 0x4a9f364a, 0x00ff6393, 0x362abf75, 0xf25bf73f, 0x5c88f6a9, 
    0x7f74bec4, 0x5b2bfdde, 0x8b6ef14f, 0x6dcde9a1, 0x12795fa8, 0x6b4c4adc, 0x30123be5, 0xde83f007, 0xb5e4fab9, 0x6fbd1b1b, 0x960065c4, 0x6a9718de, 
    0xe33863cc, 0xb2dee9b8, 0x6dc70895, 0xdc4930c2, 0x83bdb6da, 0x0bc4fac3, 0x4e5c7671, 0xeac67d80, 0xd7e33c78, 0x2bf2b015, 0x71d3cdc8, 0x63fdb826, 
    0x16bc1ac2, 0xdd33699f, 0x616434de, 0x07c8161a, 0x57fbe4b8, 0xcc35a647, 0x4f1274fa, 0xb7cb9104, 0x4e85ae0e, 0x55830747, 0xcab45b0e, 0xd43c3476, 
    0x47e9f7fe, 0xfdde9f9a, 0x5e15bd2a, 0x217224c2, 0x517a5bde, 0x58a5b7e5, 0x3fdddfda, 0xfb5b1b95, 0xfdacf2a7, 0xff3817bb, 0xfd45b400, 0x41d7d0ef, 
    0xc3d3f8a0, 0x9ed31efe, 0x7ed454df, 0x93f22ccd, 0x3932f91a, 0x2afc013c, 0x5c25d77b, 0x7763a396, 0xa08cf8ad, 0x12c3db12, 0x678c59ed, 0x3b1d771c, 
    0x613cbcd4, 0x8ccabdaa, 0x9b3b7712, 0x68d8105f, 0xda97e837, 0xa3ce98a9, 0xaf9ff260, 0x713dce43, 0x4dc23d49, 0x378e923c, 0x647a6cb1, 0x78ac13d7, 
    0xd3825743, 0xbb6b26ed, 0x238c8cc6, 0xf700d942, 0xe86a9f1c, 0x9fb9c6f4, 0xe049824e, 0xe1763996, 0xc8a9d0d5, 0xc669f0e0, 0xda98bd31, 0x93f3d44c, 
    0x1ea5dffb, 0xf47b7f72, 0xb41ed9aa, 0xfad27a64, 0xf9cc7cb4, 0x7f327910, 0xc9a3f577, 0xadbffb93, 0xa3f4c15b, 0xeba3d207, 0xb417f253, 0x2fa27d62, 
    0xba867eef, 0xd7f80f2f, 0xd31ddec3, 0xd455df9e, 0xf22ccd7e, 0x32f91293, 0xfc013c39, 0x21d77b2a, 0x63a3965c, 0x8cf8ad77, 0xc3db12a0, 0x8c59ed12, 
    0x1d771c67, 0x3cbcd53b, 0xcdbdaa61, 0x73170523, 0x67fc6cd5, 0xf95368a4, 0xd7bca67a, 0x521e300f, 0x9d3e790b, 0xadd3e34a, 0x45dedc63, 0xe3347571, 
    0x3e3b12e5, 0x3527d331, 0x101e6bc2, 0xfbb4e0d5, 0xf1ee9a49, 0xd00823a3, 0xc73d40b6, 0x3dbada27, 0xd367ae31, 0x257892a0, 0x75b85d8e, 0x38722a74, 
    0x9c4a1a3c, 0x2461b31b, 0xf3d7dc9a, 0x318fd613, 0x47be6a3d, 0xd423a3a8, 0x18c13e56, 0x15c522f2, 0x14f4685b, 0x9f821e6d, 0x94c35db1, 0xa2d18a86, 
    0xf7e7fab4, 0xafbd127f, 0x4b151d91, 0xd39a8c26, 0x7b65deea, 0xe69fa230, 0xf3dbf73f, 0xef7fcca3, 0x1c5de7b7, 0xa55eecd2, 0x891d2aea, 0x51f9d1fd, 
    0x3fba3fb1, 0x9a7df22a, 0x155973ee, 0x2b1aad28, 0xdd9febab, 0xaf3d4dfc, 0x0d559490, 0xb8d1d4c7, 0xa83e9afa, 0xf3b287fb, 0x7b9f8a12, 0x74fe787f, 
    0x1fef6f6f, 0xa37dbace, 0x5acc69ec, 0xa7e599a2, 0xa3f217f7, 0x2fee4fcb, 0xa3555ee5, 0x28b2e6dc, 0x57345ad1, 0xbb3fd767, 0x5ffb9af8, 0x6fa8a220, 
    0xce1fef6f, 0xe3fded8d, 0x9bfad2f9, 0xfb642fee, 0xeeada28d, 0xc78da63e, 0x58dfd6d4, 0xf2e78b7d, 0xe59ba226, 0xf217f7a7, 0xee4fcba3, 0x6f5ee52f, 
    0x42a161ba, 0xbba2d18a, 0xdffdb97e, 0xf9dad7c4, 0x7b4b1505, 0xbf7900ff, 0xf7bf373a, 0xfaa8f39b, 0x662feeab, 0x66aea2c4, 0x677dd58c, 0xc8d37ec8, 
    0x9ffab8a3, 0xd4c78dce, 0xec7375fe, 0xf5777ff1, 0x2f9e7d34, 0xb4a6feee, 0xc33ed5fa, 0xae2491f6, 0x2e7ac2b7, 0xb369a99b, 0xe66d7bcf, 0x1d544aba, 
    0x0f3030ec, 0xfb852b62, 0xfddebf44, 0x7f6a6505, 0x0fef3510, 0x9586a55c, 0x27e26d7e, 0xc6109fcc, 0xe28fe7e4, 0x1f56d853, 0x95359457, 0xf5ec1482, 
    0xd14f5f3d, 0x24ae29bc, 0xf16865ab, 0x25c978b4, 0xd4e91981, 0xdbb8da91, 0xafed48bb, 0x5801b727, 0xec262345, 0x6bc6c175, 0xb3f8bd92, 0x1a2399af, 
    0xc2dbf36d, 0xb23f9a78, 0x84bebbc2, 0xf51e472e, 0xdceb15b7, 0x9b249344, 0x0e0c4596, 0xf6aa3907, 0x95899e53, 0x2eb43628, 0xc5fd69f9, 0xd3f2a8fc, 
    0x52f98bfb, 0x6eb43e6e, 0xefcdb53e, 0xadd43077, 0x7fbcbfb9, 0xf737373a, 0x7c56e78f, 0xbb00ff98, 0xc7e4d1fa, 0xbad6dffd, 0xb14fb1be, 0xd7473ca7, 
    0x173de15b, 0xd9b4d44d, 0xf3b6bde7, 0x0e2a255d, 0x071818f6, 0x79c415b1, 0xf47b7fd2, 0xd778f3aa, 0x591cd158, 0x4cbed7e9, 0x04ccb765, 0x3fcef948, 
    0x59610fbc, 0xb13a0eaa, 0x7aea1ac2, 0x78a39f46, 0x56495c53, 0x68e3d1ca, 0x024b92f1, 0x23a9d333, 0x76b771b5, 0x4f5edb91, 0x8ab0026e, 0xebd84d46, 
    0x23d78c83, 0xc46bf17b, 0x6d1ae305, 0x78c2dbf3, 0xc2b23f9a, 0x2e84bebb, 0xb7f51e47, 0x44dceb15, 0x969b2493, 0x070e0c45, 0x53f6ab39, 0x3895899e, 
    0xdb8b9536, 0xf2a3fb17, 0x00ff62a3, 0x51547e74, 0xce7d975c, 0x3737487d, 0xdce8fca9, 0xa9f3a7de, 0xa3f4b4bc, 0xdf4a4fcb, 0x7cb1c3da, 0xbe7575c8, 
    0xdd74d113, 0x7b9e4d4b, 0xd2356fdb, 0x61efa052, 0x117b8081, 0xfe985f5c, 0xd35fa5bf, 0x69a849fc, 0x97163c90, 0xdd6f5a1e, 0xb3d5f220, 0x941ef5c0, 
    0x76a749a3, 0xa7ae2154, 0xdee8a75d, 0x5512d714, 0xda78b4b2, 0xc092643c, 0x48eaf48c, 0xdd6d5ced, 0x93d776a4, 0x22ac80db, 0x3a769391, 0xcc35e3e0, 
    0xd7557cdd, 0x3a5d445a, 0x23e1edf1, 0xa12da8f7, 0x1742df5d, 0x55adf323, 0x659179bb, 0x802b3749, 0xb4e6fac0, 0xcc9673f6, 0xacb4c5b9, 0x053dda5c, 
    0xa5a0471b, 0xce2eb9a2, 0x5a9f3c62, 0xfb697d32, 0x471ba547, 0x2a325fa5, 0x7ceb5ae8, 0xbae9a227, 0xf73c9b96, 0xa46bdeb6, 0xc3de41a5, 0x22f60003, 
    0xd6c7fdb8, 0x6a0c6fba, 0xf369db33, 0xe6814f24, 0x3968c392, 0x38ad47f9, 0xa74b5d43, 0x4f537b1f, 0x29bcd14f, 0x65ab24ae, 0x1e6d2469, 0x23304b32, 
    0x3b923a3d, 0x6b771b57, 0xf6e4b51d, 0xa4082be0, 0xb88edd64, 0xff52cd38, 0xaa8f8500, 0xb123485c, 0x23a2ad91, 0xc6b08af7, 0x72217e37, 0x3ea5492a, 
    0xca4d5266, 0x5e3f30c0, 0x4b09676b, 0xdae25c66, 0x18c52556, 0x39e48aa2, 0xb74c8ac2, 0xcbe8fca0, 0x9dce0f7a, 0xe8accf80, 0xd5215874, 0xc932525f, 
    0x1b9ecf24, 0xe3f41918, 0xfbda8ad3, 0xa57ffb27, 0x00ff641f, 0x55aff46f, 0xbfbe28e2, 0x23edd399, 0xd1538bdc, 0x364b35ac, 0x506795b6, 0x8b842148, 
    0x06fc4790, 0x1b2a2d8b, 0xa3ed481b, 0xc6485792, 0xc7097201, 0x9ccf2ae0, 0x398f86be, 0xf3700d7d, 0xafccbd56, 0xb5cf9b31, 0x3bb5cf1b, 0x6b00ffc9, 
    0xffc9a3f4, 0xabf46b00, 0x8917a6e7, 0xfa9c142d, 0x7d8ece0f, 0xb65ce707, 0x356e2833, 0x2dc5da56, 0x0ebe07b5, 0x9ce448d2, 0x9f3e303e, 0x937d6985, 
    0x8fd2bffd, 0xfab77fb2, 0xe8eda957, 0x9ecefcf7, 0x7a6a9178, 0x66a98635, 0xeaacd2d6, 0x91300409, 0x00ff0872, 0xa565d180, 0x1d696343, 0xe94a72b4, 
    0x412ec018, 0x5b05fc38, 0xdee83dde, 0xda87eb3d, 0x63eebd55, 0x1a3721cd, 0x9e5d1a37, 0xa8f76cf4, 0xeaa045bc, 0x24b3a228, 0x411fe6a3, 0x9634634b, 
    0x6d3a0f17, 0xce4f7276, 0x52ed763a, 0xbffd93fd, 0x7fb28fd2, 0xa757fab7, 0x3af768ed, 0xd484e239, 0x4a2dcbb4, 0xb3c8dbd0, 0xc1102428, 0xf01f41c6, 
    0x999e651a, 0x5baa9d15, 0xa0ba92a4, 0x3f412ec0, 0xa379aba0, 0x6aedc335, 0xe732f75e, 0x19cd7097, 0xac18c5a5, 0xa2280ac8, 0xd67c1590, 0x4b7715f4, 
    0xa0746ed6, 0xf78924e2, 0x1e9cefb6, 0xed63c738, 0xfecfbe55, 0xd947e9df, 0xfddb00ff, 0x52dabb2b, 0xd88a5236, 0xbe617cb5, 0x6c3430b6, 0x180c39b9, 
    0x54e50f12, 0x2248b3e0, 0x70248911, 0xfe19b93b, 0xe58a6255, 0xeebdb3f6, 0xd427e766, 0xcc8aa228, 0xa419cd90, 0xaf1680a2, 0x8e7a68d8, 0x674b0ba9, 
    0xb6a2e66d, 0xe0aa77d2, 0xa8de27fe, 0x56e07557, 0x19b94703, 0x7f9c33c1, 0x2aaa22df, 0x3cc2c5ee, 0x65e5ccce, 0x0abb7ef0, 0x81136b17, 0x1fab6bd7, 
    0x30c91ac8, 0x04383838, 0xbae9a257, 0x51d6d289, 0x78cd6aa9, 0x048d01ee, 0xefc8fc6d, 0xdefc355c, 0x2371a16e, 0x569e8da1, 0xdc7d8462, 0x25bae29c, 
    0x278dad39, 0xa221b474, 0xc0942b8a, 0x008aa228, 0x8786fd2a, 0xb490eaa8, 0x6ade76b6, 0x7a276d2b, 0x7de20fae, 0x9e7785ea, 0xf7e80404, 0x3c1f1c20, 
    0x15f9fee3, 0x2e765751, 0x67765211, 0xf5842f2d, 0x58bb50c8, 0x5dbb0e9c, 0xd640fe58, 0xc1818d49, 0xddf48ae0, 0xe8746f29, 0x81fa37e6, 0xc60066bd, 
    0xc48f1c80, 0xea9ed7fa, 0xdca8cf0e, 0x9d1891bc, 0x913166e5, 0x8a7372f7, 0x54a44dd6, 0x5eb92ad7, 0x0cac288a, 0xa0288a82, 0x68d8af02, 0x0ba98e7a, 
    0xe66d674b, 0x77d2b6a2, 0x27fee0aa, 0x7957a8de, 0x8f4e40e0, 0xf3c10172, 0x91ef3fce, 0x62771555, 0x662715e1, 0x53f81273, 0xb50b855b, 0xda756083, 
    0x06f2c7ea, 0x70904ab2, 0x43bd2278, 0xf4d4b349, 0xeb6ba7f8, 0x05487ad3, 0xf7187510, 0x3ae7b53e, 0x2bb59189, 0x0b239696, 0x32c6acb4, 0x714eee3e, 
    0x54642555, 0x56aecae3, 0x332b8aa2, 0x288aa220, 0x1af6ab00, 0x42aaa31e, 0x79dbd9d2, 0x9db4ada8, 0x893fb8ea, 0xde15aaf7, 0xa3131078, 0x7c7080dc, 
    0xe4fb8ff3, 0xd85d4555, 0xd94945b8, 0x16bed49c, 0xed42e1d6, 0x761dd860, 0x81fcb1ba, 0x380882ac, 0xa7570423, 0x9e7a36e9, 0x7ded149f, 0x00496f7a, 
    0x1ea30ea2, 0xe7bcd6e7, 0x4a1d3251, 0xc288a5e5, 0x8c312bed, 0x4e0e00ff, 0xb2514e71, 0xaea2e01c, 0x2a8aa256, 0x288ac20c, 0x1eee06a0, 0x061fbba2, 
    0xa5455ade, 0xdc3547dc, 0x704a3331, 0x360e401e, 0x26ae798e, 0x348de98a, 0xee63cd9d, 0x68919abb, 0x74dd4903, 0x605c9bfa, 0xfd316e63, 0xbabb524d, 
    0x380dd737, 0x3e805c46, 0xe338c165, 0xed515134, 0x973a217b, 0x4551b056, 0x51988915, 0x64001445, 0xe06dd77a, 0xb458ab9b, 0xb9e6988b, 0x8e69268a, 
    0xee07b803, 0xa8e15a8f, 0xeeac62ad, 0xb92b5f5c, 0x45bae9d7, 0xdd2b87a6, 0x0db3b03e, 0x8fc2dbb8, 0xcf3527cb, 0xa8a9176b, 0xc4dc72ea, 0x0c6023a4, 
    0x8c81138c, 0x5c2a4ad5, 0x3b07b2f4, 0x511424ab, 0x45014145, 0x5d015014, 0x2d6e82bf, 0x632ed2e2, 0xcb28e29a, 0xc01d704c, 0x1157743f, 0x9d5d5445, 
    0x5db98cca, 0xd246efce, 0x7702fdf4, 0x8e5b93ba, 0xa08d5450, 0xc9881f85, 0xf5ba72cd, 0xb3965afc, 0x8820d43d, 0x8ca480d8, 0x6bc60012, 0x576e8a3a, 
    0xba734356, 0x144541b2, 0x51141054, 0xdb150045, 0xdee226f8, 0x26e5222d, 0xd3328eb8, 0x0f70071c, 0x51c415dd, 0x72671755, 0x73572ea3, 0xcdb4d1bc, 
    0xee9d403f, 0x94e3d6a4, 0x21682315, 0x7332e247, 0x7fbfa65c, 0xcfaca516, 0x36220875, 0x04232920, 0xce9a3180, 0xab2b87a2, 0x595db921, 0x2a8aa220, 
    0xd9ff3f48, 
};
};
} // namespace BluePrint
