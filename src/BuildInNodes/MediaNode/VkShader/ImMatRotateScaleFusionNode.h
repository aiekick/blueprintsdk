#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <RotateScale_vulkan.h>

namespace BluePrint
{
struct RotateScaleFusionNode final : Node
{
    BP_NODE_WITH_NAME(RotateScaleFusionNode, "RotateScale Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Move")
    RotateScaleFusionNode(BP* blueprint): Node(blueprint) { m_Name = "RotateScale Transform"; }

    ~RotateScaleFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::RotateScale_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_backColor, m_rotations, m_scale);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _rotations = m_rotations;
        float _scale = m_scale;
        ImPixel _backColor = m_backColor;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Rotations##RotateScale", &_rotations, 1.f, 1.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_rotations##Ripple")) { _rotations = 1.f; changed = true; }
        ImGui::SliderFloat("Scale##RotateScale", &_scale, 1.f, 20.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_scale##Ripple")) { _scale = 8.f; changed = true; }
        ImGui::PopItemWidth();
        if (ImGui::ColorEdit4("BackColor##RotateScale", (float*)&_backColor, ImGuiColorEditFlags_NoLabel | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_AlphaBar))
        {
            m_backColor = _backColor; changed = true;
        } ImGui::SameLine(); ImGui::TextUnformatted("Back Color");
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_backcolor##RotateScale")) { m_backColor = {0.0f, 0.0f, 0.0f, 1.0f}; changed = true; }
        if (_rotations != m_rotations) { m_rotations = _rotations; changed = true; }
        if (_scale != m_scale) { m_scale = _scale; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("rotations"))
        {
            auto& val = value["rotations"];
            if (val.is_number()) 
                m_rotations = val.get<imgui_json::number>();
        }
        if (value.contains("scale"))
        {
            auto& val = value["scale"];
            if (val.is_number()) 
                m_scale = val.get<imgui_json::number>();
        }
        if (value.contains("backColor"))
        {
            auto& val = value["backColor"];
            if (val.is_vec4())
            {
                ImVec4 val4 = val.get<imgui_json::vec4>();
                m_backColor = ImPixel(val4.x, val4.y, val4.z, val4.w);
            }
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["rotations"] = imgui_json::number(m_rotations);
        value["scale"] = imgui_json::number(m_scale);
        value["backColor"] = imgui_json::vec4(ImVec4(m_backColor.r, m_backColor.g, m_backColor.b, m_backColor.a));
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf2dd"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_rotations   {1.f};
    float m_scale       {8.0f};
    ImPixel m_backColor {0.15f, 0.15f, 0.15f, 1.0f};
    ImGui::RotateScale_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 6036;
    const unsigned int logo_data[6036/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0x325891a2, 0x23085286, 0x96868e20, 0x8a0222bd, 
    0x7faf962a, 0xcba69bfd, 0x51973672, 0xb7d00d84, 0x5cd94d6a, 0x3d57b40b, 0xe68af8a1, 0xb7ecfbfe, 0x741147b1, 0x2bd51edd, 0xa5cffd9e, 0x25a33474, 
    0x45017425, 0x85015514, 0x708769a2, 0xdc069dbc, 0x9f233566, 0xf3c3bff7, 0x5045eaad, 0x0a4015aa, 0x051d0006, 0xa818672d, 0x455100ab, 0x86634936, 
    0x11ce2c33, 0xaa499217, 0x2957d401, 0x76a6f8a8, 0x2a611fbb, 0x29c7a190, 0xf99e339f, 0x6b1ef9ed, 0xdaf3b5a6, 0xd8b937d2, 0x09966125, 0x35757bd0, 
    0xb2939a31, 0xa7cd110b, 0x329fcf59, 0x242709dd, 0xf593b481, 0x0e6f4615, 0x324cbedb, 0xe09c64bc, 0x4f0fc0fc, 0x8a5e6bf2, 0x41f7221c, 0x8f9e9572, 
    0xdb86676b, 0x8d3fc8e6, 0xdb611ffb, 0x28ead5f9, 0x085b92a4, 0xe491a228, 0x24dd358e, 0x00ff1a8b, 0xf9078e79, 0x450b98e6, 0x2de24f67, 0x33eedf36, 
    0x8ca23f5c, 0xe7bfde0e, 0xaf67af8a, 0xe5797bcb, 0xc3e0962d, 0x23d94420, 0x1fbc9e03, 0xe7a9f1d3, 0x6616ec8d, 0xd1be50cd, 0x6501afed, 0xce492902, 
    0xa37e1df5, 0x831168bd, 0x276d4a8a, 0x92a20eb8, 0x16428a8c, 0x1e9b678a, 0x3d2ee633, 0xc3e74973, 0x86782686, 0x062e1bde, 0x2a4a0228, 0x86d9b43f, 
    0x19a0af01, 0xdf341fee, 0x532d1ded, 0x27675e73, 0x00ff54f8, 0x1dba522c, 0xc8143599, 0xc4788ea5, 0x39f43691, 0xa71963c3, 0xe71211d3, 0x3800dc68, 
    0x4b9103e4, 0x41b11545, 0x2f8c8f5c, 0x64c15d83, 0x8769794b, 0xfff90e90, 0x3a7feb00, 0x1d36abeb, 0x67b50812, 0x49b28cd4, 0x2386e733, 0x7a9c3e03, 
    0x2b394d54, 0xbf93a321, 0x525fedd5, 0xe2d3bcb5, 0x0a000392, 0x031940ca, 0xc5e943a7, 0x93ca7077, 0x72c692c2, 0xf581a18e, 0xb4d4a006, 0x433b75f8, 
    0x4921316d, 0x08ea1504, 0xda58a7f4, 0x769c8d2d, 0x18ebecca, 0xe28c2fc0, 0xd8e26294, 0x8aa22816, 0x45d142d0, 0xd4522015, 0xc83448f5, 0x3bf3c977, 
    0xf2606467, 0xcc35e7df, 0x4e1d568d, 0x765e1df4, 0x653ed98e, 0x4f70308a, 0xedf9cfe1, 0x25f61f5d, 0xb2fd5f93, 0xfb1b7945, 0xe75cd9ae, 0xf4fac139, 
    0xd54eede9, 0xbb7bfbb4, 0x4359ca29, 0x0cafcb25, 0xe9c80654, 0x00ff75f3, 0xa394953e, 0x40603426, 0xbfa6fab6, 0x2d225a0a, 0x362a03a4, 0x7192839e, 
    0xebe3f5f5, 0x49e27a9e, 0x1b9e58eb, 0x86b0a7d3, 0xa38db857, 0x9236ce91, 0xb6067e3a, 0x5756d3a9, 0x15456162, 0x4bbd5057, 0x46ec621b, 0xf54508f2, 
    0x375ae13f, 0xba057665, 0xd2d5bdcf, 0xdb0a53d2, 0xf9982ccf, 0xf114a642, 0x71c6edeb, 0xaa145aeb, 0x5a47b676, 0x39827e87, 0xd5554bcd, 0x96348c60, 
    0x1e1b69ed, 0xaf27671b, 0xeb0f3d19, 0x85b56ac6, 0xa67293c6, 0xe2e2465d, 0x8dfb4049, 0xeb717b9e, 0x9baef2db, 0x2b9abd52, 0x056df217, 0x942130cb, 
    0x728e31f2, 0xe63bfd3b, 0x048df4b0, 0x7117b712, 0x22a25e6d, 0x3f0f3d39, 0x2865c5a8, 0x0ce56ebe, 0x79f5c18e, 0x67cb9672, 0x6827bb65, 0xfd4eb700, 
    0x9ae9f1fa, 0xed2dade8, 0xadf221ac, 0xbc9f0921, 0x4d7dabc7, 0x40a1803f, 0x0030aa0a, 0x692505e8, 0xc526a418, 0x286972ea, 0x9391a8a2, 0x0b7747db, 
    0x71dd2f41, 0xe1475183, 0x33062c4b, 0x172ec0cc, 0xb50a6424, 0x00ff2f55, 0xb630deb4, 0xf71f0b37, 0xeb23e381, 0x2d6dd6d8, 0x29671ada, 0xbbb26774, 
    0x0120797b, 0xaea77de3, 0xc1911f1b, 0x1db355fe, 0x26e48dc6, 0x956729cb, 0x2b96eedb, 0xd2af6f8f, 0x44a2c1ac, 0xb4cbb536, 0x70803aac, 0xd35a4fbf, 
    0x98138a44, 0xea238a20, 0xe3ac018a, 0x07cc5506, 0x19356ed3, 0xc7d85b82, 0x32c19868, 0x3f00ff64, 0xb45ea5a7, 0x2abccdf0, 0x7fefea5a, 0x051edb39, 
    0x683d6769, 0x495d50ab, 0xb51519e6, 0x557eacb5, 0xc9b990b2, 0x9f26e724, 0x1b621545, 0x9e8ddeb3, 0x432a4bf4, 0xc221491b, 0x769c24a8, 0x562d5e15, 
    0xba6c6cc6, 0x71cc9e8f, 0xbe73e9fc, 0xd95876e1, 0xeeb049ef, 0x38c6303f, 0xa2a4e618, 0xb20b339f, 0x52ef1b33, 0xdc79a1ae, 0xa19fe40a, 0x3dbb14cf, 
    0xcc51f4e9, 0xcf66ecc2, 0xd37b367a, 0x8599a3e8, 0x830e8dd9, 0x278f6f71, 0xe7007452, 0xd3cf3801, 0x7b1b7a35, 0xbc24f0c8, 0x73724649, 0x383d0e0e, 
    0x21b4d23f, 0x0060a581, 0x99ded3eb, 0x5b7a78aa, 0x628a57a5, 0x83423019, 0x453dbb83, 0x0d5aaa67, 0xf7ec915d, 0x67bd67a3, 0x6e7175c5, 0xcc32724c, 
    0xcf73c6ab, 0xf8d5d0e7, 0x289749a6, 0x4d31e24f, 0xe84e6c54, 0x6cf49e5d, 0x4fd1a7f7, 0x66ec8a99, 0xbdcb7acf, 0xe4faded0, 0x7160f7cc, 0x41175185, 
    0x14bdd6f9, 0x85d1e69b, 0xa6639dd9, 0x8b80d85c, 0x7e201e7a, 0xe8d345e3, 0x2c69c573, 0x7a3afd0c, 0x243558d5, 0x488a61fb, 0x129c6a1f, 0xbad2cf78, 
    0x391d3518, 0xc57c6921, 0x3724038b, 0xfaf5a05f, 0xa5cb980a, 0x4cbd49ca, 0xb365c86b, 0xcc467b87, 0x648c414f, 0x812b6bd5, 0xbbfd0e77, 0x9e0a1218, 
    0xa3ce6a70, 0x930babe2, 0x76e068f6, 0x93cd2319, 0x81d003e5, 0x1ddf07d7, 0x99aa8aaa, 0x9cb17816, 0xe9714770, 0xe83bea52, 0xbdd8d7c2, 0x9e8ddeb3, 
    0xa2b8abf4, 0xf67b1db1, 0x64e6aba5, 0xefd98d5d, 0xeb342f54, 0xdbafccab, 0xf0cfa8fc, 0xb9477d24, 0xb4ca3fcf, 0x61dba468, 0x8af03176, 0xd003e758, 
    0x9eb4a366, 0x4702c91b, 0x23c9eb28, 0x8ed5fa18, 0xc4d330b5, 0x232cab36, 0x0eb8732a, 0x29978a71, 0xe4b23a0e, 0x2dbf037a, 0xd411a070, 0xd064692e, 
    0x9bb37144, 0xfe33baaf, 0xaf00ffaf, 0x8897fa58, 0x52281b75, 0x392f1c18, 0x7e8236f3, 0xfa7fe49c, 0x888fb5aa, 0x81cb6b35, 0x3a32d71c, 0x7081b07f, 
    0xde03c87d, 0x2bb66a8f, 0xee96d84b, 0x2e226b53, 0x669fe1d0, 0x0553ef41, 0x89d607c8, 0xb30b37e1, 0xe1f43ea9, 0x25ad67d0, 0x315a0a39, 0xb3d17b36, 
    0x57459dde, 0x7cec2233, 0xe6dcf116, 0x37b25439, 0x3f8e6404, 0x69ada30a, 0x6c1a5616, 0x82a371d7, 0x23e7c298, 0xd3fa0396, 0x91bea32f, 0x234c5a54, 
    0x79c7b2f9, 0x15831e07, 0x6e2ed817, 0xdedd1122, 0x0a392833, 0xc41fc072, 0x5d4b55fa, 0x8f996a2c, 0xba677865, 0xe399188e, 0xe039782c, 0x16e99a63, 
    0x158e53c7, 0x94e13992, 0xa803dc15, 0xa354e907, 0x48a2f5f0, 0xc76d5c18, 0x41b08820, 0x7479eafc, 0xed6358c8, 0x01c6b913, 0x8ca8c063, 0xd1855a5a, 
    0xea5a4d5e, 0x9a3d2b07, 0x6c43c236, 0x22afdb43, 0xba6bdaac, 0x6089e06c, 0x701d3692, 0x44e31f49, 0xf896267a, 0x8fa43433, 0x4ba53f50, 0x21a48dfd, 
    0xc74019ca, 0xfa83a72a, 0xd0302555, 0x5cd8dd94, 0x2557db2e, 0xe94190fa, 0x9414fef8, 0x83b5b7d5, 0x5c46663f, 0x734ee2fd, 0xd7ab4ee9, 0x1b722fa9, 
    0x09fa5e4d, 0x179e3558, 0x8f73643c, 0xd6a3e2a8, 0xfbab8b75, 0x0cdd221f, 0x84f9c02a, 0x91fd5f1e, 0x4add2ae8, 0x6afc0db7, 0xe7630c92, 0xd959f15c, 
    0x911ad7da, 0xf3d669ca, 0x9566e1f9, 0xdf434fa2, 0x74053ddb, 0x515648e3, 0x66e49d2d, 0xdc708241, 0x6d95280e, 0x22dae465, 0x91b4339e, 0x4d8ba2da, 
    0xd39090b5, 0x49f867bc, 0x951a3fe8, 0x44340d0b, 0x20918fba, 0x9311fa82, 0xb6f261c0, 0xabf69f3b, 0xef6d1846, 0xc0ad3510, 0xddd81927, 0xf8dc6745, 
    0x625ee65e, 0x6223f3bd, 0x113cd60e, 0x1a3d828a, 0x883ccefe, 0xce46bfdf, 0x771afa00, 0xae05dd92, 0x346b4b6a, 0x8f337a5f, 0xa9a8c851, 0x3d5eded0, 
    0xcee449b1, 0xe39c9ee3, 0x43569bd2, 0xf373bb1c, 0x837a6028, 0xc5a54b52, 0xb85a8476, 0x6c341f39, 0xff3d7e7a, 0x2a6ace00, 0x829c4a50, 0x3615f541, 
    0xb152704f, 0x6058348e, 0xac70dbb9, 0xeda99c57, 0xf500fff4, 0x8e1549d7, 0x258b359f, 0x25a160a3, 0xfe361077, 0xac7ab703, 0x27613364, 0x244fc862, 
    0x6abe479e, 0xa50ddd4b, 0x98b0cc8f, 0x9c73d401, 0x8d4a8d7f, 0x9ea645b6, 0x96696bc5, 0xe0bc8d09, 0x6ebe6534, 0xc5eb8373, 0x68b3b859, 0x0f46cc57, 
    0x39303c11, 0xe7b9d6c7, 0xb25bbeb4, 0x182436d3, 0x031967cb, 0xa26b7da6, 0x2c1f75d2, 0x28c3bd2d, 0x4f4fcc5e, 0x8cbe88c6, 0x8a5ab91a, 0x415ba8bb, 
    0x458e960b, 0xcb00ff04, 0xaaf04f3f, 0x586d4655, 0x7865bb5a, 0xca0c03b1, 0xf3e0275a, 0x5251a9d2, 0x7749ec24, 0xda683e04, 0x02c3a943, 0x88a5563b, 
    0x7c025ad3, 0xe14ed6a8, 0x4c8f27db, 0x7d4a00ff, 0x3a57b48d, 0x4eecce5e, 0xf90fce79, 0xa835d700, 0xdfda5edb, 0x819b856f, 0xf933f2ca, 0x50f8717d, 
    0x774dddfd, 0xab503457, 0x1fa40d5e, 0xc8a9009f, 0xae00ffcf, 0xe545a89d, 0x070c1c5d, 0x00ff801b, 0xa49df53e, 0x9cf8ca2c, 0x9ff13736, 0xf5794e4f, 
    0x80578fae, 0xa8b26acb, 0x479253dc, 0x4ae97fa7, 0xa896a03a, 0x298aa2c4, 0xa4a28c98, 0x3857ada3, 0x684547ee, 0x14899c36, 0x31374853, 0x1fe319c9, 
    0x2d929ae3, 0x2d4acb72, 0x3f66eee7, 0xfa1380c2, 0x4773fe91, 0x289aba3e, 0xd16576e9, 0x8a8f155d, 0xaafccb34, 0xfeb8913c, 0x8ee41009, 0xbd23e339, 
    0xa3afd557, 0x362e4b91, 0x39d8fba8, 0x3ecdf9c7, 0x29876b75, 0x6441458b, 0x4c33b8b3, 0x82f997e4, 0x00ffd99e, 0xd4ad62eb, 0x77469eaa, 0x45494519, 
    0x8e5c712e, 0x68ad978a, 0x251fa5c1, 0x5125b867, 0xdeea28ba, 0xe31c859f, 0x4a197b57, 0xc5da99ee, 0x1407d773, 0x18569ee6, 0xad8f1869, 0x9ba62568, 
    0x62c8c01c, 0xb937904c, 0xd51e3fce, 0x7d1a96be, 0x08e101d4, 0x4802c3e8, 0xfbfa209b, 0x34576a1a, 0x451b67e5, 0x62e85e6f, 0x07245d20, 0xe1c774d4, 
    0x1fbbee58, 0x6a9f2069, 0xba43ac1c, 0xa2a4a222, 0x919b9ca3, 0x72f7d6d4, 0xdc4664db, 0xd3f9c71e, 0x949e7169, 0x2ce6407b, 0xc42da84d, 0x56b7267b, 
    0x4015c71e, 0x17b28146, 0xe0b4d21f, 0x50276fd2, 0x70882dc2, 0x20c03977, 0x93a5f7f7, 0x2c20ba47, 0xfd584652, 0xcf4ded71, 0x99c9abc8, 0xd18156b4, 
    0x12b7e1ef, 0x398280ca, 0x84aab123, 0x08467010, 0x4be4cfa5, 0x8a8edcba, 0x719e8a96, 0xf5ca925c, 0x25231fed, 0x4fcd554f, 0x766f7b7b, 0x4056c69c, 
    0xf8336038, 0x4f51aa66, 0xa96169da, 0x51ac46b4, 0x39080e83, 0xb136a115, 0xace5a924, 0x08ae1028, 0xf8fc4962, 0x535274aa, 0x22dbdcb0, 0x8ea2a5a2, 
    0x4a476e72, 0xbd0f0ca7, 0xb5b05925, 0x8ca5cb6b, 0xc7cc0770, 0xd068a8da, 0xe28eb9ba, 0x019c22da, 0xf20307c6, 0xe193acf6, 0x69e6d496, 0x06bd5092, 
    0x8df57f0b, 0x5bd16a6b, 0xaa8cc0d8, 0xc0f26a17, 0xd6e41f76, 0x9e898735, 0x10dba418, 0x450523df, 0x2a7ff23c, 0x786f6e25, 0x64d6dad9, 0xa48968d0, 
    0xf24066bb, 0xc039b81e, 0xc5f987fc, 0x616ce42d, 0xe42b9c5c, 0xb4fd6a7d, 0xe6cdde72, 0x2cc938b8, 0x15cf3f7d, 0x3d905253, 0xd8fd2ae3, 0x75f841c0, 
    0x904573fd, 0x52b1a2a5, 0xc8a0288a, 0xa06b295a, 0x16c8f4d1, 0x863a7701, 0x3cb9bc7f, 0x9254fe28, 0x327325b8, 0xe768daca, 0xdb17de59, 0xd02be719, 
    0x6b9e00ff, 0xfa96564a, 0xe776885d, 0x55c519a7, 0x9259b5d7, 0xf258f631, 0xe0e6b733, 0x55faf57f, 0xd4511b5d, 0x16910d4b, 0xe3cefc04, 0xfd418f83, 
    0x5e5d1478, 0xd0d1cac6, 0x56f8a8a7, 0xe6df27f5, 0xef87f92b, 0xf907c86e, 0x5eb50780, 0x91ceacd2, 0xb799141b, 0x388805b9, 0xad381d07, 0xc5084349, 
    0x14a1e4c5, 0xf853cff4, 0xbcbbc70a, 0xae91f2f3, 0xeec0b3c8, 0x52b9b47e, 0x88764277, 0xe2fe42dd, 0xb971b4f0, 0x7926ef55, 0xd5f8c7f7, 0x89e3ad38, 
    0xdb25a88b, 0x6a9213ab, 0x6d32284a, 0x2d686ab1, 0x10482e6e, 0x8c93efc2, 0xb57ec681, 0x76fa7415, 0x95d80fa3, 0x816bd32d, 0xce19c887, 0x69fdfb3a, 
    0xbb318224, 0xb7c35733, 0xd14a039b, 0xdccc9e45, 0xc26a95fe, 0x6fa52ccd, 0x37906695, 0x9efef8c8, 0x8b575fb5, 0x5b65bd54, 0x602b9869, 0xfd8ed336, 
    0xd5fa00ff, 0xeaa6972e, 0x96649b56, 0x3f7e984f, 0x3fa82781, 0x23ba3e85, 0xc39e1455, 0x3875b9f5, 0x20f1042d, 0x38dc79c6, 0xf5edd81e, 0xff3b0bac, 
    0xd1791000, 0x94bb71b4, 0x9898c7f9, 0xf4e0380c, 0x9aaef3cf, 0x814851e7, 0x9cd4ae59, 0x633e5110, 0x878e63c7, 0xea9359eb, 0x87408ce0, 0xf07fde3f, 
    0xe1ae25a5, 0xd2b9af26, 0x5b32f425, 0xc50a3083, 0x07ea747e, 0x5c71cfa8, 0x02d6acce, 0xbb4e9172, 0xc3722ebb, 0x46953ebe, 0xcfb8e679, 0x73102b9b, 
    0xcf8183f2, 0x35fe3a6e, 0xe31ac50a, 0x4ec7286a, 0x6c72533a, 0x4a324d89, 0x17e9a7bd, 0x8d978a1a, 0x16641091, 0xe378c673, 0xd035aaf5, 0xd0446978, 
    0x9b60194f, 0x7c4f3618, 0xebb7fe8f, 0x11d99550, 0x4532bb49, 0x0c9de6f0, 0xec37d74c, 0xc265c971, 0x9af33d80, 0x843dfaa8, 0x883a36c3, 0x8d1e9c97, 
    0xb5477ecf, 0xeb74d55e, 0xdce5a31b, 0xc3c4116a, 0x0fc03c82, 0x7bd5e0a8, 0xd34f3f0d, 0xd521f3a4, 0x7f902d23, 0xc26f2fd6, 0xae46deaa, 0x69d1e42a, 
    0x119f7eda, 0xd07c689e, 0xc84bcbb8, 0x4aa7e319, 0x74882fa9, 0xfbc99b75, 0xb9716032, 0xfaa35d60, 0xadcea5d6, 0xa668226a, 0x55d289ba, 0xdc7c422a, 
    0x3a9d9e63, 0xe1c113d6, 0x4c8ce5d2, 0x87bee973, 0x5b76c3a6, 0x428fd858, 0x353bf5d3, 0x2681309e, 0x7a428641, 0x7ba6a767, 0x74d4c11a, 0x86dbecdf, 
    0x07e53684, 0x1f75d803, 0xe2c56ca5, 0x450b2b3b, 0x6416da8a, 0x4d23e15c, 0xbe27c9b8, 0xd552272b, 0x6924d563, 0x24621912, 0xb003878c, 0xc4960fc5, 
    0x6dc696cf, 0x92aed25e, 0xe0b3e0d6, 0x07ce1806, 0x9c00fff8, 0xf49e3d55, 0x53aaf76c, 0xc64acd48, 0x373ca9ce, 0xac4a0241, 0x9f6ca83b, 0x59f3fcd3, 
    0x4d906991, 0xf2d81e71, 0x3fd7b3db, 0xefd9a1ce, 0x89a48d4f, 0x212347b7, 0x14a732c6, 0xcddda29c, 0x293aa23d, 0xd2b4d3c8, 0xf503c940, 0x9af500ff, 
    0x25692ae6, 0x6789619a, 0xccecc091, 0xdeb3474d, 0xca649a9b, 0x9da28d49, 0x9e8ddeb3, 0x3791b9f4, 0x75c85542, 0xf2a2883b, 0x719c0c89, 0xd6f8118c, 
    0x5da89d1e, 0xb64820ea, 0xff493822, 0xf5d25800, 0x3fc7c0f5, 0xa7b58ecb, 0x3297deb3, 0x342bbf43, 0xbab666ed, 0xb1ca9260, 0xd00fc103, 0x3a3f3dfe, 
    0xb2b9b8d1, 0x682c10d2, 0x0b38421a, 0xcd1578fe, 0x67a3f7ec, 0x15690abd, 0xdddc07ed, 0x9229774d, 0xc0732c67, 0x50e903cf, 0xd17bf6d3, 0x3a97deb3, 
    0x29cab833, 0x36eb3dfb, 0xc7f2fafe, 0x6700ff73, 0xe30fd1f9, 0xcf817349, 0x1f388e51, 0x496a7a4f, 0x54686a8d, 0x5a12d7b6, 0x8cc7b2ce, 0x0832cc8e, 
    0xdbcf35f4, 0x5857f7eb, 0x24a934f2, 0x57eeb605, 0xeddc0738, 0x792badc0, 0x96c1e52f, 0xec4638ca, 0xe3e4d310, 0xfa7161d4, 0x69206dd2, 0xc49ba6a3, 
    0x6b0b60f2, 0xdea78f64, 0x564cb7e7, 0x77a1c65d, 0xbbf3c475, 0xc019638c, 0x76a8803f, 0xdeb3d17b, 0x509fa893, 0x14656c73, 0x6cf49efd, 0x89cca5f7, 
    0x3f4519ba, 0xea62bd67, 0x6d9ae43a, 0x304b82d9, 0x12566edc, 0xd3ebe1fd, 0xb0a7698a, 0xcdc6bed2, 0xf49eed14, 0xe6a8f76c, 0xa20ddd44, 0x8ddeb39d, 
    0x2073f49e, 0x3b451bba, 0x3d1bbd67, 0x7441e6e8, 0xcf768a36, 0xd17b367a, 0x4ae882cc, 0x0f4fad28, 0xa871c1da, 0x1c71cf2b, 0xab0a3242, 0xd86e179c, 
    0xada77ffc, 0xae34ae34, 0x0f1f36ec, 0xe4a6736a, 0xf1c7c0b7, 0x8ab31d30, 0xa71efa64, 0x2cf91e6f, 0xf2716edf, 0xcda0df90, 0x5d71f775, 0xba591898, 
    0xdd460799, 0x9b5556d0, 0x962b8278, 0x5812a95b, 0xe14190df, 0x7f3c7f0e, 0x14b75a9f, 0x96a3e96c, 0x08828320, 0x8c63f43e, 0x967477d7, 0xa8c971b6, 
    0x1994504a, 0x9e2d132e, 0x58e90730, 0x49ebe22b, 0xc89ac81f, 0xa78d4079, 0xc1b9470a, 0x6e292e15, 0x764b70c9, 0x7d5d5161, 0xbee187c7, 0xe696ce84, 
    0x006e1c09, 0xedf2a77c, 0x27d77bfe, 0x336d0f3c, 0x83adec46, 0xa4a1c380, 0x8332d1e2, 0xa528da88, 0x2a811552, 0xa7920318, 0x08aafca1, 0xd7e9582c, 
    0x3ba68c3a, 0x1b63f778, 0x1e059c98, 0x35e700ff, 0xd410feaa, 0xbcd16c04, 0x2e9c1132, 0x5a5a13ec, 0xf974895f, 0xe1794b23, 0x031c264b, 0xf4effe1a, 
    0xe33fc9e9, 0xab9bc645, 0x1677dc35, 0x5c68a17a, 0x9e8e9c83, 0x9f1cb1a3, 0x14ada1a7, 0x23548d55, 0x7329e76e, 0xc69c3d6b, 0x279a881b, 0xed75981d, 
    0xea3dea91, 0x6bb5ef2a, 0xa3ec594b, 0xd5684e7d, 0x2078e750, 0x1ed07112, 0x8aebf0a7, 0x49035dc6, 0xa66363d4, 0x39eafcdf, 0xfd0e4352, 0x97df8e7b, 
    0x74024e7a, 0xaa39f4dd, 0x9bfed52a, 0xb24da773, 0x5cf8e374, 0xf8afa772, 0x06b5aa74, 0x285a586d, 0x9044a4a2, 0xe5744f5b, 0x6692e12d, 0x52632503, 
    0x56bc1ec7, 0x3585b7ad, 0x85168c6b, 0x81bb5260, 0x30fcc095, 0x8afa4132, 0x12eaa6a1, 0xddd197e9, 0x195ec945, 0xb8c38073, 0xe7f1deae, 0x6ec8b4d6, 
    0x81a78bf4, 0x8c07bbf3, 0x6c4f858e, 0xbd8700ff, 0x9066525c, 0xa81b678a, 0x5afa97e8, 0xdaa22e09, 0x0c86b685, 0x83fc2708, 0xdad12b54, 0x29f4e5c6, 
    0x8ee7af2c, 0xf94a5d79, 0x9f24c08d, 0xb8d2b797, 0xbe444b8d, 0xc4b582d2, 0x02c7c660, 0xff5c3944, 0x1b254a00, 0xb585136c, 0xd5537d46, 0x2bf5e834, 
    0x79948d46, 0xfa8d098a, 0xebe13f6d, 0x4ea82857, 0x51db69c6, 0xc15da468, 0x630b7240, 0x3f010692, 0x05915a4a, 0xbcb0b758, 0xd6f642bb, 0xe0a0cc93, 
    0x009671b4, 0xbb5e15fe, 0x740202cf, 0xf93a907b, 0xc8f71fe7, 0xb1bb8aaa, 0xb1338f50, 0x6300ffc7, 0x61fe83ea, 0xe1f77fb7, 0x90a9c2bf, 0x2218c141, 
    0xb7493fbd, 0x9fe2acd5, 0xee4846fb, 0x448c0172, 0x477dccec, 0x5ee981cd, 0x3582a873, 0x61c29c2b, 0xb27caccc, 0xce092ab8, 0xb2514e31, 0x57e5702a, 
    0x1545512b, 0xa2286306, 0xf1a1d88a, 0xba0d2c4d, 0x23361e19, 0xe2204619, 0xa9b926ae, 0x5d8c18c7, 0x70d351b9, 0x2a327f0c, 0xc6ee1485, 0xf8ca469b, 
    0x5e7eef9a, 0x807b5918, 0xe6b4fe08, 0x55666cd7, 0xc85a9a37, 0x550178c8, 0xc48aebc7, 0xb9b28ba2, 0xf8b375e4, 0x564bd6b2, 0x99094b58, 0xae20157a, 
    0x6bfcf347, 0x2c439694, 0xa6b9e7ac, 0xbdc94dd1, 0x6e3929c5, 0x619b152d, 0x6ddfd9ae, 0xa74cfe4d, 0x9e8c1ff8, 0x9ffc1e3a, 0x5469b5af, 0x6b5a6235, 
    0x5a56ab70, 0xd99ede9d, 0x93aa98b7, 0x3f958792, 0xadd7e187, 0x2790a255, 0x6f5da563, 0x5ba2d54c, 0x1b015a7d, 0xdece0f74, 0xcf550fdd, 0x1a5aefe5, 
    0xe9a68146, 0xdd8ada4c, 0xe5b7ab34, 0xa4d04662, 0xffbd4e0f, 0x79c63100, 0x929c2aae, 0x5763683c, 0x57928d60, 0x00ff733c, 0xee52abea, 0x1bdda768, 
    0xecd426de, 0x02c1b6ef, 0x2cb7e593, 0xf9cf7f7d, 0x59d1cf15, 0x69bb8e9a, 0x092b0a60, 0x5a1e07e6, 0x3db99e9e, 0x49eb74ba, 0x79974cde, 0x5d594db3, 
    0x5606a343, 0x821c0419, 0xf09a6b29, 0x96dbb0e6, 0xdcc6e5c2, 0xce631662, 0x1ffebb7f, 0xb574a597, 0x518a590d, 0xd50a7671, 0x34a975d0, 0xcf1db0ab, 
    0xbc3f64d9, 0xe31e675c, 0x2bfcf4fc, 0xd8498a2a, 0x1dddd949, 0x94e1a9be, 0xfad26ed6, 0xb344f0d2, 0x6518ef2f, 0x47700c83, 0xfdf43ae8, 0x16b76a6c, 
    0x96149a96, 0x336b37b7, 0xa064cc88, 0xed7a8b05, 0x00ff1ccf, 0xde3a5c91, 0xb6b025dd, 0xa742dc59, 0x1ae00121, 0xb79d9985, 0xb9271633, 0xd739ad39, 
    0x17ed6944, 0xaaa22044, 0x16b66a5c, 0xa36ef3d9, 0xaad23604, 0xc07d1077, 0x3c6eb3e6, 0x10996a57, 0x36a42441, 0x2328c432, 0xa53f75d4, 0x28648b42, 
    0xd58decc9, 0x8a084555, 0x00605415, 0xa2a50030, 0xbb02828a, 0x5bdc047f, 0xa45ca4c5, 0x5ac611d7, 0x01ee8063, 0x8ab8a2fb, 0x55ae5d16, 0x24000e1f, 
    0xe319c803, 0x54a51ff5, 0x8cca9d5d, 0xf7ce5db9, 0xfdb4d245, 0x5faee506, 0xcb408a5b, 0x45e56eb7, 0xc93579fc, 0x6af1f7eb, 0x50f7cc5a, 0x02622382, 
    0x03483092, 0x9dd7ac19, 0x2549c47c, 0x433bdf1b, 0xe2dc2d37, 0xd5959b96, 0xab2be590, 0x45511424, 0xd9ff0741, 
};
};
} // namespace BluePrint
