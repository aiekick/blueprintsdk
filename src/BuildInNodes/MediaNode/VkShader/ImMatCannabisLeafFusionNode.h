#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <CannabisLeaf_vulkan.h>

namespace BluePrint
{
struct CannabisLeafFusionNode final : Node
{
    BP_NODE_WITH_NAME(CannabisLeafFusionNode, "CannabisLeaf Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    CannabisLeafFusionNode(BP* blueprint): Node(blueprint) { m_Name = "CannabisLeaf Transform"; }

    ~CannabisLeafFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::CannabisLeaf_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return false; }
    bool Skippable() const override { return true; }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf55f"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    ImGui::CannabisLeaf_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 4991;
    const unsigned int logo_data[4992/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0x280aa08a, 0x280a80a2, 0xf1dd1aaa, 0xa7a9b4d3, 0x3626db46, 0x3dda7fc6, 0x7693c63f, 0x15fd0257, 0x5b7bf8cb, 0x7ed4b8be, 0xbb49a8cb, 0x79748fcd, 
    0x87fdbe50, 0xa8abfc71, 0x2b2919a5, 0xa2280aa0, 0x288a02a8, 0x2a8a02a0, 0x747cb786, 0xd1692aed, 0xb18dc9b6, 0x4f8ff69f, 0x95dda4f1, 0x7245bfc0, 
    0xefd61efe, 0xb21f35ae, 0xf36e12ea, 0x541edd63, 0xdc61bf2f, 0x29ea2a7f, 0xe84a4a46, 0xaa288a02, 0x288aa200, 0xa18aa200, 0x3b1ddfad, 0x6d749a4a, 
    0x676c63b2, 0xfcd3a3fd, 0x70653769, 0xbf5cd12f, 0xebbbb587, 0xbaec478d, 0xd8bc9b84, 0x0b9547f7, 0x1f77d8ef, 0x518abaca, 0x00ba9292, 0x802a8aa2, 
    0x008aa228, 0x85f1912b, 0xbde5bdea, 0xfec8ce91, 0xffef3179, 0x75fed600, 0x3a7456d7, 0xcf6a1124, 0x926519a9, 0x8c0dcf67, 0xe971fa0c, 0x92d344c5, 
    0x3d391ab2, 0x9bb65847, 0xb2bdb553, 0x009a588e, 0x64000603, 0xe943c703, 0x32d45d91, 0xb1a4f0a4, 0x60a8a39c, 0x35a8417d, 0x4e1d3e1d, 0x584edbd0, 
    0xbd822029, 0xeb941e41, 0xb3b1451b, 0x7724d98e, 0x7c01c658, 0x28851f67, 0x81bbc5c5, 0xad288a62, 0x45511404, 0xf8c81500, 0xf25ef5c2, 0x64e7c8de, 
    0xf7983c7f, 0x7feb00ff, 0x3aabeb3a, 0xb508121d, 0xb28cd467, 0x86e733c9, 0x387d06c6, 0x69a2e2f4, 0x1c0d59c9, 0x5baca39e, 0xdedaa94d, 0x4d2c47d9, 
    0x00830100, 0xa1e30132, 0xeaaec8f4, 0x52785219, 0xd451ce58, 0xd4a03e30, 0x0e9f8e1a, 0xa76d68a7, 0x4190142c, 0x4a8fa05e, 0xd8a28d75, 0x926cc7d9, 
    0x0063ac3b, 0xc28f33be, 0xdde26294, 0x1445b1c0, 0x280a8256, 0xe40a80a2, 0xaf7a617c, 0x73646f79, 0x4c9e3fb2, 0xf500ff7b, 0xd5759dbf, 0x04890e9d, 
    0x46eab35a, 0xf3996459, 0x3e0363c3, 0x51717a9c, 0x86ace434, 0xd6514f8e, 0xedd4a62d, 0x96a36c6f, 0xc1008026, 0xf1001980, 0x5764fad0, 0x3ca90c75, 
    0x28672c29, 0x501f18ea, 0x4f470d6a, 0x36b45387, 0x480a96d3, 0x4750af20, 0xd1c63aa5, 0xb6e36c6c, 0x31d61d49, 0xc7195f80, 0x71314ae1, 0xa258e06e, 
    0x05412b8a, 0x05405114, 0xbd303e72, 0xb2b7bc57, 0xcf1fd939, 0x00ff3d26, 0xbacedffa, 0x4487ceea, 0xf5592d82, 0x4cb22c23, 0x81b1e1f9, 0x383d4e9f, 
    0x56729aa8, 0xa8274743, 0x6ad316eb, 0x51b6b776, 0x004013cb, 0x800cc060, 0x327de878, 0x5486ba2b, 0x3396149e, 0x0f0c7594, 0xa30635a8, 0xdaa9c3a7, 
    0x05cb691b, 0xa8571024, 0x639dd223, 0x7136b668, 0xeb8e24db, 0x8c2fc018, 0x18a5f0e3, 0x2c70b7b8, 0xa0154551, 0xa0288a82, 0x93298a02, 0x2fbc1d4d, 
    0x34b6ad34, 0x057dcc52, 0xa78a3e00, 0xea58ab63, 0x3f69eb2c, 0x86655098, 0x8af931d2, 0xf63449b9, 0x298aa200, 0x14455180, 0x32455100, 0x85b7a369, 
    0xc6b695e6, 0xa08f598a, 0x54d107a0, 0x1d6b75ec, 0x276d9d45, 0xb00c0af3, 0x313f46da, 0x9e262957, 0x455114c0, 0xa2280a30, 0xa6280a80, 0xf076344d, 
    0xd8b6d2bc, 0xf4314bd1, 0x2afa0014, 0x63ad8e9d, 0xa4adb3a8, 0x964161fe, 0xe6c7481b, 0xd324e52a, 0x288a02d8, 0x144501a6, 0x14450150, 0x8e0a4872, 
    0x51154eec, 0xd013334b, 0xfa243900, 0xaa28000a, 0x5cdb5fd0, 0x1b6dcddc, 0x8add9e38, 0xc8c613cb, 0x04c141c8, 0x31821c30, 0x9e266956, 0x455114c0, 
    0xa2280a30, 0xf1c30a80, 0x251bd244, 0x92a084b2, 0x9c3b71e3, 0x71a3ca2f, 0x717224c1, 0xc0933a80, 0xe55620c9, 0x8d8d5a72, 0x32e2b7de, 0x0c6f4b80, 
    0x3166b54b, 0x74dc719c, 0x6fd459ef, 0x8e68c896, 0xcff0463b, 0x4612ad88, 0x03852705, 0xcc476030, 0x1c7a7a06, 0x1abbda71, 0x0d7ff5e3, 0xf66b45df, 
    0x7ccdb78f, 0x288491f1, 0x1cf70049, 0xb4e96a9f, 0xd3b8e5b9, 0x64649260, 0x591d6e97, 0x1e1c3948, 0xa63b4d0d, 0x54cb40d3, 0x206c4551, 0x00288aa2, 
    0x55bab7aa, 0xdaf6baee, 0x37b98a4d, 0x3bc71177, 0x18dabbc6, 0x50c8608b, 0x641c951c, 0x910019f4, 0x9cab5691, 0xf76e5d9e, 0xb2b5b95c, 0xecd3bebd, 
    0x95cb8fe4, 0x954467a3, 0x10207846, 0xcf11ef1b, 0x6fd45963, 0x4b68c896, 0xc0e706ed, 0x0b822bde, 0x9632f99c, 0x29df4888, 0xc1020493, 0xe0a49073, 
    0x82f3d083, 0x57d27170, 0x7f78ac21, 0x99354b51, 0xf38b1bb5, 0x6563f909, 0xb81e5462, 0xe90afae4, 0xb8e5b974, 0x649260d3, 0x1d6e9764, 0x1c394859, 
    0x2b4d0d1e, 0x65a0c5ab, 0xb6a228aa, 0x14455110, 0xe364a000, 0xa9697d20, 0x417c6e6c, 0xf9b369a2, 0x7c7bc511, 0x11d7cd81, 0x3243a8c8, 0xe1962074, 
    0x0e58ee40, 0xc752b5f4, 0x3ac4bac4, 0xb46dd8b7, 0x86b456fb, 0x7bcb3a71, 0xf4aef26c, 0x2ca80056, 0x215b9002, 0x39700c97, 0xa7ca8a23, 0x82baac35, 
    0x10fe87dc, 0xe2c75aed, 0x455af634, 0x278bbd91, 0xc4657bcd, 0xc1c90651, 0x5470156e, 0x30721c8c, 0x63d74d2b, 0x7524c815, 0xebfcc8c1, 0xbb1a5f0f, 
    0x89311769, 0x979564d6, 0x91245074, 0xc23995e3, 0x07951bbe, 0x241907e6, 0x69688c63, 0xa671cb73, 0xc9c824c1, 0xb23adc2e, 0x3c387290, 0x5a579a1a, 
    0x45b5003d, 0x14e05614, 0x5194be0e, 0x9d780f40, 0xf5c84806, 0xc1632b1d, 0x8c3fcb51, 0x8d17126d, 0x9ea5987c, 0xa6e4c440, 0xee7b9cdd, 0xd60c7f91, 
    0x67246d4c, 0x37eeb882, 0x95f0da0a, 0xfcdaa4ad, 0x4b92a85a, 0x313fab1b, 0x8cbb7766, 0x28037341, 0xdd874a05, 0x3b382495, 0x9ce04a70, 0xce598ee0, 
    0x7cbd7249, 0x66ef16c5, 0xb3363e72, 0xc4dff0bd, 0xb9509fb4, 0x85500717, 0x3c09ca18, 0xfa1ccc7d, 0x2b861f14, 0x19672249, 0xf4d40303, 0x1d74b9ad, 
    0xabbac33b, 0x5ec481f8, 0xac88bf22, 0x7bed3696, 0x3ac2300c, 0x3bdf1b6e, 0xd2fd0bb0, 0x1b39c601, 0xd55037ab, 0xa7ebf5ae, 0x3b82babf, 0xc8e79467, 
    0x63825559, 0xa70e3780, 0x9700ff1d, 0x92529a4a, 0xd803bb5c, 0xd1fa7aa6, 0x30d81545, 0x00288aa2, 0x52558aa2, 0x3475b4ed, 0x01bbb29b, 0x2865a528, 
    0x49514fdb, 0x40577742, 0x30455114, 0x80a2280a, 0x16ab280a, 0xe863e683, 0x7c525131, 0x9d147291, 0x55f4ca95, 0x29f3b18b, 0xf4aa18f5, 0x543c9f53, 
    0xe1ea2e82, 0x8c551445, 0x008aa228, 0xc6afa228, 0x392810a1, 0x5a618d1d, 0x424bb2b7, 0x85522e25, 0x0e457e15, 0xeec04985, 0x6b14856a, 0x08f4547b, 
    0xa22898cb, 0xa2b0dc8a, 0xa200288a, 0x9acfb6a5, 0xffd0e908, 0xaec29f00, 0x475c2d57, 0xae2d97b3, 0xbbf22967, 0x8d56d419, 0x9acfb953, 0x7fd0e949, 
    0x588ac69f, 0x5b2e698f, 0x673e2358, 0xa2282a62, 0x1c038dba, 0x727c8a66, 0x3da8cf18, 0x4582a941, 0x567ef938, 0xa74e59ef, 0x9d96f723, 0xe5b672c9, 
    0x11bce96a, 0x5a6a5aa6, 0xdadeca85, 0xc37134c9, 0xaa6230b8, 0x8e8323a7, 0xd8739ce7, 0xd2737bf0, 0x3ef2d140, 0xaf2bea61, 0x1b7965f8, 0x88daaccd, 
    0x030bb4d4, 0xbb9373b3, 0x8dd3e3cc, 0x67ea9dbe, 0x689bca38, 0xaf1c69a5, 0x2c1d358a, 0xd3d69e78, 0x1b9ab64b, 0x2f496d79, 0x405a6523, 0xce0880c7, 
    0x3de6d771, 0x6a920347, 0xf8293ed3, 0xd1b62b96, 0x8a4bdf1e, 0x95e5edd5, 0x9cc48ac4, 0x8c51997c, 0x04f91e0c, 0x394730f0, 0x685e089e, 0x120597a3, 
    0xc3525744, 0x04195619, 0x4545107b, 0xd550b11a, 0x912be98a, 0x56338ed1, 0xf900454a, 0x50ed66be, 0xfa9021c9, 0xd60ad001, 0xbadf3915, 0x2b25eeb4, 
    0xb58a32ec, 0xcab1b225, 0x03d5be1d, 0x78d5e9c4, 0x9d4aedf5, 0x0a664f68, 0xe3ae8c69, 0x9b165ac1, 0xdc1369a8, 0x8e795b5f, 0xf60e10b3, 0xf468975f, 
    0x7ab8de23, 0xc4879ff4, 0xc639812e, 0x679c9840, 0x885391fd, 0xc62852f8, 0x6d74acd6, 0xe79a4443, 0x9675b642, 0x0de6d5d1, 0xe42c9fbc, 0xf89e0c1c, 
    0xe31ad827, 0x37f1adeb, 0xf0bd6189, 0x69b1ae56, 0x1a43dc46, 0xd239ba4d, 0x84c8ca35, 0xff818a65, 0xdfea0100, 0x5c916074, 0xf0a4327c, 0xa39cb1a4, 
    0x417d60a8, 0x719286a5, 0xa0ad95b0, 0x13e929fa, 0xd7e345bf, 0xb21d4fb5, 0xde9dcba9, 0x422b75d5, 0xa439b11b, 0x3082a255, 0x8aad6870, 0x71607815, 
    0x5d83739c, 0x3d7484e7, 0xe6d25037, 0xcddff296, 0x0edae468, 0x1e051cf6, 0x080b5784, 0xf59cabcc, 0xe0935eed, 0xe41a8d53, 0xf19838e3, 0x150100ff, 
    0x9a7788c5, 0x93e46844, 0x3cd2b123, 0x3c43af2f, 0x44f35676, 0xbdcd30c8, 0x46e81981, 0x2ee71549, 0xc0407241, 0xa5672027, 0xaf83867a, 0x2d4bac43, 
    0xb5617aa4, 0x89978452, 0x18c0fcb8, 0xedbae735, 0xe57a76b4, 0x284bb4e5, 0x7920e548, 0xfdfae6a3, 0x8a710f3d, 0xb1b56678, 0x33bad64a, 0x3280a2e8, 
    0x61b02b70, 0x05501445, 0xc780519b, 0x00fffcd7, 0x277ced5a, 0x96bae9a2, 0xb6f73c9b, 0xa5a46bde, 0x03c3de41, 0xb822f600, 0x67f55fcb, 0xf44abf07, 
    0x689c021f, 0xc41927d7, 0x08f88fc7, 0xb5a62eaf, 0x9d95cc9d, 0xfa69464d, 0xc4f58557, 0xe5ad6c95, 0x49c6a38d, 0xa7670476, 0xe16a4752, 0xcd3e6875, 
    0xb7012c79, 0xdd646408, 0xf44782eb, 0x75d043af, 0x658975e8, 0x364c8fb4, 0xf19250aa, 0x03981f37, 0x148fb806, 0xeaa64758, 0xec465b93, 0xe70aacc8, 
    0x27cfc893, 0xdc4aa7f3, 0x687a68f1, 0x144589d1, 0x1468a657, 0x46508ef5, 0xc5f58115, 0x374d8a32, 0xa6d116b0, 0xef260350, 0xdad48c7c, 0x78a04713, 
    0xce725d8e, 0x014ddc1c, 0x3b1f99b7, 0x23a7924a, 0xbea3fcd0, 0xd53cdb31, 0xa072e068, 0x917185f9, 0xd9774a8f, 0x9df7079b, 0xbcd6f17a, 0x3f7372e9, 
    0x30932f79, 0x6a464fba, 0x7ab4baea, 0xdab7a4ce, 0x7269998e, 0x8acb8f63, 0x23f36319, 0xa7627e1d, 0x8c637e82, 0xcd333df0, 0xdddcdd67, 0x49f3ccdd, 
    0x96439296, 0x454d4672, 0xfdc066f6, 0x749c4ee7, 0x8503c9a6, 0x9c2dcc27, 0x9cd07a0c, 0x7f92571b, 0xeadd3b26, 0x49399ac8, 0xd7275639, 0xaf28ca14, 
    0x36b72645, 0x93e18e25, 0x69b5f200, 0x101c2459, 0x53a17a47, 0xa1980745, 0xd3e7e083, 0xa35772a5, 0xd8cddc4e, 0xe48e71ca, 0xcc03db92, 0xd84a1f7c, 
    0x2e89c7f0, 0x6d092b74, 0xdd268923, 0x994c482b, 0x15b76704, 0xc1eb8a96, 0xcde9c37d, 0x07e6c12e, 0xde871e1c, 0xcb579db9, 0x32fbddca, 0xe6d2da39, 
    0x473c8b9f, 0x3f3c893f, 0x04718d3e, 0x57744571, 0xdf9d4773, 0xcf18062b, 0x7fae401d, 0x4fd3d24c, 0xbbdc8eb3, 0x2e8cb148, 0x2afcb8fe, 0x17e6c1ee, 
    0xda839e3c, 0x80dbd591, 0x9ad347fb, 0xa99cae4a, 0x3607bbdb, 0x322baed5, 0x0e203946, 0x864b56d5, 0xd2c2817c, 0xa59607cb, 0xd3e7e48b, 0x545d43ad, 
    0x32b7d328, 0x8e112e77, 0x1f89e7e5, 0xdeebf3aa, 0x4603c9aa, 0x8a7ad433, 0x6bfe14b1, 0x338edb15, 0x68aea5d6, 0xd945a9d4, 0x3b28a590, 0x631b3d33, 
    0x758d1d86, 0x6e892f5a, 0x82675b34, 0x3b902318, 0xcfc925ef, 0x73a53f40, 0x72ac6acf, 0x2ab66fa7, 0x29501b64, 0x55c5c039, 0xa59db17a, 0xec29c71d, 
    0xe3c9d4d1, 0x849041cd, 0xf41881b6, 0x5a3f4e6e, 0x6b9625e2, 0xb867898b, 0x96a4499e, 0x0e797646, 0xfa38274f, 0x55d8830e, 0xa8901be7, 0x42c5c838, 
    0x2ca7aa96, 0x9d627b77, 0x6e82b10a, 0xa7c6514f, 0x0d1c4376, 0xea41cf20, 0x8944d26a, 0xeff579d1, 0x9fa5a84f, 0x73bb60ca, 0x4ad47ac6, 0xc8ce4aa5, 
    0xd94d2997, 0x92abe814, 0x8f60b240, 0x4c418f94, 0x7ffb27fb, 0x154776a5, 0x8d5dad4d, 0x6a8b4815, 0xc11d1973, 0xf14587ae, 0x6c8bc62d, 0x720443f0, 
    0xb9e47d07, 0xf407e839, 0xf2a118ac, 0x9fb3f989, 0x2ab8926a, 0x518e3ac9, 0x95564e66, 0xe349d4d1, 0x849041cd, 0xf41881b6, 0x5a3f4e6e, 0x891b35e5, 
    0x99a55d2e, 0x6e23cbcb, 0x3e4d3d66, 0x341f96a3, 0xf6189b8f, 0x3ad794a2, 0x4d0d7a72, 0x9532efb7, 0x9fec6715, 0xf894feed, 0x4ff258e0, 0xaea84fcc, 
    0xa5a962f9, 0xa9a3b9a3, 0xcf189d12, 0x7ff1294a, 0xce335ead, 0x89aef20f, 0x1ecd263b, 0x61bfeac5, 0xa43aeaa1, 0xb79d2d2d, 0x49db8a9a, 0xf883abde, 
    0x00a07a9f, 0x57d00100, 0x4e40e079, 0xc101728f, 0xef3fcef3, 0x522c5e91, 0x2234c76e, 0x5273eca4, 0x855b5bf8, 0x6083b50b, 0xc7eada75, 0x08b206f2, 
    0x118ce020, 0xd9a49f5e, 0x537c7aea, 0xbde9f5b5, 0x3a880224, 0x5a9f7b8c, 0x7b4b8df3, 0x684637ea, 0xb1f22c4c, 0x721bcf68, 0x9cd68f73, 0x05e790a2, 
    0x636c8c14, 0x7ff914ad, 0xe718b7d6, 0x2b53f903, 0x4cba8bd9, 0x5c055be8, 0x870e6c80, 0x06a66aa8, 0x885e054e, 0xa95b8d86, 0x31b926c7, 0x95b1d16e, 
    0xfbd5874d, 0xd5510f0d, 0xed6c6921, 0xda56d4bc, 0x1f5cf54e, 0x0ad5fbc4, 0x09083cef, 0x3840eed1, 0xfdc7793e, 0x8acf2bf2, 0x229cb1bb, 0x6aceeca4, 
    0x706b0b5f, 0x6cb076a1, 0x585dbb0e, 0x41d640fe, 0x82111c04, 0x9bf4d32b, 0x8a4f4f3d, 0x37bdbe76, 0x075180a4, 0xeb738f51, 0x99a8735e, 0xd272a50e, 
    0x957661c4, 0x877fc698, 0x28a73827, 0x51700ed9, 0x37ce2857, 0xb5d44184, 0x90d2ab53, 0x3874b3b1, 0x3012d5e0, 0x08bf6b70, 0x4f171bef, 0xb549d462, 
    0x65c8c095, 0x5363c7c1, 0x30c756d4, 0xa5e2d0e3, 0xf3cd2aae, 0x4b19fab4, 0x1af6ab70, 0x42aaa31e, 0x79dbd9d2, 0x9db4ada8, 0x893fb8ea, 0xde15aaf7, 
    0xa3131078, 0x7c7080dc, 0xe4fb8ff3, 0xd85d4554, 0xb3938a70, 0x2d7ca939, 0xda85c2ad, 0xed3ab0c1, 0x03f96375, 0x70100459, 0x4faf0846, 0x3df56cd2, 
    0xfada293e, 0x0192def4, 0x3d461d44, 0xce79adcf, 0x953a64a2, 0x85114bcb, 0x196356da, 0xe29c1cfe, 0x3964a39c, 0xad5c45c1, 0x999b4a50, 0x5c058c9c, 
    0x3d35f70c, 0x0e717245, 0xa82a4e3d, 0xea92ceb7, 0xa225774c, 0x42222b8a, 0x7a68d8af, 0x4b0ba98e, 0xa2e66d67, 0xaa77d2b6, 0xde27fee0, 0xe07957a8, 
    0x728f4e40, 0xcef3c101, 0x5591ef3f, 0xe1627715, 0x73662715, 0x5b5bf852, 0x83b50b85, 0xeada7560, 0xb206f2c7, 0x8ce02008, 0xa49f5e11, 0x7c7aead9, 
    0xe9f5b553, 0x880224bd, 0x9f7b8c3a, 0x449df35a, 0x962b75c8, 0xb40b2396, 0xfc33c6ac, 0x39c53939, 0x8273c846, 0x8a5ab98a, 0x3333a828, 0x89735baa, 
    0xd4e0a147, 0x6c9bf854, 0x7bad4faa, 0xd1e01575, 0xd58b2dd7, 0xe226f8db, 0xe5222dde, 0x328eb826, 0x70071cd3, 0xc415dd0f, 0x5d345e51, 0xcb68ce9d, 
    0x34efdc95, 0xd04f336d, 0x35a97b27, 0x4805e5b8, 0xf85108da, 0x29d79c8c, 0xa9c5dfaf, 0x42dd336b, 0x0a888d08, 0x0c20c148, 0xa1a8b366, 0x6ec8eaca, 
    0xa7485657, 0xf4297370, 0x9f8a0a1c, 0x88956e2b, 0xb357a6f5, 0x1d095a4d, 0x3b55d811, 0xe6d81158, 0x7e01a8af, 0x40d59e5e, 0x91911160, 0x00d457e9, 
    0x079003a0, 0xe88cc715, 0xb5a05765, 0xe226f8db, 0xe5222dde, 0x328eb826, 0x70071cd3, 0xc415dd0f, 0x76515c51, 0xb98c3377, 0x46f3ce5d, 0x02fd34d3, 
    0x5b93ba77, 0x8d54508e, 0x881f85a0, 0x9a72cdc9, 0x965afcfd, 0x20d43db3, 0xa480d888, 0xc600128c, 0x1c8a3a6b, 0xe586acae, 0x60846475, 0x3dddfc0a, 
    0xcc1d83ea, 0x5773ee49, 0x13a402d8, 0x40354780, 0x818193e0, 0x3eb85de9, 0x5fead2a5, 0xf44a3050, 0x9069696e, 0xba01cbe7, 0x5c9f06af, 0x46935653, 
    0xdfae704f, 0xf11637c1, 0x35291769, 0x989671c4, 0x7e803be0, 0x8a22aee8, 0x38eeec22, 0xefdc95cb, 0x4f336d34, 0xa97b27d0, 0x05e5b835, 0x5108da48, 
    0xd79c8cf8, 0xc5dfaf29, 0xdd336ba9, 0x888d0842, 0x20c1480a, 0xa8b3660c, 0xc8eacaa1, 0x4856576e, 0x020c1829, 0x5a9a17dd, 0xc8f2d964, 0xa2c0ad5e, 
    0x9548f20a, 0xa228fab8, 0xbf5d41a4, 0xe22d6e82, 0x6b522ed2, 0x312de388, 0xfd0077c0, 0x15455cd1, 0x2a777651, 0x3b77e532, 0xd34c1bcd, 0xeade09f4, 
    0x41396e4d, 0x14823652, 0x3527237e, 0xf1f76bca, 0xf7cc5a6a, 0x62238250, 0x48309202, 0xeaac1903, 0xb2ba7228, 0x92d5951b, 0xa4a2280a, 0x00d9ff83, 
};
};
} // namespace BluePrint
