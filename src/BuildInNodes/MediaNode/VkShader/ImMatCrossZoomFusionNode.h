#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <CrossZoom_vulkan.h>

namespace BluePrint
{
struct CrossZoomFusionNode final : Node
{
    BP_NODE_WITH_NAME(CrossZoomFusionNode, "CrossZoom Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    CrossZoomFusionNode(BP* blueprint): Node(blueprint) { m_Name = "CrossZoom Transform"; }

    ~CrossZoomFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::CrossZoom_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_strength);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _strength = m_strength;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Strength##CrossZoom", &_strength, 0.0, 1.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_strength##CrossZoom")) { _strength = 0.4f; changed = true; }
        ImGui::PopItemWidth();
        if (_strength != m_strength) { m_strength = _strength; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("strength"))
        {
            auto& val = value["strength"];
            if (val.is_number()) 
                m_strength = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["strength"] = imgui_json::number(m_strength);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue9e9"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_strength    {0.4f};
    ImGui::CrossZoom_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 3975;
    const unsigned int logo_data[3976/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa9a22820, 0x00ffd76a, 0xb76cbad9, 
    0x18f56e23, 0x760bdd40, 0xc095dda4, 0xba7345bb, 0x6f6e881f, 0x7bcbbeef, 0x4d177114, 0xb952edd1, 0x57fadcef, 0x52324a45, 0x51144057, 0x14055045, 
    0x14054051, 0xf86a0d55, 0xd354dae9, 0x1b936da3, 0x1eed3f63, 0xbb49e39f, 0x8a7e812b, 0xad3dfce5, 0x3f6a5cdf, 0xdd24d465, 0x3cbac7e6, 0xc37e5fa8, 
    0xd455feb8, 0x95948c52, 0x511405d0, 0x14450154, 0x15450150, 0x3abe5a43, 0xea349576, 0xd8c664db, 0xa747fbcf, 0xca6ed2f8, 0xb9a25fe0, 0xbf5d0b4d, 
    0x7d5b529b, 0x2acb4d42, 0xbf8a3265, 0xbaba824e, 0xba929251, 0x2a8aa200, 0x8aa22880, 0xa9a22800, 0xc3a2d7ea, 0xe17c964e, 0x69fdc280, 0x2e706537, 
    0x91665c51, 0xda1feaad, 0xcee42d11, 0x77f74bf1, 0x07b32b70, 0x9a313523, 0x8a02d092, 0xa200ab28, 0xae00288a, 0xca17c647, 0x125970d7, 0xe4615ade, 
    0xfa7fbe03, 0xeabacedf, 0x824487cd, 0x23f5592d, 0xf94c922c, 0x9f81b1e1, 0xa8383d4e, 0x4356729a, 0xab7f2747, 0x6ba5be5a, 0x24c5a779, 0x94151006, 
    0x4e073280, 0xee8ad387, 0x852795e1, 0x1de58c25, 0x35f62943, 0xc3a7a306, 0x691bdaa9, 0x1024058b, 0xd223a857, 0xb668639d, 0x24db7136, 0xc018eb8e, 
    0xf0e38c2f, 0xb7b818a5, 0x45512c70, 0x8a82a015, 0xb902a028, 0x46dd183f, 0x16595bf3, 0x9f7b07c0, 0xd61f7840, 0x1ec6caba, 0x9975591f, 0x52b90b35, 
    0x85385be1, 0x1d76e0a3, 0x1315354f, 0xc068c86a, 0x2f2b35d5, 0xdb3b8bed, 0x41ac4b19, 0x70858d43, 0x5100ff14, 0xba32ba5d, 0xb0caa92b, 0xa89735c8, 
    0xf6ca7ef8, 0x100cc3d0, 0x449049db, 0x7e041089, 0x759aab58, 0x4558d9ab, 0x53a2246d, 0x2e18da10, 0x82523b32, 0x59e06e92, 0x412b8aa2, 0x40511405, 
    0x317e7205, 0xda9a47ba, 0x3b00b6c8, 0xc003fadc, 0x56d6b5fe, 0xcbfaf030, 0x5da8c9ac, 0xd90a97ca, 0x031f2dc4, 0xac79eab0, 0x90d526ea, 0x1aebcfd1, 
    0xd6979485, 0x16333697, 0x36ac0031, 0xb52bc615, 0x049e6582, 0xa8430e95, 0xe85fa822, 0x8f763716, 0x5bf0560c, 0x4422e9b9, 0x4d951f01, 0xa7c958a5, 
    0xccb32d59, 0x82d1d925, 0x94ce8fe3, 0xc09d9454, 0x561445bb, 0xa2280aa2, 0x3ce50a80, 0xe0857863, 0x9d4fcfb2, 0xfd61a7cf, 0x16acab6b, 0xd7b924d0, 
    0xc7ecf61e, 0x8c782c24, 0xb3daf18c, 0x43569ba8, 0x7baf2646, 0xa10dcba7, 0xc2b39cb3, 0x5f612300, 0x97765de9, 0x1156b772, 0x733ca7c8, 0x3fbcee55, 
    0xf16e4fa7, 0x4e146bc7, 0x82ab0e47, 0xd343330d, 0xdac8746e, 0x095d5d19, 0x544cade0, 0x5a03b594, 0x84ad288a, 0x00455114, 0x924d5114, 0x91268a45, 
    0x490615ce, 0x585107a0, 0xb525ded6, 0x1a459cba, 0xdcea3930, 0x0039c056, 0x27a9d4fa, 0x14450bb0, 0x8a510055, 0x9800295a, 0xd9b414a3, 0x792058a4, 
    0x1250e19c, 0x8a0bb868, 0x78105831, 0xf2276e91, 0xde9371d5, 0xe86da3b7, 0x4b49a51a, 0x62141760, 0x0ca08a96, 0x2a5a8a51, 0x2826c46e, 0xd4252dc5, 
    0x25656d8b, 0xe6027fc3, 0xde63808b, 0xbe0d568c, 0x09266eb2, 0xf9a2b7d2, 0x33a606a3, 0x867ad8e6, 0x152dc528, 0x67176257, 0xe93d1bbd, 0xf27c56d4, 
    0x976fec26, 0x1d8f41ef, 0x85f7ebe9, 0xdb2aa84b, 0xebb979d9, 0x86dd398a, 0x47dbcaae, 0xef972fad, 0x84aeed54, 0x6bcd05f3, 0xd24c5834, 0xb91b1b55, 
    0x1bbd6757, 0xade7e93d, 0x13793e25, 0x14454576, 0x6285e556, 0xadf1a2f8, 0x3e29bfb4, 0xe16fc7f4, 0xebc6555b, 0x6baa4bd2, 0x436c6d69, 0xfa366a79, 
    0x95fea967, 0x8d68479d, 0xdbd3a415, 0xecd6864d, 0x78f24b12, 0x71c2caae, 0xed8d6a71, 0xafe5b55c, 0x6dcf1a88, 0x83c4abc2, 0xb42203a0, 0xbe7b313c, 
    0xf2fe251f, 0xdac159f1, 0x54740656, 0x08744551, 0xa4a2285a, 0x29de5841, 0x6b6930bb, 0xb099750a, 0x15e79f7e, 0xad4e5cb3, 0xb29efa34, 0x08f343f1, 
    0x981e8498, 0x67957fc6, 0x4223da51, 0x6d6c9a36, 0x2cc9baa0, 0xa82b9edc, 0xd644eed2, 0x72aef4eb, 0xad6d4dea, 0x68084f76, 0x8a1c76d4, 0xccdbe1b7, 
    0x15c18d8d, 0xb0521a9c, 0x408a9ece, 0xa06b2972, 0x8aa26891, 0xf1c50a90, 0x3124e335, 0x1449275a, 0x3fc6fc96, 0x80936c95, 0x855ced49, 0x1aead2dc, 
    0xdd1049a3, 0x41bfb0b1, 0x5676d459, 0x4b97251a, 0x27183e6d, 0x9edce2ce, 0xeed3a02b, 0xaf57c87c, 0xbcb9c04a, 0xd9b764d5, 0x7d8d393c, 0xa1b54a07, 
    0xa75d06de, 0x4a8ba8a8, 0x28e80c5a, 0xd18c1ca0, 0x8a3e925b, 0x1548ac28, 0xfaaaf07e, 0x8e20edd4, 0x6a06e805, 0x161a7157, 0x2932ab3d, 0xcd9cb825, 
    0xf247dc18, 0xc5d293a9, 0x4c9a7cc4, 0x48905c9a, 0x8cf2dd64, 0x56b5d6e3, 0x7c8ccce7, 0xd427b1a6, 0xfdd33935, 0xdb833221, 0xf76968a5, 0x4f41244b, 
    0x5f2d4a51, 0x9e2cf441, 0xc7e694b4, 0x66686d6a, 0xa25b4545, 0x833cd697, 0xe154a99c, 0x9860edd2, 0x1d87894c, 0xfc186eeb, 0xa7dedbc6, 0xaa13297b, 
    0xfdde5e9a, 0x64e4cf07, 0x220f469e, 0x6d9b2eaa, 0xd368c61c, 0x6bbb1e63, 0x3d395a7c, 0x1a48320d, 0x6f8fa23e, 0xfbce817e, 0xba55d419, 0xc863fd29, 
    0x2a5ae55c, 0xd69f15f5, 0x9ef689bc, 0xd3ce0645, 0x6b9db58e, 0x756dc5a4, 0x1e3780e7, 0x6048baa6, 0xad178e69, 0xc7f9744c, 0xb33e1af0, 0x683fb27f, 
    0x04e718fb, 0x67458060, 0xcf0a933e, 0x313642e7, 0x3eea8aeb, 0xda1930c1, 0xa38d076a, 0xc4436138, 0xb48778df, 0xc1c88c7d, 0x4fed010a, 0xf551d4ab, 
    0x4f7b21af, 0x7a159522, 0x79ad9f8a, 0x33f2b407, 0x0c34432e, 0x2a86d5ab, 0xc7a69b9e, 0xbf6d216b, 0x52e89ae7, 0x46e19037, 0xb3ec3f4d, 0xf933cf7f, 
    0xddcdfa52, 0x79da43f9, 0x3091ac19, 0xd620a820, 0x43529a5c, 0xf26f9b3f, 0x95aef4e4, 0x9251e5ad, 0x878e0a84, 0x87ec4f89, 0x2133f2b4, 0xad1b6e27, 
    0xa7a8574b, 0xf620aff5, 0x2a4a459e, 0xd69f15e5, 0x32e7893c, 0x4fa5d5ae, 0x5acf782d, 0x9642a7b1, 0xc5eb78ca, 0x0f46eb5d, 0xebdba3a1, 0xb0540d7b, 
    0x953211c6, 0x2d6b302a, 0x31cf3eed, 0xd71aba68, 0x87a2f4c1, 0xf640bf88, 0xcb7d14a5, 0x51ae3acd, 0x853cd647, 0x144543ce, 0x3f8b0550, 0x5debc3f5, 
    0x4132a306, 0x01a1f9a6, 0x573cb92a, 0x28716a3d, 0x6109d135, 0xc7278910, 0xc8968b94, 0x634b15cf, 0x917e665a, 0x6677b77e, 0x07ae8426, 0x66fd1439, 
    0x2e6ce238, 0xf4d4c12a, 0xdac299cb, 0xd011ab32, 0xa9a95a28, 0xc13c9058, 0x137b3e2b, 0xe1cb4147, 0x4a5acf31, 0x69703052, 0x28494c2a, 0x82c48aa2, 
    0x00ff99f6, 0xaef50b1f, 0x3b9e50bb, 0x3c6e392d, 0xf11cd890, 0xfe9b865c, 0xdab57ebd, 0xbdadcdbd, 0x03ec9a80, 0xae20af12, 0x63475a73, 0xf4147b7a, 
    0x5c5deb4b, 0xda679fca, 0x7ae40c50, 0x032bfce7, 0x054751c4, 0x381e47f3, 0x55cf96ae, 0x68e46fd3, 0xc5c6982c, 0xbc5d8573, 0xe9af3957, 0x983f674d, 
    0xb9556926, 0xcb691ecb, 0x13fe1ce1, 0xac288a1a, 0xa268718e, 0xe92e908a, 0xbff6f17f, 0xa6afed5a, 0xf4f4d3b5, 0x5fd992b8, 0x27ae788e, 0x8f00ff4b, 
    0x7dd7faa5, 0x9e9de53d, 0x285eb398, 0xdbf4c278, 0x36ac35bb, 0x21b3a736, 0xd64edfd2, 0xb644deec, 0x206c030a, 0x68b5e18a, 0x9e54df52, 0x1b55ce18, 
    0x6177d700, 0xb4fae9a9, 0xcf64c132, 0x543b180f, 0x23cf1921, 0xb5e24a1f, 0xbbb42ddd, 0x65ca88f6, 0xea31e456, 0x53c19e68, 0xa2cd4ce1, 0x11232b8a, 
    0x918aa268, 0x00ff5913, 0x6b7dd2c7, 0x364db8be, 0xab4b4cc3, 0x8171348b, 0xe09a03bb, 0xe300ff6c, 0x7aad3fea, 0xb696d73c, 0x774d3a3a, 0xa3309611, 
    0xf337142a, 0xcdec69ad, 0xd6caeca9, 0xbb2e9a56, 0x6ac3e663, 0xf1607715, 0x37700d82, 0xf5bdadb0, 0x2c770ac4, 0xea03b252, 0x157ac501, 0xaf61a38e, 
    0x646fcb5a, 0xc1045bd3, 0x1c46003b, 0x2b7dc6f6, 0xf334d684, 0x5a736aa6, 0xa7c03c99, 0x08528f21, 0x31d913cd, 0x8a265ad4, 0x64455154, 0x3f454360, 
    0x3d1bbd67, 0x97787eeb, 0x876d2474, 0xd0357500, 0xa7cf512c, 0xbc6fa498, 0x4d14acb8, 0x3539bb8d, 0x06c85d60, 0x97383505, 0x8b5aa419, 0x3eb6b548, 
    0x1ce66764, 0xb87b71d1, 0xdd58356c, 0xcb076ac8, 0x7314e79c, 0xab73a0c7, 0x2d876458, 0x673f659a, 0xe93d1bbd, 0xa18bc473, 0x18c5a568, 0x2c89eeac, 
    0xebf7e7e9, 0x6eeb5a8f, 0x8addb545, 0x63fcc8db, 0x9022e39a, 0x6abd72c4, 0xeb4bb76f, 0x2429d5fa, 0xaca41969, 0x7656b674, 0xa3996b1a, 0x5931363f, 
    0x2ea2d6ba, 0xe9f45c89, 0x52f68659, 0xa0d69f31, 0x4d722e76, 0x40d66a0e, 0xca90a5e7, 0x2a467129, 0x8ac28c6e, 0x442a4631, 0x2e4ed35b, 0x9d5deb97, 
    0xed7ddac4, 0x27cf5b9a, 0x772007ca, 0x935d0dae, 0xfc539cee, 0x6abe7ff9, 0x1969acd4, 0xaced58d9, 0x9434d2e6, 0x2703b776, 0x1a7ffe93, 0x47cdf5e5, 
    0xc9f046fb, 0x3350c5e9, 0x8d05c348, 0xd5954347, 0xb0ba5382, 0xc5284651, 0x94b49841, 0x5b0252b4, 0x09e51642, 0x6cd70038, 0x718fc6fa, 0x44d79662, 
    0xcfc881ba, 0xe728e15a, 0xb132aad6, 0xdc299f71, 0x9ae8aec3, 0xa12c2c54, 0x3baebb0b, 0xdfa921d7, 0x2d7fa53e, 0x3c178cd3, 0x55d0410f, 0x37b9295a, 
    0xe86d4aa0, 0x54b49414, 0x45511410, 0xe2640000, 0x96f0a1b6, 0xcb0a71ad, 0x6194711c, 0x2bc07c90, 0xfaf07e19, 0x0543a6d7, 0x6287cfc5, 0x267fd68a, 
    0xfdb54156, 0x3345482b, 0x734b4548, 0xb6f0ba89, 0x4d0369ad, 0xa328b825, 0xc0066327, 0xc8f48aac, 0xe8a3dbfe, 0xafec3db3, 0x20b94aa8, 0x4f8ff322, 
    0x299d79a5, 0x549c20c5, 0x8aa2606d, 0x8ac20c2a, 0xb402a028, 0xab377ced, 0xc5a5dbde, 0x9ff8a6bd, 0x06316f95, 0x9559337f, 0x531cfae8, 0xa218e14d, 
    0x95ca97b7, 0xfb1f21a3, 0x11aed6a7, 0x52112ebb, 0xcf5d9c7a, 0x488bf586, 0x98ac695a, 0xac928c22, 0x13f881ad, 0x90e99559, 0x451fed8b, 0x9fe94b9e, 
    0x40729550, 0x3ac6c945, 0xe8cc2b7d, 0xe21c5294, 0x8aa260a3, 0x8ac20c2a, 0xb402a028, 0xaa3dfcac, 0xcd2ddbdf, 0x1399afad, 0x28e60d67, 0x133a0ece, 
    0x7ee8b559, 0xbc598e1a, 0x2741b11c, 0x02892b95, 0xe34ef73f, 0xdd085783, 0x3ba90897, 0xf0b98f33, 0x0b69b1de, 0x0493354d, 0x95559251, 0x6b023fb0, 
    0x1132bd32, 0xb3e8a37d, 0xea337dc9, 0x0848ae12, 0x4fc738b9, 0x129d79a5, 0x549c438a, 0x4551146c, 0x45519841, 0xf6540014, 0x689717f6, 0x79d2da5e, 
    0x1c131c94, 0x853f8065, 0x81df5d41, 0xc8353a01, 0x38cf0707, 0x45be00ff, 0x8add5554, 0x8e9d7984, 0x541ffb43, 0x6600ff1c, 0xdf00ffdd, 0x0a00ff86, 
    0x040741a6, 0xfdf48a60, 0xb356df26, 0x29ed7f8a, 0x14e0b923, 0x1f333b11, 0x7a60f351, 0x20ea9c57, 0x30e74a8d, 0x1f2b7398, 0x820aae2c, 0x94538c73, 
    0x399c8a6c, 0x51d4ca55, 0x51984145, 0x2f001445, 0xf45a1fde, 0xcfdd0591, 0xca8a6386, 0x18ed1c43, 0xe3cac1da, 0xc3e615f1, 0xbab69a83, 0x5528fab5, 
    0xd00190ba, 0xac8cab06, 0xb9a3245c, 0x7a76e8de, 0xcf149b9e, 0xaaf95fab, 0x2d674046, 0xd7e4d4b7, 0x5bdcaf11, 0x4b136b5d, 0x4294076a, 0xe01903e3, 
    0x1bb57955, 0xb7a4d0c9, 0xa09e3232, 0x52a256b5, 0xa71cb2ba, 0x51146475, 0x51984145, 0x57001445, 0xcfd0e8a2, 0xe2f8e071, 0x99ca93b6, 0xb88f60e2, 
    0x729ea78d, 0xa73aaf39, 0xed22f3ac, 0xec405d59, 0x56c6d518, 0x67e5122e, 0x9ad668a3, 0xf20c9386, 0xcc9afa6a, 0x726e0498, 0xe5d431c1, 0x19b5cfab, 
    0xb9529f62, 0x9e880196, 0x1ce36556, 0xa479a166, 0x66e46190, 0xda34e71e, 0x04ab2b25, 0xa26075a7, 0x0a082a8a, 0x0a80a228, 0xc50e1ff4, 0x110cfe34, 
    0xcce5c95b, 0xe4a322eb, 0xc171a78d, 0x7d5ee9c8, 0x45e5594f, 0x81bab2da, 0x511531d8, 0x97709995, 0x461b3d2b, 0x8834d4b4, 0xd4589367, 0x23c064d6, 
    0x8e099673, 0x7d5e2da7, 0xfa14cba8, 0x0cb0cc95, 0x2fb3f244, 0x0b35e318, 0x0f8324cb, 0x62f73023, 0x2be5b469, 0x75a704ab, 0x2a8aa260, 0xa2280a08, 
    0xbced0a80, 0x166f7113, 0x5c937291, 0x8e691947, 0xee07b803, 0xaa68e28a, 0x51b9b38b, 0xdeb92b97, 0x9f66da68, 0x52f74ea0, 0x0a4a716b, 0xa310b491, 
    0xae3919f1, 0x8bbf5f53, 0xba67d652, 0x101b1184, 0x40829114, 0x5167cd18, 0x90d59543, 0x90acaedc, 0x24154551, 0x00d9ff1f, 
};
};
} // namespace BluePrint
