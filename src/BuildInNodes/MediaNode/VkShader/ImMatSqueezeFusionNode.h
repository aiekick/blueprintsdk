#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Squeeze_vulkan.h>

namespace BluePrint
{
struct SqueezeFusionNode final : Node
{
    BP_NODE_WITH_NAME(SqueezeFusionNode, "Squeeze Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    SqueezeFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Squeeze Transform"; }

    ~SqueezeFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Squeeze_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_separation);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _separation = m_separation;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Separation##Squeeze", &_separation, 0.0, 1.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_separation##Squeeze")) { _separation = 0.04f; changed = true; }
        ImGui::PopItemWidth();
        if (_separation != m_separation) { m_separation = _separation; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("separation"))
        {
            auto& val = value["separation"];
            if (val.is_number()) 
                m_separation = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["separation"] = imgui_json::number(m_separation);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue8ed"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_separation  {0.04f};
    ImGui::Squeeze_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 4910;
    const unsigned int logo_data[4912/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x00ff37eb, 0xb764dad9, 
    0x3070400a, 0xe9f1fe99, 0xf5027643, 0x1a68cd15, 0xa1dee5f5, 0xa3ed5bf6, 0x7f748fcc, 0xd47fdf2e, 0x34494b57, 0xb0dad0d5, 0xc4144551, 0x7f89f649, 
    0x3e0afabd, 0xbff72fd1, 0x59d15141, 0x2a7f28fb, 0x49ec2a17, 0xbd7f89f6, 0xd13e0afa, 0x41bff72f, 0x524dd551, 0x4d3bfbf7, 0xc882e79a, 0x0b3d28bf, 
    0xa6d3a176, 0xdc57f995, 0x7fb1ab1c, 0x00ff12ed, 0x7d14f47b, 0x7eef5fa2, 0x07adb982, 0x57ea53c4, 0x1c756dad, 0x2137c568, 0x327f4640, 0x18a5a16b, 
    0x4bba9253, 0xd8550eee, 0xff12ed93, 0x14f47b00, 0xef5fa27d, 0xa2a3827e, 0xf287b29f, 0x895de5a0, 0x8bfed4be, 0xd19fda47, 0x7d2a1a6a, 0xe4c23e85, 
    0xb56f628f, 0xf6d1a23f, 0x865af4a7, 0xa3976aaa, 0xbaa6d34e, 0xf28b2cc0, 0xd49ed083, 0x835d1a7b, 0x1f8d3d92, 0xd1a23fb5, 0x5af4a7f6, 0x112f74e6, 
    0x35dea9cd, 0x1b49ccb5, 0x0185dc14, 0x74cdfc19, 0x9e342a14, 0xd82339c8, 0xe84fed9b, 0xfda97db4, 0x8fa2a116, 0x72b04f61, 0xed67b147, 0xb47eec7f, 
    0x8ffdaf7d, 0x4b51abd6, 0x0bbbd4ea, 0xf6b3c4d9, 0x5a3ff6bf, 0xc7fed73e, 0xb6aa55eb, 0x759a7aa3, 0x0c52b78c, 0x712e1c84, 0xbe14f6b8, 0x7bb04baf, 
    0xbe34f638, 0xebc7fed7, 0x00ffda47, 0x9c6bfdd8, 0x9a48fcd1, 0xbd5bd3ad, 0xbb7db7b1, 0x77bb2f97, 0x926a2be8, 0xa5ab45a1, 0x8fb387f9, 0xffdacf62, 
    0x68fdd800, 0x1ffb5ffb, 0xaba256ad, 0x07bbd4ea, 0x455188b3, 0x5c61b915, 0x952f8c8f, 0x24b2e0ee, 0xe4e171f9, 0x00ffbfc7, 0x5dd7f95b, 0x90e8d059, 
    0xa43eab45, 0x9f499665, 0x3330363c, 0x15a7c7e9, 0x21ab4d13, 0x35d492a3, 0x2b75597b, 0xa418db5b, 0x6000c084, 0xd3810cc0, 0xaec8f4a1, 0x785219ee, 
    0x51ce5852, 0xa03e30d4, 0x9f8e1ad4, 0x6d68a70e, 0x90142ca7, 0x8fa05e41, 0xa28d754a, 0x6cc7d9d8, 0x63ac3b92, 0x8f33be00, 0xe22294c2, 0xa22816d8, 
    0x4541d08a, 0x5c015014, 0xc32f8c8f, 0x4962415d, 0x2e0fd3f2, 0x9100ff3b, 0xeabace9f, 0x824487ce, 0x23f5592d, 0xf94cb22c, 0x9f81b1e1, 0xa8383d4e, 
    0x4356729a, 0x5add2b39, 0xd64afbd7, 0x488a4ef3, 0x95152a4c, 0xa7031980, 0x77c5e943, 0xc293ca70, 0x8e72c692, 0x06f581a1, 0xf874d4a0, 0x6d433b75, 
    0x82a46039, 0x7a04f50a, 0x166dac53, 0x643bcec6, 0x1863dd91, 0x7e9cf105, 0x1617a114, 0xa22896c1, 0x4541d08a, 0x5c015014, 0xbcaf8b97, 0x062cb8cb, 
    0x908789e2, 0x46fe532f, 0x6aeb3a7f, 0x9c555a9c, 0x917ccf37, 0x723eb41f, 0xedeb89e5, 0x2bb93851, 0x38f5ad21, 0x054afdfb, 0x6c6f6dd4, 0xc983e62d, 
    0x803a5801, 0x4c3f1d08, 0x9561ee8a, 0x8c258527, 0xc0504786, 0xbb4c438f, 0xdcfa82b3, 0xf826dcdb, 0x484682d8, 0xb6b654fe, 0xaddb59b1, 0x34560abc, 
    0x7192a0fb, 0x5c84d2f9, 0x4fdbb85b, 0xa2285a62, 0xa22824b4, 0x932b008a, 0x5ddb4df1, 0x42a643df, 0xef104a92, 0x925c6391, 0x7ffa007d, 0xac2aeb3a, 
    0x579c6d7a, 0x8190788d, 0x492ee73b, 0xa7899a27, 0x6e356425, 0xdca925a7, 0x5dfb7b1b, 0xeec2d642, 0x1f0242d0, 0xe3a02d36, 0x45861fa0, 0xc7f37676, 
    0xf11c6f73, 0x188aa41c, 0x589b4b1a, 0x5c30202f, 0xba8d2446, 0xdedea2a9, 0x1816482b, 0xd16b6413, 0x3a3f4e72, 0x7d8b8b51, 0x285a4283, 0x6711b4a2, 
    0xfeed9fec, 0xfd937d94, 0xf3a0d2bf, 0xf9edfb1f, 0xf73fe6d1, 0x6eaef3db, 0xcd00ff4a, 0x7dda19f8, 0xfec9fec9, 0xd947e9df, 0x2afddb3f, 0x00ff310f, 
    0x1e9ddfbe, 0x7d00ff63, 0x2b393abf, 0xe03700ff, 0x7f729f16, 0xfab77fb2, 0xf64ff651, 0x834a00ff, 0xb7ef7fcc, 0xff9847e7, 0xce6fdf00, 0x00ff4a8e, 
    0xa705f8cd, 0x9fec9fdc, 0x7d94feed, 0xd2bffd93, 0xfb1ff3a0, 0xe6d1f9ed, 0xf3dbf73f, 0xf3bf92a3, 0xf769017e, 0x2f9efd2d, 0x8fa6feee, 0xdffdc5b3, 
    0xb46fd5d4, 0xd0effd4b, 0x7f89f651, 0xc70afabd, 0x6ffe57d8, 0x3ec993c5, 0xc5b39fe5, 0xd1d4dffd, 0xbbbf78f6, 0xf6ad9afa, 0xfabd7f89, 0x2fd13e0a, 
    0x4741bff7, 0xdffcafb0, 0xf7490e8b, 0x2f9efd2c, 0x8fa6feee, 0xdffdc5b3, 0xb46fd5d4, 0xd0effd4b, 0x7f89f651, 0x3d0afabd, 0xfce67f85, 0xb94f7258, 
    0x7ff1ec67, 0x7d34f577, 0xfeee2f9e, 0xa27daba6, 0x827eef5f, 0xfd4bb48f, 0xec51d0ef, 0x3700ff2b, 0x7d92c3e2, 0x7f5a7ecb, 0x3c2a7f71, 0xfee2feb4, 
    0x4fed5b55, 0xa97db4e8, 0xfab316fd, 0x00ff6ebd, 0x2c923c89, 0xc5fd69f9, 0xd3f2a8fc, 0x55f98bfb, 0xa23fb56f, 0xf4a7f6d1, 0x5baf3e5a, 0x921ce2bf, 
    0xfd69f92c, 0xf2a8fcc5, 0xf98bfbd3, 0x3fb56f55, 0xa7f6d1a2, 0xaf3e5af4, 0x1ce2bf5b, 0x69f92c92, 0xa8fcc5fd, 0x8bfbd3f2, 0xb56f55f9, 0xf6d1a23f, 
    0x3e5af4a7, 0xe2bf5baf, 0xd12d921c, 0x3da9fd50, 0x27b58f1a, 0xc25e56a3, 0x257962a7, 0x878a9ad8, 0xd4e849ed, 0x1a3da97d, 0xb053618f, 0x35b14b72, 
    0x93da0f15, 0x52fba8d1, 0xc21e357a, 0x97e460a7, 0x1f2a6a62, 0x51a327b5, 0x6af4a4f6, 0xc14e853d, 0x4ac52ec9, 0x83bda228, 0xc5172ba8, 0xd3b5811a, 
    0x331fcfbe, 0x0f809d5c, 0xe100ff4e, 0x73d5d6f8, 0xce055af7, 0x9b9baca5, 0x946d55d9, 0xce8d3562, 0xbf9d8ee1, 0x96b6991a, 0x9e764683, 0xb5eef027, 
    0x4c2e370c, 0x63a85157, 0xb1fe1fd8, 0xd7d875fe, 0x51f8a83d, 0xb5cdb726, 0x9f3acdc4, 0x2329cf94, 0xd86cb5df, 0x5176cc25, 0xd3ca7647, 0x4e99e12a, 
    0x83a9f741, 0x4583a996, 0xb4a2288a, 0x14455110, 0x89375600, 0xb1b13675, 0x5cc4c010, 0xb4a91d5c, 0xd6dc81e0, 0xf85c62cd, 0xb1faed77, 0x499cbdbc, 
    0x28b13016, 0x39b70323, 0x68699ba8, 0xd59d7506, 0x43ac8bfe, 0x2475a306, 0xe5a05cd1, 0x3e56b0dc, 0x7e3cf499, 0x1556d635, 0x66ac84ef, 0xe8b66d83, 
    0x9643ce25, 0x6b223f2c, 0x6029ce5e, 0xe5298eb4, 0x828bc812, 0x4d7563e0, 0xd0bad736, 0x511435d9, 0xa228885a, 0x1f2b008a, 0x58a37ac4, 0x27608859, 
    0x2a1f37ed, 0xf5a83c6d, 0xb8c78aad, 0xba37ecf0, 0xcc5e5e9b, 0xb1305267, 0xdb51a860, 0x27537390, 0x48a37b2b, 0xbebdb4cc, 0x6058b5d1, 0x685eaed4, 
    0xcc7c506e, 0xfe6f84c4, 0x57d7e0b1, 0x133e9758, 0xa48025d3, 0xec249811, 0xf8b199e1, 0x70b65a13, 0x1c696d49, 0x64664c32, 0x0946de18, 0xca45a91d, 
    0x6e5990f6, 0x5514454d, 0x79a72888, 0xfcc6fd6f, 0xfbdff2a8, 0xf354f98d, 0x86aeb847, 0xabbf4ed6, 0x47d8369d, 0x7c533707, 0xf7b88eb1, 0xff2d8fad, 
    0x95dfb800, 0xa50b9f67, 0xf2d7a2de, 0xc77271c3, 0x909b8c8d, 0x3215637b, 0xd4eb9e96, 0x1a444677, 0x6aa6a5ae, 0xf3ea5b71, 0x834eb12c, 0x6303856b, 
    0xaef3037e, 0xf8dea896, 0x727bd64e, 0xbf35a78d, 0x8b23f339, 0x2a8e1f69, 0xda9baddd, 0x320047db, 0x0c1823c8, 0x9a8a24e3, 0x4f5a6972, 0xfad006f1, 
    0xff5bde29, 0x2abf7100, 0xe3feb73c, 0x34a7557e, 0xb3e88a7b, 0x6af554f6, 0xad9eca3e, 0x4f5e5153, 0xe6dca9b7, 0x1f7297e7, 0x51aba7b2, 0x6af554f6, 
    0xbd3d8a9a, 0x2ecfe14e, 0x4f653fe4, 0xa9eca356, 0x1435d5ea, 0xc39d7a7b, 0x7ec85d9e, 0x47ad9eca, 0xaad553d9, 0xf5f6286a, 0xbb3c873b, 0x2f9efd91, 
    0x8fa6feee, 0xdffdc5b3, 0x5494d4d4, 0x00ff59fb, 0xee331733, 0xbf78f647, 0x3e9afabb, 0x7ff717cf, 0x47515253, 0x30f39fb5, 0xfec87de6, 0x7ff717cf, 
    0xe2d94753, 0x6aeaeffe, 0xb3f6284a, 0xcf1c66fe, 0xe2d91fb9, 0x68eaeffe, 0xdd5f3cfb, 0x45494dfd, 0xcc7fd61e, 0x1bf799c3, 0x17f7a7e5, 0x4fcba3f2, 
    0x4ee52fee, 0x5d9aa7a2, 0x966fecc2, 0xca5fdc9f, 0xb83f2d8f, 0x8a3a95bf, 0x2edca539, 0xfd69f9c6, 0xf2a8fcc5, 0xf98bfbd3, 0x9aa3a853, 0x6fecc25d, 
    0x5fdc9f96, 0x3f2d8fca, 0x3a95bfb8, 0xdca5398a, 0x288ac22e, 0x455110a9, 0x45510014, 0x45510014, 0xed4b0114, 0x7b00ff12, 0xa27d14f4, 0x827eef5f, 
    0xafbda2a3, 0x47e50f65, 0x49ec2a5f, 0xbd7f89f6, 0xb76c0afa, 0x49da18a6, 0x19455465, 0x5300d82c, 0xedd69e6b, 0xe95e3d75, 0xcb87216d, 0x799643b4, 
    0xe1cf011b, 0xca54fa93, 0x42b6e214, 0xdb8d5de5, 0xb70b627d, 0x14796f29, 0xa94a06ac, 0x7dace204, 0x7eef5fa2, 0xbd2bb982, 0xea82531f, 0x7b2beb1b, 
    0x0584e468, 0x9d90e1f2, 0xb503f1c3, 0x3cf2b674, 0x13c923b0, 0xc87ce444, 0x18a541dd, 0x2ace6ed3, 0xa2baa2e0, 0xfe25dac7, 0xfb28e8f7, 0xfddebf44, 
    0x5f454705, 0xa1f287b2, 0xdfc4aef2, 0xa3457f6a, 0xb5e84fed, 0xc23e150d, 0x4772619f, 0x9fda37b1, 0xf5686ad1, 0x6621ad68, 0x95b5b3b8, 0x99492647, 
    0x1cfc68d7, 0xc13a550c, 0x5db56cd6, 0x1a6d715a, 0xc96b16ac, 0x87f57f66, 0x9dd40edc, 0xe557712a, 0x237b821a, 0x58115fa8, 0xd68e86de, 0x062c4edb, 
    0x18598649, 0xd47cfc8f, 0x457f6a7f, 0x0b5d46ae, 0x8eb9b754, 0x455ac8f6, 0x972f402c, 0xf738540e, 0xef9674cd, 0x4d23902c, 0x1f219517, 0x1f1c6432, 
    0x541aa5a8, 0xa91cf1de, 0x53fb5aa4, 0x6a1f2dfa, 0x68a8457f, 0xfb14f6aa, 0xc51ec913, 0x00ffb59f, 0xf6d1fab1, 0x5a3ff6bf, 0xab2f45ad, 0x672fec52, 
    0xffdacf12, 0x6afdd800, 0xa6af8ef5, 0xf7c242db, 0x6e5bfb48, 0xb4b47fc8, 0x603a467b, 0x7dacc80a, 0x75d44d57, 0x683f8449, 0x75c8de8a, 0xfa67960b, 
    0xcdf6388e, 0xd7924227, 0x3b116a94, 0x19b4d757, 0x002d9691, 0x5ff2fea1, 0x06f323b1, 0xcfd8cdb2, 0xf5fef111, 0x7a78b272, 0xebd209ee, 0x82b6b84f, 
    0xa4760164, 0xdfe38a4c, 0x55fe6ce6, 0xc49409bd, 0xc9a27abe, 0x2421988f, 0x9534db67, 0xd8786f0a, 0xe7521739, 0xd800ffda, 0x5ffb68fd, 0x56ad1ffb, 
    0xd4eaaba2, 0xc4d90bbb, 0xf4a4f6b7, 0x9ed43e6a, 0xb7bc558d, 0x547ee3fe, 0xc6fd6f79, 0xab3fabfc, 0x8bf8efd1, 0xb59f2592, 0xb656a327, 0x7af8a991, 
    0x565d771b, 0x4b79e6c6, 0x80335ae5, 0xbc8f0317, 0x3cb0e63b, 0x7ee3feb7, 0xc3eb4255, 0x19d7207e, 0x2cca3184, 0x1084e154, 0x62f696bb, 0xb147e907, 
    0x955ab5a2, 0xddb9711a, 0x31f8aacb, 0xb7e9aad0, 0x94d193f1, 0xe6e64782, 0x87bad7b9, 0x530e6c7b, 0x0160293f, 0xcf35bfc7, 0x51fde043, 0xa8e813a6, 
    0x066034e9, 0xabdc6d58, 0x35b9f60f, 0xed6f2dae, 0x6e7d45d4, 0xf9285cd1, 0xd00f2bd4, 0x6954d28c, 0xca61754b, 0xfd2c779c, 0x8f1a3da9, 0x55a327b5, 
    0x00ff2d6f, 0x1e95dfb8, 0x7100ff5b, 0x577f2abf, 0x23f1dfa3, 0xb3bf2592, 0xd4dffdc5, 0xbf78f6d1, 0x929afabb, 0xb3f6e08a, 0xcc6166fe, 0x9efd91fb, 
    0xa6feee2f, 0x8cb55aad, 0x4d9f9511, 0xc889e58e, 0x81d49567, 0x5091f2e9, 0xa9b547d1, 0xd27cccfc, 0x6d925bee, 0xd1849035, 0x1b3d46a0, 0xffe394ce, 
    0x1faa1e00, 0xbffb8b67, 0xa328a9a9, 0x66fed4da, 0x487d720e, 0xf717cffe, 0xd947537f, 0xeaeffee2, 0xf6284a6a, 0x2e66feb3, 0x966fdc67, 0xca5fdc9f, 
    0xb83f2d8f, 0x8a3a95bf, 0x0b77699e, 0x7f5abeb1, 0xd22a7f71, 0x7d2b75d3, 0xf48d063e, 0xcda22b9b, 0x06f17cbb, 0x4a9f8e23, 0x9c9aa2cf, 0x68525097, 
    0xb75f93d9, 0x1d342164, 0x6ff41829, 0x62c529b3, 0x63b9a3b2, 0x784e021a, 0x29e40750, 0x4fcea168, 0xdc9bdca8, 0xdc9f966f, 0x2d8fca5f, 0x95bfb83f, 
    0xd25c8a3a, 0xa2b02bee, 0x15442a8a, 0x96f8a2b5, 0x78b645e3, 0x03398221, 0x9c5cf2be, 0x56fa03f4, 0x6bd3142d, 0xa8d6a661, 0xe6f124ea, 0x5b42c8a0, 
    0x377a8c40, 0x73ad1f27, 0xcc2dcf73, 0x5ece3cef, 0x3d663947, 0x0e4547cd, 0x2637ee4d, 0xa2280af7, 0x14452191, 0x5a5b0150, 0x346e892f, 0x1882675b, 
    0xef3b9023, 0x40cfc925, 0xd162a53f, 0x1ab6364d, 0xa28e6a6d, 0x0c6a1e4f, 0x08b42584, 0x7172a3c7, 0x3c37d7fa, 0xf3cedcf2, 0x73e4e5cc, 0xd4dc6396, 
    0xdee45074, 0x706f72e3, 0x12298aa2, 0xb42f5514, 0xd0effd4b, 0x7f89f651, 0xeb0afabd, 0xa3fba4fa, 0xb5cb644f, 0xd443c37e, 0x5b5a4875, 0x15356f3b, 
    0x57bd93b6, 0xf53ef107, 0x7f89f687, 0x440afabd, 0x84e6edf1, 0xedc2ca1a, 0xcd6d47de, 0xb023110c, 0x1c49323d, 0x49f5a774, 0x86d5642d, 0xd2a9eba9, 
    0x6e6de1cb, 0x0dd62e14, 0xab6bd781, 0xc81ac81f, 0x30828320, 0x131f5445, 0x0216bb75, 0x28eae2e2, 0x786502dc, 0xe8534596, 0xa7290e4e, 0x9af59252, 
    0xf9b24ee8, 0x01ba58ac, 0xa7e74982, 0xc9199614, 0xb3072d5e, 0xda255e4d, 0x25da972a, 0x28e8f7fe, 0xdebf44fb, 0x541f05fd, 0x642f749f, 0x7f55b4cb, 
    0xb100ffb5, 0xbff6d1fa, 0x8f5a3ff6, 0x2fec55ab, 0x5fc52267, 0x1df5d0b0, 0xce961652, 0x6d45cddb, 0xc155efa4, 0x64bd4ffc, 0x8ffdaf7d, 0xdff4b4d6, 
    0xabe10b88, 0xb2bf6d29, 0x471e6fae, 0xdc9d3cde, 0x69d70164, 0xac69bd1d, 0x8aea4b35, 0x4b7d378d, 0x5b5bf892, 0x83b50b85, 0xeada7560, 0xb206f2c7, 
    0x8ce02008, 0x6f345611, 0x9276b78a, 0x5eda9748, 0x01ae70a7, 0x09089556, 0x867c00ff, 0x4a00ff3c, 0xfda973a7, 0x916beaae, 0xd939cf0e, 0xe4eee7f6, 
    0x78281de7, 0x2a41f469, 0xaa28897d, 0xff6b00ff, 0xa3f56300, 0x7eec7fed, 0x57adbeb4, 0x45ce3eb1, 0x3b3f2a8a, 0xffc999fe, 0xe7d17c00, 0x3f39d37f, 
    0xd9cf9aef, 0xac3cb1cb, 0x68d8af92, 0x0ba98e7a, 0xe66d674b, 0x77d2b6a2, 0x27fee0aa, 0xef3cb3de, 0xfd2767fa, 0x84375df3, 0x36964afc, 0xa4ab3657, 
    0x652ef7ea, 0x93bd7d27, 0x71940f32, 0xc69f81bb, 0x97faa69a, 0x95d95d18, 0xb7b6f025, 0x066b170a, 0xd5b5ebc0, 0x640de48f, 0x18c14110, 0x23ddba22, 
    0x9d8e9ac4, 0xe9a9cd1c, 0x07ba207e, 0xd9d3001b, 0x9a44fe8a, 0x1aef2ee5, 0xda79f6e2, 0x2403e2d2, 0x2239e68c, 0x9c93c928, 0x0e457010, 0x12e2d59d, 
    0xb4a18986, 0xfd777e54, 0xf9fe9333, 0x00ffcea3, 0xdf7f72a6, 0xbb9cbd34, 0x28c9ca11, 0x41cc8aa2, 0x3d34ec57, 0xa5855447, 0x51f3b6b3, 0xd53b695b, 
    0xef137f70, 0xf0bc2b54, 0xb9472720, 0xce99e000, 0x5591ef3f, 0xe1627715, 0x73662715, 0x5b5bf852, 0x83b50b85, 0xeada7560, 0xb206f2c7, 0x8ce02008, 
    0xa49f5e11, 0x7c7aead9, 0xe9f5b553, 0x880224bd, 0x9f7b8c3a, 0x449df35a, 0x962b75c8, 0xb40b2396, 0xfc33c6ac, 0x39c53939, 0x8273c846, 0x8a5ab98a, 
    0x1b33a828, 0x17f7a7e5, 0x4fcba3f2, 0x4ee52fee, 0x5d9aaba2, 0xcb3776c7, 0xe52fee4f, 0x2d847f5d, 0xb9748934, 0x910dddfe, 0x4c21cd93, 0xb48184c8, 
    0x5472cd74, 0x27498d53, 0x3419957b, 0x779a76ee, 0x2a2d3487, 0xd4bcb966, 0x29d4ee2c, 0x68131d01, 0x4d4ec6f7, 0x96ccfa72, 0xd2a45a37, 0x15475bd9, 
    0xac2220b9, 0xeb004661, 0xa6e85481, 0x81ac36ea, 0x6fc8eace, 0x5fdc9f96, 0x3f2d8fca, 0x3a95bfb8, 0x77699e8a, 0xa228ec26, 0x7605918a, 0xb7b809fe, 
    0x49b9488b, 0xb48c23ae, 0x03dc01c7, 0x147145f7, 0xdcd94555, 0xdc95cba8, 0x336d34ef, 0x7b27d04f, 0xe5b835a9, 0x08da4805, 0x9c8cf851, 0xdfaf29d7, 
    0x336ba9c5, 0x8d0842dd, 0xc1480a88, 0xb3660c20, 0xeacaa1a8, 0x56576ec8, 0x8aa22848, 0x288a0292, 0x7fbb02a0, 0xc55bdc04, 0xd7a45ca4, 0x635ac611, 
    0xfb01ee80, 0x2a8ab8a2, 0x54eeeca2, 0x77eeca65, 0xa799369a, 0xd4bd13e8, 0x8272dc9a, 0x28046da4, 0x6b4e46fc, 0xe2efd794, 0xee99b5d4, 0xc44604a1, 
    0x90602405, 0xd4593306, 0x6475e550, 0x24ab2b37, 0x49455114, 0x50144501, 0x82bf5d01, 0xd2e22d6e, 0x886b522e, 0xc0312de3, 0xd1fd0077, 0x5115455c, 
    0x322a7776, 0xcd3b77e5, 0xf4d34c1b, 0x4deade09, 0x5241396e, 0x7e148236, 0xca352723, 0x6af1f76b, 0x50f7cc5a, 0x02622382, 0x03483092, 0x28eaac19, 
    0x1bb2ba72, 0x0a92d595, 0x83a4a228, 0x0000d9ff, 
};
};
} // namespace BluePrint
