#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <ZoomInCircles_vulkan.h>

namespace BluePrint
{
struct ZoomInCirclesFusionNode final : Node
{
    BP_NODE_WITH_NAME(ZoomInCirclesFusionNode, "ZoomInCircles Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    ZoomInCirclesFusionNode(BP* blueprint): Node(blueprint) { m_Name = "ZoomInCircles Transform"; }

    ~ZoomInCirclesFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::ZoomInCircles_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return false; }
    bool Skippable() const override { return true; }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue999"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    ImGui::ZoomInCircles_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 3859;
    const unsigned int logo_data[3860/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa9a22820, 0x00fff76a, 0xb76cbad9, 
    0x18756923, 0x760bdd40, 0xc095dda4, 0xda7345bb, 0x6fae881f, 0x7bcbbeef, 0x4d177114, 0xb952edd1, 0x57fadcef, 0x52324a43, 0x51144057, 0x14055045, 
    0x14054051, 0xff5e2d55, 0x4d37fb00, 0x2e6de496, 0xa11b08a3, 0xb29bd46e, 0xae6817b8, 0x15f1437b, 0xd9f7fdcd, 0x228e626f, 0xaa3dbae9, 0x9ffb3d57, 
    0x4669e84a, 0x02e84a4a, 0x00aa288a, 0x00288aa2, 0xaba58aa2, 0x6600ffdf, 0x8ddcb2e9, 0x0361d4a5, 0x93da2d74, 0xed025776, 0x7e68cf15, 0xbebfb922, 
    0x51ec2dfb, 0x47375dc4, 0xbfe74ab5, 0x0d5de973, 0x5d49c928, 0x15455100, 0x45511440, 0x54511400, 0x00ff7bb5, 0x5b36ddec, 0x8cbab491, 0xbb856e20, 
    0xe0ca6e52, 0xedb9a25d, 0x3757c40f, 0xbd65dff7, 0xa68b388a, 0x5ca9f6e8, 0x2b7deef7, 0x2919a5a1, 0x280aa02b, 0x8a02a8a2, 0xb902a028, 0x065f181f, 
    0x96c882bb, 0x200fd3f2, 0x00fff31d, 0xd775fed6, 0x243a7456, 0xa9cf6a11, 0x67926519, 0x0c8c0dcf, 0xc5e971fa, 0xb292d344, 0xfd2b391a, 0x2bf5d55e, 
    0x293ecd5b, 0xac003020, 0x3a9001a4, 0x579c3e74, 0x3ca90c77, 0x28672c29, 0x501f18ea, 0x4f470d6a, 0x36b45387, 0x480a96d3, 0x4750af20, 0xd1c63aa5, 
    0xb6e36c6c, 0x31d61d49, 0xc7195f80, 0x71314ae1, 0x51140b6c, 0xa2206845, 0xae00288a, 0xc117c647, 0x25b2e0ae, 0xc8c3b4bc, 0x00ff7c07, 0x759dbff5, 
    0x890e9dd5, 0xeab35a04, 0x99645946, 0x0363c3f3, 0x717a9c3e, 0xace43451, 0xff4a8e86, 0x7db55700, 0x4ff3d64a, 0x000c488a, 0x6400292b, 0xa70f9d0e, 
    0x2ac3dd15, 0x194b0a4f, 0x07863aca, 0x51831ad4, 0xedd4e1d3, 0x82e5b40d, 0xd42b0892, 0xb14ee911, 0x381b5bb4, 0x754792ed, 0xc617608c, 0x8c52f871, 
    0xc5025b5c, 0x085a5114, 0x008aa228, 0x85f1912b, 0x2cb86bf0, 0x302d6f89, 0x3fdf01f2, 0x5de76ffd, 0xa2436775, 0xfaac1641, 0x26599691, 0xc0d8f07c, 
    0x9c1ea7cf, 0x2b394d54, 0xbf92a321, 0x525fedd5, 0xe2d3bcb5, 0x0a000392, 0x031940ca, 0xc5e943a7, 0x93ca7077, 0x72c692c2, 0xf581a18e, 0x74d4a006, 
    0x433b75f8, 0xa460396d, 0x04f50a82, 0x6dac537a, 0x3bcec616, 0x63dd9164, 0x9cf10518, 0x17a3147e, 0x45b1c016, 0x0a825614, 0x0a80a228, 0x7c617ce4, 
    0x220bee1a, 0x3c4ccb5b, 0xffcf7780, 0xd7f95b00, 0xe8d0595d, 0x3eab4590, 0x499665a4, 0x30363c9f, 0xa7c7e933, 0x4a4e1315, 0xafe468c8, 0xd4577bf5, 
    0xf8346fad, 0x02c080a4, 0x400690b2, 0x71fad0e9, 0xa432dc5d, 0x9cb1a4f0, 0x7d60a8a3, 0x1d35a841, 0xd04e1d3e, 0x29584edb, 0x41bd8220, 0x1beb941e, 
    0x8eb3b145, 0x587724d9, 0x677c01c6, 0xc528851f, 0x512cb0c5, 0x82a01545, 0x02a0288a, 0x22af298a, 0x75e48544, 0xcc925144, 0x07a00070, 0x79c15051, 
    0x6dc5726b, 0x819861ee, 0xd8702392, 0x006aaafc, 0x008aa228, 0x008aa228, 0xf29aa228, 0x475e4824, 0x2c194554, 0x000a00c7, 0x170c1575, 0x562cb796, 
    0x8819e6de, 0x0d372219, 0xa0a6ca8f, 0xa0288a02, 0xa0288a02, 0xaf298a02, 0xe4854422, 0x92514475, 0xa00070cc, 0xc1505107, 0xc5726b79, 0x9861ee6d, 
    0x70239281, 0x6aaafcd8, 0x8aa22800, 0x8aa22800, 0x9aa22800, 0x5e4824f2, 0x19455447, 0x0a00c72c, 0x0c157500, 0x2cb79617, 0x19e6de56, 0x37221988, 
    0xa6ca8f0d, 0x288a02a0, 0x288a02a0, 0xbcb002a0, 0xd3607a59, 0xfb33d696, 0x81db96cb, 0x00ffdefd, 0x926bb7d2, 0xf56e6cd4, 0x029411bf, 0x5d62785b, 
    0xe38c31ab, 0x7aa7e38e, 0xb67ca3ce, 0x90364443, 0xdb3587bf, 0x978f9564, 0x410e1871, 0xe9ebc9c8, 0xd995fed0, 0xf8ab1fd7, 0x5f2bfa6e, 0x6bbe7db4, 
    0x218c8ce7, 0xb8074842, 0x4d57fbe4, 0xc62dcfa5, 0x2393049b, 0xea70bb24, 0xe0c841ca, 0xdd696af0, 0x2d031b37, 0xb0154551, 0xa0288a82, 0x59bcb002, 
    0x96d3607a, 0xcbfb33d6, 0xfd81db96, 0xd200ffde, 0xd4926bb7, 0xbff56e6c, 0x5b029411, 0xab5d6278, 0x8ee38c31, 0xce7aa7e3, 0x43b67ca3, 0xbf903644, 
    0x64db3587, 0x71978f95, 0xc8410e18, 0xd0e9ebc9, 0xd7d995fe, 0x6ef8ab1f, 0xb45f2bfa, 0xe76bbe7d, 0x42218c8c, 0xe4b80748, 0xa54d57fb, 0x9bc62dcf, 
    0x24239304, 0xcaea70bb, 0xf0e0c841, 0x37dd696a, 0x512d031b, 0x82b01545, 0x02a0288a, 0x7a59bcb0, 0xd696d360, 0x96cbfb33, 0xdefd81db, 0xb7d200ff, 
    0x6cd4926b, 0x11bff56e, 0x785b0294, 0x31ab5d62, 0xe38ee38c, 0xa3ce7aa7, 0x4443b67c, 0x87bf9036, 0x9564db35, 0x1871978f, 0xc9c8410e, 0xfed0e9eb, 
    0x1fd7d995, 0xfa6ef8ab, 0x7db45f2b, 0x8ce76bbe, 0x4842218c, 0xfbe4b807, 0xcfa54d57, 0x049bc62d, 0xbb242393, 0x41caea70, 0x6af0e0c8, 0x1b37dd69, 
    0x45512d03, 0x8a82b015, 0xb002a028, 0x607a59bc, 0x33d696d3, 0xdb96cbfb, 0xffdefd81, 0x6bb7d200, 0x6e6cd492, 0x9411bff5, 0x62785b02, 0x8c31ab5d, 
    0xa7e38ee3, 0x7ca3ce7a, 0x364443b6, 0x3587bf90, 0x8f9564db, 0x0e187197, 0xebc9c841, 0x95fed0e9, 0xab1fd7d9, 0x2bfa6ef8, 0xbe7db45f, 0x8c8ce76b, 
    0x07484221, 0x57fbe4b8, 0x2dcfa54d, 0x93049bc6, 0x70bb2423, 0xc841caea, 0x696af0e0, 0x031b37dd, 0x1545512d, 0x288a82b0, 0x288a02a0, 0x288a02a0, 
    0x288a02a0, 0x288a02a0, 0x288a02a0, 0x288a02a0, 0x288a02a0, 0x288a02a0, 0x288a02a0, 0x288a02a0, 0x288a02a0, 0x288a02a0, 0x288a02a0, 0x288a02a0, 
    0x288a02a0, 0x288a02a0, 0x6aa902a0, 0xd900fff7, 0x23b76cba, 0x40187569, 0xab760bdd, 0xc2f8c8b5, 0x16dc35f8, 0x9896b744, 0x9fef0079, 0xa8f3b7fe, 
    0x7163b99c, 0xe287eea2, 0xeffb9b2b, 0x1cc5deb2, 0x7b74d345, 0xf77bae54, 0xd7d0953e, 0xdaab7f03, 0x796ba5be, 0x0624c5a7, 0x80941500, 0x874e0732, 
    0xe1ee8ad3, 0x25852795, 0x431de58c, 0x4d0dea03, 0xe0ea5e39, 0x1545d1c7, 0x288a82a8, 0x6aa902a0, 0xd900fff7, 0x23b76cba, 0x40187569, 0xab760bdd, 
    0xc2f8c8b5, 0x16dc35f8, 0x9896b744, 0x9fef0079, 0xa8f3b7fe, 0x7163b99c, 0xe287eea2, 0xeffb9b2b, 0x1cc5deb2, 0x7b74d345, 0xf77bae54, 0xd7d0953e, 
    0xdaab7f03, 0x796ba5be, 0x0624c5a7, 0x80941500, 0x874e0732, 0xe1ee8ad3, 0x25852795, 0x431de58c, 0x4d0dea03, 0xe0ea5e39, 0x1545d1c7, 0x288a82a8, 
    0x6aa902a0, 0xd900fff7, 0x23b76cba, 0x40187569, 0xab760bdd, 0xc2f8c8b5, 0x16dc35f8, 0x9896b744, 0x9fef0079, 0xa8f3b7fe, 0x7163b99c, 0xe287eea2, 
    0xeffb9b2b, 0x1cc5deb2, 0x7b74d345, 0xf77bae54, 0xd7d0953e, 0xdaab7f03, 0x796ba5be, 0x0624c5a7, 0x80941500, 0x874e0732, 0xe1ee8ad3, 0x25852795, 
    0x431de58c, 0x4d0dea03, 0xe0ea5e39, 0x1545d1c7, 0x288a82a8, 0x6aa902a0, 0xd900fff7, 0x23b76cba, 0x40187569, 0xab760bdd, 0xc2f8c8b5, 0x16dc35f8, 
    0x9896b744, 0x9fef0079, 0xa8f3b7fe, 0x7163b99c, 0xe287eea2, 0xeffb9b2b, 0x1cc5deb2, 0x7b74d345, 0xf77bae54, 0xd7d0953e, 0xdaab7f03, 0x796ba5be, 
    0x0624c5a7, 0x80941500, 0x874e0732, 0xe1ee8ad3, 0x25852795, 0x431de58c, 0x4d0dea03, 0xe0ea5e39, 0x1545d1c7, 0x288a82a8, 0xa1b302a0, 0x568b20d1, 
    0x2ccb487d, 0x6c783e93, 0x8fd36760, 0x8a462b4e, 0x5d05264d, 0x53874f47, 0x96d336b4, 0xaf20480a, 0x3aa54750, 0x6c6cd1c6, 0x1d49b6e3, 0x5f8031d6, 
    0x56e1c719, 0xf7caa228, 0x298aa200, 0x3e565180, 0xe9dffecb, 0xdb7fd947, 0xac0f2bfd, 0x3c47ee52, 0x0e9df54a, 0xb35a0489, 0x645946ea, 0x63c3f399, 
    0x7a9c3e03, 0x653f5b71, 0xf46f00ff, 0xedbfeca3, 0x7a9d94fe, 0xc473a84f, 0xf874d4cd, 0x6d433b75, 0x82a46039, 0x7a04f50a, 0x166dac53, 0x643bcec6, 
    0x1863dd91, 0x7e9cf105, 0x5ff6a115, 0x4a00fff6, 0xdffecb3e, 0xa5b747e9, 0xe239dc7b, 0x7daca257, 0xd2bffd97, 0x00ffb28f, 0xfa53fab7, 0xcfe12ec5, 
    0x6715bd12, 0xfeed9fec, 0xfd937d94, 0xac8fd2bf, 0xd21eeed2, 0x87ce6a25, 0x592d8244, 0xb22c23f5, 0xb1e1f94c, 0x3d4e9f81, 0xb2afad38, 0x51fab77f, 
    0xfff64ff6, 0x114f4a00, 0xc3fcf545, 0x99b947da, 0xeaf0e9a8, 0x72da8676, 0x150449c1, 0xa7f408ea, 0x8d2dda58, 0x23c9769c, 0x0b30c6ba, 0x2bfc38e3, 
    0xed9fec47, 0x937d94fe, 0x8fd2bffd, 0xefbd51ac, 0x8fb487f9, 0x6715b572, 0xfeed9fec, 0xfd937d94, 0xd69fd2bf, 0x690f7769, 0x6715b512, 0xfeed9fec, 
    0xfd937d94, 0xac8fd2bf, 0xd21eeed2, 0x87ce6a25, 0x592d8244, 0xb22c23f5, 0xb1e1f94c, 0x3d4e9f81, 0xb2afad38, 0x51fab77f, 0xfff64ff6, 0x114f4a00, 
    0xc3fcf545, 0x99b947da, 0xeaf0e9a8, 0x72da8676, 0x150449c1, 0xa7f408ea, 0x8d2dda58, 0x23c9769c, 0x0b30c6ba, 0x2bfc38e3, 0xed9fec47, 0x937d94fe, 
    0x8fd2bffd, 0xefbd51ac, 0x8fb487f9, 0x6715b572, 0xfeed9fec, 0xfd937d94, 0xd69fd2bf, 0x690f7769, 0x5114b512, 0xd714965b, 0xf2422291, 0xc928a23a, 
    0x53003866, 0x97c50bab, 0x6d390da6, 0xb9bc3f63, 0xdd1fb86d, 0x642afdef, 0xbc06aeec, 0x2cb79617, 0x19e6de56, 0x37221988, 0xa6ca8f0d, 0x17d232ae, 
    0x6cbbe6f0, 0xeef2b192, 0x39c80123, 0x3a7d3d19, 0x3abbd21f, 0xe3369750, 0xaca2280a, 0x51148546, 0x15c8195e, 0x9737163c, 0xd6de5e48, 0x161c9469, 
    0x1fc0328e, 0xdfaea0c2, 0xc7fe39c1, 0x98a903b9, 0x15f9fee3, 0x2a765751, 0x3976e611, 0x4f8dec3f, 0x5fd781fe, 0xc2bfe5f7, 0xc14110aa, 0x8df48ae0, 
    0xb255df2a, 0x64b4bf49, 0x0a10e08e, 0x9f989d08, 0x7a60f351, 0x00ea9f57, 0x30e7468d, 0x1f2b7398, 0xe436ae2c, 0x51a218e7, 0xcaa11cb2, 0x8aa257ae, 
    0x8a16482a, 0x5510a928, 0xcb0b7b8b, 0x696d2fb4, 0x0b0eca3c, 0x0f601947, 0xbceb55e1, 0x472720f0, 0x9eaf03b9, 0x7c00ff71, 0xbbaba88a, 0x3bf30815, 
    0x3ef67f1c, 0x1be63fa8, 0x7e00ff77, 0x992afc1b, 0x82111c04, 0x9bf4d32b, 0x29ce5a7d, 0x64b400ff, 0x1820e78e, 0xc7cc4ec4, 0x1ed87cd4, 0x883ae795, 
    0xccb95223, 0xc7ca1c26, 0xa0822bcb, 0xe514e39c, 0x0ea7221b, 0x14b57255, 0x14665051, 0x15004551, 0xf2c2de62, 0x5adb0bed, 0x8283324f, 0x0358c6d1, 
    0xef7a55f8, 0xd109083c, 0xe7eb40ee, 0x22df7f9c, 0xc5ee2aaa, 0xc7ce3c42, 0xaa8ffd1f, 0xdd86f90f, 0x86df00ff, 0xa60a00ff, 0x60040741, 0x26fdf48a, 
    0x8ab356df, 0x2319ed7f, 0x3106c8b9, 0xf531b313, 0xa507361f, 0x08a2ce79, 0x0973aed4, 0xf2b13287, 0x27a8e0ca, 0x4639c538, 0x95c3a9c8, 0x1445ad5c, 
    0xd4991954, 0xc77b4551, 0xa8255760, 0x7eebddd8, 0xb6042823, 0x56bbc4f0, 0x1dc71963, 0xd6f54ec7, 0xf32853d1, 0xf5e3c068, 0x45df0d7f, 0xb78ff66b, 
    0x91f17ccd, 0x00492884, 0x6a9f1cf7, 0xe5b9b4e9, 0x9260d3b8, 0x6e976464, 0x3948591d, 0x5a0d1e1c, 0xa26094a2, 0x511486ee, 0x0a8d5845, 0x33bca228, 
    0xf0b22b90, 0x9726f06c, 0x1ccf9270, 0xde38a645, 0xae087fc0, 0x76718a36, 0xe5322a77, 0x277d3b77, 0x66d0b04b, 0xa3d6a77b, 0xd0c66d94, 0x27cb8f42, 
    0x976bcc35, 0xbc5aead1, 0x238230d7, 0x60e40262, 0xb3660c9c, 0x75e5a6e8, 0xab2b3764, 0x2a8aa220, 0x288a1648, 0x6f5710a9, 0x788b9be0, 0x9a948bb4, 
    0x4ccb38e2, 0x3fc01d70, 0x45115774, 0xca9d5d54, 0xce5db98c, 0x34d346f3, 0xba7702fd, 0x508e5b93, 0x85a08d54, 0xcdc9881f, 0xfcfd9a72, 0x3db3965a, 
    0xd88820d4, 0x128ca480, 0x3a6bc600, 0xacae1c8a, 0x6475e586, 0xa9288a82, 0x8aa22820, 0xf0b72b00, 0x5abcc54d, 0x714dca45, 0x38a6651c, 0xba1fe00e, 
    0xaaa2882b, 0x46e5ce2e, 0x79e7ae5c, 0x7e9a69a3, 0x49dd3b81, 0x2a28c7ad, 0x8f42d046, 0xb9e664c4, 0x2dfe7e4d, 0xea9e594b, 0x406c4410, 0x00094652, 
    0x459d3563, 0x4356570e, 0x41b2ba72, 0x90541445, 0x00d9ff7f, 
};
};
} // namespace BluePrint
