#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Perlin_vulkan.h>

namespace BluePrint
{
struct PerlinFusionNode final : Node
{
    BP_NODE_WITH_NAME(PerlinFusionNode, "Perlin Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    PerlinFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Perlin Transform"; }

    ~PerlinFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Perlin_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_scale, m_smoothness, m_seed);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _scale = m_scale;
        float _smoothness = m_smoothness;
        float _seed = m_seed;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Scale##Perlin", &_scale, 0.0, 10.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_scale##Perlin")) { _scale = 4.f; changed = true; }
        ImGui::SliderFloat("Smoothness##Perlin", &_smoothness, 0.0, 1.f, "%.2f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_smoothness##Perlin")) { _smoothness = 0.01f; changed = true; }
        ImGui::SliderFloat("Seed##Perlin", &_seed, 0.0, 1000.f, "%.2f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_seed##Perlin")) { _seed = 12.9898f; changed = true; }
        ImGui::PopItemWidth();
        if (_scale != m_scale) { m_scale = _scale; changed = true; }
        if (_smoothness != m_smoothness) { m_smoothness = _smoothness; changed = true; }
        if (_seed != m_seed) { m_seed = _seed; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("scale"))
        {
            auto& val = value["scale"];
            if (val.is_number()) 
                m_scale = val.get<imgui_json::number>();
        }
        if (value.contains("smoothness"))
        {
            auto& val = value["smoothness"];
            if (val.is_number()) 
                m_smoothness = val.get<imgui_json::number>();
        }
        if (value.contains("seed"))
        {
            auto& val = value["seed"];
            if (val.is_number()) 
                m_seed = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["scale"] = imgui_json::number(m_scale);
        value["smoothness"] = imgui_json::number(m_smoothness);
        value["seed"] = imgui_json::number(m_seed);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue87b"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_scale       {4.0f};
    float m_smoothness  {0.01f};
    float m_seed        {12.9898f};
    ImGui::Perlin_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 5175;
    const unsigned int logo_data[5176/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0x280aa08a, 0x280a80a2, 0xf1dd1aaa, 0xa7a9b4d3, 0x3626db46, 0x3dda7fc6, 0x7693c63f, 0x15fd0257, 0x5b7bf8cb, 0x7ed4b8be, 0xbb49a8cb, 0x79748fcd, 
    0x87fdbe50, 0xa8abfc71, 0x2b2919a5, 0xa2280aa0, 0x288a02a8, 0x2a8a02a0, 0x747cb786, 0xd1692aed, 0xb18dc9b6, 0x4f8ff69f, 0x4adaa4f1, 0x27a75fe0, 
    0x78cb1527, 0xb9bf5b7b, 0x7ec97ed4, 0xf7d8fce5, 0xef0b9447, 0xfc9173d8, 0x0e89abab, 0xcd8a91ec, 0x525c38cd, 0x69c808d1, 0xb68d3495, 0x533427a2, 
    0xe845a16d, 0xa7622825, 0x75a48222, 0x8da69514, 0xe7ca3c14, 0x7a7337bd, 0x661d55d2, 0xb974ecf1, 0x663e8fa7, 0x7e06a636, 0x6afcd363, 0xd8ab186d, 
    0x76804656, 0x5f78ea1d, 0x4fb9067f, 0xbe1a6a0c, 0x5b9ba8a1, 0xcc9be5a8, 0x1011328c, 0x77d8ef18, 0xd8baca1f, 0x965d78a1, 0xc181b541, 0x5acf951e, 
    0x4dee7450, 0x23099244, 0x8db92adc, 0xe456e981, 0xab268360, 0x059ee434, 0x4b958767, 0x881c4468, 0xef8aa2a8, 0x7ce40a36, 0x79af7a61, 0xb273646f, 
    0x7b4c9e3f, 0xbff500ff, 0x9dd5759d, 0x5a04890e, 0x5946eab3, 0xc3f39964, 0x9c3e0363, 0x3451717a, 0x8e86ace4, 0x2dd6514f, 0x6fedd4a6, 0x2696a36c, 
    0x80c10080, 0xd0f10019, 0x755764fa, 0x293ca90c, 0xea28672c, 0x6a501f18, 0x874f470d, 0xd336b453, 0x20480a96, 0xa54750af, 0x6cd1c63a, 0x49b6e36c, 
    0x8031d61d, 0xe1c7195f, 0x6e71314a, 0x8aa258e0, 0x1405412b, 0x72054051, 0x53bf2e5e, 0x46666f79, 0x93e78fe4, 0x00fff58c, 0xeb3a7feb, 0x121d3a6b, 
    0xd467b508, 0x33c9b28c, 0x06c686e7, 0xe2f4387d, 0x59c969a2, 0xa3b61c0d, 0xa94bdbae, 0x5b59de5a, 0x0310da98, 0x07325007, 0x64fa604c, 0xc90c7157, 
    0x642c293c, 0xa40c7514, 0xa8af1a7a, 0x76eaf0e9, 0xc172da86, 0xea150449, 0xd8a7f408, 0xa4852dda, 0xba23c976, 0xe30b30c6, 0x632afc38, 0x32b89b16, 
    0x288ad673, 0x392944ad, 0x008aa2a4, 0xf159132b, 0x9197e942, 0xda86fd59, 0x270f17e5, 0xcf889b9a, 0x3a7ff861, 0x74e8acdb, 0x9fd52248, 0x24cb3252, 
    0x181b9ecf, 0xd3e3f419, 0x7271ce8a, 0x7b454356, 0xa2f6888f, 0x346d29e6, 0x300a753b, 0xc04668e7, 0xbada23f4, 0xbba0ae18, 0x3edf9a55, 0xe432805c, 
    0xba5983e7, 0xa70e9f8e, 0x2ca76d68, 0x5e419014, 0x934a8fa0, 0x3a5db64e, 0x77743bd6, 0x05186391, 0x157e9cf1, 0x49bda894, 0xcc2dba92, 0x5245cd39, 
    0x54bba134, 0x9aa6b566, 0x7ba3988d, 0xed811913, 0x6a0f2e4c, 0x712a1465, 0x438a025b, 0x22fc81c3, 0x1f99f885, 0x1f362585, 0xee5ef1d8, 0x6c674722, 
    0x1c18cf15, 0x99d60f7a, 0x90e8d059, 0xa43eab45, 0x9f499665, 0x3330363c, 0x15a7c7e9, 0xc59ea633, 0xa073af24, 0x9486e38b, 0x1c1ecb87, 0x87716268, 
    0x87559d68, 0x52e31fd3, 0x7565714b, 0xbba79f27, 0x3ca0b43d, 0x8ce0ba65, 0x8e5a58f3, 0x68a70e9f, 0x142ca76d, 0xa05e4190, 0x4b9f4a8f, 0x54db3481, 
    0x447757b6, 0x9cb10518, 0x56cf157e, 0x35b1b383, 0x5c2f3217, 0xaae26529, 0x724dab74, 0x69a2869e, 0x55bb9f14, 0xb38ae787, 0x5ae94244, 0x45f454c4, 
    0xf0b7af6e, 0x498391a6, 0xa3554f5d, 0x63f22634, 0x7ed8f21f, 0x3f2edf54, 0x54faebf9, 0x8ea6c974, 0x569a17de, 0x66291adb, 0x92a3823e, 0x0af9655d, 
    0x4460b9cf, 0x8f5afe87, 0x4cf69fca, 0x4fcb00ff, 0x75ecb2d2, 0x9d451d6b, 0x0af3276d, 0x46dab00c, 0xf65a313f, 0xacf998c4, 0x8f704a2b, 0x13f96534, 
    0xdcab683e, 0xfbc0b561, 0x42a500ff, 0xfad554c8, 0x6b3d5569, 0x9fa66208, 0xa30aa9bd, 0x2c3550ea, 0x7caeab70, 0x524c1fcc, 0x95ce1649, 0x9edf771d, 
    0xaeb18337, 0xd9c742eb, 0x1ff5fc87, 0x83902795, 0xca0f5bfe, 0x344da6a0, 0xd2bcf076, 0x4bd1d8b6, 0x1c15f431, 0xf0cf3a95, 0x2d776941, 0x253d650b, 
    0x7da7f007, 0xd2bffd93, 0x6b75ecb2, 0x6cd9452d, 0x0619f3e7, 0x8f2b6d58, 0x44cc56cc, 0xb56ec198, 0x82546985, 0xc8d795ba, 0xa947f389, 0xdb3fd917, 
    0x6cad29fd, 0xf067f147, 0x3a5754ab, 0x67eed4c4, 0x765024ed, 0xb55d780c, 0x1906db32, 0xa453fadf, 0xa2725585, 0xdc616eab, 0xea646cd7, 0xc66ef747, 
    0x742ff3a9, 0xf64ff6b1, 0x4f4a00ff, 0xe9f98fb2, 0x9b1b54fa, 0xa8f3c7fb, 0x783b9ae6, 0x6c5b695e, 0xfa98a568, 0x7a957c0a, 0xa51df0cf, 0x4ff6b7dc, 
    0x52fa69fa, 0xbffd93fd, 0xed34b3d2, 0x9151d35e, 0x2b73c692, 0x58a132a6, 0xdb8afa75, 0xc1c8c019, 0xac9e2bee, 0xe6b3d3ea, 0xdc44dcbf, 0xf6afd4a3, 
    0x00fff64f, 0xfec93e4a, 0x2856e9df, 0x57b37eac, 0x45d21eb9, 0x00317146, 0x7f7adf26, 0xfddb3fd9, 0x078a622a, 0xb2b4aa02, 0x56242306, 0xa5a794f0, 
    0xb769112d, 0x937d92f0, 0x8fd2bffd, 0xfab77fb2, 0x876c3e54, 0x3d45cdf8, 0xcd0bc1ca, 0x45638534, 0x059ec72c, 0xac5fc96b, 0x3ead02bf, 0x7fb2bfe5, 
    0xf651fab7, 0x00fff64f, 0xeaa4a34a, 0x06d76ab0, 0xb8563e1d, 0x11286390, 0xd68afab3, 0x30828320, 0x2ab50a6b, 0x2657fbd3, 0x57ea714e, 0x7ffb27fb, 
    0xff641fa5, 0xabf46f00, 0x595f5614, 0x698fdcab, 0x18853622, 0x76d84654, 0x7fcf8f6a, 0xefe63c5a, 0x5aa5315d, 0x1945333b, 0xdb82a42e, 0x7a5bc53f, 
    0x7cad8067, 0x2cdca255, 0xfedbd3f7, 0x80f261f3, 0x7a0f00e4, 0x7b8ccce7, 0xa68bb9e2, 0x7d2d75d6, 0xbdbbb6e0, 0x8141b6b2, 0x24559722, 0xe601ea77, 
    0x56afc6a9, 0xacbe535c, 0x0e00fff4, 0xb4d31cfc, 0xb9bd973b, 0xc2ed9eb9, 0x60a3586d, 0x9c73bda1, 0xbbacc075, 0x9357ccc8, 0x87c18021, 0xc13fba3f, 
    0x1ae24acf, 0x7d78122f, 0xeba6dd3e, 0x84cab2d7, 0x91bb8b02, 0xe5cfc9f4, 0xb3b6655d, 0x455baf75, 0x8e197d7f, 0xa02cd0e9, 0x18b05ca9, 0x73851f27, 
    0x75948456, 0x47f7aa26, 0xd5a4dab9, 0xf2989126, 0x23235f4d, 0x02db0315, 0xc3280e72, 0xcc2f84d4, 0xb9250967, 0x04c35031, 0x0fd94654, 0xb9688a4c, 
    0x4d3cb527, 0x69154a9a, 0x139216ec, 0x6beaa9ec, 0x133cd1a1, 0x459b78a5, 0xb8e65bb9, 0xfbd9bc1f, 0x80f136a9, 0x969b2b7d, 0xc50b0776, 0xf8aaaf73, 
    0x965ae39a, 0xefd44fcf, 0x9c31ebf4, 0x589565b4, 0x9cedc981, 0x668dd1d6, 0xb0e6deae, 0xead9bd52, 0x55f8183e, 0xe27278a4, 0xfb61d95b, 0x1a71c164, 
    0xeaf738ef, 0xade33940, 0xff01ea60, 0x0c6eb400, 0xca189890, 0x3646c6c4, 0xc815e764, 0xa7f85edb, 0xfae9bfc2, 0xdb35b56e, 0x78a00129, 0xdb0707b7, 
    0x7599ba26, 0xb3433ca9, 0xdbdc9653, 0xf82e32c9, 0x060c23c8, 0x58715f0f, 0x95a284d6, 0xa37b55c5, 0xbe93a42a, 0x5bc501e2, 0xe7283ca6, 0x9c515424, 
    0x6524ef22, 0x7dd49316, 0xba8da131, 0x1e9028ad, 0x7bd4ecd4, 0x7542dbd0, 0x8f675f44, 0xa3aef5d3, 0xd111bec3, 0xdca241bc, 0x656aa3ae, 0x9538bbcc, 
    0xd8038c97, 0xcdcbf58e, 0x1c38962f, 0xc48fc39a, 0xb41a2cde, 0x7f977eda, 0x92659f3e, 0x489dfd4b, 0xcb090662, 0x345deb0f, 0xdf2b59d5, 0xd77c6a43, 
    0xc24f3dbb, 0xdf340f9f, 0xda35c90a, 0xfb3c41da, 0x4b501971, 0x3d165c0f, 0x96abfcf8, 0x52874cd4, 0x306269b9, 0x63cc4abb, 0x9c93c33f, 0x6ba73b57, 
    0x94f0259e, 0xf78250c3, 0x0b014dfb, 0xb741b325, 0x2ab89e72, 0xa949d77a, 0xdeadc9ea, 0x5a38469d, 0x84549915, 0x0e1c8671, 0x4a589db5, 0x7c2a5c29, 
    0xcd50a928, 0x2a804331, 0xbaa1426a, 0x7150d68c, 0x3157f24e, 0xb4a8274d, 0xa8ba1585, 0xa654b434, 0xe519c2d6, 0x5dc1fd47, 0x3b7c856f, 0x2d1aeba4, 
    0x43d8dfca, 0xfc4a9971, 0x7205b6e3, 0xbb963f72, 0xaf4dd6ba, 0x0655bc8c, 0xa5993ea3, 0x6556b648, 0xd79e198b, 0x38004e7e, 0x5274c52d, 0x43af2555, 
    0xcfbd576a, 0x83b7f055, 0xb72cfced, 0x6a6dc712, 0x7c1b38d2, 0xe95b5588, 0x15afe3b8, 0x4326eac5, 0xb1b45ca9, 0x66a55d18, 0xc9e19f31, 0x422f2bce, 
    0xe1af1ef1, 0xb8bcd56b, 0x31506a90, 0x09492c09, 0xde4f0a46, 0x3d122418, 0xee7a5b31, 0xaba916a1, 0x910277cd, 0xe16ee31b, 0xcd184082, 0x4971b12a, 
    0x51f8d431, 0xda764d9f, 0x459d663a, 0x4c7dad60, 0xaac0d20a, 0x57b59785, 0x23c2b1ab, 0xe6340739, 0x01ab1791, 0x38c4b15d, 0x36deabfb, 0x949bb653, 
    0x78a6ab28, 0x7d52f1c7, 0xca7f3fa6, 0xfee655b5, 0x15f7f5c7, 0xe914fbce, 0xf74723c9, 0x91495c4d, 0xdee701ce, 0x13cf599f, 0x5d0265f6, 0xcd148d4e, 
    0x34bd87c4, 0x8df8e7ca, 0x62a1a25e, 0xf587b620, 0x769d0bf7, 0x69977823, 0x92a96220, 0xa0fa6a7d, 0x2029c551, 0xeb343575, 0xa3b869b8, 0x55d4193b, 
    0xac0e22f3, 0xc778a629, 0xc44257f1, 0xeb0fedc9, 0x3eda2fee, 0x39922ac5, 0xa28e319a, 0xff88a4ad, 0x9de67400, 0x9f12cf59, 0xd40928bb, 0xdd54d1e8, 
    0xd3146537, 0x5cb52773, 0xa955b2a2, 0x344fb0af, 0xe981097b, 0xb7952455, 0x57310e10, 0x51a5a828, 0x93abdd41, 0x2ccf5819, 0x25cda95b, 0xf40ee468, 
    0xac0e22d3, 0x9f62a92b, 0x5f00ff48, 0xe4a9a271, 0xb8e2a950, 0x6758bbd8, 0x61306415, 0xaca54190, 0xd51462ea, 0x4ec41fa5, 0x01d1e869, 0xd3941dba, 
    0xa2ecd14d, 0x2a59d1ac, 0xfcd89794, 0x608fe649, 0xa39c26a8, 0x8a9e5a6d, 0x5d8c12ce, 0xa529b9da, 0x67e545b9, 0x5a99c6fb, 0xe20e6434, 0x498ae3ba, 
    0x54d54459, 0xb7ea8cec, 0x0654ea1c, 0xb46e2aea, 0xaa2b7556, 0x893fce8a, 0xe8969a32, 0x9882ce8c, 0xd4d0976e, 0x544a56f4, 0x49fcf1d6, 0x0c15ecba, 
    0x41cee196, 0xa9a8a9c1, 0x7807e584, 0x2bb63689, 0xbcbf917d, 0xc2cb462b, 0xa5b59e1a, 0xdda74fdc, 0x1222435b, 0x8327658a, 0x7d80e78c, 0x7e75bd6a, 
    0x8b16f116, 0x0957e9a3, 0x76b66aa9, 0x242466ae, 0x0db3aad3, 0xd135b1a3, 0xec46450c, 0x3639b5d9, 0x020fccec, 0xf97b3af8, 0xf5d5246e, 0xc0f2ba95, 
    0xb34350c4, 0x76e73969, 0x862a7f06, 0x796d01ee, 0xc26db83d, 0x7a371929, 0xd935e3e0, 0xdac563f8, 0x96268967, 0x28decaca, 0xd6ccc2c6, 0xedf903f3, 
    0xf5e58a00, 0xddf408eb, 0x9c687b62, 0x6e0429b2, 0x3c232339, 0x921b55d6, 0xa9a68a4d, 0x288a3a33, 0x98424cac, 0x4feb87f1, 0x3b6d9aa2, 0x06c44ea0, 
    0x1af14fd5, 0x1b3cd3d6, 0x7769ae71, 0x096adb13, 0x8a12226d, 0x38d82d5a, 0xea7d3d07, 0x0e9e7685, 0x34ac2cd4, 0xbabc975b, 0x1ce70182, 0xcf04b279, 
    0xa26b3dca, 0x6b37ea15, 0x7293539b, 0x177c31b3, 0xa43b0be1, 0xc4ba37b9, 0x00aa8cfa, 0x11214000, 0x678c3ce7, 0xdd658d3f, 0x27af2dc0, 0x45b80db7, 
    0x5cef2623, 0x8fbb661c, 0xcf92780e, 0xad6d795e, 0xca18566c, 0x2041d212, 0x18a8f92b, 0xd66bc935, 0xc4bae911, 0x6439d1f6, 0x72dc0852, 0xa8794646, 
    0x6c92dca8, 0x33936a2a, 0xc48aa2a8, 0x222328c4, 0x8d01288a, 0x6dadb712, 0x870e9ee8, 0x26eed25c, 0x48dbd237, 0xa032508e, 0x700e706c, 0x5d8fb57e, 
    0x639d81d7, 0x88996ed1, 0x3ff598c0, 0x95de8aec, 0x9a6ba749, 0xc69a6fd2, 0x31bc8567, 0xcfdadda1, 0xefaedb17, 0x59665ca7, 0x3d574650, 0xcf8f1730, 
    0xc05dcf35, 0xb727af2d, 0x2345b80d, 0x1c5cef26, 0x03bdbb66, 0x9659835e, 0xd3b4484b, 0x2f09856a, 0x80f9f113, 0xd78f6b30, 0x75d323ac, 0x72a2ed89, 
    0xb811a4c8, 0xf38c8ce4, 0x57e6a34a, 0x66524d1d, 0x58511475, 0x51148598, 0xae190140, 0x187ec38f, 0x2e9df5d3, 0xaa8cae79, 0xd15021e9, 0x833630b6, 
    0xae9c6bfd, 0x1aa7c0ef, 0x71c6c935, 0x02fee331, 0xa94d5a2b, 0xe24b6b68, 0x17ba682b, 0x693b7586, 0x2f17b461, 0x24dd7824, 0xf40c438c, 0x4a6fc7e9, 
    0x16e0eee4, 0x86db93d7, 0x939122dc, 0x330eae77, 0xaf83de5d, 0x2d4bac43, 0xb5617aa4, 0x89978452, 0x18c0fcb8, 0xd6ebc735, 0xc4bae911, 0x6439d1f6, 
    0x72dc0852, 0xa2794646, 0x768eab7a, 0x51673469, 0x88911545, 0x51519c51, 0xf89311cb, 0x51953ef0, 0x865dbd49, 0x9125d4ad, 0x350f0e55, 0x048b0e83, 
    0x66eab35a, 0xf3996459, 0x9f8111c3, 0xad383d4e, 0xd37fb2af, 0xb28fd24f, 0x57fab77f, 0xa6512975, 0xa38c36b7, 0x4930a41e, 0xdc50172c, 0x2c452b41, 
    0x53570732, 0x1efa23c8, 0xf23ca595, 0xccf34edd, 0xe590e4e5, 0x4c35f798, 0xfffd605a, 0x55a6d200, 0x3fbb312a, 0x9c886585, 0x4c166727, 0x75cc9ee4, 
    0xbf3e9814, 0x9fa334a5, 0x992bfde3, 0x7dccdc25, 0x4b5d5314, 0x49db060c, 0x15a2de24, 0x80350388, 0xab4b44ba, 0x4bf3a4be, 0x079cad2c, 0xd3e76a23, 
    0x36d94a8f, 0xfacb7aec, 0xfd977d52, 0x28bbd2bf, 0x5b3d95ca, 0x631cb4b9, 0xd44997d4, 0xe5cbb46e, 0x8c42d69e, 0xeac78e3a, 0xcff3d43b, 0x3cefcc2d, 
    0x39475ece, 0x56cd3d66, 0x3b87704b, 0xb2964abf, 0x955354c4, 0x7de54ce2, 0xae288a82, 0x8aa23073, 0xe2e0480e, 0x96c80a80, 0x8db4bfc9, 0xe04eddd3, 
    0xbe456c67, 0x3d70cf45, 0x7f6b576b, 0xf2a4f47f, 0x145deb81, 0xbb721aa5, 0x16b5b8d4, 0xcb75d05a, 0x3e4926fd, 0x975526cd, 0x41255f1b, 0x7932c5f5, 
    0xe79db9e5, 0xe7c8cb99, 0xa8b9c72c, 0xa7f40255, 0xeda9d654, 0xb99c7025, 0xac288a82, 0xa2280a48, 0x59860a80, 0x106563af, 0x1047dcde, 0xf0919824, 
    0x4e0690a4, 0x1535953e, 0x2bc9e774, 0xbb721995, 0x8a375a9a, 0xda364d35, 0x689e8448, 0x12e7bb6f, 0x46953edb, 0x9db9e579, 0xc8cb99e7, 0xb9c72ce7, 
    0x52a7e8a8, 0x29e16e6e, 0x51140539, 0x51149259, 0x7a150045, 0xb5d445c7, 0x3b6b5a28, 0x6d2b2a53, 0x1e8c3a24, 0xae51cdbd, 0x9d80c0f3, 0x8303e41e, 
    0xdf7f9ce7, 0x3709ae22, 0xa4225c66, 0xfc65ceec, 0x11c7ad2f, 0x001bec91, 0x6375ed64, 0xc99a03f9, 0x30828320, 0x937e7a45, 0xf1e9a967, 0xa6d7d74e, 
    0x200a90f4, 0x7dee31ea, 0x1375ce6b, 0x5aaed421, 0xd22e8c58, 0xf0cf18b3, 0xe714e7e4, 0x28388714, 0xa2a895ab, 0x28cccc8a, 0x2a008aa2, 0xa88786fd, 
    0xb6b490ea, 0x2b6ade76, 0xae7a276d, 0xea7de20f, 0x049e7785, 0x20f7e804, 0xe33c1f1c, 0x5115f9fe, 0x112e7657, 0x35677652, 0xb8b5852f, 0x3658bb50, 
    0xacae5d07, 0x206b207f, 0xc1080e82, 0x4dfae915, 0xc5a7a79e, 0x9b5e5f3b, 0x832840d2, 0xf5b9c7a8, 0x4cd439af, 0x69b95287, 0x4abb3062, 0xc33f63cc, 
    0x94539c93, 0x2838876c, 0xa2a895ab, 0xa230838a, 0xab00288a, 0xa31e1af6, 0xd9d242aa, 0xada879db, 0xb8ea9db4, 0xaaf7893f, 0x1078de15, 0x80dca313, 
    0x8ff37c70, 0x4555e4fb, 0x45b8d85d, 0xd49cd949, 0xe1d616be, 0xd860ed42, 0xb1ba761d, 0x82ac81fc, 0x04233808, 0x36e9a757, 0x149f9e7a, 0x6f7a7ded, 
    0x0ea20049, 0xd6e71ea3, 0x3251e7bc, 0xa5e54a1d, 0x2bedc288, 0x00ff8c31, 0x4e714e0e, 0xe01cb251, 0xa256aea2, 0xc20c2a8a, 0x02a0288a, 0x7a68d8af, 
    0x4b0ba98e, 0xa2e66d67, 0xaa77d2b6, 0xde27fee0, 0xe07957a8, 0x728f4e40, 0xcef3c101, 0x5591ef3f, 0xe1627715, 0x73662715, 0x5b5bf852, 0x83b50b85, 
    0xeada7560, 0xb206f2c7, 0x8ce02008, 0xa49f5e11, 0x7c7aead9, 0xe9f5b553, 0x880224bd, 0x9f7b8c3a, 0x449df35a, 0x962b75c8, 0xb40b2396, 0xfc33c6ac, 
    0x39c53939, 0x8273c846, 0x8a5ab98a, 0x0a33a828, 0x0a80a228, 0xad35bcea, 0x2c1ae9d8, 0x19d8ede2, 0xb90a3826, 0xae39da38, 0x30949156, 0x697015c1, 
    0x4ba8ec4a, 0x3ceddc95, 0x60951631, 0xc61a511f, 0xc7542ae5, 0x63fe1120, 0xebce3527, 0x5a6af1f7, 0x8250f7cc, 0x92026223, 0x19034830, 0xa350d5ac, 
    0x49899602, 0x94c3163d, 0x8a82acae, 0x2820a828, 0x2b008aa2, 0xe56df0b4, 0x728baead, 0x3c122e2e, 0xcf6378cc, 0x8bab1ddd, 0xce2eaaa2, 0xae5c46e5, 
    0xe9a175e7, 0x23896efa, 0x1cb7b65e, 0xdc46c8aa, 0xc9881f84, 0xfdda72cd, 0xb3965afc, 0x8820d43d, 0x8ca480d8, 0x6bc60012, 0x576e8a3a, 0xae944356, 
    0x455190ac, 0x14050415, 0x76054051, 0xb7b809fe, 0x49b9488b, 0xb48c23ae, 0x03dc01c7, 0x147145f7, 0xdcd94555, 0xdc95cba8, 0x336d34ef, 0x7b27d04f, 
    0xe5b835a9, 0x08da4805, 0x9c8cf851, 0xdfaf29d7, 0x336ba9c5, 0x8d0842dd, 0xc1480a88, 0xb3660c20, 0xeacaa1a8, 0x56576ec8, 0x8aa22848, 0x288a0292, 
    0x7fbb02a0, 0xc55bdc04, 0xd7a45ca4, 0x635ac611, 0xfb01ee80, 0x2a8ab8a2, 0x54eeeca2, 0x77eeca65, 0xa799369a, 0xd4bd13e8, 0x8272dc9a, 0x28046da4, 
    0x6b4e46fc, 0xe2efd794, 0xee99b5d4, 0xc44604a1, 0x90602405, 0xd4593306, 0x6475e550, 0x24ab2b37, 0x49455114, 0x00d9ff07, 
};
};
} // namespace BluePrint
