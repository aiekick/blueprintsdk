#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <StereoViewer_vulkan.h>

namespace BluePrint
{
struct StereoViewerFusionNode final : Node
{
    BP_NODE_WITH_NAME(StereoViewerFusionNode, "StereoViewer Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Move")
    StereoViewerFusionNode(BP* blueprint): Node(blueprint) { m_Name = "StereoViewer Transform"; }

    ~StereoViewerFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::StereoViewer_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_zoom, m_corner_radius);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _zoom = m_zoom;
        float _corner_radius = m_corner_radius;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Zoom##StereoView", &_zoom, 0.5, 1.f, "%.2f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_zoom##StereoView")) { _zoom = 0.88f; changed = true; }
        ImGui::SliderFloat("Corner Radius##StereoView", &_corner_radius, 0.0, 1.f, "%.2f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_corner_radius##StereoView")) { _corner_radius = 0.22f; changed = true; }
        ImGui::PopItemWidth();
        if (_zoom != m_zoom) { m_zoom = _zoom; changed = true; }
        if (_corner_radius != m_corner_radius) { m_corner_radius = _corner_radius; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("zoom"))
        {
            auto& val = value["zoom"];
            if (val.is_number()) 
                m_zoom = val.get<imgui_json::number>();
        }
        if (value.contains("corner_radius"))
        {
            auto& val = value["corner_radius"];
            if (val.is_number()) 
                m_corner_radius = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["zoom"] = imgui_json::number(m_zoom);
        value["corner_radius"] = imgui_json::number(m_corner_radius);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue3e0"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_zoom        {0.88f};
    float m_corner_radius {0.22f};
    ImGui::StereoViewer_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 5415;
    const unsigned int logo_data[5416/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0xa63ca08a, 0x056f5bba, 0x6b08495c, 0xcf85b59b, 0xc76f2af0, 0xfe73e4d4, 0x7ad55c73, 0x82d271b5, 0x3953ee95, 0xff41f84f, 0xff23ea00, 0xfb3f9000, 
    0x07e13f2a, 0x8fa800ff, 0x00ff40fe, 0xaaababec, 0x69e285fa, 0x38dd32f6, 0x0bb94604, 0x853d6e9c, 0x7441e96e, 0x7fced915, 0x00ff0fc2, 0x81fc1f51, 
    0x51d900ff, 0x3f0800ff, 0xf27f44fd, 0x6500ff07, 0xac365a5b, 0x25697b35, 0x1b2df930, 0x71bf29ec, 0x3fe839e8, 0x151aadc8, 0x205d6d3a, 0x9feb38bb, 
    0x09475c05, 0x99b56b6b, 0x6c32f0c7, 0xf3e4d0cf, 0xd55c73fe, 0x4d79b57a, 0x360a5661, 0xb654d0b0, 0xccddd3d6, 0xa489b721, 0x6ab53372, 0x173ced2a, 
    0x79320d1a, 0x31ed8d02, 0x51407d52, 0x3a7fe68f, 0x569a4788, 0xf8cf391b, 0xf96ff547, 0xa3f493f1, 0x5bfd11fe, 0xfd647cfe, 0x1b6ad12b, 0xadeca8cb, 
    0x3b9bb924, 0xea381923, 0xd8a3ab7d, 0x3837b947, 0xf547f80f, 0x93f1f96f, 0x11fea3f4, 0x7cfe5bfd, 0xbb2bfd64, 0xb56dd4b0, 0x675b5a28, 0x90b6152c, 
    0x4a3f0846, 0x8b5149b5, 0xba3c17ea, 0x497bdae6, 0x3411378c, 0xb576066e, 0x8da75d45, 0x41a64323, 0x66bd5121, 0x2aa00f0a, 0xe587fc73, 0x38615d5c, 
    0x20c5caf2, 0x4f271dad, 0xccd2a24b, 0x004e8d09, 0x3a6b32ce, 0xd908cfba, 0xb294c5ad, 0x9445094a, 0xe0d43380, 0x2bafa653, 0x647f9009, 0xcf00ff58, 
    0xbf7dfc0f, 0x8bec8fc6, 0xffe1f91f, 0xf8b78f00, 0x9dfd51d7, 0x3c00ff69, 0xfee3f1bf, 0xcefe5a35, 0xda662bd6, 0x70e17698, 0xbace3fc7, 0x2bec9a7d, 
    0x259ae49c, 0x7c57b69b, 0xbf151d63, 0xeccf34c7, 0xe9f95f2b, 0xc23fe637, 0xa874acb7, 0xa56d79e3, 0x321a699e, 0x49606608, 0x9fabf007, 0x00ff36d9, 
    0x1ff393df, 0xd3ec53e1, 0x7d3817e8, 0x255b4d4f, 0x64662249, 0x1cbb8363, 0xabfcf31f, 0x15afba3e, 0x185b8bd8, 0x34b2189d, 0x83db73a0, 0xaed700ff, 
    0x47eab956, 0x3d1a5696, 0xae288a5a, 0x1fb942f2, 0xdeab5e18, 0xec1cd95b, 0x1e93e78f, 0x6ffd00ff, 0x67755de7, 0x1641a243, 0x9691faac, 0xf07c2659, 
    0xa7cfc0d8, 0x4d549c1e, 0xa3212b39, 0x8b75d493, 0x5b3bb569, 0x89e528db, 0x603000a0, 0x743c4006, 0xdd15993e, 0x0a4f2a43, 0x3aca194b, 0x1ad40786, 
    0xe1d35183, 0xb40dedd4, 0x089282e5, 0xe911d42b, 0x5bb4b14e, 0x92ed381b, 0x608c7547, 0xf871c617, 0x5b5c8c52, 0xa22816b8, 0x9447d08a, 0x9457abd7, 
    0x5ddba8d7, 0x2642de5b, 0x436595b6, 0xf84e4fdd, 0x959e873e, 0x4ca943cd, 0x16bfb996, 0x6d1be74f, 0x95e4383a, 0xb1acc4d9, 0x23a39d8c, 0x57f9e7a7, 
    0x9a7d5149, 0xa37db40f, 0x183b4fc9, 0xd8fc36f3, 0x256fcdf4, 0x624e6275, 0xde1651d7, 0xb8b6c828, 0x2af48ab6, 0xd32673b4, 0x7b0438bb, 0xeb9af967, 
    0x6d6d292a, 0x962491e7, 0x39e3dd08, 0xaf046546, 0x31a2a5d2, 0xa6bc0268, 0xeae646bd, 0x3513cede, 0x0e12abcc, 0xc0f77aec, 0xaf743cf5, 0xf42bac2e, 
    0xde760529, 0x9000ff0b, 0xf0f5bf3c, 0xae15f47f, 0x39bcb726, 0xaba5c7af, 0xf2a95cdb, 0x5e87b75d, 0xdfe971aa, 0x26951538, 0x7706b594, 0x89e28115, 
    0xf46d95a5, 0xd7c810c8, 0x4fd1590c, 0xff7955cc, 0x974a3f00, 0x27dd12fe, 0xff497afe, 0x34cd7e00, 0x2e46a7f8, 0x3a2c971c, 0xaec89537, 0x5a2d4aa9, 
    0x77e92be2, 0x8a78db32, 0x7bb3a568, 0xa301be54, 0xa3820356, 0xe98f9f9e, 0x9f61255d, 0xc1ec6815, 0xe865398b, 0x778a5c4c, 0x4fba25fc, 0xfe93f4fc, 
    0x28239afd, 0xe343a0ae, 0xc503f94f, 0x035f00ff, 0x6a4100ff, 0xc47b6be2, 0xa27afc7a, 0x9fb2b5a5, 0x76791b25, 0x9d1ec7ea, 0x355893b1, 0x2da755cb, 
    0x5fbb8206, 0x543ab005, 0xe4449ecb, 0xff55f591, 0xabe20a00, 0xedf2c37b, 0x952390b7, 0xc6f17c75, 0x63fd1f01, 0x81b4934e, 0x6a67c59d, 0xab91f9d0, 
    0xd07de033, 0x7d9220a3, 0x37ed3feb, 0x4fdef31f, 0x6bd5ecfb, 0x68ea9a94, 0x7c994bda, 0x0ee507b4, 0x9aef7346, 0x46d072e9, 0xf6679dae, 0x2141b76b, 
    0x12435dcc, 0x493d024b, 0x63e65aad, 0xa10be692, 0x4d85332c, 0x07154abb, 0x5acdf53c, 0xffbbd1fe, 0xf8bf9e00, 0x0a00ffe8, 0x1701496a, 0x2a0d188d, 
    0x7026cf15, 0x7f2bfa40, 0xd055718d, 0xa6e18e78, 0xcb353f82, 0x1d473e3b, 0x5ce33f80, 0x77d572fd, 0xffd5d190, 0xff71c200, 0xfcef5000, 0xd800ff8f, 
    0xc53fcdd5, 0x3ff36e1f, 0x98bdfcd0, 0xb99600ff, 0xeded73ce, 0x686e455c, 0x2c6f8131, 0x699fe59c, 0x00ff07fc, 0x2615aa5e, 0xa763e1de, 0x00ffd8fe, 
    0xfff81fa6, 0x5a00ff00, 0xa982d686, 0x19000663, 0x00ff7f27, 0x3f6bb35a, 0x56889457, 0xe5c53dde, 0x3b19853c, 0xcdd95a47, 0xb61b71a5, 0xe88222fe, 
    0xf6610c13, 0xc788f9f5, 0xed5f2ae6, 0xff61fa8f, 0x00ff8f00, 0xd396abf5, 0x5ed46199, 0x92488e25, 0x45560554, 0x00ffc8c1, 0x46e9b526, 0xde2da06d, 
    0x76ec8bf8, 0x06b36fe6, 0x976903c1, 0x5971fa19, 0x7f9cf0df, 0x00ff3bd4, 0xf600ff23, 0xff5d4b35, 0xff248f00, 0xf983ae00, 0xe7acc11a, 0x31d94952, 
    0xc66a15a4, 0x68242fcd, 0xc636e2cc, 0xefce6d54, 0xb142ab5a, 0x82a40c56, 0xab1d410e, 0x8fcdb805, 0x00ff47f8, 0x00ffebe9, 0xf500ff21, 0x293439ea, 
    0x2e47d015, 0x6de6c7f0, 0x3e3fdab8, 0x857a9c6a, 0xb8956de4, 0x988f7172, 0x6575feee, 0x50b5cb35, 0xf7cf8d08, 0x913f7999, 0x0b3bbcab, 0xe5d12551, 
    0xf738e28a, 0xde3847ee, 0x51bffc14, 0xabd700ff, 0xff8ff01f, 0xfed7d300, 0xeb00ff43, 0x425f93d3, 0x55b97dc3, 0x7fb255ee, 0xf588552c, 0xb35c279b, 
    0x193d67b4, 0x52cdf44f, 0x3e53c354, 0x2dfb47ef, 0xefe7cdb3, 0x63368edb, 0xb3d6e33c, 0xd456536b, 0x2189b920, 0xb7019684, 0x463dc616, 0x9db32e2b, 
    0x8ac2a0af, 0xa200a928, 0xa200288a, 0xa200288a, 0xa700288a, 0x36912c47, 0xe390dde8, 0x6d8a5319, 0xdb370114, 0xe6e7bf2e, 0xd3ecfb6f, 0x232fd4a3, 
    0x93c3ad6c, 0x77c77c8c, 0x53f4aaf3, 0xf6e702bb, 0xf7fcf7bd, 0x17c700ff, 0xd7fe28fc, 0x9e00ffbe, 0xe2f800ff, 0x538500ff, 0xee339fa2, 0x5b9ee603, 
    0x9cc93c89, 0xa61963b3, 0x05484551, 0x497e786c, 0xff118f0c, 0x62395000, 0x637b2a07, 0xeff9a7d7, 0x17da5b8f, 0xfd3f79fc, 0x55c83f74, 0xcd84f8d3, 
    0x04bc0956, 0xb2d48373, 0x69961fe3, 0xde10da1e, 0x459ef86e, 0xdd290418, 0x504991f9, 0xadad5cdd, 0xe3dc4abb, 0xe953cfa0, 0xdf442c5d, 0x4ab21264, 
    0xee937b44, 0xdb11e092, 0xbbb19cd6, 0xe45254b9, 0xf2cf0b75, 0x6257b6aa, 0x21300ff2, 0x5ca91842, 0x50ac06e7, 0x6440f5ac, 0x0905f36b, 0x0d24466a, 
    0xbcea81b9, 0xb1e6f971, 0x8d5e736b, 0xbb1ccf3e, 0x77fbf046, 0x58f1607b, 0xe253cd75, 0xa9280a1a, 0xba67ed6d, 0xb98c2162, 0x31ce9351, 0x2a2a3250, 
    0xec659ad4, 0x62b7966b, 0x0d978f33, 0xa3b3aafc, 0x4a5dc5c6, 0x6018eab0, 0x12a069d3, 0x01a4288a, 0x01501445, 0x01501445, 0x01501445, 0x01501445, 
    0x01501445, 0x01501445, 0x01501445, 0x01501445, 0x01501445, 0xbb86065d, 0x0edc096c, 0xf40027e7, 0xabfc39e8, 0x32aaa29f, 0xb10377e5, 0xce43ddac, 
    0x088ab9b8, 0x9fb12ea1, 0x02048931, 0x00ff6c47, 0x4581b59e, 0x827ea95b, 0xf260bdb1, 0x144fa847, 0xbfcc18b1, 0x70bb0bbc, 0x5ca7b51e, 0x962a1475, 
    0x203e1b0b, 0xc905b663, 0xfc482cc1, 0x2a8a1aab, 0x30eeee24, 0x8f4587ae, 0x391b9e66, 0xd3b718f3, 0x7aaef4b7, 0x572e238a, 0x6b1a3b70, 0xe9ae91c8, 
    0x587d511d, 0x452157e0, 0x857ced69, 0x5636a863, 0x11c44753, 0x40416e15, 0x092aea07, 0x6c374b34, 0x3ac6f8ae, 0x6b8e7f2b, 0x2e790b0a, 0x0b7b6c1b, 
    0xd5190064, 0x27d32749, 0x87fdb79a, 0xb7cf7fa9, 0xe3bf3efe, 0xaa47ea52, 0x45ead215, 0x94b558a8, 0x6f7467c0, 0x00ff1eca, 0xf3695543, 0x86b42d41, 
    0x6164a339, 0xe3bf8ed8, 0x7b76a84c, 0x4f511414, 0x646e0986, 0x3b1bc311, 0xff74c01e, 0x32400a00, 0x87fdbf8a, 0xb7cf7fa9, 0xe3bf3efe, 0xa51ef647, 
    0xdf3e00ff, 0x00fffaf8, 0x73a12b8d, 0x2a0ae52e, 0x1ef600ff, 0x3e00ffa5, 0xfffaf8df, 0xd81f8d00, 0xfbfc977a, 0xfeebe37f, 0x32075d34, 0x9fa250ee, 
    0x48db1234, 0x46369a63, 0xfeeb881d, 0x0a63ca34, 0x04c3a728, 0xe10832b7, 0x608f9d8d, 0x00857f3a, 0xfdbf8a32, 0xcf7fa987, 0xbf3efeb7, 0x1ef647e3, 
    0x3e00ffa5, 0xfffaf8df, 0xa12b8d00, 0x0ae52e73, 0xf600ff2a, 0x00ffa51e, 0xfaf8df3e, 0x1f8d00ff, 0xfc977ad8, 0xebe37ffb, 0x075d34fe, 0xa250ee32, 
    0xdb12349f, 0x369a6348, 0xeb881d46, 0x63ca34fe, 0x80a2280a, 0x80a2280a, 0x80a2280a, 0x80a2280a, 0x80a2280a, 0x80a2280a, 0xfb0b9e0a, 0x4dbe6dbb, 
    0x8b5ea8c3, 0xd2e5af9c, 0x2680a2a0, 0xbcb8bcb9, 0x4b896b65, 0x001c1895, 0x1a2ae007, 0xae02a028, 0x9a94ba69, 0x81caac74, 0xa4ccc7d1, 0xd59c3ee3, 
    0x34d1d63a, 0xcd4befb8, 0x3b242638, 0xc78d8342, 0xe7c7f1f9, 0x8adada49, 0x84a6b656, 0x6db3247e, 0x0995e3a1, 0x03014ec6, 0xb395fef5, 0xad9dbea2, 
    0xeb02c9dc, 0x228b7d5a, 0x297ddd6f, 0x0c645885, 0xe7192306, 0xc81af8a7, 0xbbd80e7f, 0x032a5396, 0x03c32afc, 0xe8ad06f3, 0x0ff50c7f, 0xd3848b11, 
    0xe8fcad6f, 0x82936200, 0xa1e79481, 0x7120e719, 0xac78fd8e, 0x4a328bd2, 0xef059d0d, 0x746d2e87, 0xefadd4e6, 0x241b352c, 0x2cee2d7f, 0x4654566e, 
    0xc8ef83e3, 0xd664c5fc, 0xc7f0ad6e, 0xa32dbac5, 0xd1e9de5d, 0x64800bac, 0x24cf985b, 0xc96e0ce0, 0xbb58413f, 0x2e679bf5, 0xf3f2d04d, 0xfd65d992, 
    0xbae0a678, 0x68e88203, 0xfbcb9bf8, 0x00ff193c, 0xebedbc5b, 0x00ff1cd3, 0x4b6ae74a, 0xa5ae998b, 0xbb9067f3, 0x953e19e3, 0x46565a1d, 0x0a565691, 
    0xa71d3ceb, 0xceacddb5, 0x61e65398, 0x18d89ed8, 0xc935f1e3, 0xbbe065d7, 0x286169e1, 0x298ddc74, 0xe02007ce, 0x6a62cf54, 0xd1d9267c, 0xc976326e, 
    0x24891d19, 0xd2d14a7f, 0xeba9153c, 0x4ddb2a4f, 0x05509e6a, 0x73c08e8c, 0x50e953f4, 0x7fdb6c7f, 0x7fc85f72, 0x0e1f778d, 0x92ba606f, 0xcd6222fd, 
    0x412aa1e5, 0x7594b51e, 0xbb106676, 0x6ac79995, 0x74d6079e, 0x457833bb, 0xf5b2cdbd, 0xc05dde96, 0x27f88e73, 0x7f58419f, 0x00ffb964, 0xef7f799f, 
    0xadb95e83, 0xf3c187a8, 0xe99ad5ad, 0xe58b0c49, 0x0e87e747, 0x539f1e49, 0x31b866f9, 0x2ac46e73, 0x802719cf, 0x96688e03, 0xe8d1738c, 0x87285e70, 
    0xe84cac6d, 0x6f934556, 0x2708103c, 0x9a2be0a7, 0xb2c7e3ae, 0x2a30f6c4, 0x7e596715, 0x0f8e3a62, 0x7ab8ce1f, 0x531b1bd6, 0x288a42f8, 0x280a34ab, 
    0x280a80a2, 0x280a80a2, 0xb50a80a2, 0xcc92bda7, 0xba1bdd7e, 0xf0548011, 0x9fe3d4a7, 0xd1aad2f3, 0x785a3340, 0x18373934, 0x7a221e6f, 0x3fca8c0d, 
    0x9bb5fe4c, 0xdfc6513c, 0x9449b8bb, 0xc0aa8293, 0xfc23dfe3, 0x25293a6a, 0xa2602561, 0x288c298a, 0x2b008aa2, 0x52d54657, 0x86337cc7, 0x08829cf2, 
    0x3ff4741f, 0xa8b2dae7, 0xd5c4d5a4, 0xfbb78ed5, 0x00ff4d73, 0x71fc9f9f, 0xba9cc2bf, 0xcb7d82fd, 0x2bfa5cb6, 0x855ce90f, 0x8f883c15, 0xb5bd8e66, 
    0xf7fb07fb, 0xc7aabe65, 0xb77f53fa, 0xf9f9df34, 0x1bc700ff, 0xa2922bfc, 0xcd1e448e, 0xe5c51a1a, 0x7bc8edb5, 0x6120c878, 0xd3bff19c, 0x56faf38f, 
    0x2555147d, 0xb0b2d262, 0xaa8dae56, 0x67f88ea5, 0x0439e50d, 0xe8e93e10, 0x6fb5cf7f, 0xffbcc27f, 0xfeafa800, 0xf600ff4b, 0xbcc27f54, 0xafa800ff, 
    0x00ff4bfe, 0x710e55f6, 0x6a706e66, 0xdcfe21d7, 0xe7e77fd3, 0x6f1c00ff, 0xbf2ea7f0, 0xed729f60, 0xc38a3e97, 0xf09f54fa, 0x2bea3faf, 0xff9200ff, 
    0x1f95fd00, 0xea3faff0, 0x9200ff2b, 0x95fd00ff, 0x8bdcb94f, 0xda46eed3, 0xfbfd83fd, 0x6355dfb2, 0xdbbf29fd, 0xfcfc6f9a, 0x8de300ff, 0xfc3715fe, 
    0x8afacf2b, 0xbfe400ff, 0x476500ff, 0xfacf2bfc, 0xe400ff8a, 0x6500ffbf, 0x2fdcb947, 0xac83b94f, 0xb27da9ea, 0x48790318, 0xbc8f2449, 0xeff30f7a, 
    0xffd95559, 0xffbcc200, 0xfeafa800, 0xf600ff4b, 0xbcc27f54, 0xafa800ff, 0x00ff4bfe, 0x714a55f6, 0x2bc1a945, 0x732be35c, 0x6d1e9ec3, 0x9c2bcb68, 
    0xae031145, 0x5e4f1f37, 0x61adcf9f, 0x0778a0d7, 0x7f7340fe, 0xe87fcbd7, 0xcb6e4e2b, 0xa336aa42, 0x42f8cfa0, 0x94e7bfad, 0xe8f5f75f, 0x2a8400ff, 
    0x4579fedb, 0x5e7f00ff, 0x7ceaaaba, 0x766d6711, 0xb668bff7, 0x9baa7d86, 0x1d1ba844, 0xe4246b7d, 0xc673aedd, 0xcfb59352, 0x8400ff2c, 0x79fedb2a, 
    0x7f00ff45, 0x0dfe9a5e, 0xd5b63181, 0x95dd3f5f, 0xafc8fcb8, 0x9b0ef160, 0xfb1b7e0c, 0x165cda54, 0x1fc08ad7, 0x022a0cb3, 0x8fd7f1dd, 0x4417d7d4, 
    0x72dc939c, 0xf3dc8b72, 0x2f68101f, 0x08e418a4, 0x8c841ccb, 0xd0070731, 0xded3f31f, 0x3cd0abb1, 0x24f6077c, 0x7291810d, 0x2de07f06, 0xc15a7f5e, 
    0x6dd31bdd, 0x8fae50c7, 0x8b1bbec2, 0xdddc1259, 0x6c048bb4, 0x37104215, 0x609f53b7, 0xe2f5f931, 0x0ff4cab9, 0xc800ff00, 0xf9fa6f0e, 0x6805fd6f, 
    0x2a68699b, 0x58e8a88d, 0x2b8400ff, 0x9e00ff45, 0xdf00ff52, 0x21fc47d3, 0xf2fc2f5a, 0x9afefe97, 0xc1a7aedf, 0x6fd77616, 0x688bf67b, 0xb4a9da67, 
    0xd7b1814a, 0x4d4eb1d6, 0x7211e6da, 0x37cfb593, 0x2b8400ff, 0x9e00ff45, 0xdf00ff52, 0x21fc47d3, 0xf2fc2f5a, 0x9afefe97, 0xe9103ff5, 0xbfe1c7b0, 
    0xc1a54db5, 0x01ac786d, 0xa0c230fb, 0x781ddf2d, 0x74714dfd, 0x0975c949, 0xe7da4539, 0xc3abf89d, 0x2bc26871, 0xa091469b, 0x72b08a91, 0x31eac60e, 
    0x2e7f46ec, 0x5e39d7bc, 0xf9efe381, 0x00ffc301, 0x00ff2b5f, 0xfd79b5a0, 0xd4da066d, 0x3a6e9bde, 0xa50d7b85, 0x0284b59d, 0x1812580b, 0xc91865c7, 
    0x4f7d32c6, 0xf5784d1d, 0x5e453d7b, 0x14e85684, 0x807f5d51, 0x00ffbe33, 0x3fa6761d, 0x2aceeaf1, 0x5c31c6ee, 0x4521c7ce, 0x15a5267a, 0x6e86c7dd, 
    0xe0ecd5e4, 0x63ac0837, 0x18ed0c10, 0xd093e4e0, 0xf36a9fe4, 0x0e1b25ba, 0xbb21e551, 0x80bfb6b3, 0x4d0275c1, 0x38c3ec19, 0xa147c638, 0x1eafa8e7, 
    0x18af67af, 0x357529ad, 0x7af6d4a3, 0x39b1a228, 0x68d8afc2, 0x0ba98e7a, 0xe66d674b, 0x77d2b6a2, 0x27fee0aa, 0x7957a8de, 0x8f4e40e0, 0x33c10172, 
    0x22df7f9c, 0xc5ee2aaa, 0xcc4e2ac2, 0xb6f0a5e6, 0x6b170ab7, 0xb5ebc006, 0x0de48fd5, 0xc1411064, 0x3fbd2218, 0xf4d4b349, 0xeb6ba7f8, 0x05487ad3, 
    0xf7187510, 0x3ae7b53e, 0x57ea9089, 0x17462c2d, 0x678c5969, 0x8a7372f8, 0xe7908d72, 0xb5721505, 0x66505114, 0xbe76c578, 0x8260d406, 0x57dee2c2, 
    0xfebb44da, 0x1f403de9, 0x7caab8d2, 0x206dcb33, 0x18191992, 0xf8af0777, 0xd59554d7, 0x9947d98e, 0xbfc4f558, 0x673b93b5, 0x7cef8f51, 0x3cb7cebf, 
    0x2d8be23b, 0xcd3cae11, 0x8c820993, 0x1963a02c, 0xf11a00ff, 0x4bcded3f, 0xf17f7efe, 0x0a00ffc5, 0x2f35b73f, 0x00fff9f9, 0x2bfc17c7, 0x74a74d35, 
    0xee34a964, 0xf1ba708f, 0x99349246, 0xd53aedf4, 0x82e0922d, 0xba3bd7ec, 0x2bfdd811, 0xdf76ed0b, 0xfd17f1f3, 0x3fcb2bf6, 0xf92f35b7, 0xc700fff9, 
    0xfe28fc17, 0xe7bfd4dc, 0x1c00ffe7, 0xd3a1f05f, 0x33291d6c, 0xece5f1a9, 0x5b5ba70f, 0xd3ee8a24, 0xcf299f79, 0x00ff1100, 0x4f0f57b3, 0x646e799a, 
    0x3b234d32, 0xfff4e41e, 0x69650a00, 0x58636515, 0x2b589547, 0xd104f0bd, 0x007395b6, 0xfb24de6f, 0x2aa063d8, 0xd000ff00, 0x155ce54f, 0x73776b4b, 
    0x6b9b3765, 0x4dbf903c, 0xebc8d8c8, 0xe938ea83, 0x82d59544, 0x3d56e671, 0x3bbcb68a, 0x35a2c7ae, 0xd36e99c7, 0x2b8c8209, 0xf8cf1863, 0xc27f89d7, 
    0xd07fad4d, 0xfcd35f42, 0x8400ff28, 0x00ff5a9b, 0xa7bf84a0, 0x9c6a56f8, 0xa58ab993, 0x718fee24, 0x46acd7ba, 0xa79d3e93, 0x2ed9a669, 0x31cd2e08, 
    0x3f76846e, 0x2cafc14a, 0x9b8400ff, 0xa000ff5a, 0xf8a7bf84, 0x0900ff51, 0x00ffb536, 0x4f7f0941, 0x93d3a1f0, 0xea4c4a07, 0x6b347f7c, 0x5b405ba5, 
    0xf53e8ff7, 0x9002ea18, 0xf921f47f, 0xdd5205d7, 0xcddedc5d, 0x244fdde6, 0xb673d3cf, 0x7ae03a70, 0x55547a0e, 0x8d9555a4, 0x60551ea1, 0x18af67af, 
    0xc7d3b6ae, 0x124031f7, 0x9027c9ea, 0xec2be671, 0x8371c7c8, 0x4a1fd3cf, 0x626f919a, 0xd6cac52a, 0xf0dfaa3b, 0xa467b3b6, 0xfcdad735, 0x17aa4ccc, 
    0x73a6e762, 0x3fcbebfc, 0x00ff61e1, 0x00ff2bd4, 0x1afb3f26, 0xff61e13f, 0xff2bd400, 0xfb3f2600, 0x4946cd1a, 0x134ac6de, 0xbf1ee94e, 0xe9a2bb1e, 
    0x85d535ba, 0xce94bc80, 0x5c2883ad, 0xdc1e5702, 0x57ca157e, 0x0b00ff17, 0x5fa1fe0f, 0x00ff31f9, 0x00ffd1d8, 0xa1fe0f0b, 0xff31f95f, 0xe3d0d800, 
    0x261cd027, 0x78a51dfa, 0x7eb775c5, 0x0296b93f, 0x0449b696, 0x9f318f87, 0x0c3b067e, 0xfab97e0e, 0x535a2557, 0xd29a5b8b, 0x7bee8d8b, 0x5c51143d, 
    0x6f5728e7, 0x788b9be0, 0x9a948bb4, 0x4ccb38e2, 0x3fc01d70, 0x45115774, 0xca9d5d54, 0xce5db98c, 0x34d346f3, 0xba7702fd, 0x508e5b93, 0x85a08d54, 
    0xcdc9881f, 0xfcfd9a72, 0x3db3965a, 0xd88820d4, 0x128ca480, 0x3a6bc600, 0xacae1c8a, 0x6475e586, 0xa9288a82, 0x00d9ff20, 
};
};
} // namespace BluePrint
