#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Cube_vulkan.h>

namespace BluePrint
{
struct CubeFusionNode final : Node
{
    BP_NODE_WITH_NAME(CubeFusionNode, "Cube Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Move")
    CubeFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Cube Transform"; }

    ~CubeFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Cube_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_persp, m_unzoom, m_reflection, m_floating);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _reflection = m_reflection;
        float _persp = m_persp;
        float _unzoom = m_unzoom;
        float _floating = m_floating;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Reflection##Cube", &_reflection, 0.0, 1.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_reflection##Cube")) { _reflection = 0.4f; changed = true; }
        ImGui::SliderFloat("Perspective##Cube", &_persp, 0.0, 1.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_persp##Cube")) { _persp = 0.7f; changed = true; }
        ImGui::SliderFloat("Unzoom##Cube", &_unzoom, 0.0, 1.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_unzoom##Cube")) { _unzoom = 0.3f; changed = true; }
        ImGui::SliderFloat("Floating##Cube", &_floating, 0.0, 10.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_floating##Cube")) { _floating = 3.0f; changed = true; }
        ImGui::PopItemWidth();
        if (_reflection != m_reflection) { m_reflection = _reflection; changed = true; }
        if (_persp != m_persp) { m_persp = _persp; changed = true; }
        if (_unzoom != m_unzoom) { m_unzoom = _unzoom; changed = true; }
        if (_floating != m_floating) { m_floating = _floating; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("reflection"))
        {
            auto& val = value["reflection"];
            if (val.is_number()) 
                m_reflection = val.get<imgui_json::number>();
        }
        if (value.contains("persp"))
        {
            auto& val = value["persp"];
            if (val.is_number()) 
                m_persp = val.get<imgui_json::number>();
        }
        if (value.contains("unzoom"))
        {
            auto& val = value["unzoom"];
            if (val.is_number()) 
                m_unzoom = val.get<imgui_json::number>();
        }
        if (value.contains("floating"))
        {
            auto& val = value["floating"];
            if (val.is_number()) 
                m_floating = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["reflection"] = imgui_json::number(m_reflection);
        value["persp"] = imgui_json::number(m_persp);
        value["unzoom"] = imgui_json::number(m_unzoom);
        value["floating"] = imgui_json::number(m_floating);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf6d1"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_persp       {0.7f};
    float m_unzoom      {0.3f};
    float m_reflection  {0.4f};
    float m_floating    {3.0f};
    ImGui::Cube_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 8580;
    const unsigned int logo_data[8580/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xe6003f00, 0xc232cdf4, 0xded12a4d, 0xa099d9c6, 0xa4c45842, 
    0xd273b493, 0x6500ffac, 0x0ff4bf69, 0xbf00ffb5, 0x6914fe2b, 0xb207f25f, 0x78af00ff, 0x11f400ff, 0x49d0eb56, 0xf6a78258, 0x00ff9b56, 0xfb5ffb40, 
    0x47e1bff2, 0xff9b56f6, 0x5ffb4000, 0xe1bff2fb, 0xaf96ea56, 0xa69bfd7f, 0x973672cb, 0xd00d8451, 0x491a6ab7, 0x657f075c, 0x0ff4bf69, 0xbf00ffb5, 
    0x7f14fe2b, 0xf4bf6965, 0x00ffb50f, 0x15fe2bbf, 0x8af8a193, 0xecfbfee6, 0x1147b1b7, 0xd51edd74, 0xcffd9e2b, 0xa33474a5, 0x327425cb, 0x9b56f6a7, 
    0xfb4000ff, 0xbff2fb5f, 0x56f647e1, 0x4000ff9b, 0xf2fb5ffb, 0xe856e1bf, 0x9311b2aa, 0xc236cde1, 0x4d5b0b7f, 0x92bc9535, 0xc4bbecb6, 0x47ce8fa5, 
    0xecbf555c, 0x81fe37ad, 0xe5f7bff6, 0xf0a6c27f, 0xc32fbadd, 0x13e43efd, 0x42a749be, 0x1158613b, 0x1aa100ff, 0xcbb0b996, 0x4cee77dd, 0xb23f957a, 
    0x07fadfb4, 0xdf00ffda, 0x0a00ff95, 0xdfb4b23f, 0xffda07fa, 0xff95df00, 0x48b70a00, 0x38495048, 0x365d9303, 0xb27f1545, 0x07fadfb4, 0xdf00ffda, 
    0x0a00ff95, 0xdfb4b23f, 0xffda07fa, 0xff95df00, 0xd3c50a00, 0xde35517c, 0x8a652db0, 0x61468235, 0xfb20281b, 0xe96a9f67, 0x2de3626a, 0xcafe5486, 
    0x1fe87fd3, 0x7e00ff6b, 0x332bfc57, 0x947d7ac4, 0x90cc151a, 0xae1bc1d9, 0xa04432dc, 0xc577988f, 0x8a4f566f, 0xba5ee43f, 0x7f8000ff, 0xa58962e8, 
    0xf0cfc0ca, 0x6aa6838e, 0xdeb3549a, 0x2cb279db, 0xcbde01e5, 0x883dd5c6, 0x71ab35f5, 0x1c114de1, 0xc7c0b205, 0xf17ff5fc, 0xac095fab, 0xfb21d523, 
    0xb2c8ae1c, 0x2ff3c9dc, 0x1fc18851, 0x5fb7aba8, 0xb5fb47eb, 0xba5a47c1, 0xce7765ec, 0xc200ff61, 0xcf7fa32f, 0x7f45fe9f, 0x11fea3f1, 0x7cfe1b7d, 
    0x2bf200ff, 0x6b8d00ff, 0x24875e51, 0x3f191a7b, 0xdfe88bf0, 0x00ffe7f3, 0x68fc5f91, 0x5f8400ff, 0x9f00ff46, 0xff8afc3f, 0x7554e300, 0xa74f137f, 
    0x18de86ea, 0xdb6378a3, 0x390912e6, 0x710e903c, 0x944abad2, 0x0c49dba0, 0x8400ffc9, 0x00ff465f, 0x8afc3f9f, 0x58e300ff, 0xb4d127fe, 0x8e4d3bfd, 
    0x2d7f5b6b, 0xefa460da, 0xee09c663, 0xaeaeab7d, 0xf29fc67f, 0xbefe8b07, 0xd482fe07, 0x2f2a46aa, 0x837f4640, 0x570d7b74, 0x836e9fed, 0x6cb6f2cd, 
    0x9d71d9f9, 0xa047e8d9, 0x23fc99ae, 0x2c6204a1, 0x00ff0079, 0x00ff57cb, 0xe11babe2, 0x3fc4fce7, 0xcffe97ed, 0x69abf65d, 0xcd36b405, 0xb3482b6f, 
    0x9eadacda, 0xf861c8cd, 0x6dcc6b10, 0xbe4d98f3, 0xfe3bce6d, 0xfe1b7d11, 0xf200ff7c, 0x8d00ff2b, 0xe88bf01f, 0xffe7f3df, 0xfc5f9100, 0xf58a5a6b, 
    0xd8d823b9, 0x8400ffc9, 0x00ff465f, 0x8afc3f9f, 0x47e300ff, 0x37fa22fc, 0x00fff9fc, 0x00ff57e4, 0x75886f1a, 0xa1987499, 0x2c8fe816, 0x24389c84, 
    0x849e0305, 0xca9d9556, 0x72c359de, 0x3650099c, 0x52aa3d3d, 0xccb07683, 0x45f800ff, 0xf3f96ff4, 0xafc800ff, 0xf8cf35fe, 0xd3b34bab, 0x48f6cb7e, 
    0x7e33bf7c, 0xe39c98ef, 0x739f3a6e, 0x9e72b55d, 0x9700ff38, 0xff69fb1f, 0xd5d4b200, 0x901d548c, 0xbfd2a023, 0xff650fe4, 0xfff15e00, 0xad22e800, 
    0xfe2b4dd5, 0xf55ff640, 0x82fe1fef, 0xb66add2a, 0xe3235710, 0x70d7e00b, 0x5ade1259, 0xbe03e461, 0xcedffa7f, 0x87ceeaba, 0x592d8244, 0xb22c23f5, 
    0xb1e1f94c, 0x3d4e9f81, 0x729aa938, 0x25474356, 0xbedaab7f, 0xa7796ba5, 0x000624c5, 0x32809415, 0xd3874e07, 0x95e1ee8a, 0x8c258527, 0x03431de5, 
    0xa8410dea, 0x76eaf0e9, 0xc172da86, 0xea150449, 0x58a7f408, 0x9c8d2dda, 0xba23c976, 0xe30b30c6, 0x4629fc38, 0x62812d2e, 0x04ad288a, 0x00ff1c1e, 
    0xffa56b92, 0xcfcdd700, 0x559484fe, 0x33dc0c7f, 0xdbc61678, 0x921cdb68, 0x67c93db8, 0x2acafec7, 0xbe6173c5, 0x774cea17, 0x29de5861, 0x4b7a36bf, 
    0x39491c22, 0x7f873dd8, 0xcdd6f9d3, 0x2c3a6a67, 0x33cc9d1a, 0x43a02c4f, 0xda4851f7, 0x563ccf79, 0x22ab4df3, 0xeb7b2e8e, 0xa558b06f, 0x5697c8ba, 
    0x0ce492a4, 0x00ff9c1c, 0xeb34ef3a, 0xe1d3beb5, 0xb1fe53b9, 0x7f8f7d72, 0x6b779fd6, 0x96a4e51d, 0x45928fd2, 0xa2da71da, 0xf4e834d3, 0x45b35fbb, 
    0x2c6eba23, 0x3d23e337, 0x1c84a8b8, 0x9375cb58, 0x17f98fe2, 0x1fe0bfae, 0x6aad18fa, 0xfc47f1c9, 0xf05fd78b, 0x550cfd0f, 0x3662e1cf, 0x00ff097e, 
    0xf55fd4c7, 0x8afe2ff3, 0xf5affb14, 0xcddafda3, 0x267f5ff8, 0x91d76499, 0x72c7b32a, 0x98d30df8, 0xd25a7fd4, 0x5a00ffba, 0x0aaedd3f, 0xccfbc51f, 
    0x86d8efef, 0xec9fbba2, 0x464e73d6, 0xf1d9a87c, 0x969a81eb, 0x17b5bca0, 0x345b92b6, 0xda208b8c, 0x7e9c3159, 0x8d3de835, 0x463d120e, 0xc8cbf4d1, 
    0xee91a2ae, 0x04f364ee, 0xed0106aa, 0x9d3fd7df, 0xf9051a76, 0xa59834d4, 0x7c22dd76, 0xe41ff58f, 0x483bbb55, 0xb6236dec, 0x18233b8b, 0x5f35f504, 
    0xd2e1d14a, 0x59825416, 0x9020641d, 0x4c8f71e4, 0x9410ce0a, 0xcff5cb58, 0x40fed3f8, 0xc0d77ff1, 0x5ad000ff, 0xfce70aba, 0x2000ff69, 0xe0ebbf78, 
    0x552de87f, 0x8660e053, 0x00ff3c7c, 0xb2fd8798, 0xebd900ff, 0x4997b5d0, 0x8ef6b42c, 0x58161831, 0x87e41c20, 0x41e24f70, 0xef798d3f, 0x88f9cfc3, 
    0xfd2fdb7f, 0xeb9bbb9e, 0x4f23efc9, 0x3079833d, 0x0c009308, 0xf20a1c28, 0xcf73c69f, 0x144d66e3, 0xb9c15e51, 0x8dba6ac6, 0xef8ef8b2, 0xc4f26aed, 
    0xd86318b0, 0x32905406, 0x6ab5fa79, 0x4dec42f8, 0xfc7c9ba4, 0x3d46ecd6, 0x5a7f2489, 0xb6b0b4d5, 0x085e69b2, 0xb9cdb4ca, 0x3f4962c9, 0x1b0b3a8d, 
    0xe7896b7b, 0x39af3d86, 0xc9934306, 0xac89df1e, 0x71a506a3, 0xe329d793, 0xff71f98f, 0xfb9fb600, 0xca75752d, 0x5cfee378, 0xfea7ed7f, 0xc0af4ecb, 
    0xff7415c1, 0xed6a1200, 0x76967614, 0xc6e4cf51, 0xb3130900, 0x3819186d, 0xfdb94a3f, 0xfa7fe2b5, 0x02feb702, 0x0735fec9, 0x39e47f80, 0x377bfd37, 
    0xe8b584fe, 0xf32ac135, 0xe79cb18b, 0x8463edca, 0x5489ef3a, 0x7de4e8e0, 0x00ffa46d, 0xefed4f1a, 0xd000ff11, 0x2500ff27, 0x1a00ffa4, 0xd6bf6eec, 
    0x1a6af78f, 0x28a5a6eb, 0xbbb85ca9, 0xf6a79cab, 0x00ff88f7, 0x00ff13e8, 0x8d7fd292, 0x23dedb1f, 0x4fa000ff, 0xfe494bfe, 0x5ad1d535, 0x1de63f72, 
    0x7bfb53ce, 0x09f47fc4, 0x69c900ff, 0x9ba0c63f, 0xb3c59ac5, 0x18ca9e84, 0x78858c98, 0x793d4e9d, 0x1357d935, 0x0cf94fe3, 0x5e00ff45, 0x4200ffe3, 
    0x516ace6a, 0xba21b857, 0x4b758957, 0xbbb4387b, 0x0ba7583b, 0xcc46a09d, 0xa1c792e7, 0xffabf6fa, 0x275edb00, 0x2ba000ff, 0x9f2ce07f, 0x107e59e3, 
    0xa29100ff, 0xff07fecf, 0x7a35a000, 0xb23a7175, 0xe74ca4a7, 0x8e64472e, 0x267eeb14, 0x6f462703, 0xfc9305fc, 0xdedbbf69, 0xa000ff23, 0x494bfe4f, 
    0x49dd35fe, 0x00ffa9fe, 0xba4235dd, 0x13554a68, 0xe6138e6d, 0xefed4f39, 0xd000ff11, 0x2500ff27, 0x1a00ffa4, 0x47bcb73f, 0x9f4000ff, 0xfc9396fc, 
    0xbaa2ab6b, 0x17f31f39, 0xdefe9473, 0x02fd1ff1, 0x4f5af27f, 0x53fdacf1, 0xd5953ac4, 0x7617b6bc, 0x1bbb43d1, 0x1c56c686, 0xa59f3a82, 0xdee77577, 
    0x9100ff28, 0x01feeb86, 0x0aa000ff, 0x6394a2ca, 0x66ba21b8, 0x5ba57dbf, 0x3ad316b4, 0x14723923, 0xdd015c27, 0x7f58a54f, 0x726e6a16, 0x843f646e, 
    0x5145fc7f, 0x39e47fd1, 0x5f00ff61, 0xe800ff31, 0xb86abd42, 0xd11df9dc, 0xf6a2e49c, 0x12fec73c, 0x7efe4b9d, 0xffa3fc24, 0xff28e200, 0x52a78400, 
    0x899f00ff, 0x00ff283f, 0xeaf48af8, 0xb4fe75a9, 0x525abb7f, 0xe5922aa9, 0x33a746b8, 0xff3c8fb5, 0x52a78400, 0x899f00ff, 0x00ff283f, 0xe13f8af8, 
    0xe7bfd429, 0x3fca4fe2, 0xdabb22fe, 0xcbd9af2b, 0x702e8df9, 0xea94f05f, 0x27f1f35f, 0x00ff1fe5, 0xf5af5511, 0x0546bdab, 0x7556e286, 0x0b01dc56, 
    0x517604d7, 0x5e8d5eeb, 0x00ffaa67, 0xfef762c8, 0x00ff24be, 0x51658dd0, 0xa2712b4a, 0x5cae91c6, 0xd977dee8, 0xb6e500ff, 0x673bdddd, 0xd15a1fd4, 
    0x99d4363e, 0xffa82748, 0x00ff6700, 0x179dac89, 0x1f9643fe, 0xfe1ff3f5, 0xabd62b84, 0xec456d8e, 0xbda85165, 0x00ff368f, 0x00ffba84, 0x4100ffd7, 
    0x3f0a00ff, 0xf5bf2ee1, 0x7fd000ff, 0xa326bdc2, 0x5000ffb8, 0xadf387df, 0x92525e23, 0xed6e5542, 0xe1bfce63, 0xfff5bf2e, 0xc27fd000, 0xaf4bf88f, 
    0x1ff47ffd, 0x8ae2aef0, 0xfe72f6ed, 0x3f9c5b63, 0xfed725fc, 0xf80ffabf, 0x574f0d55, 0xaf7cd5b8, 0x6759fe3f, 0xd0e33b1d, 0x7af44a0f, 0xfe573df3, 
    0xf5bf1743, 0x84fe27f1, 0x518a2a6b, 0x1b8dbb5a, 0x00ff019e, 0xf5dfe490, 0x12fadfec, 0xf959b1d7, 0x5f84f0df, 0xe691c76d, 0xb7bbfe9d, 0xddf4b743, 
    0x1fe03b5e, 0xff4d0ef9, 0xffcd5e00, 0x7a2da100, 0xaccdadcd, 0x8db81a7e, 0xb3e002e7, 0xe5b443a2, 0x738e1883, 0xae591edb, 0xc24c7c29, 0x39f4137f, 
    0xa3f5afcb, 0xa686dafd, 0x5a00ffba, 0x6ba8dd3f, 0x34fca1d2, 0x62143e5c, 0xf642a2f8, 0x3746d811, 0x5420794d, 0x3f09421f, 0xf0a5f3cb, 0xe5d3b8c3, 
    0xf6b291b4, 0x9e473493, 0xca9ffcc3, 0x77e9ac99, 0x6ea9a69a, 0xe1ad9122, 0xeb443286, 0x4c4f0cc9, 0x53801e64, 0xf3266d74, 0x0f66d54a, 0x68de9e29, 
    0x63a434f7, 0x934c9f2f, 0xf31acdeb, 0x37f4c5de, 0xa7f189ab, 0xff2286fc, 0xff71af00, 0x7635a100, 0xd3f8c4d5, 0x7f1143fe, 0x00ffb8d7, 0xdf8a9ad0, 
    0x080f2200, 0x67d1c87f, 0xff0300ff, 0xbd1ad000, 0x7fbec1bb, 0x66dfacf6, 0x2379e6db, 0xe6db74ef, 0x77fcef26, 0x103ee235, 0xa29100ff, 0xff07fecf, 
    0x7b35a000, 0x89cd871f, 0x508bb8b9, 0x65786bb9, 0x1c621e83, 0x86d52130, 0xafdd3f38, 0x321a7f36, 0x7a8ac69f, 0x776aaad2, 0x56118aea, 0x30500069, 
    0xac78dc00, 0x67d5d85a, 0xdbeb9b4b, 0x59b2f388, 0xc7c87564, 0x1e2b9204, 0x309b30bb, 0xaba9d4a7, 0x49937d5c, 0xc2769bba, 0xd1a79db1, 0x22f5038f, 
    0x0c353cb3, 0x5a977c9a, 0x3679bf74, 0x2ff73d4a, 0xab18913f, 0xd7ace5ba, 0xc4da71d6, 0x20b3a4a4, 0x54018298, 0xfa1949ce, 0xa56dad0a, 0x516ba74d, 
    0xdc9314cf, 0x1c4d2cc3, 0x8a81348f, 0xe2f40872, 0xaef91dba, 0x9f576d6a, 0x46fea378, 0x07f8af1b, 0xd02b80fe, 0x51bccf6b, 0x0d2300ff, 0xff03fcd7, 
    0x15154000, 0x7d4510fe, 0x9643fe17, 0x1ff3f51f, 0xd92b84fe, 0x0df96ff4, 0xccd77fd8, 0xaf10fa7f, 0xe47fd118, 0x00ff6139, 0x00ff315f, 0x93bd42e8, 
    0x7d3b9a4c, 0x5b79d256, 0x8ece716c, 0x0cc019c7, 0xa63aaf09, 0xc4afc6e8, 0x241adf8d, 0xb8476ba2, 0x90b0138b, 0x50460719, 0xfa2000ff, 0xe35a7f80, 
    0x8fd6bf6e, 0xf1a96bf7, 0x749ffe35, 0xa5d3a02d, 0x96369279, 0x72047646, 0x810c9ced, 0x72ad1fd3, 0x47eb5fd7, 0x1fb6b5fb, 0x195fc2f8, 0x1d3e730d, 
    0x9254d791, 0x51571b47, 0xf600a78d, 0xf263d821, 0xeb86ae39, 0xdf24fbce, 0xcb9b1967, 0xb57f2c6f, 0xc45a3f8e, 0xc29e4287, 0x82b84feb, 0x1d31e759, 
    0x0292a4b2, 0x9560a4a8, 0x77b5c7e9, 0x1b4df74a, 0x9e79059d, 0x2100ffab, 0xf8fadf8b, 0x4200ff93, 0xe695e935, 0x86fcaf7a, 0xe2eb7f2f, 0xd608fd4f, 
    0x8740f675, 0x1cf2bfe8, 0xaf00ffb0, 0xf400ff98, 0x5eb55e21, 0x00ffa24b, 0xfec372c8, 0x00ff63be, 0xd57a85d0, 0x3177d579, 0x6d3bbaad, 0x066f2651, 
    0xc0509106, 0x23c696b6, 0x06e4438e, 0x9d1f913f, 0xea1fb770, 0x75fef01b, 0xfa6a5ed3, 0x8e309a64, 0xc61bb42f, 0x82d88ab4, 0x90029607, 0x350ffd49, 
    0xa87fdccc, 0xd5f9c36f, 0x7ea4de45, 0x2279b744, 0x99066095, 0x2cf7583c, 0x5a24c8c3, 0x6f76e803, 0xebfce7c7, 0xe17fb07e, 0x97ce981f, 0xce93697f, 
    0xf19e5ffb, 0x1b8f9979, 0xdb750cbb, 0xefa45e81, 0x7a838ea5, 0xff55cfbc, 0xefc59000, 0xff497cfd, 0xf41aa100, 0x573df3ca, 0xbf1743fe, 0xfe27f1f5, 
    0xfb2a6b84, 0x84974620, 0xddf418b5, 0x8aa45952, 0x57400349, 0x793fe311, 0x2b3d724f, 0x8400ffae, 0x7cfed7b2, 0xff283faf, 0xf3baf800, 0xb67f2bbb, 
    0xefda5b5f, 0xb14ae7d9, 0x9371c6ee, 0xdfbae28c, 0xf59f57f8, 0xc900ff15, 0xb8cafe7f, 0x4c7da326, 0x4b7da3e6, 0xd99ef8f3, 0x746711dc, 0xff13ee38, 
    0xffa88a00, 0xb725e100, 0x4b9f00ff, 0xf83fc9af, 0x00ffa9aa, 0xa2fef30a, 0xff2ff9bf, 0xff51d900, 0xfef30a00, 0x2ff9bfa2, 0x56d900ff, 0xc628c4d1, 
    0x95e014c8, 0x00ff5bae, 0xfedf9684, 0x24bf2e7d, 0xa8e200ff, 0x968400ff, 0x2e7dfedf, 0x00ff24bf, 0x4f3aabe2, 0x576e7902, 0xff384bfb, 0xfd1fa600, 
    0x10fe3795, 0xff88fa7f, 0xfe0fe400, 0xaa54baca, 0x348d7435, 0x24fc9f66, 0xf300ffb6, 0x27f975e9, 0x5c1500ff, 0x926f89c7, 0x8e5100ff, 0xc0488e54, 
    0x191f2e84, 0xf5097dea, 0x41f84fad, 0x23ea00ff, 0x3f9000ff, 0x6ee62afb, 0xe42dfbe0, 0x79b7fbd6, 0xc66e3252, 0xd48c8333, 0xa4b57354, 0xddf05e34, 
    0xf6eb59d2, 0x280612d7, 0xaf17b29b, 0xaef5472a, 0x7b12fef3, 0x3fe7f91f, 0xc63ff2fd, 0xdfcadabc, 0xf6d697ed, 0xd279f6bb, 0x9cb17bac, 0xae38e364, 
    0xe715feb7, 0xf27f45fd, 0xb200ff5f, 0xdfa839ae, 0x378a2a53, 0x137fdad4, 0x79d81859, 0xf00ff273, 0x9faaf18f, 0x7f5a90f0, 0x21bf39cf, 0xfe4335fe, 
    0x45fde715, 0xff5ff27f, 0xfea3b200, 0x45fde715, 0xff5ff27f, 0x29adb200, 0x64358d55, 0xa947b828, 0x0b12fe7f, 0x37e7f94f, 0x8fc63fe4, 0x3f2d48f8, 
    0x90df9ce7, 0xcd1a00ff, 0x521ec097, 0xcfd3fe86, 0x5100ff38, 0x54d900ff, 0xff83f05f, 0xff47d400, 0xf67f2000, 0x930ad555, 0xa251bc9a, 0xff6bec69, 
    0x6941c200, 0xe63c00ff, 0xd7f887fc, 0x255caf1b, 0xf13cb5d6, 0xe0b61582, 0x05ba5f37, 0xc200ff6d, 0x5100ff0f, 0xff81fc1f, 0x3357d900, 0x6fd90777, 
    0xbbddb726, 0x769391ca, 0x661c9c31, 0xbd9da3a6, 0xa71f52e4, 0x2bf56dcc, 0x31868259, 0x9c148ccc, 0x661c0467, 0x4bf8afbb, 0xa000ff67, 0x12f85f74, 
    0xe38af87f, 0xb5081b74, 0x290b664d, 0x3739d6d9, 0xf000a164, 0xd207f7a4, 0x40f80fbb, 0xf8f9af74, 0xbe00ffbc, 0x8900ffd7, 0xdff249ae, 0xb79c2a53, 
    0x25fc77d4, 0xd000ffb3, 0x09fc2f3a, 0x4145fc3f, 0x77268a37, 0x3846d804, 0x839f00ff, 0x54c400ff, 0xe980f0bf, 0x79f1f35f, 0xaf7d00ff, 0x471300ff, 
    0x573a20fc, 0x7f5efcfc, 0x00ff6bdf, 0xe384d2c4, 0x704a7407, 0xf86fe54e, 0x00ff6649, 0x00ff189f, 0x00ff20f0, 0xc27f34f1, 0xf8fc374b, 0x8100ffc7, 
    0x8900ff07, 0x80f03fab, 0xf1f35fe9, 0x7d00ff79, 0x1300ffaf, 0x5ac19f55, 0x3d01bb6a, 0x7d1f07d7, 0xeb9af87f, 0x1d5556a7, 0x461969a2, 0x24fc075b, 
    0x8ccf7fb3, 0x7f10f87f, 0xafe39af8, 0xdc5f33a5, 0x7929544a, 0x710eb059, 0x61d77b92, 0x5e0800ff, 0x3d00ff9b, 0xb5efbfee, 0x6be200ff, 0xa36cd696, 
    0xad59b5d3, 0x8f646661, 0x4f900b6e, 0xa7f50f2a, 0xf1de4e51, 0x974d8b68, 0x66edd4c8, 0x99cbbbdb, 0x70c6191b, 0xff7dd7c0, 0xff580900, 0xfc3f9f00, 
    0xd600ff8b, 0x1ac347ae, 0xa9b5be45, 0xf2726d49, 0xc1252c22, 0x0872808c, 0xaef5c11d, 0x1d10fea3, 0x2f7efe2b, 0xffb5ef3f, 0x8e6be200, 0xcad4b77c, 
    0x26f58da3, 0xac8400ff, 0xfe9fcf7f, 0xeb00ff45, 0x48f12553, 0x1efbc868, 0x4d00ff33, 0xcfd4fa7f, 0xaf7440f8, 0xffbcf8f9, 0xffd7be00, 0xfea38900, 
    0xfe2b1d10, 0xef3f2f7e, 0xe200ffb5, 0x9ae0626a, 0x88662f64, 0x1f24e1bf, 0x00ffebf3, 0xd4fa3f91, 0x3f48c27f, 0x00ffd7e7, 0xaaf57f22, 0x7440f85f, 
    0xbcf8f9af, 0xd7be00ff, 0xa88900ff, 0x972ef0e6, 0xbb27021a, 0x7f5d8eeb, 0x8eeb9af8, 0x1ad9c921, 0x09bbc529, 0x200900ff, 0x5f9f00ff, 0x00ff89fc, 
    0xfe2eaed6, 0xb9503b4f, 0x2bdf1897, 0x24d33336, 0x00ff5fd7, 0xff9b5e08, 0xbfee3d00, 0x00ffb5ef, 0xf19d6be2, 0x93069906, 0xd240907e, 0xc941b432, 
    0x48ce0972, 0x5da507ec, 0xc67b3b45, 0xff458388, 0x87e59000, 0xffc77cfd, 0xf50aa100, 0x175df2aa, 0x1f9643fe, 0xfe1ff3f5, 0xabd62b84, 0x15e6ae86, 
    0x9df646b7, 0x0bf5a8e1, 0xb4bf791b, 0x77ee2916, 0x7fb450f9, 0x735eaf78, 0xbb062bfd, 0x34900daf, 0x857d20fd, 0x02a725a6, 0xc7fd49e1, 0xd273fb3d, 
    0x621866b8, 0x5f0fce01, 0x9224995a, 0x2b499233, 0xd73f6e14, 0xabfce1b7, 0x8e51f73e, 0x17d6e2ca, 0x4de6c652, 0xefc31f83, 0x1a3f90f9, 0x00ffb8d0, 
    0xf287df5e, 0x17c45bae, 0x03aac353, 0x904a321c, 0x13e5abdb, 0x189a0f21, 0x470c7b92, 0xa95dac5e, 0x888ee427, 0xbc968eec, 0x00ff55cf, 0xfdefc590, 
    0x00ff497c, 0xb5f41aa1, 0x39309421, 0xf31a6404, 0x43fe574d, 0xf1f5bf17, 0x6a84fe27, 0x438aec6b, 0x0ef95ff4, 0xccd77f58, 0xaf10fa7f, 0xd125af5a, 
    0x6139e47f, 0x315f00ff, 0x42e800ff, 0xeabc6abd, 0xddd698bb, 0x834e3a1b, 0xcba6a106, 0x2da8717d, 0xe54971a4, 0x1deed192, 0xd67ae4bb, 0x2663a37e, 
    0x674da89b, 0x6ca20521, 0x411d7764, 0x97ae88fc, 0x0b0f84c3, 0xd762935d, 0xf723edc3, 0xee9b9f0b, 0xadd303fa, 0x31a67864, 0x80ae881f, 0x6215772c, 
    0x5482e418, 0xb9b4541c, 0xb9a2446e, 0xbfae3053, 0xabf70fd5, 0x6cedfe32, 0x65b9652c, 0x148ee52d, 0x07e8117f, 0xbad38ae7, 0x3f5400ff, 0x722dacde, 
    0x3ba40573, 0xdc8b7961, 0xb946f247, 0x38ef1462, 0x43af451f, 0xd248ed0e, 0x825ec29f, 0x8eb7b865, 0x20b2fb74, 0x3523f471, 0xfcaffae6, 0xeb7f2f86, 
    0x08fd4fe2, 0x48a179d7, 0xdeb668f2, 0x5f741462, 0x2318a92c, 0x2bfd2b69, 0xe47fd583, 0x00ff7b31, 0xe87f125f, 0xbcb3aa46, 0xff453653, 0xc87f0800, 
    0x00ff67d1, 0xd000ff03, 0xbc3abd1a, 0xf21fc2c7, 0x00ff5934, 0xf400ffc0, 0xaf4eaf06, 0x3de7ae3e, 0xd1d5886f, 0x54f56874, 0xc15b92ba, 0x86b21d6b, 
    0xe0ee3166, 0x537adce7, 0xfb179d75, 0x25f2ec27, 0x72c15cca, 0x5791a3a5, 0xfc767a6e, 0x3ff86a45, 0xb3d5631f, 0x92476e6e, 0xcc19b9bf, 0x3d8e7b9f, 
    0x8528fe69, 0xfb34d126, 0x66c9b3ef, 0x6a917cea, 0x06c000ff, 0xfca01f7b, 0xb9caa508, 0xc9552e6e, 0x12aa9473, 0xf77fad7f, 0x12aa5f8d, 0x4dfd23f1, 
    0x26fee074, 0xd829b714, 0x9fe82ddf, 0x3bc15008, 0x927372c2, 0xf188ebbd, 0x378cfc47, 0xfd0ff05f, 0xe1495700, 0xed9b879b, 0xf778e141, 0xeb7c73f9, 
    0x0c97e58d, 0x2695d8c3, 0x7f14bfb9, 0xff75c3c8, 0x00ff0000, 0x557405d0, 0x42678277, 0x0ff0d1dc, 0xff2687fc, 0xff66af00, 0xbd96d000, 0xc0fbbc06, 
    0x9b1cf23f, 0xff9bbdfe, 0xf45a4200, 0x7caaf31a, 0x885f3d47, 0x8fb4d0d2, 0x6bf3abed, 0x8c38f9e7, 0xba9bedbe, 0x3d32c611, 0x87dfe56a, 0xe6d1a22d, 
    0x5535add4, 0x054848bb, 0x92bc2d56, 0x4dbdaf07, 0x0ef96fe0, 0x6f70fdbf, 0x6fa1b5e6, 0x78ab6971, 0xda865357, 0x0ac7d8c0, 0x6e2b9ff9, 0xd7cd470e, 
    0xcc8fec1f, 0x23689250, 0x7571e214, 0xa1fad70d, 0x504df5fe, 0x1faa7fdd, 0xfe5055ef, 0x121f2222, 0xffeacd32, 0x1d0b6a00, 0xcc8031bf, 0xe0063d5b, 
    0xf2cf8f31, 0x9fc64bae, 0xfe8b18f2, 0x84fec7bd, 0xcc25b7d5, 0xa218e369, 0xbf3d3219, 0xf9007d96, 0x2500ff98, 0x7f1a4fac, 0xfa2f62c8, 0x13fa1ff7, 
    0xde51a357, 0x46ebd42f, 0x00ff8b66, 0xfa0fcb21, 0x00ff8ff9, 0x55eb1542, 0x9556fae4, 0x64caa87f, 0xbcf3b7b1, 0x7ae35286, 0xa9d333ae, 0xfdbd35f6, 
    0x00ffaf93, 0x00ff2bd0, 0x6bfc1326, 0xee4d9acf, 0xf7265167, 0x5b0d1a3d, 0x10b7b651, 0x51347b41, 0xc851e10c, 0x709d6ac6, 0xff3ad9bf, 0xbf02fd00, 
    0xc63f61f2, 0x7f9dec8f, 0xf95f81fe, 0x51e39f30, 0xc967e6cb, 0x1fb775e6, 0xfef0dbeb, 0x85a05d55, 0x42a2858c, 0x91af5d65, 0xfca187f7, 0x46e772cd, 
    0xf6cfc9d7, 0x274cfe5f, 0x627fd2f8, 0xf400ffeb, 0xc900ff0b, 0x1a00ff84, 0xa87885ef, 0x4b9a6ca4, 0x5455ac73, 0x5500aa50, 0x15760018, 0xfcaf9ae6, 
    0xeb7f2f86, 0x08fd4fe2, 0xf5d2e1d6, 0x6f3a48b0, 0xa79bfe23, 0xa52ed6f8, 0xc8d85ea7, 0x2b0fee1e, 0x6f542cce, 0x875e9f0d, 0x4e5651dc, 0xbad0624b, 
    0x2c87fc2f, 0x3fe6eb3f, 0xad5708fd, 0x9a699557, 0xa0a8a51e, 0x13b4b4b9, 0x6c6d92c4, 0xc148aeba, 0x56dc27c7, 0xfa23fcb7, 0xa200fdbf, 0xb1bf00ff, 
    0x6fd21cd7, 0x49892a73, 0x86757aee, 0x70e9a8b9, 0x3e7756b4, 0x236e3352, 0xe24fb662, 0xc5a5aa3d, 0x0f57b7c4, 0x595eee3c, 0x738f590e, 0x00ff795e, 
    0xffaffe08, 0xbf284000, 0x7f74ecef, 0xffab3fc2, 0x2f0ad000, 0x471dfbfb, 0x2f9f992f, 0xbab9634e, 0x3f5400ff, 0x122faade, 0xaeb3d148, 0x79b96d4c, 
    0xf24770e8, 0xe133b926, 0x348e5ced, 0xb5fd8738, 0xbf69fc8f, 0x1feb8ef0, 0xfe8f04f4, 0x35fec7fe, 0x61ac46d7, 0x1b69561e, 0x749d6b25, 0x562aa450, 
    0xcc2cc035, 0xe424cf79, 0xdbbca6fe, 0x9000ff55, 0x7cfdefc5, 0xa100ff49, 0x037dda1a, 0xd1964156, 0xbafe0363, 0x9535fec7, 0xf61769a8, 0x9b8bf629, 
    0xf86e0c61, 0x9c3c7518, 0xaa7d709c, 0xe8783ee7, 0x2d5634b4, 0x46fe4378, 0x1ff83f8b, 0xe9d580fe, 0x0f9ae7d5, 0xe339f586, 0x9eb45583, 0xd0760704, 
    0xd5616564, 0xf53e454f, 0xe297fdbd, 0x8bfcf93f, 0xa40200ff, 0x6be200ff, 0x736f768a, 0x736f961a, 0x8b35d3b3, 0x6cc820cd, 0x80cb54dd, 0x9f1e94db, 
    0xa36ebafe, 0xb36adeaa, 0xef72b72c, 0x0ca0302a, 0x1d57f801, 0x3fe297fd, 0xff8bfcf9, 0xffa40200, 0xfe68e200, 0xfc1ff1cb, 0x00ff45fe, 0xf17f5281, 
    0xd7d23635, 0xe75ada22, 0x11d7594b, 0x6d6cbeac, 0x3895af9d, 0xf53e3838, 0xe297fd97, 0x8bfcf93f, 0xa40200ff, 0x6ae200ff, 0x84f8a233, 0x0fd77e92, 
    0x27f3f43f, 0x5b1300ff, 0xb7699cd0, 0x1e2d5476, 0xb01694a6, 0x5dca63db, 0x1c628db8, 0x70aef293, 0x275c533f, 0x61e43f8a, 0x8000ffba, 0xba02e87f, 
    0x104fec8f, 0xdccf00ff, 0x2713f83f, 0x581300ff, 0xb587e73a, 0xfd3d611b, 0x5db8d0d4, 0xccc8b6bb, 0x401da0c7, 0x8d5489ae, 0x469b6845, 0x3f19bd49, 
    0x39e47f80, 0x377bfd37, 0xe8b584fe, 0x1e69c135, 0x3892d515, 0x61eeadef, 0x86413c41, 0xb08de4d9, 0xbf2a7970, 0x00ff69a5, 0x00ff6b61, 0x00fffdf3, 
    0x857ff393, 0xeecd4e71, 0xbd9b3463, 0xd44ed7ce, 0x93bb74ae, 0x64c16a71, 0x7325572a, 0x6615f9c7, 0x9ac400ff, 0x6d6ea5a6, 0x260627ee, 0x06a8cafb, 
    0x0f5cf37b, 0xffbf16f6, 0xf9df3f00, 0x51f8373f, 0xffaf85fd, 0xfef7cf00, 0x15fecd4f, 0xda26573e, 0x5055e75a, 0x1faa7fdd, 0xfd3757ef, 0x00ffaf85, 
    0x4ffef7cf, 0x8d14fecd, 0x30cc6ba0, 0x7fe3476f, 0x7495fe31, 0x70a719ed, 0xe6de498a, 0xf361d9a7, 0x3fbfdd7c, 0x2767e699, 0x9fd96def, 0xe38ae7fb, 
    0x00ff69fc, 0xebbf8821, 0x4de87fdc, 0x8ef03f5b, 0xfaf3bfeb, 0x371bf8bf, 0xbf4b55f8, 0x9217eb05, 0xddea1e89, 0x3cbf5d88, 0xcafc39f2, 0xc2eb5cd7, 
    0x5337b251, 0x875f728f, 0xff10f39f, 0xfb5fb600, 0xc595763d, 0x00ff3cfc, 0xb2fd8798, 0xebd900ff, 0xfc19aeb4, 0x263e1546, 0x9e65283e, 0xbc311451, 
    0x45453792, 0x54c09f24, 0x8c7a69f2, 0x0b5b5e28, 0x9ad54194, 0x957e0016, 0xf2bfc277, 0x00ffd932, 0x09fadfbc, 0xed1ff6ae, 0x8f7bed4f, 0x7e3aca3b, 
    0xe20fdddf, 0x00ff07ce, 0xc238ad5f, 0x328770e8, 0x5274e5b9, 0xac6295b2, 0x83e02008, 0x32b392da, 0x4775e633, 0x6e14ec62, 0x24c749c6, 0xb9ce0fe0, 
    0xcb7f1c3f, 0xffb4fd8f, 0xa26bd900, 0x595b3ed6, 0xa914ed24, 0xaeba7f2b, 0xd780fe18, 0xf98fe33b, 0xb600ff71, 0x7a2dfb9f, 0xdc1ffef3, 0xf0d54476, 
    0xe680fc0f, 0x96af00ff, 0x56d000ff, 0x3ce67aba, 0x2000ff03, 0xe5ebbf39, 0xae15f4bf, 0xfca9bc9e, 0xc49fe64c, 0x00ffaec2, 0xf49f6a63, 0x00ffbb0d, 
    0x15fe0dbf, 0xff56bd4a, 0xed57fb00, 0xf261bfb6, 0xe9df8dbc, 0x3a32fd1b, 0x18a7197e, 0x358770dc, 0x68742ccf, 0x56a9a3dc, 0x30ac8253, 0x45d7a641, 
    0xbac675e3, 0x83d14218, 0xc0881b10, 0xf423cf73, 0xb573851f, 0x89d8592d, 0xdd103b2b, 0xef1faa7f, 0x17e32557, 0x28a2d157, 0x40da87c1, 0x06e439c8, 
    0xd6757e04, 0x1faa7fdd, 0xe21b57ef, 0x050d5a88, 0xd79bba11, 0x918bc17f, 0xa3d0ebfc, 0x96a213fc, 0x3f84f7c6, 0xffb357e4, 0x00ff8100, 0x555b6de8, 
    0xf90fe18b, 0x00ffec15, 0x1bfa7fe0, 0x4b70d556, 0x892f6176, 0x4a8f5b85, 0x648d65d4, 0x74ba4f8f, 0x85659561, 0xe2d82388, 0xdba557aa, 0x11febb7d, 
    0xedec4f3b, 0x23f269bf, 0xed18bfdb, 0xe3d4be9e, 0xe6118e1b, 0x4b7be63c, 0xc505529b, 0xd093b0bc, 0xf9738548, 0x7ee855d4, 0xc29b5929, 0x24425ca4, 
    0xb40b1bb8, 0x460e2163, 0xfca8d34f, 0x4a29cf6b, 0x1e27ac3c, 0x73ae6057, 0x24fee7c5, 0xcffd63b7, 0xa36b09fd, 0x64c64fae, 0x9c0c52f9, 0xfee31818, 
    0xe15b43da, 0x54a197f7, 0x457f23be, 0x1d9000ff, 0x477bfd87, 0x8aa000ff, 0x5fb454bb, 0x7fd801f9, 0xfa7fb4d7, 0xceb5ab08, 0x857b33f7, 0xbcb0b758, 
    0xd6f642bb, 0xe0a0cc93, 0x009671b4, 0xbb5e15fe, 0x740202cf, 0xf93a907b, 0xc8f71fe7, 0x617715a7, 0xc7ce3cc2, 0xaa8ffd1f, 0xdd86f90f, 0x86df00ff, 
    0xa60a00ff, 0x60040741, 0x26fdf48a, 0x8ab456df, 0x2319ed7f, 0x3106c8b9, 0xf531b313, 0xa507361f, 0x08a2ce79, 0x0973aed4, 0xf2b13287, 0x27a8e0ca, 
    0x4639c538, 0x95c3a9c8, 0x1445ad5c, 0x5f9c1954, 0x88f9cfc3, 0xfd2fdb7f, 0xe04abb9e, 0x6d7f0dfc, 0xb4eff665, 0x977fb34b, 0x3827e5b7, 0xaef5e9dd, 
    0x4d77fbb3, 0x9f9f00ff, 0xc2bf71fc, 0xc67c9ab4, 0x67e613b5, 0x98ebe145, 0x69db356d, 0xc41124ee, 0xdb63ee84, 0xadd235e5, 0x880f89ce, 0xd03a595f, 
    0x8ae5bf3b, 0xdbdddfc6, 0xd2ebefc9, 0x77fbe3bc, 0x9f00ff4d, 0xbf71fc9f, 0xdded8fc2, 0x7f7efe37, 0x00ffc6f1, 0xb6b4490a, 0xd64a5b14, 0x56ee2f36, 
    0xb9b850f3, 0xc8b2da55, 0x26a007cc, 0xf67fd6ab, 0x00ff9bee, 0xe3f83f3f, 0xdb1f857f, 0xfcfc6fba, 0x8de300ff, 0x643615fe, 0x21fe9959, 0xb2bbb9b7, 
    0x21d7de96, 0x83b863a4, 0x1d27008e, 0xe307907b, 0xff387e58, 0xfb1f9700, 0xb200ff69, 0xb32641d7, 0x8b1899a7, 0x1bf8e78e, 0xf1982bfc, 0xdfbde57d, 
    0x3789fcd8, 0x089edfed, 0xd7fa76c6, 0x3f7b2bab, 0xb989ebb8, 0x01f91fe0, 0x5f00ffcd, 0xa000ff2d, 0xc5f574ad, 0xb1573bf8, 0x6289f4d3, 0xccd591b9, 
    0x9d5880e5, 0xc0bddab8, 0xffbf953e, 0x932e0900, 0xe53d00ff, 0x79c000ff, 0xf39af83f, 0xcf319f24, 0xa167be38, 0xae8b5eab, 0x33eb5858, 0x7875485b, 
    0xfd8cfcad, 0x714e52d6, 0x958ee7d0, 0x92f0bfe4, 0xdef33fe9, 0x9307fc5f, 0xa38900ff, 0x275d12fe, 0xffcb7bfe, 0x7ff28000, 0xeb4634f1, 0x5ae946a0, 
    0x1de375c7, 0x6bf6d652, 0x3c595b7b, 0x1a82b3df, 0x389ea04e, 0xcd957ecf, 0x24fc5756, 0xf7fc4fba, 0x0100ff97, 0xe200ffe4, 0x8400ff68, 0x00ff4997, 
    0x00fff29e, 0xfc9f3ce0, 0xef76274d, 0x4e9a4b61, 0x7fdd2ff6, 0x57ef1faa, 0x2f11e213, 0xa61623fc, 0xce236376, 0x150cb71d, 0xf8b1192c, 0x74851f67, 
    0xd2231e57, 0xf20430de, 0x9f00ff75, 0x9af83f79, 0xaa537ce7, 0x91e95e5a, 0x33236fc7, 0x63108309, 0x7a6be365, 0xd45deb81, 0x6feaa8ac, 0x8b8e344d, 
    0x2bf21fc2, 0xc000ffd9, 0x36f400ff, 0x3ce7aaad, 0xf6e9a92d, 0x8ab51cfe, 0xa468eb7b, 0x9547f95d, 0xbb9d8f54, 0xdbdf5a13, 0x04fd575a, 0xef00ffec, 
    0x8d00fffa, 0xb33bc970, 0xcbcc2709, 0x1d2be8b5, 0x2be1a7a6, 0x21d4076b, 0xf2189a81, 0x1857024b, 0x2b3d323d, 0xb4b67fcc, 0xd909faaf, 0xf5df00ff, 
    0x3f1a00ff, 0xfaafb4b6, 0x00ffd909, 0x00fff5df, 0x746d711a, 0x871eb708, 0x69dedea4, 0x658637fa, 0x5dfc96d3, 0x2eb2f1ca, 0x67cb3118, 0xae19a0d3, 
    0x6d7fa90e, 0x13f45f69, 0xbf00ffb3, 0x7f34feeb, 0xf45f696d, 0x00ffb313, 0x34feebbf, 0x24d0b749, 0x6b17badc, 0x1b94f197, 0xddb827ac, 0xb70923f7, 
    0x673c771d, 0xebeff83f, 0x5adb7f5b, 0xec04fd57, 0xfaef00ff, 0x608d00ff, 0xb151a7f8, 0x922ed2b8, 0x5d79db0b, 0x555261b6, 0xf4657e62, 0x6a1db635, 
    0x49bad8ef, 0x2fda1bf3, 0x3fec80fc, 0xfd3fdaeb, 0xc7da5504, 0x366d75d2, 0x39ca1a3d, 0x75541b35, 0xb4328cb7, 0x472108ca, 0xffad6604, 0x5f696d00, 
    0xffb313f4, 0xfeebbf00, 0xe64e8335, 0x6b973b6d, 0xc54df0b7, 0xca455abc, 0x651c714d, 0xe00e38a6, 0xce2bba1f, 0xb4b600ff, 0xd909faaf, 0xf5df00ff, 
    0x3f1a00ff, 0xfaafb4b6, 0x00ffd909, 0x00fff5df, 0x3b6d711a, 0xdec52d8e, 0xdae8a4c7, 0x4ea09f66, 0x716b52f7, 0xb4910aca, 0x19f1a310, 0x5f53ae39, 
    0xd6528bbf, 0x1184ba67, 0x9114101b, 0xcd184082, 0x6d00ff60, 0x13f45f69, 0xbf00ffb3, 0x7f34feeb, 0xf45f696d, 0x00ffb313, 0x34feebbf, 0x43b2da36, 
    0x8b64b56d, 0xed2f55b4, 0x82fe2bad, 0xfdf77f76, 0xed8fc67f, 0x82fe2bad, 0xfdf77f76, 0xcca6c67f, 0xd9ff338b, 
};
};
} // namespace BluePrint
