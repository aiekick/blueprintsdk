#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <CircleCrop_vulkan.h>

namespace BluePrint
{
struct CircleCropFusionNode final : Node
{
    BP_NODE_WITH_NAME(CircleCropFusionNode, "CircleCrop Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    CircleCropFusionNode(BP* blueprint): Node(blueprint) { m_Name = "CircleCrop Transform"; }

    ~CircleCropFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::CircleCrop_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_backColor);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        ImPixel _backColor = m_backColor;
        if (ImGui::ColorEdit4("BackColor##CircleCrop", (float*)&_backColor, ImGuiColorEditFlags_NoLabel | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_AlphaBar))
        {
            m_backColor = _backColor; changed = true;
        } ImGui::SameLine(); ImGui::TextUnformatted("Back Color");
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_backcolor##CircleCrop")) { m_backColor = {0.0f, 0.0f, 0.0f, 1.0f}; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("backColor"))
        {
            auto& val = value["backColor"];
            if (val.is_vec4())
            {
                ImVec4 val4 = val.get<imgui_json::vec4>();
                m_backColor = ImPixel(val4.x, val4.y, val4.z, val4.w);
            }
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["backColor"] = imgui_json::vec4(ImVec4(m_backColor.r, m_backColor.g, m_backColor.b, m_backColor.a));
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf111"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    ImPixel m_backColor {0.0f, 0.0f, 0.0f, 1.0f};
    ImGui::CircleCrop_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 4534;
    const unsigned int logo_data[4536/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0x280aa08a, 0x280a80a2, 0xf1dd1aaa, 0xa7a9b4d3, 0x3626db46, 0x3dda7fc6, 0x7693c63f, 0x15fd0257, 0x5b7bf8cb, 0x7ed4b8be, 0xbb49a8cb, 0x79748fcd, 
    0x87fdbe50, 0xa8abfc71, 0x2b2919a5, 0xa2280aa0, 0xae290fa8, 0x5abac2eb, 0x74cbe9d9, 0x81fb3ce8, 0x9d7077bb, 0xf1d7e387, 0xde26aef6, 0x8ab9b916, 
    0xae342004, 0x24d31310, 0x1145bde2, 0x50444563, 0x4001a3aa, 0xb9d203c0, 0xe5ee4668, 0xa8a26831, 0x4ec7776b, 0x1b9da6d2, 0x19db986c, 0xf46800ff, 
    0xe91a00ff, 0x97e4ca6e, 0xc35faee8, 0xc6f5ddda, 0x425df6a3, 0x7b6cde4d, 0xf785caa3, 0xe58f3bec, 0xc928455d, 0x87015d49, 0x6f2dade2, 0x44bae634, 
    0xddb87d1e, 0xe34eb9bb, 0x7bf8ebf0, 0xaa5e0bd7, 0x2323b2e8, 0x826165a8, 0xe91164a4, 0x0b715d5e, 0x03cb5c5b, 0x28275a90, 0x7190e948, 0x67e3f55c, 
    0x141d9172, 0x24e35c51, 0xea96b7b7, 0xcc088274, 0xa8c23992, 0x9f555def, 0x9311a382, 0xcfc5727d, 0x0780c3f0, 0xbb3d47e2, 0x66153c0a, 0x89ef1982, 
    0x80f296cb, 0xf9131cf4, 0xb3557ee4, 0x3b1ddfad, 0x6d749a4a, 0x676c63b2, 0xfcd3a3fd, 0x389da66b, 0x4d48f3f2, 0x0a9ed798, 0x8d0dc68c, 0xc31f07cb, 
    0x883f0836, 0x6bec771c, 0x96b7b895, 0x788277d6, 0xc32172cc, 0x575ded29, 0xebbbb587, 0xbaec478d, 0xd8bc9b84, 0x0b9547f7, 0x1f77d8ef, 0xd91a8fca, 
    0xe00b86a1, 0xa2bce170, 0x7e24473d, 0x4c9d3f58, 0x681e17a3, 0x45d1c881, 0x56cf8015, 0xd22b8aa2, 0xf1912b20, 0xe5bdea85, 0xc8ce91bd, 0xef3179fe, 
    0xfed600ff, 0x7456d775, 0x6a11243a, 0x6519a9cf, 0x0dcf6792, 0x71fa0c8c, 0xd344c5e9, 0x391ab292, 0xb658473d, 0xbdb5539b, 0x9a588eb2, 0x00060300, 
    0x43c70364, 0xd45d91e9, 0xa4f0a432, 0xa8a39cb1, 0xa8417d60, 0x1d3e1d35, 0x4edbd04e, 0x82202958, 0x941e41bd, 0xb1451beb, 0x24d98eb3, 0x01c65877, 
    0x851f677c, 0xbbc5c528, 0x288a6281, 0x511404ad, 0xc8150045, 0x5ef5c2f8, 0xe7c8def2, 0x983c7f64, 0xeb00fff7, 0xabeb3a7f, 0x08121d3a, 0x8cd467b5, 
    0xe733c9b2, 0x7d06c686, 0xa2e2f438, 0x0d59c969, 0xaca39e1c, 0xdaa94d5b, 0x2c47d9de, 0x8301004d, 0xe3013200, 0xaec8f4a1, 0x785219ea, 0x51ce5852, 
    0xa03e30d4, 0x9f8e1ad4, 0x6d68a70e, 0x90142ca7, 0x8fa05e41, 0xa28d754a, 0x6cc7d9d8, 0x63ac3b92, 0x8f33be00, 0xe26294c2, 0x45b1c0dd, 0x3c825614, 
    0x8f754ccb, 0x6077b455, 0x2ca1b3aa, 0x871b004e, 0xe5b5e935, 0x6dbae935, 0xa0d3bfd8, 0x221304ba, 0x0004d802, 0xdfe708dd, 0xee41cd35, 0xe49a658a, 
    0xaf7a617c, 0x73646f79, 0x4c9e3fb2, 0xf500ff7b, 0xd5759dbf, 0x04890e9d, 0x46eab35a, 0xf3996459, 0x3e0363c3, 0x5b717a9c, 0x212b394d, 0x75d49323, 
    0x3bb5698b, 0xe528db5b, 0x3000a089, 0x3c400660, 0x15993e74, 0x4f2a43dd, 0xca194b0a, 0xd407863a, 0xd351831a, 0x0dedd4e1, 0x9282e5b4, 0x11d42b08, 
    0xb4b14ee9, 0xed381b5b, 0x8c754792, 0x71c61760, 0x5c8c52f8, 0x2b16b85b, 0x5937b5cc, 0x46b75b35, 0x903bad0c, 0xb811e4c0, 0xa9895ef3, 0x3a0d8b5d, 
    0x3140a27b, 0x48902ba1, 0x3d0ed02d, 0x59655ef1, 0xa0217b57, 0x982b8aa2, 0x19e17767, 0x530dddfc, 0x19993c6e, 0xc5bf9e33, 0xf47bfc9f, 0x5e18cfac, 
    0xd95bdeab, 0xe78fec1c, 0x00ff1e93, 0x59e76ffd, 0xd7d51cde, 0x3b6fbd4a, 0x2bc0443e, 0x3ad27de0, 0xe7cfe137, 0x95a65d5d, 0x6a93da66, 0xc3b55cd1, 
    0xca1d9cc9, 0x03e37654, 0x515d31b6, 0x4451f07c, 0xaca3b69c, 0xdaa94d5b, 0x2c47d9de, 0x8301004d, 0xe3013200, 0xadc8f4a1, 0x5e1400ff, 0x68e0f021, 
    0x64baf4c6, 0x7dd0b301, 0xe300ffec, 0xea68adbf, 0x96b796d6, 0xa2e4150f, 0xc8048128, 0x9fd32e58, 0x357ef953, 0x91b7eac2, 0xb6b561ce, 0xb5b54792, 
    0x9834b152, 0x7af264cb, 0x52f8610f, 0xfa9de095, 0x1445a18c, 0xafce3057, 0xfa8f13fe, 0x7fe47f87, 0xf88fc6fe, 0x1dea3f4e, 0xff9100ff, 0xe51afb00, 
    0xac7dad28, 0x57c78afb, 0xc70900ff, 0xf2bf43fd, 0x6300ff3f, 0x1f27fc47, 0x00ff0ef5, 0xfd00ffc8, 0xe494728d, 0x7937498a, 0x77b1cf68, 0x0f9cd136, 
    0xb547ed53, 0x3ab2709f, 0x3f4ef89f, 0x00ff1dea, 0xfb00ff91, 0x38e13f1a, 0x77a800ff, 0x00ff47fe, 0xa2946bec, 0xe13e6b8f, 0x00ffab63, 0xa1fee384, 
    0xff1ff9df, 0xfea3b100, 0x87fa8f13, 0xfe7fe47f, 0x284ab9c6, 0x16eeb3f6, 0x4ef8bf3a, 0xff1dea3f, 0x00ff9100, 0xe13f1afb, 0xa800ff38, 0xff47fe77, 
    0x946bec00, 0x3e6b8fa2, 0xffab63e1, 0xfee38400, 0x1ff9dfa1, 0xa3b100ff, 0xfa8f13fe, 0x7fe47f87, 0x4ab9c6fe, 0xeeb3f628, 0xf8bf3a16, 0x1dea3f4e, 
    0xff9100ff, 0x3f1afb00, 0x00ff38e1, 0x47fe77a8, 0x6bec00ff, 0x6b8fa294, 0xab63e13e, 0xe38400ff, 0xf9dfa1fe, 0xb100ff1f, 0x8f13fea3, 0xe47f87fa, 
    0xb9c6fe7f, 0xb3f6284a, 0xd70a16ee, 0x2e417cd1, 0xe445928e, 0xbb73a189, 0x37a4ed6e, 0x0a7b70ae, 0x4db3a2c8, 0xab3374a7, 0xe38400ff, 0xf9dfa1fe, 
    0xb100ff1f, 0x8f13fea3, 0xe47f87fa, 0xb9c6fe7f, 0x6b4f2b4a, 0xd5b1e23e, 0x71c200ff, 0xef5000ff, 0x00ff8ffc, 0x00ffd1d8, 0x43fdc709, 0xff3ff2bf, 
    0xa55c6300, 0xf7597b14, 0xd7fa1a0b, 0x12d62588, 0x0c91bc38, 0xdd6d7728, 0xcef596b8, 0x14596307, 0xdbb65951, 0x455118bb, 0x582a8014, 0x776dee2e, 
    0x58e29e7d, 0x2def7d77, 0x8aebe7ca, 0x96008a8a, 0xad9bbb7b, 0x96b868bf, 0xcc77bf6d, 0x66fad872, 0x008aa2a2, 0x008aa228, 0x008aa228, 0x8ee4752b, 
    0xf176c2d7, 0x7c4f8040, 0xab23cce7, 0xc03f6205, 0x85b57e7e, 0xdadb2453, 0x12699e14, 0x51084138, 0x3cc92b41, 0xd6e78e0c, 0x5bc02eaa, 0xa5b374d6, 
    0x6e441c4f, 0xb8ad4412, 0xbe7b00ff, 0xce7acf3f, 0x999317ab, 0x717771dd, 0x3338aa70, 0x867d108c, 0xe955ede3, 0x02d0d74a, 0x01a4288a, 0x01501445, 
    0x0a66a942, 0x019c24a3, 0x60950045, 0xe42048ca, 0x2c80da11, 0xa74d36ea, 0x3eab3ddf, 0x38b940f6, 0xfa0755c7, 0x66566ad5, 0x59ec2e77, 0x7292e498, 
    0xf7a6a449, 0x298aa200, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 
    0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 
    0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x86e15300, 
    0x0892895b, 0x91657923, 0x96222282, 0x00706266, 0x9926a903, 0xd70b9e5b, 0x8bbff0e2, 0xed99356c, 0x762be2da, 0x01a1f160, 0x1232b28a, 0xce06dc33, 
    0x1d19e33b, 0xd1110368, 0x91a391e3, 0x19923a4a, 0x3b826058, 0x3e5b4911, 0xf121d72e, 0x752f8a27, 0xb14f7b7b, 0x645770c5, 0x54680739, 0xbb0ed80b, 
    0xebf7f873, 0x5100d458, 0x51001445, 0x57001445, 0xf836fca3, 0xdde26f5d, 0x565b7d3a, 0x250b9abb, 0x664b2125, 0xeab02351, 0x034090c4, 0x7d9231a6, 
    0x579ccf31, 0x2f045fd0, 0x3cf0a56d, 0x8fcaf1b6, 0xe6edb435, 0x77999fc5, 0x438f8c64, 0xd0c73ecf, 0x7cce23d0, 0x3f1de065, 0x58dfd24d, 0xcddde5f0, 
    0xd5ae95c5, 0x68ef8ebc, 0x85cd3292, 0x94014060, 0x90310692, 0xed047970, 0xfedbebe0, 0x4fc3f821, 0xa126f0ba, 0xb2341ba6, 0xe4c7ec9a, 0xc27c362a, 
    0x403723b2, 0xff79003a, 0x215e1100, 0x51e82e4a, 0x280a5777, 0x454199a2, 0x45015014, 0x95bd3515, 0xb2efe6dd, 0xcc3ecdda, 0x2da3f26e, 0x28cef48c, 
    0x6b2a1a02, 0x3dbb2b8b, 0x9ab56abf, 0xe6dbf90d, 0xeb3857c6, 0x0034d48c, 0x00144551, 0xf86d4551, 0x6b13c37f, 0x9e37c9b1, 0xed8ce02d, 0x6671b7df, 
    0x1d19e3e0, 0x13f25f8f, 0xd2266e69, 0x15256657, 0xc200ffd9, 0xa800ffbc, 0xff4bfeaf, 0x7f54f600, 0x00ffbcc2, 0x4bfeafa8, 0x55f600ff, 0xda23f13c, 
    0x51c6b947, 0x2bfc9f5d, 0xff8afacf, 0xffbfe400, 0xfc476500, 0x8afacf2b, 0xbfe400ff, 0x476500ff, 0x47da433c, 0x5b51c6b9, 0xc4f0207e, 0xcd7114da, 
    0x24888be7, 0xdaed773b, 0xc638b955, 0xfcd7614f, 0xd3a44a9c, 0x57d3b4d8, 0x7f764541, 0xea3faff0, 0x9200ff2b, 0x95fd00ff, 0x3faff01f, 0x00ff2bea, 
    0xfd00ff92, 0x483c4f95, 0x71ee91f6, 0xff675794, 0xfef30a00, 0x2ff9bfa2, 0x51d900ff, 0xf30a00ff, 0xf9bfa2fe, 0xd900ff2f, 0xf610cf51, 0x9471ee91, 
    0x00ff6757, 0xa2fef30a, 0xff2ff9bf, 0xff51d900, 0xfef30a00, 0x2ff9bfa2, 0x51d900ff, 0x91f610cf, 0x579471ee, 0x0a00ff67, 0xbfa2fef3, 0x00ff2ff9, 
    0x00ff51d9, 0xa2fef30a, 0xff2ff9bf, 0xcf51d900, 0xee91f610, 0x67579471, 0xf30a00ff, 0xf9bfa2fe, 0xd900ff2f, 0x0a00ff51, 0xbfa2fef3, 0x00ff2ff9, 
    0x10cf51d9, 0x71ee91f6, 0x53c36695, 0xdaa934d4, 0xe6fa3a7d, 0x865d56ca, 0x365a794b, 0x9571902b, 0xc7818c23, 0xf05f75b5, 0x2bea3faf, 0xff9200ff, 
    0x1f95fd00, 0xea3faff0, 0x9200ff2b, 0x95fd00ff, 0x690ff11c, 0x7f2be71e, 0xac1aeaa9, 0x7da33eeb, 0xae2a7b73, 0xadc425c1, 0x38c90523, 0x49c613cb, 
    0x57abdee3, 0x0a00ff67, 0xbfa2fef3, 0x00ff2ff9, 0x00ff51d9, 0xa2fef30a, 0xff2ff9bf, 0xcf51d900, 0xee91f610, 0x67579471, 0xf30a00ff, 0xf9bfa2fe, 
    0xd900ff2f, 0x0a00ff51, 0xbfa2fef3, 0x00ff2ff9, 0x10cf51d9, 0x71ee91f6, 0x59455194, 0x6de1b7a1, 0x41ad350d, 0x9afdfcbc, 0x0e401a00, 0x7dd11337, 
    0x1e797046, 0xb15eb39d, 0xf27678a5, 0x00ffd0ee, 0x91275966, 0x85da151b, 0xd3eb2910, 0x3fb9d623, 0x1ef95b04, 0xee37491d, 0x3169e5f3, 0x1cfe6d8c, 
    0xfedcfd7b, 0x049eeb35, 0x20f7e804, 0xc739131c, 0x172bf2fd, 0x3bc74aef, 0x7266e7f7, 0xd50f7ed7, 0xe7d6dd9e, 0x7ec4124c, 0x0f8e12f2, 0xaf39997e, 
    0x8456f120, 0xa2a026ba, 0x9c67df10, 0x95c74016, 0xbcbef220, 0x7b7d7264, 0xd29bbee2, 0x3e3df56c, 0xf4fada29, 0x440192de, 0xcf3d461d, 0xc4cf78ad, 
    0x342e798b, 0x43a5c9fb, 0xe775c503, 0x92e98818, 0xfff13f46, 0x5c9ad200, 0x462e0dad, 0xa22fcfbc, 0x70532b8a, 0xacd25caf, 0x5ba59b46, 0x89018059, 
    0x90a46d00, 0x9f11ab5b, 0x76794d52, 0xb3268992, 0x1d8a1c65, 0xca30e21a, 0xc38220c3, 0x2bd72b82, 0xcfa1af1a, 0xaf82ec59, 0x8e7a68d8, 0x674b0ba9, 
    0xb6a2e66d, 0xe0aa77d2, 0xa8de27fe, 0x40e07957, 0x01728f4e, 0x7f9c33c1, 0x8ab322df, 0x229cb1bb, 0x6aceeca4, 0x706b0b5f, 0x6cb076a1, 0x585dbb0e, 
    0x41d640fe, 0x82111c04, 0x9bf4d32b, 0x8a4f4f3d, 0x37bdbe76, 0x075180a4, 0xeb738f51, 0x99a8735e, 0xd272a50e, 0x957661c4, 0x877fc698, 0x28a73827, 
    0x51700ed9, 0x5bf53257, 0x5769a911, 0x65026436, 0x20711742, 0xe3a4ea06, 0x475e81d0, 0x475ecf5e, 0xac4722ab, 0x841ac7de, 0x2a90b845, 0x3100c0a8, 
    0x4fba0ae0, 0xe85e74a1, 0xa228caf5, 0xbf0a30b1, 0x3aeaa161, 0x9d2d2da4, 0xdb8a9ab7, 0x83abde49, 0xa17a9ff8, 0x0181e75d, 0x07c83d3a, 0xff71ce04, 
    0xa88a7c00, 0x0817bbab, 0x9a333ba9, 0xdcdac297, 0x1bac5d28, 0x56d7ae03, 0x9035903f, 0x60040741, 0x26fdf48a, 0xe2d353cf, 0x4dafaf9d, 0x411420e9, 
    0xfadc63d4, 0x26ea9cd7, 0xb45ca943, 0xa55d18b1, 0xe19f3166, 0xca29cec9, 0x149c4336, 0x51d4ca55, 0x51984145, 0x55001445, 0x510f0dfb, 0x6c6921d5, 
    0x56d4bced, 0x5cf54eda, 0xd5fbc41f, 0x083cef0a, 0x40eed109, 0x8f732638, 0x4555e4fb, 0x45b8d85d, 0xd49cd949, 0xe1d616be, 0xd860ed42, 0xb1ba761d, 
    0x82ac81fc, 0x04233808, 0x36e9a757, 0x149f9e7a, 0x6f7a7ded, 0x0ea20049, 0xd6e71ea3, 0x3251e7bc, 0xa5e54a1d, 0x2bedc288, 0x00ff8c31, 0x4e714e0e, 
    0xe01cb251, 0xa256aea2, 0xcf0c2a8a, 0x2b8aa218, 0x7f3befb0, 0x60465f00, 0xc4c8d3b9, 0x3fe5bc81, 0x3f0504de, 0xede70796, 0x9be0cf5e, 0x8bb4788b, 
    0x38e29a94, 0x1d704ccb, 0x57743fc0, 0x33d7b6cc, 0xc5a5dc59, 0x633986bc, 0xab1d5639, 0xfcf1b1b3, 0x0b352246, 0x8d0e1247, 0xaf1b826f, 0xdced7862, 
    0x8b9315fe, 0x7131ba52, 0xf6c85c6a, 0xd34c1bcd, 0xeade09f4, 0x41396e4d, 0x14823652, 0x3527237e, 0xb5179fe4, 0x52476ddb, 0xf3532058, 0x832797b8, 
    0xfea002b4, 0xef31fd3c, 0x3fded759, 0x9f064488, 0xd543e668, 0xf40230ae, 0xfb3d0fec, 0xcbb8c68f, 0x2eaf999b, 0x43e2e25e, 0xb31cb224, 0x9fe2f41e, 
    0xd63ec561, 0x2b8aa223, 0x5b4b5243, 0x86bbb487, 0xc20b30e6, 0xa11beaea, 0xf69ae720, 0x35927424, 0x8c0e3692, 0x90535601, 0x780dee41, 0x832f7acd, 
    0xd2be7475, 0x1f47ce96, 0x761bb568, 0xf74196e7, 0xa7db314e, 0xca5acfe1, 0x35e6d2a2, 0x2a3a9796, 0x7113fced, 0x7291166f, 0x19475c93, 0xb8038e69, 
    0xe28aee07, 0xeca2ac28, 0x721961ee, 0x8de69dbb, 0x04fa69a6, 0xb72675ef, 0x1ba9a01c, 0x113f0a41, 0x35e59a93, 0x2db5f8fb, 0x41a87b66, 0x4901b111, 
    0x8c012418, 0x391475d6, 0xca0d595d, 0xee08c9ea, 0x48d2c691, 0x2c4111c1, 0x1d0070cc, 0xba1dafc9, 0xb9bb7bb8, 0x3c0064ae, 0x7ac1cece, 0xaf784e02, 
    0xae96f141, 0x59533a96, 0x17ede3c6, 0xf2dc6e43, 0xc6f17ea8, 0x78fcf43b, 0x5a755ee9, 0xda5c5ad3, 0xb3e7d28a, 0x811545d1, 0xf8db15cc, 0x2ddee226, 
    0xb826e522, 0x1cd3328e, 0xdd0f7007, 0x5551c415, 0xa3726717, 0xbc73572e, 0x3fcdb4d1, 0xa4ee9d40, 0x1594e3d6, 0x47216823, 0x5c7332e2, 0x167fbfa6, 
    0x75cfaca5, 0x20362208, 0x80042329, 0xa2ce9a31, 0x21ab2b87, 0x20595db9, 0x482a8aa2, 0x80a2280a, 0x13fced0a, 0x91166f71, 0x475c9372, 0x038e6919, 
    0x8aee07b8, 0x8baa28e2, 0x9751b9b3, 0x68deb92b, 0xa09f66da, 0x6b52f74e, 0x910aca71, 0xf1a310b4, 0x53ae3919, 0x528bbf5f, 0x84ba67d6, 0x14101b11, 
    0x18408291, 0x435167cd, 0xdc90d595, 0x5190acae, 0x1f241545, 0x0000d9ff, 
};
};
} // namespace BluePrint
