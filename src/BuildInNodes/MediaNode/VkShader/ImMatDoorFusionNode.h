#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <CopyTo_vulkan.h>
#include <Crop_vulkan.h>

namespace BluePrint
{
struct DoorFusionNode final : Node
{
    BP_NODE_WITH_NAME(DoorFusionNode, "Door Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Move")
    DoorFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Door Transform"; }

    ~DoorFusionNode()
    {
        if (m_crop) { delete m_crop; m_crop = nullptr; }
        if (m_copy) { delete m_copy; m_copy = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        auto percentage = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_crop || m_device != gpu)
            {
                if (m_crop) { delete m_crop; m_crop = nullptr; }
                m_crop = new ImGui::Crop_vulkan(gpu);
            }
            if (!m_copy || m_device != gpu)
            {
                if (m_copy) { delete m_copy; m_copy = nullptr; }
                m_copy = new ImGui::CopyTo_vulkan(gpu);
            }
            if (!m_crop || !m_copy)
            {
                return {};
            }
            m_device = gpu;
            double node_time = 0;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            ImGui::VkMat first_half; first_half.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            ImGui::VkMat second_half; second_half.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            if (m_bOpen)
            {
                node_time += m_copy->copyTo(mat_second, im_RGB, 0, 0);
                if (m_bHorizon)
                {
                    node_time += m_crop->crop(mat_first, first_half, 0, 0, mat_first.w / 2, mat_first.h);
                    node_time += m_crop->crop(mat_first, second_half, mat_first.w / 2, 0, mat_first.w / 2, mat_first.h);
                    int x1 = - percentage * first_half.w;
                    node_time += m_copy->copyTo(first_half, im_RGB, x1, 0);
                    int x2 = (percentage + 1.0) * second_half.w;
                    node_time += m_copy->copyTo(second_half, im_RGB, x2, 0);
                }
                else
                {
                    node_time += m_crop->crop(mat_first, first_half, 0, 0, mat_first.w, mat_first.h / 2);
                    node_time += m_crop->crop(mat_first, second_half, 0, mat_first.h / 2, mat_first.w, mat_first.h / 2);
                    int y1 = - percentage * first_half.h;
                    node_time += m_copy->copyTo(first_half, im_RGB, 0, y1);
                    int y2 = (percentage + 1.0) * second_half.h;
                    node_time += m_copy->copyTo(second_half, im_RGB, 0, y2);
                }
            }
            else
            {
                node_time += m_copy->copyTo(mat_first, im_RGB, 0, 0);
                if (m_bHorizon)
                {
                    node_time += m_crop->crop(mat_second, first_half, 0, 0, mat_second.w / 2, mat_second.h);
                    node_time += m_crop->crop(mat_second, second_half, mat_second.w / 2, 0, mat_second.w / 2, mat_second.h);
                    int x1 = - (1.0 - percentage) * first_half.w;
                    node_time += m_copy->copyTo(first_half, im_RGB, x1, 0);
                    int x2 = (2.0 - percentage) * second_half.w;
                    node_time += m_copy->copyTo(second_half, im_RGB, x2, 0);
                }
                else
                {
                    node_time += m_crop->crop(mat_second, first_half, 0, 0, mat_second.w, mat_second.h / 2);
                    node_time += m_crop->crop(mat_second, second_half, 0, mat_second.h / 2, mat_second.w, mat_second.h / 2);
                    int y1 = - (1.0 - percentage) * first_half.h;
                    node_time += m_copy->copyTo(first_half, im_RGB, 0, y1);
                    int y2 = (2.0 - percentage) * second_half.h;
                    node_time += m_copy->copyTo(second_half, im_RGB, 0, y2);
                }
            }
            m_NodeTimeMs = node_time;
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        int open = m_bOpen ? 0 : 1;
        int horizon = m_bHorizon ? 0 : 1;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(100, 8));
        ImGui::PushItemWidth(100);
        ImGui::BeginDisabled(!m_Enabled);
        ImGui::RadioButton("Open", &open, 0); ImGui::SameLine();
        ImGui::RadioButton("Close", &open, 1);
        if ((m_bOpen && open != 0) || (!m_bOpen && open != 1)) { m_bOpen = open == 0; changed = true; };
        ImGui::RadioButton("Horizon", &horizon, 0); ImGui::SameLine();
        ImGui::RadioButton("Vertical", &horizon, 1);
        if ((m_bHorizon && horizon != 0) || (!m_bHorizon && horizon != 1)) { m_bHorizon = horizon == 0; changed = true; };
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        return changed;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("open"))
        { 
            auto& val = value["open"];
            if (val.is_boolean())
                m_bOpen = val.get<imgui_json::boolean>();
        }
        if (value.contains("horizon"))
        { 
            auto& val = value["horizon"];
            if (val.is_boolean())
                m_bHorizon = val.get<imgui_json::boolean>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["open"] = imgui_json::boolean(m_bOpen);
        value["horizon"] = imgui_json::boolean(m_bHorizon);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue8ea"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatInFirst   = { this, "In 1" };
    MatPin    m_MatInSecond   = { this, "In 2" };
    FloatPin  m_Pos = { this, "Pos" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    bool m_bOpen        {true};
    bool m_bHorizon     {true};
    ImGui::Crop_vulkan * m_crop   {nullptr};
    ImGui::CopyTo_vulkan * m_copy   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 6611;
    const unsigned int logo_data[6612/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xb2a22820, 0xc9a9493c, 0xc0e0e9a6, 
    0x809127fb, 0x3a708043, 0xe6f90f9e, 0x60577693, 0xff5cd16b, 0x6bf58600, 0x2daec9bb, 0xc733db2f, 0x53a80cf3, 0x0f60848e, 0x055de7a7, 0x5d49c928, 
    0x15455100, 0x45511440, 0xbf251500, 0x7ffcf5fa, 0x68514795, 0xf10f84da, 0x6ed34e03, 0x2962f672, 0xea45b9a4, 0x72d889d8, 0x0fda1839, 0xedaab306, 
    0x8bae2606, 0xdbeb1f37, 0x1d55fef0, 0x59837867, 0x4d213e58, 0x3d1a686b, 0x028b5d2a, 0x2e4ae838, 0xe6274f4e, 0xa3f57ecf, 0x084e8b4a, 0x4541b212, 
    0x0aa35614, 0x0a80a228, 0x7ffc69b3, 0x2fad5685, 0xeb589286, 0x7d92f873, 0xad3d334a, 0x0a619287, 0x2631da48, 0x3b6784ee, 0xc4e75a47, 0x64a20d7f, 
    0xbb56acae, 0xabc60ffe, 0xaf13bf54, 0x7deb34ed, 0xd1c3f322, 0x933c50bc, 0x4e60c82d, 0x5159bee2, 0x4f1d67f3, 0xab0caf4a, 0x1c2a293c, 0x7d60a8ab, 
    0xee77188d, 0xa2558428, 0xae288a3e, 0x288a8282, 0xdbae02a0, 0x5fa800ff, 0x5dd6f9c7, 0xd9d9caed, 0x23fd724d, 0xb5a77e52, 0xac0fdf76, 0xe147dd34, 
    0xabb3a6d5, 0x139b6740, 0x6506b234, 0x078c2c24, 0x0ad08100, 0x146bc5e4, 0x915c9c89, 0xa87fdcce, 0xd5f9c36f, 0x65bcea2a, 0x879fa46d, 0xa0af96da, 
    0x36572443, 0x495218cd, 0x07446624, 0x941f2486, 0x1d34e19a, 0x2e2db541, 0xca20a439, 0xdc87aca4, 0x4bb1fc77, 0x4579a40b, 0x341ad908, 0x16764551, 
    0x00455114, 0xfaebc515, 0x8e78328c, 0xc1b33221, 0xbd604068, 0xa07fea49, 0xacb42bfc, 0x83443bed, 0xe59ab94e, 0x66599625, 0x1e21cdfb, 0x67053db9, 
    0x8668b938, 0x62fb5b8e, 0x6412fedf, 0x48d66dd4, 0xa10472e2, 0x7af03af0, 0xba6be876, 0x5d7554eb, 0x8957df22, 0x769d9d23, 0x33264336, 0xc1ade6f4, 
    0x45029317, 0x85629fbd, 0x284edddc, 0xb85b5c84, 0x2b8aa20f, 0x51140541, 0x58770d40, 0x158e9dd1, 0xacf64946, 0xac5a873f, 0xbe20e227, 0xefcc80b8, 
    0x7188ec1c, 0xe09c088c, 0xb11503fe, 0x2d2f6c79, 0x1a69b624, 0xb2609035, 0x6afc3863, 0x3c9584d7, 0x9604792f, 0x8b98e68b, 0xde0fefb7, 0x1fe74825, 
    0x6db2c65a, 0xd90ba25f, 0xadc4cf1c, 0xf153d76a, 0x6a6fc923, 0x53c2b3d6, 0x1b682385, 0xee18a117, 0xadb9d333, 0x6fed3a9d, 0x546ef8b4, 0xf6c9f5fd, 
    0x5a00ff3d, 0xc334f1d2, 0x729717c4, 0xb44fa05c, 0xdb0986aa, 0x7e46060a, 0x69a69595, 0xc676e9b1, 0x746429de, 0xc76f58dc, 0x4aa5901f, 0xa0fb242d, 
    0x45b9e84e, 0x14e05614, 0x67004551, 0x60bf97eb, 0x7d9867d2, 0xd4a736f2, 0x03df5bf1, 0xf4ededee, 0x903f112f, 0x29167864, 0x0ec05624, 0x7f072631, 
    0x61bddb43, 0x5a44ba6a, 0x34c771bc, 0xce21a2d2, 0xbe4f8e10, 0x145e7545, 0xecf0e4d6, 0x046dc553, 0x5c842b72, 0x9c0b783e, 0x35d7fa74, 0xf6e4ec74, 
    0x4f46d206, 0xd9125fc5, 0x953d3aea, 0x6dcf69b3, 0xccf2cdbb, 0x6cb82b78, 0xc93f703d, 0x37c273ae, 0xfed268bf, 0xb797cdce, 0xd3fd736c, 0x95bffec8, 
    0xd7269e77, 0xcd3ed7e7, 0x7e1c43e7, 0xcf6cfc4e, 0xd2afc739, 0x120dfbb8, 0x96bc4edf, 0xfd2409e6, 0xc61973ee, 0xe278ced1, 0xa5ec0495, 0x1add4571, 
    0x75455154, 0x8aa2280c, 0x67bce600, 0xc5dae57b, 0x3b65bd66, 0xfa3fe89b, 0xbdca00ff, 0xdddde18f, 0xad0a5fbc, 0xbc80a22e, 0xf2294531, 0xd77603df, 
    0xa9d77360, 0x6dc2bc06, 0x598d0b12, 0x95651935, 0x531b8fa4, 0x871fa38d, 0x87ee5de3, 0x2baddbe2, 0x3bce8a49, 0xb1509d68, 0x92e7c40c, 0xbad7714d, 
    0x921ccc5c, 0x4b3c965a, 0x8f6b5be2, 0xedbcfa87, 0x30bcbda6, 0xf0585979, 0xa348b755, 0x78ad078e, 0x526f84d7, 0x457b4a2d, 0x964d1166, 0x8f5c378c, 
    0x5ee58feb, 0xba78aeb9, 0xa6d254ef, 0x63787bb3, 0x2bee3649, 0xffc0f09c, 0xaee04a00, 0x8d7b4b74, 0xcc473d52, 0x1f933992, 0xf5381873, 0x41a5f0e3, 
    0xb3a71b37, 0x349a6414, 0xed8aa2a8, 0x14455118, 0xb29f5500, 0x55fab77f, 0x2cb8ab0b, 0xe6e2daad, 0xc6352e4f, 0xfaf5045b, 0xe1675357, 0xb65057ed, 
    0x5f5b9b5b, 0x1bce2632, 0x1c9c51cc, 0x31b92674, 0x280b2735, 0x6cc9cd19, 0xfd93fd62, 0x57abd2bf, 0xbde1734b, 0x9a16d262, 0xa308266b, 0x602bab24, 
    0x23d7047e, 0x6adaa865, 0x9396b431, 0x07a78a79, 0xf10723e5, 0x72520fa3, 0x39089bba, 0x5134cb3d, 0x059a7545, 0x0e405114, 0x0bc73c8d, 0xc7ac669c, 
    0x6db8e56f, 0x52b5c7f9, 0xb508ee8e, 0x4c9e2d08, 0x2def364b, 0xc9c07970, 0x674b57fa, 0x5057ede1, 0x5b9b5bb6, 0xce26325f, 0x9c51cc1b, 0xb826741c, 
    0xa5263531, 0x65ac1dcb, 0x18d92b37, 0x8ef95bf2, 0xed337e5b, 0x2d4fa455, 0xae38e7ca, 0x7ac3e78e, 0x342da4c5, 0x46114cd6, 0xc0565649, 0x56ae09fc, 
    0xb5d1466d, 0xdf042c69, 0x290108e9, 0x3dc0f4b4, 0x0da3777a, 0xb25c6e52, 0xe520587a, 0x285a327b, 0x42cdbba2, 0x09a0288a, 0xcfcd8721, 0x557b8ccd, 
    0xb3f26198, 0xd53e67f3, 0x82bb4f57, 0x789b8b6b, 0x1b24dde4, 0xf9c1c57c, 0x41579c73, 0x57ede167, 0x9b5bb650, 0x26325f5b, 0x51cc1bce, 0x26741c9c, 
    0x4945dcbc, 0x8c2db8b9, 0x48dbe426, 0x371f9ac9, 0xed31361f, 0xca87a655, 0xfb9ccdc7, 0xe1734357, 0x16d262bd, 0x08266b9a, 0x2bab24a3, 0xd7047e60, 
    0x366aab35, 0xc75b3296, 0xd3963773, 0x27e51312, 0x9d4e8f27, 0x493d2c45, 0xa03728a9, 0x9834c941, 0xe9154551, 0x5014859b, 0x70920048, 0x9a005a07, 
    0x03317f3b, 0xaa7dc66f, 0xa0e569cc, 0x5f15e75c, 0xf686ba4d, 0x778b3bc2, 0x6be713df, 0x91e08c60, 0x965be9df, 0x75d51e7e, 0xb5b9650b, 0x6c22f3b5, 
    0x19c5bce1, 0x6b42c7c1, 0x7352abc9, 0xe7ea8e93, 0xb19b9c3c, 0x88792297, 0x56cd3857, 0x42cbdf92, 0x6a8ff3db, 0xdef0b9df, 0x4d0b69b1, 0x51049335, 
    0xb0955592, 0x076b023f, 0xca86ba52, 0x878b4bc2, 0x736312d9, 0x81649c60, 0x2a45ebdb, 0x76948493, 0x45b90857, 0x8e8a82d8, 0x81b9e309, 0xc6b78527, 
    0xa2de2ae3, 0xe858afa4, 0x80a2280a, 0xcc159f39, 0x9a1637f7, 0x95e62754, 0x1ff23783, 0xc3ebbdd6, 0x8337cb51, 0xf2243896, 0x472071a5, 0x70dce9fe, 
    0xd3a4e76b, 0x6ebd752f, 0x7b9ee9e6, 0xe4985325, 0xe838c868, 0x7bb5d331, 0xb3d680f6, 0x52ec3ff8, 0x4a0bc55d, 0xc32c21b2, 0xc679922b, 0xdcad826b, 
    0x730feaaf, 0x471dd24e, 0xfb66d24e, 0xcea8ad54, 0xd3575532, 0x5feb391d, 0x6800e939, 0x4f9b27be, 0x18a6f239, 0x1ff77b42, 0xe9be57d4, 0x19be6930, 
    0xd6257982, 0x7ce07012, 0xf43880a0, 0xf3354f50, 0x6aa1a9de, 0x5e907c1a, 0xf4357545, 0x849de3aa, 0xdc91e3b2, 0xee2b45f1, 0x3bb6c096, 0x24382a3a, 
    0x528ea0f3, 0x3ba84ba5, 0x6a8f6058, 0x28c0bb92, 0xcedfaba2, 0x4b33d6f6, 0xa9ba331a, 0x92a4aada, 0x0328707b, 0xd467c21a, 0x4324767c, 0x6535abfb, 
    0x48c700ff, 0x2bfda93f, 0x1c357cdd, 0x633978b3, 0x572a4f82, 0xee7f0412, 0xbc06c79d, 0x2d3ac21f, 0xea7157d4, 0x47244d13, 0x94810673, 0x6404e382, 
    0xd273eaf3, 0x6b40c7bd, 0xf61ffc59, 0x85e22e29, 0x961059a5, 0x3cc99561, 0x4ee635e3, 0x897df7fc, 0x4e237ffb, 0x4e471dd2, 0x54fb66d2, 0x32cea8ad, 
    0x1dd35755, 0x3c5feb39, 0xd226a6f8, 0xa80e4d7c, 0x02e78615, 0x00107b40, 0x77aff223, 0x7cd360d2, 0x4bf20433, 0xc0e124ac, 0x710041f9, 0x6b9ea0e8, 
    0xa571fcc5, 0xbe1a6b5c, 0x7543aaa3, 0xcd1f4921, 0x2069d38e, 0xd7733a70, 0xe9f46eaf, 0x8d9bdea6, 0x60658d6e, 0x414e19ea, 0xb2960619, 0xf22c3bfc, 
    0xcca51169, 0x5f244752, 0x49a50e21, 0x6a5fa703, 0x3b45afd4, 0x392a8cab, 0x797b5be6, 0x8d857326, 0xa4c21f4b, 0x3d154fac, 0xb505d3c1, 0xd3c832b4, 
    0xa1e5cd37, 0x6fcf5138, 0x959d94c2, 0xfc8177c0, 0x7fa1c6d9, 0x48bcfc2f, 0xfe33fcb8, 0x6f7ba53f, 0x6f96a386, 0x49702c07, 0x40e24ae5, 0xb8d3fd8f, 
    0xf88ed7e0, 0x4a974957, 0x724994b7, 0x08a179d2, 0xcf088c8c, 0xff3ec739, 0xde7aa500, 0xf8b3d680, 0x5d52ec3f, 0xb24a0bc5, 0x2bc32c21, 0x6bc67992, 
    0x8eaa69cc, 0x8cf86be6, 0x5187b4d3, 0xbe99b4d3, 0x336a2bd5, 0xf455958c, 0xd77a4ec7, 0x4fef7885, 0x3ec9e933, 0x965a12d6, 0x0112fbca, 0xcd5ee5cf, 
    0xf8a6c1a4, 0x97e40966, 0x81c34958, 0xe30082f2, 0xd73c41d1, 0xcace7896, 0x995e104f, 0x487bbba1, 0x0025e4dd, 0x70c4f0ce, 0xad9f1e79, 0x21c9ab38, 
    0x1a3d45f5, 0x54faedf7, 0x2be6e713, 0xde00ffb5, 0x5cbd1a1c, 0xee5285df, 0x1b9b7bca, 0x07546488, 0x14423972, 0xf7c1c191, 0xf44abae2, 0x4b1def60, 
    0x25f1ca0a, 0x79b4d8ef, 0xbf3c9c4a, 0xafc75fbb, 0xaed59ae9, 0xd736c45f, 0x6fb1ae5a, 0xac721c65, 0xd8a5f729, 0x9f7a824a, 0x6d13c543, 0xa4a34147, 
    0x6d0fc4f0, 0x9f38dbe1, 0x7d2c6def, 0x00ffc4b2, 0x0d8ff55a, 0x0ede2c47, 0xca93e058, 0x1f81c495, 0xc171a7fb, 0xedd12faf, 0x864acb5e, 0x76da49da, 
    0x86f1fe4c, 0x539fe409, 0xd049aff4, 0x077fd61a, 0xb84b8afd, 0x445669a1, 0x72659825, 0x79cd384f, 0x63b4494b, 0x769a8d0f, 0x763aea90, 0xa5da3793, 
    0x9271466d, 0xe998beaa, 0x3df25acf, 0xbaedc772, 0x999ccd55, 0x420fc052, 0x00ff2008, 0xa49b5e31, 0x66f8a6c1, 0x5897e409, 0xf281c349, 0xd1e30082, 
    0x9dd73c41, 0xb1369c78, 0x6682e91d, 0x6e1237b5, 0x37aa5e57, 0xad8ad803, 0x78cb11e5, 0xee838f9c, 0x634b5acb, 0xbedb4326, 0xff873e40, 0xe89aaf00, 
    0xb0b391ab, 0x473cd1bd, 0x98dbfa1f, 0x84791865, 0xbd3e0767, 0xd575cd79, 0x2dbf53e9, 0x1456439f, 0xfd8f4e51, 0x2abc7f6a, 0x86b8b2db, 0x57148dd6, 
    0xb5b75a95, 0xcdb196b6, 0x6705f339, 0x51148d56, 0xa5afecad, 0x299f10ee, 0x4f3a459d, 0xf1feaff5, 0x9daad7a6, 0xa290ced5, 0xfdd79a8a, 0x7600ff69, 
    0x8be472a6, 0xb8b29b90, 0xebf57fdb, 0x2a00fff8, 0xe51545bb, 0x25edab56, 0x97d21c7b, 0x2b55b833, 0xf8edf58f, 0x45bb2a7f, 0x39fb6a14, 0x7219c15e, 
    0x54d499bb, 0x47eb5fd7, 0x7a0db5fb, 0x543c97b0, 0xaeee948e, 0xed565114, 0xf71fd57f, 0xf6d46aaa, 0xa5b0e671, 0xb671552e, 0x55f8c79f, 0x2aaf288a, 
    0xe4e4f9a4, 0xdcdd4973, 0xf0dfbd2a, 0x8a62357e, 0x4a92cf29, 0x73671741, 0x75b78a3a, 0xbd7fa8fe, 0xa5d52b55, 0x9a47da53, 0xcc654cc7, 0x575114ae, 
    0x5400ffe3, 0x9a8aee9f, 0x4e927dd5, 0xcaa514d7, 0x42fddf36, 0xa4ce3ffe, 0xa5f28aa2, 0x7336692e, 0xa87077b7, 0x37d43fee, 0x4aeafce1, 0x64b98c28, 
    0x73672798, 0x27bf8a3a, 0x00ffa7fa, 0xf50ad574, 0xa9f6d568, 0x8ce858bb, 0xb5b282b9, 0x4d4b4e4d, 0x81b44c53, 0x09f7b4f6, 0xc90f70e6, 0xeb730cb8, 
    0x6bb5d29f, 0x8651878d, 0x4df1c6eb, 0x9820b32a, 0xb91e1045, 0x9c4c3fc0, 0x462badd3, 0x0e3df4c5, 0x46132dbb, 0xd0f0a5d1, 0x4cad6fd4, 0xd8d9818c, 
    0x2740023b, 0xaeb023b0, 0xc307bd36, 0x82afadf3, 0x4a88f7bc, 0x508ca4b1, 0xc5136cf4, 0xf5b57079, 0xdea4e939, 0x0b7d7ba5, 0x9fdebac3, 0x727cda2c, 
    0xde955440, 0x8c53be59, 0x573c09f2, 0xa38b5e0d, 0x8a7850ea, 0xecd7e2ca, 0x1810690f, 0x39c03726, 0x6b0e20f4, 0x16b6bf82, 0x2bdbf377, 0x5448116e, 
    0x261a5c1f, 0xa8439395, 0x13479395, 0x9f5dab65, 0xf769de13, 0xfe2e948d, 0x00062a48, 0x3c071d27, 0xaedd2a7f, 0xa43ac42b, 0x0b92f03f, 0x2591749b, 
    0x99a494b5, 0x766b1bc6, 0x86b26bfd, 0x96149e54, 0x0c759433, 0xea35a80f, 0x8dd59551, 0xedac0ffa, 0xe7925333, 0x4a3677c5, 0x731b82f9, 0xfd7de0f2, 
    0xbd9e93cb, 0x6eaf56f1, 0x6bcace56, 0x161ae996, 0x73b5afc7, 0x8eb804fe, 0x38f04a4d, 0x172a7163, 0x1919db2d, 0x26464dfd, 0x9789e55e, 0xbbe2cec2, 
    0xd146132d, 0xd4d0f0a5, 0x8c4cad6f, 0x3bd8d981, 0xb0274002, 0x36aeb023, 0xf3c307bd, 0xbc82afad, 0xb14a88f7, 0xf4508ca4, 0x79c5136c, 0x31f5b5d0, 
    0x957a93a6, 0x0e2ff4ed, 0xb37c7aeb, 0x01c9f169, 0x66795752, 0xc8334ef9, 0x355cf124, 0xa98f2e7a, 0x2b2be241, 0x3db05f8b, 0x986040a4, 0xd0e700df, 
    0x0aae3980, 0xdf59d8fe, 0xb8ad6ccf, 0x7d502145, 0x569a6870, 0x56a20e4d, 0x896f1c4d, 0x37bd6b35, 0xb101b35f, 0xc1bbe866, 0x10778251, 0x607ac679, 
    0x9a51cfd6, 0x7779bce7, 0x27bbfb6f, 0xacc2f347, 0x711bc3a8, 0x953f0892, 0xeff5f05e, 0x5c78b4db, 0xe5315eb6, 0xff47aebf, 0xe8155b00, 0xd8eee561, 
    0x340a3fda, 0xda38d65d, 0x04553847, 0xad0a7b92, 0x6d424de1, 0x9eb84f4b, 0x968bdd66, 0x6a031854, 0x7d1c48e1, 0xef8a876a, 0x34a4cb7e, 0x0eeef74b, 
    0xfeeff4c1, 0x82dfea7d, 0x00f48564, 0x2e0f2bb1, 0x764fae42, 0xa2fe24c0, 0x2c2d15a3, 0xe8844f4d, 0x34d1b22b, 0x0d5f1a6d, 0xd4fa460d, 0x9d1dc8c8, 
    0x0224b083, 0x0a3b027b, 0x7cd06be3, 0xf8da3a3f, 0x8478cf2b, 0xc5481aab, 0x3cc1460f, 0x7d2d1457, 0xdea4a94c, 0x0b7d7ba5, 0x9fdebac3, 0x727cda2c, 
    0xde955440, 0x8c53be59, 0x573c09f2, 0xa38b5e0d, 0x8a7850ea, 0xecd7e2ca, 0x1810690f, 0x39c03726, 0x6b0e20f4, 0x16b6bf82, 0x2bdbf377, 0x5448116e, 
    0x261a5c1f, 0xa8439395, 0x35479395, 0xcbbbebe2, 0xb227212d, 0x1b268e72, 0x5cd850c8, 0x537c5f1f, 0x7fb1ebf4, 0x3172c3a7, 0x07121499, 0xa7f5df63, 
    0xdeeea678, 0x746146d3, 0xdeccf18e, 0x828cc957, 0xa59fe741, 0xbd0bde73, 0x4cd614dd, 0x10f3a9dc, 0x00ff4e1f, 0x30bbdee7, 0xa5b1b2b2, 0xd6d9843f, 
    0xa59d8eef, 0xd9363a4d, 0xfe33b631, 0x35fee9d1, 0xf3caa5ad, 0x487336e9, 0x11489edb, 0x2519e398, 0x78c53541, 0xf25ef5c2, 0x64e7c8de, 0xf7983c7f, 
    0x7feb00ff, 0x24eced3a, 0x69ebb449, 0xbcb15262, 0xb0a7ca28, 0x15a36220, 0x5713bb2b, 0xcbae5864, 0x69b4d144, 0x1b35347c, 0x202353eb, 0xc00e7676, 
    0x08ec0990, 0xaf8d2bec, 0xebfcf041, 0x3dafe06b, 0x69ac12e2, 0x1b3d1423, 0xd05cf104, 0x9a22f5b5, 0xb757ea4d, 0xad3bbcd0, 0xa7cdf2e9, 0x490524c7, 
    0xe59be55d, 0x9320cf38, 0xe8d570c5, 0x07a53eba, 0x2daeac88, 0x91f6c07e, 0x7c638201, 0x00429f03, 0xfb2bb8e6, 0x3d7f6761, 0x14e1b6b2, 0xc1f54185, 
    0x345969a2, 0x3459893a, 0x2a2d6a67, 0x064d9769, 0xca85d57c, 0xdae66760, 0x3dd7fa71, 0x6d52ade1, 0xba45ce46, 0xf8c2d36d, 0x0f328063, 0x3fe2074e, 
    0x672fe90a, 0x891b6b5b, 0x44b112dc, 0x40ea40ce, 0xd13eaf19, 0xf1232875, 0x923bbc33, 0xed8ae9de, 0x3ff2c47e, 0xe81a3f5e, 0xd2c54ac3, 0xa8a49dd9, 
    0x39d08964, 0xe546ca42, 0x54c53dea, 0x7d7bb4d1, 0x9d819420, 0xb304c7fc, 0x5ea53fe3, 0xfa82b951, 0xb595559c, 0xf4b7c1da, 0x955de939, 0x5bfc0867, 
    0xa3252995, 0x2ffdad27, 0x555ab7c5, 0x6dc75982, 0x4312aa13, 0xe6e43931, 0x21af28b0, 0x9339b636, 0xb8a5636b, 0x2ca5cef1, 0x0c43914c, 0x506f8c24, 
    0xd74c1f49, 0xc5cecc36, 0x39669698, 0x9226f524, 0x706f1b8a, 0x1b736f72, 0xd4e1d356, 0x72da92e0, 0x15e44bc1, 0xa83d08ea, 0x1b5bb4b1, 0x4792ed38, 
    0x17608c75, 0x56f871c6, 0x62ee5a93, 0xf49cfadb, 0xb136ccaa, 0xf58a435f, 0xf8134ea9, 0x24633a77, 0x4b3d45f4, 0xd04e4d4f, 0x912c49db, 0x989d20a1, 
    0x456ec7c9, 0x232dd25b, 0xa22d85b1, 0x00d3c8ce, 0x7c9aa79e, 0x57acf951, 0x6635e338, 0x2da63c28, 0xa5633cbb, 0x27c17945, 0x4acea41e, 0xfdad25d6, 
    0x5ab7c52f, 0xc7598255, 0x12aa136d, 0xe4393143, 0xaf28b0e6, 0x30b63631, 0x968ead4d, 0x943ac7e3, 0x0c4532b1, 0xbd319230, 0x337d2441, 0x3b33db5c, 
    0x98596216, 0x9ad493e4, 0xbd6d284a, 0xcabdc9c1, 0x13b2c877, 0x26ab8c1b, 0x35c73d08, 0xf068a595, 0xc1220be9, 0x10b2ae2c, 0x3f387248, 0x60c9ad80, 
    0xec3658f3, 0x5a958e71, 0x0ba6fc58, 0xf49af19c, 0x2a0e4ee8, 0x24bc513d, 0x512f63ad, 0xeed460d1, 0x65799a61, 0x14753fc4, 0xf39ca78d, 0xff5a6ec5, 
    0x5a3faa00, 0xd53c2886, 0xe31cbb2d, 0x3f8a59a5, 0x3ce74a29, 0xcec4b3e6, 0x712bae1c, 0x87b59254, 0xe297fed6, 0xc12aaddb, 0x89b6e32c, 0x982109d5, 
    0x5873f29c, 0x6d025714, 0x5b9b626c, 0x8ec72d1d, 0x64622975, 0x2461188a, 0x48827a63, 0xb6b966fa, 0xc42c7666, 0x27c931b3, 0x509434a9, 0x93837bdb, 
    0x7fdd907b, 0x56ef1faa, 0xbc257a14, 0x516abb5a, 0xc4c822c9, 0xa78d41ee, 0x8ddf9e23, 0xe6c71274, 0x9ce35ca8, 0xf26069d5, 0xf3ec3694, 0x87df958e, 
    0x5e54399c, 0xade4d4e6, 0x121d2663, 0xd467b508, 0x33c9b28c, 0x06c686e7, 0xe2f4387d, 0x00ff08ba, 0xa2fb27d5, 0xfb27fba1, 0xa34ea57f, 0x18f4856a, 
    0x2115f1ac, 0xa9499424, 0xd682d624, 0xdbe297fe, 0x2cc12aad, 0xd589b6e3, 0x9c982109, 0x145873f2, 0x6c6d2257, 0x1d5b9b66, 0x758ec72d, 0x8a646229, 
    0x63246118, 0xfa48827a, 0x66b6b966, 0xb3c42c76, 0xa927c931, 0xdb509434, 0x7b93837b, 0x53fd938d, 0x6bba00ff, 0x4bf4d49f, 0xa668527d, 0x92234992, 
    0xe3d1ba2f, 0x74c5bd3e, 0x5f29372c, 0xec838a51, 0x95feed9f, 0x08a987d7, 0x539aa9c5, 0xa4945b92, 0x68d682bb, 0x336cd204, 0x04a7b14a, 0xc5418fe5, 
    0x7f15d76a, 0xc378df33, 0xfc88b34f, 0x8d2cd2b6, 0xf427c8f5, 0xd6aef303, 0x90572a96, 0xb482eeea, 0xaa3dfcac, 0x73cb16ea, 0x44e66b6b, 0x8a79c3d9, 
    0x848e8333, 0x1f7a6dd6, 0x6f96a386, 0x49702c07, 0x40e24ae5, 0xb8d3fd8f, 0x233cd7e0, 0xa4224476, 0xe742ceec, 0xa4c57ac3, 0x4cd6342d, 0x56494611, 
    0x09fcc056, 0xfbf4baac, 0x3b1d7548, 0x52ed9b49, 0xc938a3b6, 0x744c5f55, 0x8b79ade7, 0xc02a5629, 0x3d080e82, 0x396c9ca8, 0x56c246c5, 0xa58d7a3c, 
    0xbcc5eddd, 0x07966f13, 0x46da4522, 0xd7ef480e, 0x09576ca5, 0xbed8bf74, 0xf279f334, 0x2796d8ae, 0xe4cfa3fd, 0x65e15b71, 0x2d5526cb, 0x5ddad5d9, 
    0xb31675c0, 0x45fc7e12, 0xfbc114e6, 0xe93903b9, 0xf8c7155a, 0x0f35595a, 0x861aea12, 0x3123767f, 0x1f23d3af, 0xd8b5fea2, 0xcd256254, 0xe253933b, 
    0xf0b3d20a, 0x5ba8abf6, 0xafadcd2d, 0x0d671399, 0x0ece28e6, 0xb559133a, 0x8e1a7ee8, 0xb11cbc59, 0x2b9527c1, 0xf73f0289, 0x5983e34e, 0x846237c2, 
    0xc8999d54, 0x586ff85c, 0x9aa685b4, 0xc92882c9, 0x1fd8ca2a, 0x5e973581, 0xa30e699f, 0x7d3369a7, 0x67d456aa, 0xe9ab2a19, 0xaff59c8e, 0xc52a6531, 
    0xc1411058, 0x8d13b507, 0xd8a83887, 0xd4bfcb4a, 0xa2d4216d, 0xb36d92b2, 0x6da280ca, 0xfd9e8c3c, 0xaed41a3b, 0xad16c73b, 0xa4baf614, 0xd516df59, 
    0x9004833e, 0x83d23a7f, 0x4b41776a, 0x325d3ae2, 0x65b80bee, 0x47bc4930, 0x23b88d29, 0x5791310c, 0x44f09e2b, 0x19a14532, 0xcc333924, 0x00a60fd2, 
    0xd4d095fe, 0x649b7755, 0x5a61e2cf, 0xd51e7e56, 0xb9650b75, 0x22f3b5b5, 0xc5bce16c, 0x42c7c119, 0x0fbd366b, 0x37cb51c3, 0x24389683, 0x2071a5f2, 
    0xdce9fe47, 0x37426970, 0x9d548463, 0xf85cc899, 0x85b4586f, 0x82c99aa6, 0xca2ac928, 0x35811fd8, 0x699f5e97, 0x69a7a30e, 0x56aa7d33, 0x2a1967d4, 
    0x9c8ee9ab, 0x6531aff5, 0x1058c52a, 0xb507c141, 0x38878d13, 0xa34ad8a8, 0x69dbdfab, 0xd4358bd6, 0x85335abe, 0xe03c6907, 0xbd4adf9e, 0xb12cbe58, 
    0xea867efb, 0xf3265e32, 0x03e40e10, 0xd269eac7, 0x98584d6d, 0xa2da487c, 0x42322b8a, 0x3dfcacb4, 0xcb16eaaa, 0xe66b6b73, 0x79c3d944, 0x8e83338a, 
    0x7a6dd684, 0x96a3861f, 0x702c076f, 0xe24ae549, 0xd3fd8f40, 0xc2d5e0b8, 0x2ac26537, 0x2ee4cc4e, 0x5aac377c, 0x644dd342, 0x956414c1, 0xc00f6c65, 
    0x4fafcb9a, 0xd35187b4, 0xd5be99b4, 0x8c336a2b, 0xc7f45595, 0x98d77a4e, 0xac6295b2, 0x83e02008, 0xc3c689da, 0x256c549c, 0x66505114, 0x930e5a70, 
    0x1dab797b, 0xb525794a, 0x510cb865, 0xce208390, 0xed38ea48, 0x8f50ed5d, 0xbc7f6afd, 0xe275fd2a, 0xb5d1a2a2, 0xcdbbc25d, 0xf067ad01, 0xbba4d87f, 
    0x6495168a, 0x57865942, 0xd78cf324, 0x46734507, 0xb98c3356, 0x4c1ae859, 0x60866f1a, 0x8475499e, 0x281f389c, 0x143d0e20, 0xf770cd13, 0xa8792bf7, 
    0xedaa5c5c, 0x03666459, 0xe85513d0, 0xc3eacaa1, 0x15acae94, 0x408f78c2, 0x7a4f32bc, 0x9fdc7297, 0xda619939, 0x6e4f4049, 0x573b4e4f, 0xff245477, 
    0x00ff5a00, 0xc2e91aef, 0xcbb449c5, 0xe089b9a5, 0x037b1eed, 0x7067a9f6, 0xdce68826, 0x474e1ba9, 0x1eb89e27, 0xaaaaeb9d, 0x4febbf96, 0xa36eb5fb, 
    0xd9191511, 0x0ae25313, 0xb50634ef, 0x00ffc19f, 0x28ee9262, 0x0991555a, 0x935c1966, 0x1d5c33ce, 0x62658c15, 0x7a562e63, 0x9b069306, 0x922798e1, 
    0x0e27615d, 0x0308ca07, 0xf304458f, 0xcafd3d5c, 0x17176ade, 0x5956bb2a, 0x04f48019, 0x72287ad5, 0x2be5b0ba, 0x7e7305ab, 0xd527d127, 0xf31ddf27, 
    0x3c1082c6, 0x41ac128c, 0xa79f2727, 0x55d2d56e, 0xa3f5af4b, 0x0cdbdafd, 0x8e59aa94, 0xf055c49f, 0x5efa9cee, 0x72efd69c, 0x25bc1fd7, 0x30da1849, 
    0x4f9f1c38, 0x1b6ab5d6, 0xfd47f55f, 0xb2a29aea, 0x339146b5, 0x795798f8, 0xfeac35a0, 0x9714fb0f, 0xacd24271, 0xca304b88, 0x9a719ee4, 0x8ca8e8e0, 
    0x2b9711ac, 0x8349033d, 0x13ccf04d, 0x93b02ec9, 0x04e50387, 0x82a2c701, 0xfe1eae79, 0x0b356fe5, 0xab5d958b, 0x7ac08c2c, 0x14bd6a02, 0x72585d39, 
    0xb382d595, 0x7519fb35, 0x1b86140b, 0x2061b5b7, 0x480ee862, 0x8fe018c1, 0xeab4d25f, 0x43f5af1b, 0x2abaeafd, 0x3e1412f5, 0x14454d24, 0x77854456, 
    0xcf5a039a, 0xb100ffe0, 0x2d147749, 0xb384c82a, 0xe749ae0c, 0x8a0eae19, 0x46c5caa8, 0x0df4ac5c, 0xc3370d26, 0xba244f30, 0x0f1c4ec2, 0x1e071094, 
    0xb8e6098a, 0xbc95fb7b, 0x552e2ed4, 0x33b2ac76, 0xaa09e801, 0x75e550f4, 0x5657ca61, 0xa4a2280a, 0x00d9ff83, 
};
};
} // namespace BluePrint
