#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Door_vulkan.h>

namespace BluePrint
{
struct DoorFusionNode final : Node
{
    BP_NODE_WITH_NAME(DoorFusionNode, "Door Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Move")
    DoorFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Door Transform"; }

    ~DoorFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        auto progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Door_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            double node_time = 0;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_bOpen, m_bHorizon);
            m_NodeTimeMs = node_time;
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        int open = m_bOpen ? 0 : 1;
        int horizon = m_bHorizon ? 0 : 1;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(100, 8));
        ImGui::PushItemWidth(100);
        ImGui::BeginDisabled(!m_Enabled);
        ImGui::RadioButton("Open", &open, 0); ImGui::SameLine();
        ImGui::RadioButton("Close", &open, 1);
        if ((m_bOpen && open != 0) || (!m_bOpen && open != 1)) { m_bOpen = open == 0; changed = true; };
        ImGui::RadioButton("Horizon", &horizon, 0); ImGui::SameLine();
        ImGui::RadioButton("Vertical", &horizon, 1);
        if ((m_bHorizon && horizon != 0) || (!m_bHorizon && horizon != 1)) { m_bHorizon = horizon == 0; changed = true; };
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        return changed;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("open"))
        { 
            auto& val = value["open"];
            if (val.is_boolean())
                m_bOpen = val.get<imgui_json::boolean>();
        }
        if (value.contains("horizon"))
        { 
            auto& val = value["horizon"];
            if (val.is_boolean())
                m_bHorizon = val.get<imgui_json::boolean>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["open"] = imgui_json::boolean(m_bOpen);
        value["horizon"] = imgui_json::boolean(m_bHorizon);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue8ea"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatInFirst   = { this, "In 1" };
    MatPin    m_MatInSecond   = { this, "In 2" };
    FloatPin  m_Pos = { this, "Pos" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    bool m_bOpen        {true};
    bool m_bHorizon     {true};
    ImGui::Door_vulkan * m_fusion {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 4312;
    const unsigned int logo_data[4312/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0x280aa08a, 0x280a80a2, 0xf1dd1aaa, 0xa7a9b4d3, 0x3626db46, 0x3dda7fc6, 0x7693c63f, 0x15fd0257, 0x5b7bf8cb, 0x7ed4b8be, 0xbb49a8cb, 0x79748fcd, 
    0x87fdbe50, 0xa8abfc71, 0x2b2919a5, 0xa2280aa0, 0x288a02a8, 0x2a8a02a0, 0x747cb786, 0xd1692aed, 0xb18dc9b6, 0x4f8ff69f, 0x95dda4f1, 0x7245bfc0, 
    0xefd61efe, 0xb21f35ae, 0xf36e12ea, 0x541edd63, 0xdc61bf2f, 0x29ea2a7f, 0xe84a4a46, 0xaa288a02, 0x288aa200, 0xa18aa200, 0x3b1ddfad, 0x6d749a4a, 
    0x676c63b2, 0xfcd3a3fd, 0x70653769, 0xbf5cd12f, 0xebbbb587, 0xbaec478d, 0xc8bc9b84, 0x0b9547f7, 0x1f77d8ef, 0x518abaca, 0x00ba9292, 0x802a8aa2, 
    0x008aa228, 0x85f1912b, 0xbde5bdea, 0xfec8ce91, 0xffef3179, 0x75fed600, 0x3a7456d7, 0xcf6a1124, 0x926519a9, 0x8c0dcf67, 0xe971fa0c, 0x92d344c5, 
    0x3d391ab2, 0x9bb65847, 0xb2bdb553, 0x009a588e, 0x64000603, 0xe943c703, 0x32d45d91, 0xb1a4f0a4, 0x60a8a39c, 0x35a8417d, 0x4e1d3e1d, 0x584edbd0, 
    0xbd822029, 0xeb941e41, 0xb3b1451b, 0x7724d98e, 0x7c01c658, 0x28851f67, 0x81bbc5c5, 0xad288a62, 0x45511404, 0xf8c81500, 0xf25ef5c2, 0x64e7c8de, 
    0xf7983c7f, 0x7feb00ff, 0x3aabeb3a, 0xb508121d, 0xb28cd467, 0x86e733c9, 0x387d06c6, 0x69a2e2f4, 0x1c0d59c9, 0x5baca39e, 0xdedaa94d, 0x4d2c47d9, 
    0x00830100, 0xa1e30132, 0xeaaec8f4, 0x52785219, 0xd451ce58, 0xd4a03e30, 0x0e9f8e1a, 0xa76d68a7, 0x4190142c, 0x4a8fa05e, 0xd8a28d75, 0x926cc7d9, 
    0x0063ac3b, 0xc28f33be, 0xdde26294, 0x1445b1c0, 0x280a8256, 0xe40a80a2, 0x29a85dfc, 0xa8c882bb, 0x93e78f64, 0x00ff798e, 0xeb3a7feb, 0x121d3a2b, 
    0xd467b508, 0x33c9b28c, 0x06c686e7, 0xe2f4387d, 0x596d71a2, 0xa3ae1c0d, 0xa94ddbad, 0x4059de5a, 0x0620b4d1, 0x0e64a00c, 0xc8f4c198, 0x5219e2ae, 
    0xc8585278, 0x4819ea28, 0xa30635f4, 0xdaa9c3a7, 0x05cb691b, 0xa8571024, 0x639dd223, 0x7136b668, 0xeb8e24db, 0x8c2fc018, 0x18a5f0e3, 0xb1c0ddb4, 
    0x82561445, 0xa3b07717, 0xa2a4b077, 0x0b0b2a97, 0x3357d8bb, 0x21697de2, 0xc0c886ba, 0xf27c2292, 0xd8f36464, 0xbace1f7e, 0x4487ce5a, 0xf5592d82, 
    0x4cb22c23, 0x81b1e1f9, 0x383d4e9f, 0xac2e9ca8, 0x871a1881, 0xbf656d8a, 0xb1b2bab7, 0x0d809811, 0x74e040b9, 0x75a50fc6, 0xc4934ef1, 0x92824793, 
    0xc63e6528, 0x7c3a6aab, 0xb6a19d3a, 0x4152b09c, 0x3d827a05, 0x8b36d629, 0xb21d6763, 0x8cb1ee48, 0x3fcef802, 0x4d83510a, 0xbbb36cdc, 0xd8bb51d8, 
    0x725a5152, 0xa22858a1, 0x5114608a, 0xed689a4c, 0x6da579e1, 0x6396a2b1, 0xf40128e8, 0x5a1d3b55, 0x5b6751c7, 0x83c2fc49, 0x8f91362c, 0x49ca55cc, 
    0x1405b0a7, 0x8a024c51, 0x8a02a028, 0x904a9329, 0xdb4af342, 0x8e594063, 0x7d000a3a, 0x54cb5215, 0xd659d4b2, 0xa0306fd2, 0x318c0dcb, 0x49b78af9, 
    0xa200f634, 0x5180298a, 0xb4d1b44b, 0x2801bad2, 0x5969daa5, 0x88796119, 0x8f6510f9, 0x364017a5, 0xc9ac658a, 0x925b587a, 0xda4806e5, 0x36a9f347, 
    0x0990399a, 0x46d32e45, 0x09d045d3, 0xd1e54945, 0x487bd4e5, 0xd111998b, 0x34757952, 0xd0c47d5a, 0x59c4d1bc, 0x8e1cef13, 0x0b91f628, 0x51ab6895, 
    0x1b4c5c58, 0x689b85cb, 0x7ca8c0c9, 0xed513ba2, 0xa2231722, 0xf2e8f2a4, 0x0e91f6e8, 0xf5581e64, 0xb41ecba3, 0x68329acc, 0xb37097e5, 0x5a8fe51f, 
    0xebe9aaad, 0x719ba57b, 0xafb49170, 0x90e004b7, 0xa978fe39, 0xbe956bb2, 0xfcd55083, 0xd346d144, 0xc21041db, 0x8ee350ca, 0x897aa7e3, 0x8d6b25a9, 
    0xc2cb6223, 0xf0eaa04b, 0xb291d7c8, 0x035218c9, 0x5faf2775, 0xc3b3567c, 0x089ecab5, 0xba710d3d, 0x5ba985a6, 0x35a1fd5a, 0x081def29, 0xc1396dc2, 
    0x49d7e4f4, 0x75cddca6, 0xc22dc3a7, 0x07544cba, 0x8e1ca40e, 0x1494060f, 0xcbc0b693, 0xa3f558be, 0xccb41ecb, 0x4e6b329a, 0x99157759, 0x683d9437, 
    0x45ad87f2, 0xd6bcd1bc, 0x72a7ce5e, 0xa17cc96c, 0x48d756eb, 0x64d25187, 0x6744a589, 0xa8276f93, 0xbc9f35c0, 0xeadd0bd6, 0x96e4ba77, 0xf6d6f9d0, 
    0x8752d2e9, 0x3b1d771c, 0xba6694d2, 0x53df298e, 0x157cd3a9, 0x257c891e, 0x3739e692, 0xf5541b20, 0x8aefebf5, 0x9d6cd06c, 0x0c6197d5, 0xb9da537e, 
    0x574ddb4b, 0x5037b74e, 0xea76cddf, 0x1cc2f240, 0x9a1cf7e0, 0x27d4b3dc, 0xe28ab3bf, 0x652619e1, 0x8394d501, 0x4a43c791, 0x0ddb9e30, 0xbf85d6a6, 
    0xe5d17a28, 0x798b5a0f, 0xf6aa79a3, 0x66933b75, 0x1ec5f259, 0xda7ca858, 0xd9c7da3c, 0x2c47ee54, 0x5bb1bc89, 0x0d952efa, 0x3b3291fe, 0x6f9796aa, 
    0xcd15983e, 0xcb5eb579, 0x426dbc5a, 0xd8fc486b, 0x46e20421, 0x6e078e43, 0x9ae4e89d, 0xa9a7092e, 0x105e69d9, 0x2ccd443a, 0x2b3929f7, 0xdfd7ab80, 
    0x0d56f893, 0xe56e45dc, 0xb78d190f, 0x1efea19c, 0x6b49567a, 0xbb361ebd, 0xa65bfe8a, 0x846a791c, 0x39f57b70, 0x935543ab, 0x95bb5554, 0x0370371a, 
    0x2307292b, 0x498e868e, 0x9be4b0ed, 0xa358de44, 0x9b0f15cb, 0xb2479b47, 0x96cfdca9, 0x8da29d45, 0x68f3a3a2, 0x670f6bf3, 0x26593932, 0x84875dd1, 
    0xd1bb23ac, 0x048815ee, 0xee3f47cc, 0xdafce28a, 0xc735d0d1, 0xdcb5cf8f, 0x777221d1, 0x0274e0b2, 0x7a9a30aa, 0x4b4d539a, 0x7cd2b053, 0x79a67139, 
    0x0bdd5db2, 0x45e423b6, 0xc7c9efeb, 0xbe8a2b5e, 0xf9f31746, 0xc8981891, 0x877fc6c4, 0xada93827, 0xee45681c, 0x836b52d3, 0xae5abe8d, 0xe6641c3f, 
    0xdf6a5eaa, 0x792dd7da, 0x037893b1, 0x1878300c, 0x582be1a6, 0x33a44d73, 0xa868a368, 0xda3cdafc, 0x2e33678f, 0xa4a25556, 0xebf2e8f2, 0x3a91f6d2, 
    0x151d9139, 0x97479727, 0x7388b447, 0x4f2a3a22, 0x8f2e8f2e, 0x44e61069, 0x5d9e5474, 0xd21e5d1e, 0xe888cc21, 0x1e5d3eab, 0x88f5675d, 0xd48ace93, 
    0x8f2e9f55, 0x44ac8f2e, 0x8a5ad139, 0xe5d1e5b3, 0x8788f5d1, 0x56512b3a, 0xba3cba7c, 0xe710b13e, 0xf62a6a45, 0x7f5636ca, 0xf6895d5b, 0xf62a1a85, 
    0xf55136ca, 0xa13dd8b5, 0xb2bd8a46, 0x6d7d948d, 0x51680f76, 0xa36cafa2, 0x5d5b1f65, 0xb214da83, 0xf8abc968, 0x5b1f15a3, 0x692fca5f, 0xa3c950e4, 
    0x8ce2af26, 0xfcb5f551, 0x8a3ceda1, 0xd5643419, 0x3e8a51fc, 0x3d94bfb6, 0x264391a7, 0x8abf9a8c, 0xd7d64731, 0xf2b487f2, 0x948db21b, 0xe39ad1ec, 
    0xd89591e6, 0xf8d295dd, 0xd4b3406f, 0xb8e7c9b4, 0x85a47b87, 0x0646dc41, 0x9c6bec01, 0x081e77cd, 0x222d8eb9, 0xeb1f71e7, 0x04fcc789, 0xbd4dc255, 
    0x2deb294d, 0x89563a4a, 0x65226ba2, 0x8c4149b6, 0x2348920c, 0xb9e23b3d, 0x6d51ab8b, 0xb71b3477, 0x6e325279, 0x77c5c1f5, 0xad891f5a, 0xb4655975, 
    0x21da384d, 0xfcc44b42, 0x1a0c607e, 0x38cbb5e4, 0xad6935ac, 0x82f172e1, 0x7972920a, 0x3b29a719, 0x853f155d, 0xa3ec6634, 0x66343b65, 0x8d91e6b3, 
    0x528c62d8, 0x217653d1, 0x85675d31, 0x523b2d34, 0xf29e67d3, 0x9474ccdf, 0x60d83ba8, 0xb9c61e60, 0x0afcee4a, 0x926b74c1, 0x8fc7c479, 0x86ab08f8, 
    0xb29ed2ac, 0xd14e87d4, 0xa4ad33fc, 0xa80c67ab, 0xb324e3d1, 0xa9d33302, 0xf771b523, 0xf2dae276, 0x84db707b, 0xf56e3252, 0xbc6bc6c1, 0x35e875d0, 
    0x8fb46589, 0x50aa364d, 0x1f37f192, 0xb8060398, 0x3dc67afd, 0xda9e5837, 0x418a2c27, 0x234f8e05, 0xd796d33c, 0xa9dc4e45, 0x621437a3, 0xecce8a96, 
    0x8aa228c4, 0xf8d61540, 0x75d3444f, 0xef79362d, 0x49d7bc6d, 0x86bd834a, 0x45ec0106, 0xf8dd5572, 0xb946e314, 0x3c26ce38, 0x5c45c07f, 0x35a5d915, 
    0x4f336a79, 0xae2fbcd2, 0x6f65ab24, 0x321e6d2c, 0x3d23b04b, 0x573b923a, 0xb600771b, 0x36dc9ebc, 0x9b8c14e1, 0x9a7170bd, 0x7a1df4ee, 0x6d59621d, 
    0xaa0dd323, 0x4dbc2494, 0xc100e6c7, 0xb05e3fae, 0x27d64d8f, 0x22cb89b6, 0x92e34690, 0x54cd3332, 0x53d1b5d2, 0x6734954b, 0x91154551, 0x14455188, 
    0xe15b5700, 0xd44d173d, 0xbde7d9b4, 0x255df3b6, 0x18f60e2a, 0x15b10718, 0xe07757c9, 0xe41a8d53, 0xf19838e3, 0x150100ff, 0x94665770, 0x66d472d2, 
    0x5f78a59f, 0xca56495c, 0x3cda58de, 0x46609764, 0x7624757a, 0x01ee36ae, 0xb83d796d, 0x1929c26d, 0xe3e07a37, 0x3ae8dd35, 0xb2c43af4, 0x1ba647da, 
    0x78492855, 0x01cc8f9b, 0xbd7e5c83, 0xac9b1e61, 0x96136d4f, 0xc78d2045, 0x9a676424, 0xa26ba5a9, 0x682a97a6, 0x2b8aa2ce, 0x99bf1223, 0xd9479947, 
    0xfdf4fc4f, 0xff29fb28, 0xa59f9e00, 0x738fde76, 0xca3cc46b, 0x33eba5bd, 0x58c441e9, 0xe6bbed7d, 0xa53fc6ed, 0xff29fb51, 0xa59f9e00, 0xf33f651f, 
    0xcda7f4d3, 0xe2047545, 0xfed466b6, 0x229abe2d, 0x7a426381, 0xb122c930, 0x6224799a, 0x3bd2caf2, 0xa66e961c, 0xfea7ec93, 0x7d947e7a, 0xcf00ff94, 
    0x2a87d24f, 0x2837764f, 0x9479d8bd, 0x947d9479, 0x4fcf00ff, 0x9fb28fd2, 0x52fae9f9, 0xbce21ebd, 0xbed13749, 0xdf3fc993, 0x4ff228fd, 0x4a00fff7, 
    0x91fbd4c6, 0xb5be8bee, 0x5c127ff4, 0x303cd068, 0x7d0792c6, 0xe07876e7, 0xfe58e90f, 0x00fffe49, 0x7f9247e9, 0x5e53fabf, 0x9ac66ccd, 0x97a5335b, 
    0xa1835ac7, 0x27148654, 0xfd38b9f8, 0xe69a9e6b, 0x699e895b, 0xe74832a4, 0xd4d4cd2c, 0xfffe497e, 0x9247e900, 0x53fabf7f, 0x37760f6e, 0xef62f724, 
    0x92277da3, 0x51fabf7f, 0xfeef9fe4, 0xdca73695, 0x3493749f, 0xfe619366, 0xf70f1bf5, 0xb9473bab, 0xd99a0b3a, 0x714f7cd1, 0x103cdba2, 0xdf811cc1, 
    0xf49c2f79, 0x2e56fa03, 0x36eafdc3, 0x5653ef1f, 0x6da7315b, 0xe3c9d451, 0x849041dd, 0xf41881b6, 0x5a3f4e6e, 0x96b8e7e6, 0x679e77e6, 0xb39c232f, 
    0xd8a2e61e, 0xc346bd7f, 0x4f1beafd, 0xee2b3776, 0xa419cdc5, 0x46bd7fd8, 0x56eafdc3, 0x1d74728f, 0xe83d2645, 0x8548bdc7, 0xc4179dad, 0xb32d1ab7, 
    0xc8110cc1, 0xe492f71d, 0xd21fa0e7, 0x46ef71b1, 0xdb4ee83d, 0x8e6a3b0d, 0x6a1e4fa6, 0xb425840c, 0x72a3c708, 0x37d7fa71, 0xcedcf23c, 0xe4e5ccf3, 
    0xdc639673, 0xa3f758d4, 0x6fdbf41e, 0xf7263776, 0x8f49d162, 0x48ef317a, 0x8aa26891, 0xc37e1540, 0x4875d443, 0x6f3b5b5a, 0x93b61535, 0xf10757bd, 
    0xbb42f53e, 0x740202cf, 0x0f0e907b, 0x00ff719e, 0xaba88a7c, 0xa90817bb, 0x979a333b, 0x28dcdac2, 0x031bac5d, 0x3f56d7ae, 0x41903590, 0x8a600407, 
    0xcf26fdf4, 0x9de2d353, 0xe94dafaf, 0xd4411420, 0xd7fadc63, 0x4326ea9c, 0xb1b45ca9, 0x66a55d18, 0xc9e19f31, 0x36ca29ce, 0x55149c43, 0x4551d4ca, 
    0x45519841, 0xfb550014, 0xd5510f0d, 0xed6c6921, 0xda56d4bc, 0x1f5cf54e, 0x0ad5fbc4, 0x09083cef, 0x3840eed1, 0xfdc7793e, 0xaea22af2, 0xa4225cec, 
    0x5f6aceec, 0xa1706b0b, 0x0e6cb076, 0xfe585dbb, 0x0441d640, 0x2b82111c, 0x3d9bf4d3, 0x768a4f4f, 0xa437bdbe, 0x51075180, 0x5eeb738f, 0x0e99a873, 
    0xc4d272a5, 0x98957661, 0x27877fc6, 0xd928a738, 0x5751700e, 0x1545512b, 0x14456106, 0xec570150, 0x54473d34, 0xb6b3a585, 0x695b51f3, 0x7f70d53b, 
    0x2b54ef13, 0x2720f0bc, 0xe000b947, 0xf71fe7f9, 0xbb8aaac8, 0x938a70b1, 0x7ca939b3, 0x85c2ad2d, 0x3ab0c1da, 0xf96375ed, 0x10045903, 0xaf084670, 
    0xf56cd24f, 0xda293e3d, 0x92def4fa, 0x461d4401, 0x79adcf3d, 0x3a64a2ce, 0x114bcb95, 0x6356da85, 0x9c1cfe19, 0x64a39ce2, 0x5c45c139, 0x541445ad, 
    0x51148519, 0xb05f0540, 0x521df5d0, 0xdbce9616, 0xa46d45cd, 0xfcc155ef, 0xae50bd4f, 0x9d80c0f3, 0x8303e41e, 0xdf7f9ce7, 0xee2aaa22, 0x4e2ac2c5, 
    0xf0a5e6cc, 0x170ab7b6, 0xebc0066b, 0xe48fd5b5, 0x4110640d, 0xbd2218c1, 0xd4b3493f, 0x6ba7f8f4, 0x487ad3eb, 0x18751005, 0xe7b53ef7, 0xea90893a, 
    0x462c2d57, 0x8c596917, 0x7372f867, 0x908d728a, 0x721505e7, 0x505114b5, 0x45511466, 0xf8db1500, 0x2ddee226, 0xb826e522, 0x1cd3328e, 0xdd0f7007, 
    0x5551c415, 0xa3726717, 0xbc73572e, 0x3fcdb4d1, 0xa4ee9d40, 0x1594e3d6, 0x47216823, 0x5c7332e2, 0x167fbfa6, 0x75cfaca5, 0x20362208, 0x80042329, 
    0xa2ce9a31, 0x90d5959b, 0x90acaedc, 0x04154551, 0x40511405, 0x09fe7605, 0x488bb7b8, 0x23ae49b9, 0x01c7b48c, 0x45f703dc, 0x45551471, 0xcba8dcd9, 
    0x34efdc95, 0xd04f336d, 0x35a97b27, 0x4805e5b8, 0xf85108da, 0x29d79c8c, 0xa9c5dfaf, 0x42dd336b, 0x0a888d08, 0x0c20c148, 0xa1a8b366, 0x6ec8eaca, 
    0x28485657, 0x02928aa2, 0x02a0288a, 0xdc047fbb, 0x5ca4c55b, 0xc611d7a4, 0xee80635a, 0xb8a2fb01, 0xeca22a8a, 0xca6554ee, 0x369a77ee, 0x13e8a799, 
    0xdc9ad4bd, 0x6da48272, 0x46fc2804, 0xd7946b4e, 0xb5d4e2ef, 0x04a1ee99, 0x2405c446, 0x33069060, 0xe550d459, 0x2b376475, 0x511424ab, 0x45014945, 
    0x5d015014, 0x2d6e82bf, 0x522ed2e2, 0x2de3886b, 0x0077c031, 0x455cd1fd, 0x77765115, 0x77e5322a, 0x4c1bcd3b, 0xde09f4d3, 0x396e4dea, 0x82365241, 
    0x27237e14, 0xf76bca35, 0xcc5a6af1, 0x238250f7, 0x30920262, 0xac190348, 0xba7228ea, 0xd5951bb2, 0xa2280a92, 0xd9ff83a4, 
};
};
} // namespace BluePrint
