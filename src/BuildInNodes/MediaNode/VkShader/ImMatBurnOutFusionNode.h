#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <BurnOut_vulkan.h>

namespace BluePrint
{
struct BurnOutFusionNode final : Node
{
    BP_NODE_WITH_NAME(BurnOutFusionNode, "BurnOut Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    BurnOutFusionNode(BP* blueprint): Node(blueprint) { m_Name = "BurnOut Transform"; }

    ~BurnOutFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::BurnOut_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_shadowColor, m_smoothness);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _smoothness = m_smoothness;
        ImPixel _shadowColor = m_shadowColor;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Smoothness##BurnOut", &_smoothness, 0.0, 1.0f, "%.2f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_smoothness##BurnOut")) { _smoothness = 0.03f; changed = true; }
        ImGui::PopItemWidth();
        if (ImGui::ColorEdit4("ShadowColor##BurnOut", (float*)&_shadowColor, ImGuiColorEditFlags_NoLabel | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_AlphaBar))
        {
            m_shadowColor = _shadowColor; changed = true;
        } ImGui::SameLine(); ImGui::TextUnformatted("Shadow Color");
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_shadowColor##BurnOut")) { m_shadowColor = {0.0f, 0.0f, 0.0f, 1.0f}; changed = true; }
        if (_smoothness != m_smoothness) { m_smoothness = _smoothness; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("smoothness"))
        {
            auto& val = value["smoothness"];
            if (val.is_number()) 
                m_smoothness = val.get<imgui_json::number>();
        }
        if (value.contains("shadowColor"))
        {
            auto& val = value["shadowColor"];
            if (val.is_vec4())
            {
                ImVec4 val4 = val.get<imgui_json::vec4>();
                m_shadowColor = ImPixel(val4.x, val4.y, val4.z, val4.w);
            }
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["smoothness"] = imgui_json::number(m_smoothness);
        value["shadowColor"] = imgui_json::vec4(ImVec4(m_shadowColor.r, m_shadowColor.g, m_shadowColor.b, m_shadowColor.a));
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf50A"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    ImPixel m_shadowColor {0.0f, 0.0f, 0.0f, 1.0f};
    float m_smoothness {0.03};
    ImGui::BurnOut_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 5758;
    const unsigned int logo_data[5760/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x61ad57eb, 0x6734cba5, 
    0x7c6ce312, 0x383de667, 0x653769fd, 0x5c512f70, 0xbbb587c7, 0x6b13f5f9, 0xcc5b48a8, 0x5079748f, 0x7187fdbe, 0xa5a7abfc, 0xa02b2919, 0xa8a2280a, 
    0xa0288a02, 0x632a8a02, 0xfaf76aa4, 0x7669f274, 0x481549c6, 0xb101e356, 0xd895b449, 0x1a59d110, 0xed83f832, 0x1ba52652, 0xb5511149, 0xdd0a40d5, 
    0x791dc071, 0x5eebbdfc, 0xaea62694, 0x8aa22880, 0xa2280aa0, 0x03280a80, 0x16b98a27, 0x58a87b8d, 0x42429679, 0x510b5cd2, 0x04997024, 0xef90542c, 
    0x018ec281, 0x7146063d, 0x7625c949, 0xa62a3a05, 0x937c6d9b, 0xc3af2f48, 0xd602d7c6, 0x281f9a26, 0x0c779b34, 0x8683601c, 0x00483d03, 0xd1753567, 
    0x308c72a3, 0xc2d4e054, 0x06e86a6a, 0x601545d1, 0x00455114, 0xc6915414, 0x3817905c, 0xc7383938, 0xc2cfae19, 0xf5d21b3e, 0x8b7b361d, 0x49675ae8, 
    0x941d8276, 0x013d0000, 0xab8c75fe, 0xbac22e46, 0x8a228ebd, 0xdff061ef, 0x04413c87, 0xf6bca4ab, 0xdc09c2b3, 0xc092b2c0, 0xf2a4dced, 0x0f82e701, 
    0x9bb82603, 0x2e2d59bb, 0x5055de5e, 0xc60ee5e8, 0xb88ea4dc, 0x3de71938, 0xc229ae87, 0x5cb065b4, 0xad288a82, 0x45511446, 0x75951500, 0x35d0d4e2, 
    0x62ac15b8, 0xa41b44bc, 0xfa7a0659, 0xb5ce1f7e, 0x121d3a6b, 0xd467b508, 0x33c9b28c, 0x06c686e7, 0xe2f4387d, 0x567271a2, 0x8a1f4643, 0xad6b5b3c, 
    0x8d9a36eb, 0x30b2808d, 0x81aa7263, 0xc66f1f9c, 0x4965a8ba, 0x396349e1, 0xfac05047, 0x3a6a5083, 0xa19d3a7c, 0x52b09cb6, 0x827a0541, 0x36d6293d, 
    0x1d67638b, 0xb1ee48b2, 0xcef8028c, 0x45980a3f, 0x512cb0c5, 0x82a81545, 0x02a0288a, 0x175fb4b4, 0xd5427b78, 0x2c416d62, 0xcc1de6d2, 0xbe6749d3, 
    0x55b8ac6d, 0x7f363249, 0x83207816, 0x6dce338e, 0x41a24367, 0x91faac16, 0x7c265996, 0xcfc0d8f0, 0x569c1ea7, 0x60cd2155, 0x894ff534, 0x79cd13ba, 
    0x59a36d71, 0x2caad32c, 0x166cc372, 0x831ba350, 0x81b3d5c9, 0x778c018c, 0x648e23ea, 0x8c668db8, 0x970124e5, 0xa3be6ae8, 0xdaa9c3a7, 0x05cb691b, 
    0xa8571024, 0x639dd223, 0x7136b668, 0xeb8e24db, 0x8c2fc018, 0x4ea5f0e3, 0xc502839b, 0x005b5114, 0x00144551, 0x4d3620e4, 0xf10dde75, 0x5aa59756, 
    0xc1ed85bd, 0xd8764d13, 0xf92204c9, 0xfe398365, 0x8f4af915, 0x8ee4757c, 0xd1a1b33e, 0x7d568761, 0xe695ce4b, 0x60c4f07c, 0xf4388e67, 0x4fa9b2e2, 
    0xecdc3a98, 0xfa893ff5, 0x676f9664, 0xc3d6626f, 0x92f911ed, 0xf9217641, 0x30248714, 0x8413985f, 0x23ee8c23, 0x24b0d62b, 0xf3870b9a, 0x85cc5fad, 
    0x506f64fe, 0x61a5966a, 0x6d68a916, 0x90142ca7, 0x8fa05e41, 0xa28d754a, 0x6cc7d9d8, 0x63ac3b92, 0x8f33be00, 0x379da6c2, 0x288a0506, 0xa500b7a2, 
    0x284a1a1c, 0x4453cc02, 0x04b0b4af, 0x81eb79ae, 0x9141bfd7, 0xf8a1d7f9, 0xb946e314, 0x3c26ce38, 0x7945c07f, 0x6fc778a6, 0xd44e9b4a, 0xcb2d0d35, 
    0x51176a5a, 0x2ca25880, 0xd4136aa7, 0xedadfbed, 0x851d30bc, 0xf90ecb71, 0x360a91b9, 0xd04bcf95, 0x8975e875, 0x4c8fb465, 0x9250aa36, 0x981f37f1, 
    0x3db80603, 0xd5606c71, 0xe1ca8665, 0xb2da206e, 0x65438a24, 0x1b520658, 0x32ea833c, 0x0baa3d0e, 0xd4516bdd, 0xae6d2e2d, 0x2e9527af, 0xa5fb24d0, 
    0xec1f386c, 0xc27d1582, 0x47700f80, 0x096b9715, 0x3c48b6b6, 0xc02090d7, 0x74e08c2d, 0x1c38001c, 0x340d0a51, 0xd4badad8, 0x2869f298, 0x0a0abba2, 
    0x0a80a228, 0xee2a3f28, 0x19c88563, 0xfa81a73e, 0xe19b96d6, 0x8a5657ed, 0xdeac6c49, 0xa562e348, 0x87e52a8b, 0xf8831860, 0x878ae7f4, 0x5cd8ad38, 
    0x6eb6a2cd, 0xdaae257c, 0x26d377a0, 0x8cc93864, 0x812495ab, 0x7e4f52c8, 0x936060a0, 0x4efb5881, 0xa638db33, 0x09b017a5, 0x00551445, 0x19284551, 
    0x54940034, 0x09ce40b1, 0x2d76502a, 0x9f1edfdf, 0x4f2b1e5c, 0xa3cef04f, 0xb6f95baa, 0x1d0219b1, 0xa0c8caae, 0x356607b6, 0x3b41c483, 0x7b659e5c, 
    0x4157f418, 0xa8f5822f, 0x8e367661, 0x913b384e, 0xc929f8f1, 0xde6d59ac, 0xbb19613c, 0x72ddde36, 0x3c19fe71, 0xbbc1abd0, 0xa2213207, 0x4a1a8c94, 
    0x83a2a0dc, 0xe89381d3, 0x2c67ef29, 0xaae80d84, 0xb6942139, 0x388c6e4f, 0xfa1d19c8, 0x60a44e54, 0xd22626af, 0xa50f66dc, 0x650ca338, 0x0e24484e, 
    0x2882abb9, 0x7cb063c1, 0xfcdf07c3, 0xfdb4b4e6, 0xa0d4500b, 0x095b5932, 0x90b44323, 0xe938b8ea, 0xf1c815c9, 0xcfa8fb7a, 0x60645fda, 0x299c6384, 
    0xd39100c8, 0x4a1fdc14, 0xa6f0e6e9, 0xd24c1cb5, 0x1c57ec69, 0xd06f7585, 0xa630c71a, 0xa00094e1, 0xfee918c0, 0xdbc54271, 0x1aed41e2, 0xa72814dd, 
    0x92b19ca5, 0xe429a337, 0x3db85205, 0x24e3b1fa, 0x4ce976e0, 0x3e18391d, 0x52e1ba86, 0x348b5733, 0x8a823d4d, 0x932a3732, 0xea011ccb, 0x2000ff7a, 
    0x2441f069, 0x94cf7c8e, 0x9f81e02a, 0xc03d40bc, 0xc9f7d8e9, 0xa9534acf, 0x490e6e18, 0x10cc466e, 0x0319b865, 0xf50327f1, 0x81dd88a7, 0x56ebf4c2, 
    0x2a25ded6, 0x24640676, 0x672437ab, 0x9afa093d, 0x0bf4d3d1, 0xb96449ed, 0x0659b4b1, 0x55863b42, 0x39408e24, 0x5a7f3d23, 0xfcbb78e5, 0x5fdacf28, 
    0xdd986164, 0xe9f5ca40, 0x320e564c, 0xf8918cbc, 0xd7fa8383, 0xb584374f, 0x9a3cf188, 0x86034a76, 0x1ec08c0c, 0x6acfc1b8, 0x36de92c6, 0xc4da942d, 
    0x37bccc8d, 0x8500ff1e, 0x896f170b, 0x746bb407, 0x9ea4a252, 0x288f1009, 0x86710506, 0x4e873b27, 0x31fdf580, 0x6ee451ef, 0x38950765, 0xfef5d023, 
    0x2a5c5744, 0x261a7b46, 0x414ec19e, 0x4a9b0296, 0xd8530d0e, 0xd0589b65, 0xdacb3f8f, 0xb0d731ee, 0x00ff1d27, 0xe833fdfa, 0x80c00f3d, 0x03e41e9d, 
    0x7f9ce783, 0xe1bc22df, 0xd5ce7567, 0xa1e3c843, 0xbf3ebf23, 0xeb7a8fe1, 0x7de211fc, 0x746e282a, 0x826689db, 0xb48a9966, 0x6523ee96, 0xf86d0908, 
    0x720407da, 0x19f74846, 0xaa0967f3, 0x4f716697, 0xf4eaec9e, 0x4f4f3d9b, 0xbdbe768a, 0x5180a437, 0x738f5107, 0xad635eeb, 0xcd8d3aa1, 0x39c6b6cc, 
    0x1e4a8c84, 0x3fd90236, 0xebb8fe90, 0xead8d183, 0x7585079a, 0x5daa495c, 0x18e1b3dd, 0x942767c3, 0xc5edae80, 0x03380cb9, 0x718224e5, 0xb5e6b88e, 
    0x77fb776d, 0x6dfd9250, 0xbe9184fc, 0xd465dc58, 0xd3938101, 0x3932ce3d, 0x70a927c0, 0xd0569b84, 0x4591366d, 0x6d8a18c6, 0x95343929, 0x0a8bade8, 
    0x25490596, 0x22b8cb28, 0x338e60ab, 0x1bf58393, 0x9f8a0a7f, 0x37909413, 0x67c57de0, 0x69502e5a, 0xa1752513, 0x02cfbb7a, 0x907b7402, 0x719e0f0e, 
    0x8a7c00ff, 0x49e6f8f3, 0x1c410672, 0x9f1ec310, 0xbba25e9f, 0x5bdc04bf, 0xa45ca4c5, 0x5ac611d7, 0x01ee8063, 0xb8bca2fb, 0x99591927, 0x9b5ad253, 
    0xa79e4d1a, 0x5f3bc5a7, 0x40d29b5e, 0xc7a88328, 0x39aff5b9, 0x52874cd4, 0x306269b9, 0x63cc4abb, 0x9c93c33f, 0x69a36757, 0x3b817e9a, 0xc7ad49dd, 
    0xd0462a28, 0x64c48f42, 0x110fb9e6, 0xbaf7b6ea, 0x0631d7cc, 0x002ae428, 0xa70e9cbc, 0x693d38d3, 0x459236c9, 0xc6285e4d, 0x4239529d, 0xac0eed2a, 
    0xe48c03d8, 0xef4efd64, 0xcaa7a2c6, 0xf82de4e5, 0xaf4c610f, 0x605c8c4e, 0xcb2a2e93, 0x8c0c5151, 0x8cf38113, 0xa3027765, 0xee1847ae, 0xa035f63b, 
    0x00005000, 0xce0ad001, 0x3855be3d, 0x9e61be3b, 0xaee24e47, 0x1a9927c3, 0x026c0892, 0xa70f1d41, 0x2ed7fa71, 0xf4c92e2e, 0x2599aa33, 0x04049e77, 
    0x1c20f7e8, 0xfee33c1f, 0xd7c115f9, 0x8b9be06f, 0x948bb478, 0xcb38e29a, 0xc01d704c, 0x2557743f, 0x5f9a883f, 0xd9a4b111, 0x537c7aea, 0xbde9f5b5, 
    0x3a880224, 0x5a9f7b8c, 0xc8449df3, 0x96962b75, 0xacb40b23, 0x39fc33c6, 0x7a76c539, 0xe8a79936, 0x9ad4bd13, 0xa48272dc, 0xfc28046d, 0x946b4e46, 
    0xd4e2efd7, 0xa1ee99b5, 0x05c44604, 0x06906024, 0x227b4e33, 0xce287caa, 0x80203020, 0x670dea41, 0xa7d818ba, 0xc239e707, 0x4c4f01ed, 0x76d8730e, 
    0xd2e46aee, 0x00b17179, 0x0120c196, 0x1f76fad4, 0xfe1d52ad, 0xbe3b1955, 0x5e4f8e51, 0x91b0bae6, 0x52a06f76, 0x1910924c, 0xc11320c8, 0xafe73819, 
    0x42b5abf4, 0xb4716437, 0xd2cf13e0, 0x4b2ac3ad, 0x6038b21a, 0x39c83940, 0x17a7dae3, 0x15f47b17, 0x4a72ef44, 0x09083cef, 0x3840eed1, 0xfdc7793e, 
    0xae832bf2, 0x1637c1df, 0x291769f1, 0x9671c435, 0x803be098, 0x6aaee87e, 0x7ca9107f, 0x6793c646, 0x4ef1e9a9, 0xf4a6d7d7, 0xea200a90, 0x6b7dee31, 
    0x211375ce, 0x585aaed4, 0xb3d22e8c, 0xe4f0cf18, 0xe8d915e7, 0xa09f66da, 0x6b52f74e, 0x910aca71, 0xf1a310b4, 0x53ae3919, 0x528bbf5f, 0x84ba67d6, 
    0x14101b11, 0x18408291, 0x8aec39cd, 0x3aa3f0a9, 0xb8024ca9, 0x27790000, 0xfef53c07, 0x526966b5, 0xc29dd928, 0x40ce0980, 0x51f51ec7, 0x71dbdddd, 
    0xd32f1ce0, 0x00fffcdf, 0x45c2e83a, 0xa9a05ff3, 0x50b471a7, 0x64002701, 0x241538e3, 0x0632f376, 0x20ef102a, 0x41f939a9, 0x7f8ef8eb, 0x4895ee1a, 
    0xda6c76c7, 0x56d1915b, 0xe4ddce9a, 0x94837857, 0x017277e5, 0xfb4cc7f5, 0x983ca9f5, 0x40196dcc, 0x5b05d9c8, 0xaf5c7390, 0xcf881e19, 0x158da2da, 
    0x468cc97b, 0x8b0a84b1, 0x03781580, 0xdbd91a15, 0x10e98ca4, 0xdeb6fc42, 0xe9b83e01, 0x2cb47e9f, 0xf6a07a64, 0x4845aba8, 0x58a84ef0, 0xc06fb322, 
    0x2de16f55, 0xce61a7d7, 0x0832aa3d, 0x19072338, 0x54a8aec1, 0x6816fe8c, 0x15057b9a, 0x23ac363c, 0x248ebc8c, 0x0010cb56, 0x738cd7dd, 0xe7c0ebc7, 
    0x69ae5aad, 0x929de2e2, 0x96a89bb9, 0x084e7ec6, 0x018a7aec, 0x95141521, 0xa4501855, 0xadf003a8, 0xad3f2b0a, 0xed45f9ad, 0x49f28c7c, 0x95254646, 
    0x2c311886, 0xc968fc08, 0x41871dc0, 0xf551145a, 0x7b28bfb5, 0x8a3a235f, 0x5ab3aad1, 0x92428eb1, 0x2a9b9139, 0x4e6f0748, 0xaf1fc731, 0xa4959e27, 
    0xcd6e7131, 0x7ba26a58, 0x4ae05090, 0xea5064a1, 0x10c08033, 0x44fe0832, 0x287675fe, 0xa0008423, 0x499267e4, 0x929afb3c, 0xdfb858a6, 0xa24edc48, 
    0x698651ec, 0x245956a3, 0xb336f032, 0xcec93963, 0x547a0040, 0xbb7ce8e2, 0x81986f87, 0x2b7a2afd, 0xfea6d49d, 0x00ffe3cf, 0xbe288700, 0x7ce80684, 
    0x946f47db, 0x192afd91, 0x42d59567, 0x90f2973f, 0x3cc8b8cc, 0x3d820063, 0x4614ed6a, 0x23bd38ad, 0xa5c07dfd, 0x40ced015, 0xa8b15222, 0x50c83845, 
    0x7f003800, 0x2b2a3f20, 0x0892a346, 0xe47007e5, 0xba0607f7, 0xf58d8b21, 0x17558b8d, 0xb12a9562, 0x82a40e47, 0xfc781d01, 0x02b70abf, 0x8c8de4c7, 
    0x04e61b1d, 0x340f8260, 0x4348a1e8, 0x981bc108, 0x9f27c9b1, 0x50b19cc6, 0xddb85677, 0xe29e5444, 0x1ce5ab72, 0x034fea10, 0x1ce66724, 0x5ba666fb, 
    0x50ee4ba2, 0x36dc7d14, 0xc731fc49, 0x7345b16a, 0xf637a54a, 0x2837133f, 0xba7685be, 0x05d5a620, 0x60cbde4f, 0xf71cc38f, 0x9bb961a8, 0xe5e0e60d, 
    0x0c3a8e98, 0x2aa6bffc, 0xad4614f5, 0xf8c9ad34, 0x43579482, 0x97bb983d, 0x0e204962, 0x8d5f7ebc, 0x08965d25, 0x2ee6d9e7, 0xe4653076, 0xd6491a8c, 
    0x60ef243f, 0x2731bf88, 0xae390000, 0xaca2e288, 0x514563ad, 0xba0d1976, 0x37e88e10, 0x39a7dca9, 0x8dfc51c7, 0x252da858, 0x190a2249, 0xe132c07c, 
    0x2339af54, 0x48803c38, 0x8eeba938, 0xeee6a4ac, 0xa8ef2665, 0x3de15b57, 0xb4d44d17, 0xb6bde7d9, 0x2a255df3, 0x1818f60e, 0xc915b107, 0x53e07757, 
    0xe3e41a8d, 0xfff19838, 0xa0140100, 0x93a6caae, 0xfd34a396, 0xe2fac22b, 0xf256b64a, 0x24e3d1c6, 0xd33302bb, 0x71b523a9, 0x6b0b70b7, 0x6ec3edc9, 
    0xbbc94811, 0xae1907d7, 0xa1d741ef, 0xd29625d6, 0xa9da303d, 0xdcc44b42, 0x1a0c607e, 0x08ebf5e3, 0x7b62ddf4, 0x29b29c68, 0x23396e04, 0x4dd53c23, 
    0x34155d2b, 0x754653b9, 0x00dd9a57, 0xd81b4477, 0x679c63ee, 0xac42fea0, 0xa4721754, 0xbe2c1571, 0xca401961, 0x9c819c5b, 0x8c04480e, 0x2929a5d2, 
    0xbbc519ab, 0x14454fe8, 0x75856456, 0x74d113be, 0x9e4d4bdd, 0x356fdb7b, 0xefa052d2, 0x7b808161, 0x77955c11, 0xd138057e, 0x89334eae, 0x11f01f8f, 
    0x69760557, 0x462d274d, 0x8557fa69, 0x6c95c4f5, 0xa38de5ad, 0x047649c6, 0x4752a767, 0xe06ee36a, 0xdb93d716, 0x9122dc86, 0x0eae7793, 0x83de5d33, 
    0x4bac43af, 0x617aa42d, 0x978452b5, 0xc0fcb889, 0xebc73518, 0xbae911d6, 0x39d1f6c4, 0xdc085264, 0x79464672, 0xba569aaa, 0xa672692a, 0xa228ea8c, 
    0x280a31b2, 0xeb0a80a2, 0xe9a2277c, 0x3c9b96ba, 0x6bdeb6f7, 0xde41a5a4, 0xf60003c3, 0xee2ab922, 0xa3710afc, 0x13679c5c, 0x22e03f1e, 0xd2ec0aae, 
    0x8c5a4e9a, 0x0baff4d3, 0xd92a89eb, 0x471bcb5b, 0x08ec928c, 0x8ea44ecf, 0xc0ddc6d5, 0xb727af2d, 0x2345b80d, 0x1c5cef26, 0x07bdbb66, 0x9658875e, 
    0xc3f4485b, 0x2f09a56a, 0x80f97113, 0xd78f6b30, 0x75d323ac, 0x72a2ed89, 0xb811a4c8, 0xf38c8ce4, 0x74ad3455, 0x4de5d254, 0x4551d419, 0x51146264, 
    0xd6150045, 0xd3454ff8, 0x79362d75, 0xd7bc6def, 0xbd834a49, 0xec010686, 0xdd557245, 0x46e314f8, 0x26ce38b9, 0x45c07f3c, 0xa5d9155c, 0x19b59c34, 
    0x175ee9a7, 0xb25512d7, 0x8f3696b7, 0x11d82519, 0x1d499d9e, 0x80bb8dab, 0x6e4f5e5b, 0x468a701b, 0x38b8de4d, 0x0e7a77cd, 0x2cb10ebd, 0x86e991b6, 
    0x5e124ad5, 0x00f3e326, 0xaf1fd760, 0xeba64758, 0xe544db13, 0x71234891, 0xe61919c9, 0xe85a69aa, 0x9acaa5a9, 0x8aa2a833, 0x0ca5c4c8, 0x8ee537a6, 
    0xea3d1ecc, 0xc92453d4, 0x23190fbd, 0xf90707f1, 0xff645f54, 0xa0f46f00, 0xe683e05a, 0x571c3974, 0x7a425775, 0x6de867a7, 0xb1d4472e, 0x892f5a5b, 
    0x675b346e, 0x90231882, 0xc925ef3b, 0xa53f40cf, 0xc154fe73, 0x93e32cc3, 0x415206f3, 0x6af0dc1e, 0xcbc12440, 0xdbc1732e, 0x5baef3db, 0xf925bd28, 
    0xd31dad99, 0x793ca93a, 0x961032a8, 0x8d1e23d0, 0x5cebc7c9, 0x73cbf3dc, 0x9733cf3b, 0x8f59ce91, 0x26915073, 0x9e731906, 0x9ddfde4e, 0xb99c2144, 
    0x4e709c67, 0x0340aad0, 0xbf4f9edf, 0xbcc547e9, 0xec96db86, 0x14925992, 0x818ce7de, 0xfc8193f8, 0xb3d2acea, 0xd87648c8, 0xc678f940, 0x5a7f7d7d, 
    0x93e4da94, 0x3c3975e6, 0xf64ff651, 0xea4a00ff, 0x5643e8a4, 0x228fcbee, 0x1cac4eea, 0xe31e6764, 0x9004b514, 0x9c0fe548, 0x0007d646, 0xe0a80f10, 
    0xd753f18c, 0x335b9224, 0x5b816e27, 0x6e892f5a, 0x82675b34, 0x3b902318, 0xcfc925ef, 0x62a53f40, 0x5b9b52d1, 0x8e6a6d02, 0x6a1e4fa2, 0xb425840c, 
    0x72a3c708, 0x37d7fa71, 0xcedcf23c, 0xe4e5ccf3, 0xdc639673, 0xe45074d4, 0x6f72e3de, 0x0866a470, 0x618f7332, 0x21855a9a, 0x381f0b91, 0x0e4ecc9d, 
    0xc5333f4e, 0xec5e5454, 0xd4a42e49, 0x1e5c5553, 0xa7f4115c, 0xa26eb554, 0x7cd1da0a, 0xdba2714b, 0x1cc1103c, 0x2e79df81, 0xfd017a4e, 0x138a162b, 
    0xd6a6616b, 0xf124eaa8, 0x42c8a0e6, 0x7a8c405b, 0xad1f2737, 0x2dcf7373, 0xce3cefcc, 0x6639475e, 0x4547cd3d, 0x37ee4d0e, 0x280af726, 0x3cb9b2a6, 
    0x42e90338, 0xbb48ea57, 0x19b9ed86, 0xa2a8a5f4, 0x9d934580, 0xa0e37bcc, 0xa2a66aa9, 0x37eea29d, 0x5a5b816e, 0x346e892f, 0x1882675b, 0xef3b9023, 
    0x40cfc925, 0xd162a53f, 0x025b9b52, 0xa28e6a6d, 0x0c6a1e4f, 0x08b42584, 0x7172a3c7, 0x3c37d7fa, 0xf3cedcf2, 0x73e4e5cc, 0xd4dc6396, 0xdee45074, 
    0x706f72e3, 0x6d37dca4, 0x2da5cfc8, 0x5c022c45, 0xdf61ed1c, 0x1454451d, 0x849db45b, 0x8a96d4ad, 0x5510a828, 0x510f0dfb, 0x6c6921d5, 0x56d4bced, 
    0x5cf54eda, 0xd5fbc41f, 0x083cef0a, 0x40eed109, 0xc7793e38, 0xa22af2fd, 0x225cecae, 0x6aceeca4, 0x706b0b5f, 0x6cb076a1, 0x585dbb0e, 0x41d640fe, 
    0x82111c04, 0x9bf4d32b, 0x8a4f4f3d, 0x37bdbe76, 0x075180a4, 0xeb738f51, 0x99a8735e, 0xd272a50e, 0x957661c4, 0x877fc698, 0x28a73827, 0x51700ed9, 
    0x45512b57, 0x45610615, 0x57015014, 0x473d34ec, 0xb3a58554, 0x5b51f3b6, 0x70d53b69, 0x54ef137f, 0x20f0bc2b, 0x00b94727, 0x1fe7f9e0, 0x8aaac8f7, 
    0x8a70b1bb, 0xa939b393, 0xc2ad2d7c, 0xb0c1da85, 0x6375ed3a, 0x045903f9, 0x08467010, 0x6cd24faf, 0x293e3df5, 0xdef4fada, 0x1d440192, 0xadcf3d46, 
    0x64a2ce79, 0x4bcb953a, 0x56da8511, 0x1cfe1963, 0xa39ce29c, 0x45c13964, 0x1445ad5c, 0x14851954, 0x5f054051, 0x1df5d0b0, 0xce961652, 0x6d45cddb, 
    0xc155efa4, 0x50bd4ffc, 0x80c0f3ae, 0x03e41e9d, 0x7f9ce783, 0x2aaa22df, 0x2ac2c5ee, 0xa5e6cc4e, 0x0ab7b6f0, 0xc0066b17, 0x8fd5b5eb, 0x10640de4, 
    0x2218c141, 0xb3493fbd, 0xa7f8f4d4, 0x7ad3eb6b, 0x75100548, 0xb53ef718, 0x90893ae7, 0x2c2d57ea, 0x59691746, 0x72f8678c, 0x8d728a73, 0x1505e790, 
    0x5114b572, 0x51146650, 0x7e150045, 0x75d443c3, 0x3b5b5a48, 0xb615356f, 0x0757bd93, 0x42f53ef1, 0x0202cfbb, 0x0e907b74, 0xff719e0f, 0xa88a7c00, 
    0x0817bbab, 0x9a333ba9, 0xdcdac297, 0x1bac5d28, 0x56d7ae03, 0x9035903f, 0x60040741, 0x26fdf48a, 0xe2d353cf, 0x4dafaf9d, 0x411420e9, 0xfadc63d4, 
    0x26ea9cd7, 0xb45ca943, 0xa55d18b1, 0xe19f3166, 0xca29cec9, 0x149c4336, 0x51d4ca55, 0x51984145, 0x57001445, 0x8b9be06f, 0x948bb478, 0xcb38e29a, 
    0xc01d704c, 0x1157743f, 0x9d5d5445, 0x5db98cca, 0xd346f3ce, 0x7702fd34, 0x8e5b93ba, 0xa08d5450, 0xc9881f85, 0xfd9a72cd, 0xb3965afc, 0x8820d43d, 
    0x8ca480d8, 0x6bc60012, 0xae1c8a3a, 0x75e586ac, 0x288a8264, 0xa22820a9, 0xb72b008a, 0xbcc54df0, 0x4dca455a, 0xa6651c71, 0x1fe00e38, 0xa2882bba, 
    0xe5ce2eaa, 0xe7ae5c46, 0x9a69a379, 0xdd3b817e, 0x28c7ad49, 0x42d0462a, 0xe664c48f, 0xfe7e4db9, 0x9e594b2d, 0x6c4410ea, 0x09465240, 0x9d356300, 
    0x56570e45, 0xb2ba7243, 0x54144541, 0x45511490, 0xf8db1500, 0x2ddee226, 0xb826e522, 0x1cd3328e, 0xdd0f7007, 0x5551c415, 0xa3726717, 0xbc73572e, 
    0x3fcdb4d1, 0xa4ee9d40, 0x1594e3d6, 0x47216823, 0x5c7332e2, 0x167fbfa6, 0x75cfaca5, 0x20362208, 0x80042329, 0xa2ce9a31, 0x21ab2b87, 0x20595db9, 
    0x482a8aa2, 0x80a2280a, 0x13fced0a, 0x91166f71, 0x475c9372, 0x038e6919, 0x8aee07b8, 0x8baa28e2, 0x9751b9b3, 0x68deb92b, 0xa09f66da, 0x6b52f74e, 
    0x910aca71, 0xf1a310b4, 0x53ae3919, 0x528bbf5f, 0x84ba67d6, 0x14101b11, 0x18408291, 0x435167cd, 0xdc90d595, 0x5190acae, 0x1f241545, 0x0000d9ff, 
};
};
} // namespace BluePrint
