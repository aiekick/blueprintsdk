#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Mosaic_vulkan.h>

namespace BluePrint
{
struct MosaicFusionNode final : Node
{
    BP_NODE_WITH_NAME(MosaicFusionNode, "Mosaic Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    MosaicFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Mosaic Transform"; }

    ~MosaicFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void OnStop(Context& context) override
    {
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Mosaic_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_size_x, m_size_y);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        int size_x = m_size_x;
        int size_y = m_size_y;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::BeginDisabled(!m_Enabled);
        ImGui::PushItemWidth(200);
        ImGui::SliderInt("Size X##Mosaic", &size_x, -5, 5, "%d", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_size_x##Mosaic")) { size_x = 2; changed = true; }
        ImGui::SliderInt("Size Y##Mosaic", &size_y, -5, 5, "%d", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_size_y##Mosaic")) { size_y = -1; changed = true; }
        ImGui::PopItemWidth();
        ImGui::EndDisabled();
        if (size_x != m_size_x) { m_size_x = size_x; changed = true; }
        if (size_y != m_size_y) { m_size_y = size_y; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("size_x"))
        {
            auto& val = value["size_x"];
            if (val.is_number()) 
                m_size_x = val.get<imgui_json::number>();
        }
        if (value.contains("size_y"))
        {
            auto& val = value["size_y"];
            if (val.is_number()) 
                m_size_y = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["size_x"] = imgui_json::number(m_size_x);
        value["size_y"] = imgui_json::number(m_size_y);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf1a5"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    int m_size_x        {2};
    int m_size_y        {-1};
    ImGui::Mosaic_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 8702;
    const unsigned int logo_data[8704/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa9a22820, 0x00fff76a, 0xb76cbad9, 
    0x18756923, 0x760bdd40, 0xc095dda4, 0xda7345bb, 0x6fae881f, 0x7bcbbeef, 0x4d177114, 0xb952edd1, 0x57fadcef, 0x52324a43, 0x51144057, 0x14055045, 
    0x14054051, 0x51773754, 0x73495a59, 0x19233b31, 0xa87dea38, 0x9e2a6a02, 0xeadba99b, 0x7d7be6b6, 0x656d2bc0, 0x5c0d8271, 0x40f59da4, 0xb4fe6b4d, 
    0x56bb00ff, 0xfaafa5ea, 0x5bedfed3, 0xfc152faf, 0xc4a79e43, 0x58647f61, 0xb81ddf07, 0xd08db185, 0xfee38831, 0xa65c4502, 0x0a4f2a43, 0x496e134d, 
    0x759c3214, 0xbd3ea507, 0xa0439744, 0xadac192a, 0xf6741b2e, 0x5e7dcab0, 0xa6cedf30, 0x412a4ba6, 0x6d23cd0b, 0x1cb3d448, 0x36ad0374, 0x69a46305, 
    0xa4a583fb, 0x68f43a71, 0xf1c3767f, 0x88b61a5c, 0x49404523, 0x3137300a, 0x9a3cf327, 0x1bead68e, 0xb7b875db, 0x703ef17d, 0x383823d8, 0x49d252ef, 
    0x12480374, 0x111c18ac, 0x3cb435c8, 0xb2fca857, 0x72af763c, 0x5a6eb5ab, 0xf628e601, 0xdd9e3b3d, 0xf08a12eb, 0x4de468d3, 0x5d5a8ead, 0xa285560a, 
    0x3bb9538f, 0x91a605c1, 0x19a68fdc, 0x5d0de647, 0xb37f2cd3, 0x31df16ed, 0xa3f9b81d, 0x00ee668b, 0xf1e4e4c9, 0x1037a7d6, 0x4d03eb2c, 0x56869918, 
    0x1e71c332, 0x2535f0c3, 0x3b296a7b, 0x852aaca3, 0x6e6e96d6, 0x6f00ff4c, 0xc4388fbc, 0x1f542969, 0x6afdc180, 0x124936fd, 0xba92cc18, 0x63562fa2, 
    0x6d1a3f80, 0xf018b827, 0xa8c512e8, 0xb44bb2fd, 0x9a041c9f, 0x83bc7d26, 0x83e42c95, 0xe87a5fc7, 0x9fd67f2d, 0x75046af7, 0x83d11591, 0x53860c2b, 
    0x6b4f4590, 0x00ffb4fe, 0x49d558bb, 0x9f899553, 0x4983cec2, 0xb4b5b0bf, 0xdfee86b9, 0x1483c932, 0xa19404c2, 0x317e781d, 0xd05e475a, 0x338d47f7, 
    0xf6739488, 0xd89e4768, 0xb48321fe, 0xbda7fb67, 0x94571473, 0xa4ced1a4, 0x14459dd1, 0x0575b857, 0xbe303e72, 0x9105770d, 0x1ea6e52d, 0xffe73b40, 
    0xebfcad00, 0x74e8acae, 0x9fd52248, 0x24cb3252, 0x181b9ecf, 0xd3e3f419, 0x25a7898a, 0x57723464, 0xeaabbdfa, 0x7c9ab756, 0x01604052, 0x20034859, 
    0x387de874, 0x5219eeae, 0xce585278, 0x3e30d451, 0x8e1ad4a0, 0x68a70e9f, 0x142ca76d, 0xa05e4190, 0x8d754a8f, 0xc7d9d8a2, 0xac3b926c, 0x33be0063, 
    0x6294c28f, 0x2816d8e2, 0x41d08aa2, 0x89f41445, 0x474665dc, 0x2b6993d6, 0x2bc36eb0, 0x4ff2c407, 0x9669db32, 0x728ff9d1, 0x007799c5, 0x731c5c48, 
    0x8bae78fe, 0x00fff2ec, 0x7d14f577, 0x60e74c9a, 0x6745aecf, 0x73abc129, 0xe72e7321, 0x714da631, 0xa339e26b, 0x28fbb3b9, 0x9bc850bf, 0x1e5480c3, 
    0x8eaef1e3, 0x8434fba4, 0x714f67e7, 0xfee5d947, 0x4629eaef, 0x20735a70, 0x5ac75de6, 0x3fad00ff, 0x97bed6ee, 0xf8eb347c, 0x840b59ae, 0x1c074860, 
    0xacf40f02, 0x1c9d78bb, 0xf5181896, 0x88c115ab, 0x992e7592, 0x74bddf84, 0x8e1ede72, 0x8b3bd2ee, 0x569d981b, 0x1e133319, 0x0eeca954, 0x6bfd7106, 
    0xd42b8a62, 0x40c7ca4a, 0xb7bc5e56, 0x65891617, 0x5c331b6d, 0x90615738, 0x2c270715, 0xe3871d07, 0x6500ff5b, 0x6da9564f, 0xd86ea9f4, 0xcc13b4ad, 
    0x42239257, 0x7385fcd8, 0xac364d3c, 0xcc89b447, 0xd95cf168, 0xcd5a5ede, 0xb71b9707, 0xb24c199d, 0x1be0fd0c, 0xad38be03, 0x993ebf7a, 0x5d9eac25, 
    0xf84253c4, 0x6917d9ce, 0x8f8ad0c7, 0xd4eaa9ec, 0xa0354d2c, 0x2396487b, 0x7c452e7f, 0x15076967, 0x69c27fd7, 0x9bb3ce6c, 0x4895d179, 0x318432fb, 
    0xe492e7b1, 0x2bbdfc6e, 0xb660a98f, 0xbbfce99e, 0xc0992478, 0xb1d0d8ce, 0x6a5ee1c7, 0x46185b93, 0x97706c4d, 0x75b47e1a, 0xe2087529, 0x1ace8a81, 
    0x2887df34, 0x3c0150b9, 0xd7244100, 0xfada554b, 0xc9922fd9, 0xd7e102a5, 0x230fa67a, 0x1a3bfd9e, 0x52d45eb1, 0x15d4b157, 0x5d5bad9d, 0xb5ad595e, 
    0x993771b4, 0x4f193220, 0xce7314ca, 0x3880e439, 0x8d61b8ad, 0x92cb0ca2, 0xd34aeb7d, 0x13563740, 0xc190b45f, 0x2f840b6f, 0xf624372b, 0xc73d4101, 
    0xc4f25ce7, 0x6436eec2, 0xe4d8ab73, 0x2d6f58b4, 0xeede5e6d, 0x8764d338, 0xa99c31cb, 0x7e07ce53, 0x6a9f2309, 0x00ffb5d7, 0xabdd7f5a, 0xfd9586fa, 
    0xa4257d9b, 0x88481ac1, 0x3912a304, 0xa8f5ef19, 0x95432412, 0xca5a3f18, 0x0e0e22a6, 0x69cae42a, 0x374d8da6, 0xb7b3b651, 0x23ec299e, 0x569032b8, 
    0x7874b743, 0xc3ca8deb, 0x3e5da59f, 0x4432b020, 0xdbe0b07f, 0x1168e31a, 0xb1faf0fe, 0x9600fff2, 0xb618fe3b, 0xccd53df0, 0x7ce3f156, 0xd37311ae, 
    0x9556e024, 0x2dae87df, 0xbe2eee2c, 0x5b2a6dd5, 0x234ae549, 0x8e6cc866, 0xd73b5039, 0x19da6e12, 0x72682ba7, 0xa4d5f622, 0x37e2d268, 0x11190e91, 
    0x413f3083, 0x51d736cd, 0x4b77bdb6, 0x92317676, 0x40999818, 0x18c9a823, 0xd3293dcf, 0x3edc5958, 0x9520adf9, 0x82f1bcbf, 0x6d585a7f, 0x608eed2d, 
    0xfc1c6289, 0x7aaafcb1, 0x78c68173, 0xa9b7d71c, 0x0b504dd2, 0xc29446eb, 0xaab450b7, 0x0bae2848, 0xd6f13a02, 0xb126a8a7, 0xf37db8b3, 0x742bc3da, 
    0x3f86f1dc, 0x00fd0ead, 0x6da3ae6d, 0x3390ee78, 0x895542b1, 0x3a029489, 0xfb8c918c, 0xf3a0e855, 0x73ecb654, 0x1b56958e, 0x88617b5b, 0x5d874821, 
    0x9fa08db1, 0xb5d00a5c, 0x7f5400ff, 0xce2bacde, 0xb975a750, 0x0b2d6d13, 0x4ddde12b, 0xddd832d4, 0x459091b2, 0x454510bb, 0x5a5da471, 0x334cfb6d, 
    0x7c3bbf41, 0x1de78ac8, 0x5fd49a71, 0xaa88ea10, 0x2c2be416, 0x24e21042, 0x76d313de, 0x6bd5fa33, 0xf6e642ad, 0xd39da238, 0x5a3e87cb, 0x73816a24, 
    0xae40e1c9, 0xefd4ac2f, 0xf6b919f9, 0xc7b21466, 0x64496604, 0x6775d058, 0x69fc0060, 0xa4a57ad6, 0x880b8e99, 0x44bc6f66, 0xfc408272, 0xb7b4262a, 
    0xa53c7977, 0x69182459, 0xff73e513, 0xd41c0200, 0xb5759a76, 0xac5bbb93, 0xc0925c8a, 0x3d09ecca, 0x3c23094e, 0x8c5eeb75, 0xd8a3cfe1, 0xa6d6a4d9, 
    0x00ffda9f, 0x486afdd8, 0xc52e9df5, 0x67506a0b, 0x7493c271, 0x9caa1f22, 0xdaaa2ad5, 0xe1819165, 0x378a755b, 0x630eebfb, 0x8cdbf5dd, 0xa7577fd6, 
    0x3d4209d1, 0x8d35798d, 0xf455f936, 0x92a236d8, 0x28918b1c, 0xc500ea27, 0x0de54e3d, 0x565933ea, 0x445ab1d6, 0x41388422, 0x63b333d0, 0x0f9c64d8, 
    0x2fd3dc6a, 0xa2d934ee, 0xb260b6ba, 0x0419f72a, 0xd85c9163, 0x4d82518a, 0x48913a23, 0x3ed88a86, 0x2294d52a, 0x138938c3, 0xff5da8ee, 0x9fe4ab00, 
    0x99a7b2ce, 0xe6499ae7, 0x1723cf6d, 0x7992e976, 0xe8f4b826, 0xe7d0ed64, 0x2abdbcad, 0xef2e18c2, 0x6263c422, 0x4030e2bb, 0x663539e8, 0x502e880b, 
    0x2a4713bc, 0x60638283, 0xa3c21fc0, 0xc4cd3e6d, 0x0c44dba0, 0x571989c0, 0xc9f56c69, 0xadedd31c, 0x4588b462, 0xa0837008, 0xb0c76667, 0xd51e38c9, 
    0x659dabed, 0x00ffb5ef, 0x8dd6fab1, 0x346d8e9f, 0x325d368d, 0x8f8c5876, 0xf08e07e6, 0xf6f42243, 0x2c85953e, 0x8e19cf51, 0x6e44d668, 0x3f08eaaa, 
    0x4a975785, 0x8c3496b1, 0xdf5884db, 0x8f89087a, 0xe3f2eb0d, 0xf0eac79a, 0x95cc2f5b, 0xd5a6a318, 0x20be427c, 0x20e98abe, 0x28882911, 0x06f2bbc4, 
    0xeb81734e, 0xaa8d6a55, 0x19349284, 0x49064621, 0xeba9a727, 0xadda565b, 0xc771a4dd, 0x9c884713, 0x56e265bc, 0x821cc728, 0xe5071d47, 0x4698585c, 
    0xa832b233, 0xb44e3197, 0xe9649df4, 0x7950f796, 0x85dc3252, 0x942fc5cb, 0x0de341ea, 0x5d50eb83, 0xb0b7d7ea, 0x0c916798, 0xaa344f66, 0xe99789c4, 
    0x2603edb8, 0x385517a9, 0xd6d4072c, 0xcdd0f70a, 0xfb38f468, 0xa1f6218b, 0x919aba7e, 0x9ec8c22d, 0x3b210d54, 0xd6460141, 0x78ce6de4, 0xab82aef5, 
    0xc9c43a1d, 0x722b1be6, 0x29efcef9, 0xace2f973, 0x6315b5d7, 0x3bed5fac, 0x794b767b, 0x23648925, 0x0c208d2a, 0x7dadf479, 0xa709c617, 0x458ae52d, 
    0xdc26ed70, 0xf21452bc, 0x2a86e7c8, 0xef112457, 0x1896c48a, 0x469342a7, 0xaeea2192, 0x36648aa0, 0x98c4b676, 0x9e88a22d, 0x9f0b34a6, 0x2174b2ca, 
    0xca137bcd, 0xbda373af, 0x53737dbd, 0x99adb87b, 0xd886e15e, 0x0339ef94, 0xf4f49c1e, 0xd5c6fea5, 0x771be87f, 0x1b7e00ff, 0x9c852afc, 0x24470a8f, 
    0x72eac84e, 0x1c04a7ac, 0x6b9bd6fa, 0x6f3893da, 0xcce12ab4, 0xa0482c84, 0x40ccc7b9, 0xc9812718, 0x349957e4, 0x30f3da94, 0x52b9bb76, 0xd43b6b17, 
    0xf0602379, 0x25210b48, 0xeae9414e, 0x5ed1150f, 0xf69ab7eb, 0x6d6d759f, 0x25c8dca5, 0xc6ca6275, 0xc0311e41, 0xeaa74701, 0x5696996b, 0x5859de91, 
    0xcc2c31b3, 0x34f72479, 0x4b5e5deb, 0x98219134, 0x3c8c7279, 0x6e74186f, 0x08ac3272, 0x82681dcf, 0x5b04d993, 0xda726cd9, 0x64daaae6, 0x428c8851, 
    0xe6113759, 0x72156ee7, 0x013c777a, 0x790badf5, 0x29dee696, 0x406521d3, 0x23b89eeb, 0x191ae334, 0x70418504, 0x20c7860a, 0x14f4a31e, 0x1a431a47, 
    0x45041ac7, 0x00a30a18, 0x7367b357, 0xd55175a4, 0xddca9a6f, 0xcb0a4d0c, 0x3b43ec2b, 0x92040761, 0x91f9017f, 0xf9db915a, 0x337e1b88, 0x581a4eed, 
    0x9e70559a, 0xb4839164, 0xf55cc984, 0x2a63a5c7, 0xf5d5d5f4, 0x28379e27, 0xf5a55d59, 0xfd515794, 0xf43817d9, 0x6be0c73d, 0x51fdd74a, 0xa27a00ff, 
    0x744b4e8f, 0x1a0ba3f2, 0xa62a3fa9, 0xace2f500, 0xa5941f45, 0x5c739e73, 0x7442ebf5, 0x73a69eec, 0xa5436b92, 0xd2f6c28b, 0xacad1c43, 0x87f18844, 
    0x76bf1832, 0xf9ddc633, 0xaddb73c6, 0x6dba6a67, 0x9bb09ebe, 0xcf1b467d, 0x1ee17633, 0xae634c3e, 0xd29feb09, 0x873c22a8, 0xa08fa508, 0xa920a419, 
    0xea088220, 0xbb36710d, 0xb1adb619, 0xa39aebcd, 0x246b5669, 0xed985f7e, 0xe3cc7cb5, 0xcf8127a1, 0xab487d6c, 0xde519796, 0x097345da, 0x1eb948ca, 
    0x4e51dfde, 0x7d84a099, 0x041a73a2, 0x811cf318, 0x3d771cb4, 0x512cc533, 0x38620447, 0x74d058a3, 0xf0031854, 0x9d5b6baf, 0x5a1feb43, 0xb84a57d7, 
    0x9254208a, 0x2495ba37, 0x0706dc95, 0xf3b87160, 0xde7adffd, 0x40ccdf8e, 0x6a9ff1db, 0x2e851fb9, 0xf196b527, 0x4b31a32d, 0x768c341b, 0xc1282203, 
    0x072c2738, 0xe155c64a, 0x995f4faa, 0x6fe6ea3c, 0x2dd2da5a, 0x8ab9be21, 0x2dede2de, 0x6bfd9711, 0xb907068e, 0x2b969815, 0x0a212a1a, 0x2e1430aa, 
    0x65951e00, 0xe80bd546, 0x8ad85c31, 0xac5c9ab0, 0x634f72ca, 0x690f5fa0, 0xad13b1ec, 0x18cea5c4, 0xf7631613, 0x59febd3f, 0xd2c82bac, 0x398e2729, 
    0x9585a844, 0xc01b0364, 0xb91a7fe8, 0x5ba88d36, 0xd6ccb5da, 0xa54023fb, 0xa1dc7581, 0x3957068e, 0x0655fa19, 0xa8af941b, 0x93a672c5, 0x0efd105a, 
    0x2ed55a5f, 0xb645e72c, 0x9e441c49, 0x2c62a16c, 0x02006e18, 0xe780877f, 0xd1b5c23e, 0x465744d6, 0x5601ac0c, 0x8a8a2007, 0x697bbb7b, 0x42698e22, 
    0x01b5cd34, 0x1fc97fee, 0xca5e4d9d, 0x0575eadd, 0xb2ead863, 0x2bb26a5c, 0xccac3533, 0xcef201cb, 0xf1d153d0, 0x7a0cbb83, 0x31ba629c, 0x0b808468, 
    0x8dd6fb64, 0xa48600ff, 0xf28cadd3, 0x97851bcf, 0x394675c9, 0x07bbdb57, 0x4a4f072a, 0x3d9878e7, 0xc7680a99, 0x5e00ffb7, 0xadf28fbf, 0x494b6b9b, 
    0xd4e58de3, 0x22ef8063, 0x95d87845, 0x0718395e, 0xac387e77, 0x6044b7e4, 0x5a8f9cc0, 0x2e6161bd, 0x13c733a1, 0x69e38822, 0xaaf0dc1d, 0xfc399e3a, 
    0xa9d77185, 0x264e931a, 0x414f6a52, 0x50b676f7, 0x490d5a42, 0x30f3642e, 0xf9756211, 0x014bbc3f, 0x5a3fb7cf, 0x00ffbac8, 0xaddd3f5a, 0xb466bb1b, 
    0x89b430b8, 0x19acca27, 0x43198233, 0x841ea00e, 0x42b2aa76, 0x3d4936b2, 0x332ac531, 0xa2d89d50, 0x35a796d2, 0x757ccda7, 0xae887b47, 0x25a50b16, 
    0xa6f28b04, 0x09f0f2d3, 0xe43c95db, 0x556c450e, 0x0b467d5b, 0x23edd99b, 0x640cbedd, 0x1cbb619c, 0x1f8ce07a, 0x8a6ebf7a, 0x8c0c43ee, 0xa1e4a657, 
    0xec96ce16, 0x8f6a67ae, 0x6c29b338, 0xb092b492, 0xa0ea6240, 0x0e3c39f5, 0x8aeb8333, 0xf49d9734, 0x91955bf4, 0xdb988866, 0x600b52cc, 0xc8f91ee0, 
    0x7524c8c1, 0xd14ba3ae, 0xed44d422, 0xa19287b9, 0xc990b8bc, 0xe5e3e423, 0xbfe38c5c, 0xcd6b553c, 0xe94b2b3e, 0x00ffbeed, 0xbb472393, 0x671c9c91, 
    0xad7fae19, 0x8fd4f742, 0xb671ad68, 0xfb62461e, 0xe7e4994f, 0xbbf1f2e7, 0x339eed19, 0xcff0185b, 0xe375aa73, 0xf14f5f1e, 0xab5065ac, 0xad0046b5, 
    0x2f3f3479, 0x9e7ffb48, 0x2f91fbcf, 0x196316c9, 0xe74bbb70, 0x18e70cef, 0x7c325ced, 0xde186dd2, 0x5719d9ed, 0xbce9565e, 0x5b56fe8d, 0xdb6efc66, 
    0x8aef38db, 0x8c0876cc, 0x641412e4, 0x217f12e0, 0x0488b4d6, 0x8f1a7a10, 0x777ff1ec, 0x0abd35f5, 0x639aa6d1, 0x3977d484, 0x2e2f79bd, 0xb0b65644, 
    0x77b02249, 0x86db4676, 0x90e4e403, 0x1d07f13e, 0x290bad78, 0x19ca9e64, 0xb2924266, 0xae54ea02, 0x7df01c1b, 0xc6321dea, 0x67d9187b, 0x71a26bbc, 
    0xf7ecbef3, 0xf63b62f5, 0xb87aa703, 0x431959ea, 0x30602414, 0x35bf47c6, 0xceada5e8, 0xfabff582, 0x9d7ffc85, 0xd61c3e75, 0x3e6c6c6d, 0x883871cf, 
    0x0797a58b, 0x302e1fcc, 0xe9ee4c79, 0xd7074ef7, 0x695e9cb7, 0x122b77d7, 0x62bca8c7, 0xd2360b32, 0x5689fd19, 0xfca08f51, 0x0cc94e6b, 0xdc662466, 
    0x3c4f7055, 0xfc49eef1, 0xe129aec9, 0xfc9d72da, 0xdc6cf9cc, 0xe5ef3593, 0x991bf549, 0x49923b63, 0x19e3945d, 0x7a559c04, 0xd3bcb7d0, 0x2685b763, 
    0x21d2c4d2, 0x38334726, 0x187806f3, 0xcfede507, 0x7ad79734, 0xb404f074, 0x26cbfed2, 0x43fb97fc, 0x603c473e, 0x57fb1cfe, 0xdcba8509, 0xa5cef0d0, 
    0x22976069, 0xb4287fe6, 0x20733291, 0x92dd09ce, 0x430f9e9c, 0x4eadacc1, 0x5b35ee68, 0xd16de2b9, 0x9cba3bc9, 0x22b12063, 0x810129ab, 0xc803b861, 
    0x5dd45acf, 0xe50c4743, 0x8ec130b4, 0x1b970b54, 0xcf79a647, 0xba778ad7, 0x6375efb0, 0x66acd58a, 0xdd8a63d4, 0x7187355a, 0xcfc9ef32, 0x46800104, 
    0xd8eb3979, 0xb9258b55, 0xec96384b, 0x87ab4eab, 0xde073964, 0xa58faaa7, 0x51a63cd9, 0x6723970f, 0x19ed4473, 0x52c9f56c, 0xb5d7f833, 0xa38e6e6d, 
    0x42fddf62, 0xbace3ffe, 0x59102f6b, 0x94b5a0c3, 0x85f6cdd0, 0xd5515882, 0x911f8254, 0xf4187992, 0x1aaefe1f, 0x1b0bd2d2, 0x14ba0571, 0xee42728d, 
    0xd7fa1927, 0x576aa745, 0x4dc35d1a, 0x2133c06c, 0x9eba0746, 0x838e1cd9, 0x36af4190, 0x5c4e37bd, 0x12e6ded7, 0xcafdae5c, 0xf1b95694, 0x5725ae46, 
    0x0aa3ed8a, 0x70075408, 0x7b00ff19, 0xd624fe24, 0x930c2041, 0xd65cef81, 0xd0ed66ec, 0xfb356fe8, 0xed09ad3b, 0xe485a9bc, 0xe5ca12a9, 0x7e288754, 
    0x49bc6ff1, 0x73c5b91e, 0xf8a7a3d5, 0xb74eef8e, 0x19cbf016, 0x05f53e8c, 0xc07fc388, 0x39f6c848, 0xee15d51e, 0x42a87bbd, 0xf3bdbb61, 0x6de6c950, 
    0x636c783b, 0x743b4e8f, 0xa76c71ab, 0x7a6ac9a9, 0xcc6eea13, 0x981acff3, 0x5154b5bc, 0x93b87380, 0xe985bc9e, 0x295abb8f, 0x3814c114, 0xc40dc02c, 
    0xa79f0029, 0xd72b4a6a, 0xe8dc69e5, 0x27e6bfd4, 0xadf3d7f7, 0x73c44b3d, 0x6dab766a, 0x1ac7db2a, 0x2d237038, 0x001803c1, 0xb06300b1, 0xff5b65c5, 
    0xc75fa800, 0xe495d4f9, 0x276ed14a, 0x6fe8d233, 0x5fdf9f98, 0xea58acce, 0x4bbb601f, 0xea6c8c98, 0x47cc0018, 0x41504750, 0x861a7b1d, 0x56946ba2, 
    0xe2e08620, 0xfdcc239c, 0x625f09d4, 0x75a2f6dd, 0x95b9b60b, 0x04053b90, 0x00a02706, 0xa7274972, 0x0c065073, 0x4a3f0832, 0xe849ed8b, 0x24e186d4, 
    0x6e390005, 0x199d6a06, 0x7d7163f6, 0x0f6fdb8c, 0x73c4ada5, 0xd4a534c7, 0x16d26d30, 0xe4e4b80f, 0xf13cc711, 0x3644d08a, 0x0ff27bc7, 0xbb7a551c, 
    0x4085096c, 0xe3b72719, 0xa9b9555d, 0xfe7457c7, 0x5aba9346, 0xad6a5b92, 0x81d0ce68, 0xc1d8c5fb, 0x640457e3, 0xd4918d1e, 0x3699ca0f, 0xe489f6a1, 
    0x24cd5d9e, 0x008e5d8c, 0xae2627c9, 0xea6500ff, 0x73e1f33f, 0x5b7e00ff, 0xed292afc, 0xfdb62d6e, 0xb758dea2, 0x0a31df7d, 0x4eaef3e7, 0xe32f7f68, 
    0xce0000ff, 0xed53b1eb, 0x67d5e849, 0xb16f6efb, 0xca238f7d, 0x52fdb3db, 0x76bbdb6e, 0xdd386337, 0x71a95acf, 0xa780a32b, 0x56951e03, 0x761652eb, 
    0x2e7171ed, 0x9b1bd3c8, 0x8e93716e, 0x63badec3, 0xc93c4a45, 0x0bf03f7e, 0x2ebaba51, 0x0033caad, 0x52717203, 0x5aaf08d5, 0xe4685278, 0x652892dc, 
    0xe441c638, 0x4e948855, 0x881ba4a5, 0xeaacf438, 0xdb5c51d0, 0x85fcbf2f, 0xa2525b28, 0x5286bab2, 0x10645819, 0x99962278, 0x2904490c, 0x466a430c, 
    0x386754a1, 0x5b5ba503, 0x7f1bca5d, 0xe8959e51, 0xaf60a44e, 0xb7246723, 0xd2d4a332, 0xb6ec514d, 0xb2101400, 0x00331f6f, 0x067b8ca4, 0xadf4911f, 
    0xebf57f1b, 0x2a00fff8, 0x16139e74, 0xe992974c, 0x857903ef, 0xa9846796, 0xcccfd92c, 0x8f27e77a, 0xb763a9f0, 0xfc36dcf2, 0xe7b9dae3, 0x5c0d0e5e, 
    0xb1364e89, 0xcbe169b9, 0x2e58dbdb, 0xe0b22922, 0xb62b9f90, 0x6df37130, 0x34f11752, 0xba4147cd, 0xc4852dd3, 0x275319ef, 0x09dc0096, 0x0301f23c, 
    0x8aa38e23, 0xf7bc05a1, 0xf0767952, 0x3be333c9, 0x1fc75263, 0x32344941, 0x9e62cadb, 0xea458a27, 0xfc48a58e, 0x5bda790d, 0xb12d1d63, 0x64d9e54e, 
    0x761c3100, 0xab7d9935, 0x627886fd, 0x7298b76c, 0xcb63e6ed, 0x3fb9ca5d, 0xd2d70f8b, 0xcd83e5b5, 0xc6b1db60, 0x9d2b553a, 0xd9edca0a, 0x568e21ee, 
    0x97b9d964, 0x7a7a0e24, 0xee8a3c75, 0x096a5a85, 0x8c35f475, 0xd6a296a2, 0x4da9b54e, 0x6e292467, 0xe9fbc94f, 0x6362a182, 0xe3d09107, 0xf771f23c, 
    0x5618766b, 0xd7932444, 0x5e8c561c, 0xcb9ab81d, 0xc46a63ed, 0xca37d955, 0xcb289ca1, 0x314e1d6d, 0x13bc4e5b, 0x3a5fea71, 0x60658cbd, 0x2a4819ca, 
    0x0d1d4146, 0xb6d6e96e, 0x150d77f7, 0x5db5d8cd, 0xce15ab84, 0x24effee6, 0x7192df01, 0x4f65df59, 0x24c0a956, 0x5c930ce0, 0xa9b18a98, 0x494e196b, 
    0x6e3ad6d8, 0x72ac9290, 0x82844ceb, 0xe16d8b58, 0x41aeb27d, 0x126bb6cf, 0x7e43fde3, 0x2fb5ce1f, 0x3edd5b74, 0x58b8cfdf, 0x6c0489c2, 0xad624516, 
    0xf1e0e08c, 0x073a67c5, 0xf4a1a752, 0x66f922ac, 0xb167239b, 0x2c727b91, 0x23b8e5ec, 0x85a49677, 0xc31e37ce, 0x571538f1, 0x789aba47, 0x42ea8664, 
    0x2cc3c2f3, 0x52963163, 0x06d20e32, 0x0df88f3b, 0xfda7c36f, 0x8be078a2, 0x04234973, 0x49329051, 0x346fa9c0, 0x7d0aec59, 0x205136a6, 0x656530ca, 
    0x91115c6f, 0x61d6875e, 0x44fb9b7b, 0xacdd5a73, 0x67c9f6f7, 0x6c24650a, 0x00854bca, 0x2738c701, 0x3bf060ef, 0x9e27bb55, 0xe69a384b, 0xbf622e3f, 
    0xf73a5ebc, 0x916e5de9, 0x4b75e8e1, 0x2ace376f, 0x63c47ade, 0x5021018a, 0x18b98d7f, 0xc86a7f5f, 0x8bfbd3f2, 0x5a7f56f9, 0x75c2de49, 0xa71db62c, 
    0x9e9851bc, 0xd4e87c78, 0x57dca3e5, 0x8e4ccf70, 0x9ed7ba95, 0x9a1d121d, 0xe317b26b, 0xf445c121, 0x775a00ff, 0x1a3f7e1f, 0x800100c2, 0x6eab3d30, 
    0x73abc3db, 0x6800ffa3, 0x4364db2d, 0x16ab8c2c, 0xc29f52e5, 0x8c04775b, 0x71adc711, 0xb44973b9, 0xd96d9b64, 0x5bd29719, 0xd923794b, 0x9f8060c0, 
    0x88c53292, 0xbd3ef518, 0x93c81a7f, 0x00ff6bfd, 0x34fd6abc, 0xa2e484c6, 0x1aa555fe, 0xa06d9baa, 0x72eeac8c, 0x1fea5bf3, 0x38faa2db, 0xb0acc654, 
    0x1613fcfd, 0xfe1dc732, 0xf9b99e63, 0x7fdc567a, 0xe1fd53eb, 0x1b5e0c5d, 0xfb275d9a, 0xc3ba3548, 0xb7e1bbe5, 0xc6388503, 0xf424e376, 0x5db2e619, 
    0xa0102310, 0x15080e10, 0xb585f5d1, 0xf27335b7, 0xcddb5b28, 0xc851b415, 0x0a44475e, 0x88f941ce, 0xd8426b1d, 0x19a171b4, 0xed915356, 0xe78a3ecd, 
    0x8dd45dab, 0xb92965ac, 0x134f5e23, 0xfcbd495f, 0x559a55bb, 0x05e22cd9, 0x18e3222f, 0xa763e46c, 0xef4ad56e, 0x8ebeba51, 0x4a1dee28, 0x568d0842, 
    0xebb94035, 0x567aa080, 0xcdb487e7, 0x594ee732, 0x5e4960ef, 0x3200b14b, 0x808ce94c, 0x93a35d40, 0xe68aebc9, 0x6a7b176b, 0x65b5bd12, 0x9066946b, 
    0xd8f1a410, 0xa6a16e56, 0x0fd07c4d, 0x278ee231, 0x1250c1de, 0xe43a0ec4, 0x6be87970, 0x3df4b46e, 0xb851df3e, 0xe1825bb8, 0x4669b721, 0x04c954c7, 
    0x07704b70, 0x430cd335, 0x51b15151, 0xa61cd99b, 0x8d35619f, 0x7916dba2, 0x33423256, 0xc073212f, 0xa3954e3f, 0x4368446e, 0x0f3da79d, 0x69adad15, 
    0x726aa6eb, 0xf1cc465b, 0xc36e3460, 0xfa1929ef, 0xd223e31e, 0xd6bf6eb1, 0xd46af78f, 0xdaec67dd, 0xf9e4eeb0, 0x370f5a59, 0xdbcf8fc8, 0xf61bede6, 
    0x718eddf4, 0xff515aed, 0xf74faa00, 0xca9d2a45, 0xa166d41b, 0x5bcc5d6b, 0x959e537f, 0xbe1aab33, 0xccb7b4ec, 0x3d5a4a4e, 0xd75a9f0e, 0x2d3d75ed, 
    0x12298e60, 0x72659966, 0x1012a0c8, 0xe37de4a9, 0xcf15f89e, 0xfe6651d5, 0xd9552661, 0x9cb38181, 0xedf473fd, 0x2b1f9a4c, 0xed73361f, 0x7242a952, 
    0x81be9eb2, 0xbdb92765, 0x6911eaa2, 0xe83c92d7, 0x34b114cf, 0x75ab026c, 0xc88307f5, 0x0bfd711c, 0xb5e8bb75, 0xb86b5e2d, 0x3639d615, 0xf00038e0, 
    0x57fa76a0, 0xafed553f, 0x9ee6aeed, 0xf6de2518, 0xb441b6ed, 0xdf91a78d, 0x7d5b43af, 0x7e734b53, 0x6b377b05, 0x8faed95c, 0xaeeddac3, 0x95626097, 
    0x1e1757e4, 0x6e0b156e, 0x8623b85d, 0x3d72fd1c, 0x7f8a90ab, 0xcfed4a29, 0xd15aeb39, 0xacb662cb, 0xf34a5a92, 0x9c207190, 0xcbb70705, 0x34d7fab7, 
    0xb594cae9, 0xce0cce22, 0x213422b7, 0x879ed3ce, 0xd7b4d58a, 0xe4d3b365, 0x31ca8fb2, 0xbb24bfc9, 0x5328f303, 0x030f60c0, 0xd28a838c, 0xa2fd046f, 
    0xba953bda, 0xe2e00eb9, 0x6555addd, 0x062738c0, 0xcc4fc741, 0x7c894756, 0x6c902e29, 0x6f541dd6, 0x182adf76, 0x7c8c7606, 0xce38e6a7, 0xae56fb7a, 
    0x27bf9730, 0xda2f5f66, 0x3f314f65, 0x1e9dbfbe, 0x7f7d7f62, 0x1e2cab3a, 0x9edd8652, 0xaba2d271, 0x57131a86, 0xa7a9848c, 0x473d3ab3, 0x76ea93c4, 
    0x81306b6b, 0x1b575723, 0xb40b750b, 0xc7006275, 0x3a302b60, 0x9fc08013, 0xb5b65c63, 0x3861cbac, 0xc3addd82, 0xf3565a88, 0xa00319c9, 0xe9938c1c, 
    0x17b65aed, 0x17b46d3e, 0x03bd0d39, 0x1ef53670, 0xe1a13899, 0xa39ebd93, 0x73eb3b95, 0xece3ce6e, 0xed5cd097, 0xb2c8e4df, 0x8333ce6d, 0x6aae669c, 
    0x71eab2da, 0xf2b7a0db, 0x71c380fc, 0x73024b2a, 0x6054958f, 0xacb9db73, 0x08fe3efd, 0xb2b849ae, 0x8450805b, 0x1b809056, 0x3dea38b1, 0xaeefa9b8, 
    0x1e95ba60, 0x01b5440b, 0x24466400, 0x7a46ee16, 0x70922b7d, 0x9b913494, 0x6dcc2a4e, 0x8c3db9a6, 0xa8135c7e, 0x1548304f, 0xc70157e2, 0xc1811b46, 
    0xed5315f7, 0xf47b7f11, 0xd2504735, 0x68b4bce6, 0x666bbd20, 0xaa783f62, 0x04db0349, 0xe5c1d254, 0xceb33b20, 0x63ba623a, 0x2a9f844e, 0x45befe93, 
    0x964b0fda, 0xf717d13e, 0xa25743bf, 0x36d40df1, 0x904b635f, 0x01e80821, 0xdf0a4989, 0x46460278, 0x5489b57e, 0x54595d65, 0x485a5379, 0x4cccc149, 
    0xc7fbf798, 0xb5d64f3f, 0x5617acfa, 0x5397a652, 0x7f11ed6f, 0x2035f47b, 0x43478020, 0x5097aa58, 0xda27715b, 0x00ffc8e6, 0xdf634458, 0xe7075e18, 
    0xba05adf5, 0xe86c80da, 0xa9b2d631, 0x09f7b285, 0xf5c63e95, 0x6f73bfbe, 0x82348ba7, 0x900cab02, 0xc16d0889, 0xe3bbe55c, 0xca6ab7af, 0x1d304a70, 
    0x77a73548, 0xcb6b6be2, 0x4a8bb427, 0xa0300f8e, 0x8fb8ac52, 0x01619c07, 0xcd9adce7, 0x54c279ae, 0x4d12b9da, 0xa4f64334, 0xd43e6af4, 0x7d518d9e, 
    0x8f56fd95, 0xd7aabfb2, 0xb91f2657, 0xdf728176, 0x42b4b959, 0x3057d796, 0x1c2b39a9, 0xbc3e4185, 0x49ed831a, 0xe948d5e8, 0x1acecef7, 0xf74334ee, 
    0xcbf0a83c, 0x7f902df5, 0x325d4b2a, 0xb87616f6, 0x12e01ad4, 0x5045a976, 0x24836e07, 0xb994fefb, 0xd0c2fd70, 0x204769ee, 0xd7337291, 0x3babd51c, 
    0x77178beb, 0x225375b7, 0x2b32dc18, 0x828c5306, 0x52b52308, 0x2b251e89, 0xafe73c85, 0xb65a00ff, 0x4d7e6db4, 0xfbe1dd26, 0xacd2fd2e, 0xcb9be3bb, 
    0x49f8b763, 0xdebe72da, 0xa5b9d6e7, 0x5ef9cc15, 0x725f5984, 0xc5e5d585, 0xcc75def4, 0x01c647a6, 0x03f4003d, 0xa9c21ea0, 0xe0480b4d, 0x9a633a82, 
    0xf77279b7, 0xf9dcd377, 0x8d749e4a, 0xc6f9dd26, 0x549c714e, 0x25419d05, 0x0d270746, 0xa2d600ff, 0xe295500e, 0x4477da24, 0xd8d37dfa, 0x10756fcf, 
    0xca10f152, 0xd035a11b, 0x65c200ff, 0xf0704d2c, 0xe15aca5b, 0xcb3d2b81, 0xc839c63a, 0xd72b0040, 0xa0b9d2d7, 0x522b3030, 0x9b7b43cb, 0xbaa5797b, 
    0xa46edd8a, 0x5919c031, 0xb0e39c8b, 0x53eb7320, 0x1a76dbcc, 0xb52ee872, 0x6d5d9dad, 0x921810e3, 0xd25d30dc, 0x19e71899, 0x2bbd1ecb, 0x3ff8ef0a, 
    0x0973b91a, 0x0696b9b6, 0xa19c9820, 0x2a0ebe23, 0x79dfaa22, 0xaa8afa41, 0xa4263975, 0xbbd24ac1, 0x12692633, 0xf3241a09, 0x264a0a24, 0x81e3b871, 
    0xacd3c79a, 0xbb2b0b35, 0x22db6459, 0xce2d13cb, 0xdc492838, 0xe38ef909, 0x1dc8b0b8, 0xd3f2aaeb, 0x55f98bfb, 0xf2029dfb, 0x9aa429d2, 0x15b020da, 
    0x1891ed12, 0x02647aa6, 0xbc75cd48, 0x66b65e54, 0x8391a7aa, 0x2ddf345a, 0x95bfb83f, 0xfb1ff352, 0x97d2f9ed, 0x58da4efb, 0x8bcdfb97, 0x176d57f4, 
    0x621eec84, 0x963c6fab, 0xbbf556de, 0x9c430817, 0x71068a0e, 0x4d5cedef, 0x67b43871, 0x45eeb828, 0x02e88c70, 0x7fd59c8c, 0xdffdcbb3, 0x2bda55d4, 
    0x5389786a, 0x661c2a8f, 0xfa90b1d2, 0x12b7b41d, 0x1c674d5c, 0x998c49b2, 0x309d6e00, 0xa4c24f0f, 0x9545d3b4, 0xc5dbdbb2, 0xd1ce34b6, 0xcfc938bb, 
    0x9f74eb7a, 0xc44e0d0f, 0x53891b5d, 0xd8461e37, 0xe098cced, 0x6004c71d, 0x8dda5973, 0x26d4b0a0, 0x619659b5, 0xbdde6d13, 0x99f5690d, 0x738b6cad, 
    0xe3325792, 0xee70a28d, 0xa9a9a330, 0xf717d1fe, 0xc74543bf, 0x3ffc86fa, 0x5877509d, 0x821d69e3, 0x8f5982a2, 0x41482b40, 0xfd3c1762, 0xf5b90434, 
    0x48369d66, 0x9e838bc4, 0x459de2b9, 0xbad32670, 0x3fc44e31, 0xa3564f65, 0xd5eaa9ec, 0x7ef86835, 0x6edd0bd6, 0x37e5dada, 0x5ceee4c4, 0x9e949f91, 
    0xaa55b5a2, 0x49a9a53e, 0xfbc85cbb, 0x1fb57a2a, 0xaf564f65, 0x690f6f41, 0x758d978a, 0x50ac3da3, 0x2e99cbe7, 0x9fe3521a, 0x763c2898, 0x09d7fa3c, 
    0xbeaad54d, 0x1dcde5d0, 0x48b701d9, 0x574e70c1, 0xed8f9a91, 0x66b5e84f, 0xfe4ff54f, 0xd315aae9, 0xb9a92a41, 0xed3d54ea, 0xa2281acd, 0xab10f3bc, 
    0xed7dfa16, 0xac2d19d2, 0xc10199e7, 0x012ce368, 0x7a55e0f4, 0x931e7cee, 0xc48be14b, 0x349360b7, 0x208911ce, 0xd371b103, 0xbbaba89a, 0x3bf30815, 
    0x3ae98b1c, 0xf45d6894, 0x1955a5fb, 0x0060612c, 0x04a1aafc, 0x2b82111c, 0xd4e1acd3, 0xd7b9346d, 0xfc7a0951, 0xe5129190, 0x361f0786, 0x3aaff83d, 
    0x951a41d4, 0xe63061ce, 0x5c593e56, 0x18e70415, 0xa9d828a7, 0xa91595c3, 0x7faa7fb2, 0x9b3a4df7, 0xffa7fa27, 0x8fd27400, 0x8e5b88c4, 0xc423adad, 
    0x16b34b03, 0xc557dee6, 0x3b1a9cc7, 0x03781e83, 0x1c391869, 0xaa52ae74, 0xdf696b7f, 0x6c00fff3, 0xf82f937e, 0x2dd56fd7, 0x6503bff6, 0xd099ad4d, 
    0x9bf64fdd, 0xed36aeb9, 0xdb6764f3, 0x3827e39c, 0xdb0aaba8, 0x9dbcb256, 0xdd91b7a1, 0x8980e1d0, 0x53cf53c0, 0xad870e8c, 0x1f7fda6a, 0xc3d459e1, 
    0x9acbc1f2, 0x959dcae4, 0x9bae58ee, 0x9d1df156, 0x2aec9dfd, 0x64b839b3, 0x45e19568, 0xeed41111, 0xbd4f9204, 0x0356e962, 0xb3a2d453, 0x613e2c33, 
    0xe30c3b3f, 0x3ef54e8f, 0x328da3ad, 0xb284690b, 0x362eb8b0, 0xcb9407cd, 0x649c81b4, 0x2b73cdf5, 0x4dba4aa4, 0xabb332a3, 0x8dda8a46, 0x2f7d656f, 
    0x4df98470, 0xd1ebe2e1, 0x2c6dcc2a, 0x2b2fc2cc, 0x31d8f2cd, 0x58b1c15f, 0x7fcd4335, 0x50e7b7ef, 0xf36ea52e, 0x197b0bf9, 0x2596a797, 0xd62cbf1b, 
    0xbc270bcf, 0xdd93708b, 0x6b55d49a, 0x82906667, 0xd5dcf1c4, 0x4da9e59a, 0x332b97d3, 0x8d5d7994, 0x8a5b2fad, 0x52364bcb, 0x00ffd22d, 0xeddb79a4, 
    0xf9c9f2e6, 0x3a4eda40, 0x7db55471, 0x9cbaea44, 0x1721a6b7, 0x1c948f99, 0xbf0e00e3, 0xf0b75f85, 0x6bc992c4, 0xf1d6970c, 0xe6475d5c, 0x4e0c0947, 
    0x0c9c67dc, 0xacf2870e, 0x597b973a, 0xcc5af38d, 0x43fde38e, 0xa9ce1f7e, 0x8c008956, 0x4def9111, 0x8bfbd3f2, 0x1a4d57f9, 0xd06c9cea, 0x61553ee1, 
    0xb42f55d4, 0xd0effd4b, 0xbbf2b654, 0x31720cb9, 0x343c53e9, 0xd02617e3, 0x962b6d3a, 0x7987fe2a, 0xdbac9f16, 0xcbbbcfdd, 0x46db928c, 0xad3f424f, 
    0x6755a550, 0x7d2c5538, 0xa175ae00, 0xebdcd909, 0x2db4d761, 0x50e7ee3a, 0x5c9317b4, 0x1cc5cc4e, 0x93934c85, 0xb9e6fad3, 0xb1983b26, 0xcd694eea, 
    0x9ebba804, 0x54ea5127, 0xdb36658a, 0xd9d8a41c, 0xfb3fd53f, 0x8956a8a6, 0x430f8200, 0x2f9efd51, 0xbaa6feee, 0x348d5668, 0x51132ad3, 0x288a92dc, 
    0xae3043ae, 0x67dfc2cf, 0xb6f7c29b, 0x0345dd72, 0x5dae2b4d, 0xa3284086, 0x9471cd38, 0x95d94555, 0x9dbb7219, 0xa76195de, 0x77c97078, 0x00b3b426, 
    0x00526ca4, 0x82f0c739, 0x57ae7872, 0x528bbf5f, 0x84ba67d6, 0x14101b11, 0x18408291, 0x435167cd, 0x2987d595, 0x360559dd, 0xfe4ff54f, 0x6453a7e9, 
    0xff5400ff, 0x239aee00, 0xe75622f1, 0x0000d9ff, 
};
};
} // namespace BluePrint
