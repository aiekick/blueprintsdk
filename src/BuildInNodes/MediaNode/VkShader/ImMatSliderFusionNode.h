#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Slider_vulkan.h>

namespace BluePrint
{
struct SliderFusionNode final : Node
{
    BP_NODE_WITH_NAME(SliderFusionNode, "Slider Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Move")
    SliderFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Slider Transform"; }

    ~SliderFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        int x = 0, y = 0;
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Slider_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_out, m_slider_type);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        int _type = m_slider_type;
        int _in = m_out ? 0 : 1;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(100, 8));
        ImGui::PushItemWidth(100);
        ImGui::BeginDisabled(!m_Enabled);
        ImGui::SliderInt("Type", &_type, 0, 8);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_type##Slider")) { _type = 0; changed = true; }
        ImGui::RadioButton("Slider In", &_in, 0); ImGui::SameLine();
        ImGui::RadioButton("Slider Out", &_in, 1);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_inout##Slider")) { _in = 0; changed = true; }
        if (_type != m_slider_type) { m_slider_type = _type; changed = true; }
        if ((m_out && _in != 0) || (!m_out && _in != 1)) { m_out = _in == 0; changed = true; };
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        return changed;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("out"))
        { 
            auto& val = value["out"];
            if (val.is_boolean())
                m_out = val.get<imgui_json::boolean>();
        }
        if (value.contains("slider_type"))
        { 
            auto& val = value["slider_type"];
            if (val.is_number())
                m_slider_type = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["out"] = imgui_json::boolean(m_out);
        value["slider_type"] = imgui_json::number(m_slider_type);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\ue882"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatInFirst   = { this, "In 1" };
    MatPin    m_MatInSecond   = { this, "In 2" };
    FloatPin  m_Pos = { this, "Pos" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    int m_slider_type   {0};
    bool m_out          {true};
    ImGui::Slider_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 5045;
    const unsigned int logo_data[5048/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa8a22820, 0x4ec7776b, 0x1b9da6d2, 
    0x19db986c, 0xf46800ff, 0x4d1a00ff, 0xf40b5cd9, 0xede12f57, 0x51e3fa6e, 0x26a12efb, 0xd13d36ef, 0xf6fb42e5, 0xaef2c71d, 0xa46494a2, 0xa22880ae, 
    0xba26a08a, 0x3f5a00ff, 0x6b6aa8dd, 0xfda3f5af, 0xa1b186da, 0x3e4c34fc, 0x59511414, 0xfda3e6fa, 0x3249a69b, 0xe55bd9be, 0xc7fc8c8b, 0x6eb5e6fc, 
    0x141ae5ca, 0xb5870756, 0xaeeec95b, 0xcd26352c, 0x40ae7ccc, 0x711c771c, 0xfdd6f9e9, 0x5d49c928, 0xbfd65400, 0xb5fb4feb, 0xfe6b4d0d, 0xbb00ffb4, 
    0x1bfed759, 0x250b7f26, 0x5400ffba, 0x95aade3f, 0x50fdeb6e, 0xaa7a00ff, 0x867f6154, 0x28843f4d, 0x45bcb2a2, 0x6700ffa8, 0x99514ee9, 0x8ce49765, 
    0xd607c1a9, 0xb9b21bba, 0x7345aba1, 0xbabd1e7e, 0xd2b85283, 0x599a09b5, 0xe5cc2847, 0x939103b9, 0xd7f983ed, 0xe6324a49, 0x76ab0057, 0xfb8feabf, 
    0xdaad52d5, 0x3faa00ff, 0xaf1856ef, 0xf8d499e1, 0x00ff2449, 0xee00ff54, 0xe457a19a, 0xff5400ff, 0xa19aee00, 0x16fee059, 0x14055b2a, 0x6f8a2f56, 
    0x18a5c9fe, 0x7fee6594, 0x7f873d76, 0xb26bfcf0, 0xa6e6ca4e, 0xf8cd15d5, 0xb5d3366a, 0x592eed2b, 0xe9da1537, 0x7fea33c6, 0x28255d51, 0x5580abbb, 
    0xd500fff8, 0xa8a2fb27, 0x00fff855, 0xa2fb27d5, 0x0a9f31b9, 0x42b1ab32, 0xd3ae288a, 0xc647ae50, 0x96f7aa17, 0x233b47f6, 0xbfc7e4f9, 0xf95b00ff, 
    0xd0595dd7, 0xab4590e8, 0x9665a43e, 0x363c9f49, 0xc7e93330, 0x4e1315a7, 0xe468c84a, 0xda621df5, 0xf6d64e6d, 0x686239ca, 0x01180c00, 0x0f1d0f90, 
    0x507745a6, 0x92c293ca, 0xa18e72c6, 0xa006f581, 0x75f874d4, 0x396d433b, 0x0a82a460, 0x537a04f5, 0xc6166dac, 0x91643bce, 0x051863dd, 0x147e9cf1, 
    0xee1617a3, 0xa2288a05, 0xd73511b4, 0xedfed1fa, 0x7f5d5343, 0xd4ee1fad, 0xe10f8d35, 0xa0f061a2, 0x37c543ae, 0xd0ea5d32, 0x4c13c3d8, 0x349a1b21, 
    0x384f2c19, 0xd7f9dbe3, 0xd2e1545f, 0x7bbee0ac, 0xeff98cd4, 0x7a72b99c, 0x17e76afd, 0xc8596425, 0x43dcdfdc, 0x4daac3af, 0x24982d61, 0xcd0f0e06, 
    0xed409ed8, 0xca90ca5d, 0x32821c18, 0xd3be570d, 0x961875ad, 0xaaf7a82b, 0x3092c39d, 0x289a0a7f, 0x24520896, 0x4601d4ce, 0x08a5784e, 0xea03b6b8, 
    0xa7f55f6b, 0xa686dafd, 0x5a00ffb5, 0xafa9dd7f, 0xfe4436fc, 0xfe754b16, 0x55bd7fa8, 0x96cae52a, 0xe709008c, 0xdff255b5, 0x56f98dfb, 0x4f256958, 
    0xee374d56, 0x5b4fae8d, 0x88b73a17, 0x08b74fd3, 0xbfa1cc3e, 0x70d24e78, 0x801f2709, 0x7fcbbbae, 0x47e537ee, 0x96cfd992, 0xb7b6eb73, 0xae952c97, 
    0xba717469, 0x86853a94, 0xdfaa69b1, 0x8a0c701b, 0x31ce60ac, 0xcff639df, 0x39805de5, 0x13e31419, 0xff93b19e, 0xcba30100, 0xe537ee7f, 0x7d637944, 
    0x5b6de842, 0x5400ffb5, 0xdeaade7f, 0x7100ff5b, 0x6cb52abf, 0x822063a5, 0x6258ef39, 0x193d9d64, 0x8fee479d, 0xff53fd93, 0x856aba00, 0xa5dc3068, 
    0x0f2a467d, 0xfab77fb2, 0xb06a3856, 0x8acc7c82, 0x566a4972, 0xd2597fae, 0x528d35ef, 0xed6dc628, 0x7e5652e0, 0xa0e3580e, 0x957e7bce, 0xfd93fdd4, 
    0xb28fd2bf, 0x57fab77f, 0x92d2ab44, 0xd29e66b3, 0x87261727, 0x8dfa69aa, 0xc913ecb5, 0x9f9f3aa8, 0xfa42ca77, 0x6bf2dd72, 0x643fabab, 0xf46f00ff, 
    0xed9feca3, 0x5aa394fe, 0x987f768c, 0xaa95487b, 0x93ea7ffc, 0xfd50d1fd, 0xd2bffd93, 0x42b551a7, 0x18560cfa, 0x5c9ab09a, 0x93a4ceac, 0x957d115a, 
    0xb0ab5a3d, 0x5bbb6245, 0xffbd8f83, 0xd5abd600, 0xaff54f42, 0xc3abf1fe, 0x996f534e, 0xea6d9b8e, 0xb7ee4f19, 0x00fff5fd, 0xfd29a3d6, 0xbe00ffd6, 
    0xdad4fabf, 0xc75fa9ab, 0x73c9d8a6, 0xf2d1ce20, 0xf6b871ae, 0x46d2d815, 0x3f652eb6, 0xd7f7dfba, 0x8c5a00ff, 0xfe5bf7a7, 0xeb00fffa, 0xab8f6656, 
    0x29456a7f, 0xb1bc0d78, 0xb688d63e, 0xd0eb1848, 0xa355fe7b, 0xd0d52449, 0x66847a58, 0x38b9b50b, 0x6afddffb, 0xf554f6b1, 0xfa1fad6a, 0x7800ffd4, 
    0xc4e4fa55, 0x956b50ce, 0x3d6d5499, 0x72ac2804, 0xa8a81f54, 0x82897465, 0xcd784af9, 0xbf2e554f, 0x6bf78fd6, 0x9fe63a0c, 0x6a88d82b, 0x7f7a1eec, 
    0xcfa305cf, 0xb5e0f94f, 0xafd5530d, 0x4da69d8e, 0x9019aa74, 0x24f4a07c, 0x5de70f9c, 0xaf348dee, 0x447eb3fa, 0xffe97969, 0x8f163c00, 0x82e73f3d, 
    0xa98b36d6, 0xc5b37ecf, 0x73c51277, 0x5564fb6e, 0xfad383e9, 0x745aedf7, 0x5f6d2a95, 0x8bc861f5, 0xc54a3a51, 0x661ca57c, 0x72aa08a6, 0xaaa00f14, 
    0x4febbfb6, 0xb86eb5fb, 0x7c960b71, 0xe80963ab, 0x64c914ec, 0x333694f2, 0x0df529ce, 0xfea1fad7, 0x2a4a65f5, 0x2a8a4953, 0xffda6fec, 0x68fdd800, 
    0x1ffb5ffb, 0x5aaa56ad, 0x34d8efc5, 0xb50da7c9, 0x038fedf6, 0xc5e97127, 0x490f4f7a, 0xd9dfd82b, 0x5ffbd6c4, 0x1fad1ffb, 0x6300ff6b, 0x163dacf5, 
    0xe758e6ea, 0x6b75bfb6, 0xbe3679bb, 0x04083230, 0xfe7a601c, 0xc342a795, 0x0ff66ad2, 0x52f41267, 0x185baa79, 0x86fa14e7, 0xff51fdd7, 0xafa67a00, 
    0x6654ac36, 0xb39230d2, 0x543b460a, 0x2dcda0b7, 0x4ff54f36, 0x8aa8e9fe, 0xc8ad44bb, 0xc7fed77e, 0xffda47eb, 0x6afdd800, 0x2fd652b5, 0x9a4bc71e, 
    0xe0d6bf68, 0xa2fd632c, 0x73bd3e70, 0xf0aa57f8, 0x8ebd92f4, 0x5b13679f, 0x7eec7fed, 0xfdaf7db4, 0x74b1d68f, 0x8ae7b96b, 0x0fa42e78, 0x46336d71, 
    0x8e3780cd, 0x643ab0a1, 0xa1d12a7f, 0x7b35e961, 0xa089b307, 0xf58672a7, 0xc7a6a519, 0xdd3fa9fe, 0xa4f2ea14, 0xf7ccd9ac, 0xfa27a10a, 0x7800ffd7, 
    0xf0a8fad5, 0x5e885d48, 0xafeb3d09, 0x4ec6280b, 0x499bd6ec, 0xe75c43ea, 0xcb5b1a8a, 0xde2e5d9b, 0xe7933313, 0x900bee32, 0xc69f3a32, 0xcbb37fba, 
    0x55d4dffd, 0xfa125dab, 0x47900cf5, 0x92760a11, 0xff87c6f3, 0xbb221e00, 0x5b493865, 0x23291b99, 0xea9eb788, 0xbd71c5db, 0xc5d8a7cd, 0xccd3e1e2, 
    0x83e3180e, 0xf907ee91, 0x94d6d435, 0x63d41cbe, 0x6e47f242, 0xa8f6ef00, 0x54cdfe8f, 0xf72fcf7e, 0x6544517f, 0xb6a1fd08, 0xb5fec786, 0x7e15de3f, 
    0x071224aa, 0x47805752, 0x585cb77a, 0x565246a9, 0x6f1a1566, 0x5f97aa40, 0xb5fb47eb, 0x0f96a26e, 0xc76e8335, 0x6159e918, 0xf24e18e7, 0xa9270d26, 
    0xddb5b14e, 0x9e53ef3e, 0x3116dad2, 0xb23c0bc0, 0x3e0e1060, 0x7fcf335e, 0xb22fbace, 0x56fab77f, 0x6be18bce, 0xe6d9567d, 0xd08e579b, 0xe808edab, 
    0x9f033c09, 0xbd6b3dbc, 0x2e2da5d7, 0xd09ba66e, 0xed342de0, 0xfb5ec74a, 0xaefd9344, 0xf2c4942b, 0x81b4096c, 0x619ff1f2, 0x6bb7d6d3, 0xfac093b0, 
    0xfc5d487c, 0xd451004b, 0x00ff43f9, 0x7b6eae8b, 0x58779228, 0x83b10c6e, 0xdd1e7385, 0xe219d7c3, 0x3d4a6d8f, 0xb9252947, 0xd3faaf0d, 0xa85bedfe, 
    0x62ca83a2, 0x3ac6b3db, 0x88c1b554, 0xc43b679c, 0xe84d9be7, 0xfad70d15, 0x4df5fea1, 0xc1305448, 0x3a6bfd00, 0x9192e572, 0x33777631, 0xd35833eb, 
    0xd61ad526, 0x088e2831, 0x38b8bcdc, 0xbc8de37c, 0xf2a26b7d, 0xf98bfbd3, 0x0be15f57, 0x2e5d224d, 0x6443b77f, 0x5348f364, 0x6d202132, 0xdf5d331d, 
    0xb1b48c5a, 0xd8dd19d1, 0x123d8bf2, 0xfb593f6d, 0x340d3754, 0x53b24532, 0x9e90963b, 0x871de3d8, 0xe8355beb, 0x348777ba, 0xb9662a2d, 0xee2cd4bc, 
    0x1d0129d4, 0xc6f76813, 0xfa724d4e, 0x5a3796cc, 0x5bd9d2a4, 0x20b91547, 0x4661ac22, 0x4f81eb00, 0xd88a11eb, 0xd9959d72, 0xa8fe6b9b, 0x53bd00ff, 
    0x300a0552, 0x5a4a1f00, 0x692ea9e0, 0x77d21c39, 0x836c0a77, 0x861eb031, 0x764a459d, 0xcb431177, 0xe537ee7f, 0x97c3974d, 0xc589d05a, 0x30c4d58d, 
    0x70a4b849, 0x7f6c4696, 0xa7d70717, 0x6fd768bd, 0x788b9be0, 0x9a948bb4, 0x4ccb38e2, 0x3fc01d70, 0x71745774, 0x1dcd4e4e, 0xb1339f10, 0x0cfe36e7, 
    0x6bbfb4bd, 0xfa1e7dcb, 0xd1d87426, 0x3e04b3a5, 0x8ad7dbf8, 0xc3d3967c, 0x122c4723, 0x5570ea46, 0x0a3f8290, 0x4c1b8df4, 0xde09f4d3, 0x396e4dea, 
    0x82365241, 0x27237e14, 0xf76bca35, 0xcc5a6af1, 0x238250f7, 0x30920262, 0xa1190348, 0xc3565ce2, 0x66aeac94, 0x831a3146, 0x51d429e8, 0xdcdd2d5c, 
    0xa2280ae6, 0x42150590, 0xfeaff54f, 0xae2ea8f1, 0x92b5b463, 0x8d8453e2, 0x3e751c4b, 0x96bbdec3, 0xc6fcea12, 0xad9997ca, 0xde586345, 0x795ba8c5, 
    0xb85106f1, 0x328c23ab, 0x3b827190, 0xfa1fb51a, 0x7800ffd4, 0x5f9af050, 0x4b07f09b, 0x1445bfcc, 0x51880957, 0x51001445, 0xd6bf2e55, 0x9d6af78f, 
    0xb3b4c0e5, 0x4480e49a, 0xe3045b48, 0x5d331d38, 0x45f3c290, 0x9daae64a, 0xd16beed5, 0x8217b658, 0xb34bd8f6, 0x24c570cb, 0x304a908c, 0xdaaf2238, 
    0x3fad00ff, 0x2f3cd1ee, 0x0eae5c2c, 0x5bee959d, 0x8c2b8aa2, 0x8aa228c8, 0xeea82800, 0xe137d43f, 0xf232ebfc, 0xe5ac2ce9, 0x621b93b9, 0x33ced852, 
    0x951e3fe8, 0xb4874ad3, 0x69ec358f, 0x9a2b7318, 0x9d2656f4, 0xaf85ba7c, 0x0e01bb9c, 0x781fc1c8, 0xef751c04, 0xd6f88391, 0x85fabfbd, 0x159d7ffc, 
    0xf3387b68, 0x7228e15e, 0xa2284aa2, 0x8ac28cb9, 0x8a02a028, 0xe3f2222b, 0xcc92b6ec, 0xfc2a7317, 0xece6fdab, 0xf881133f, 0xfb68f4d6, 0x176beb4b, 
    0xf41a7308, 0x769f2e56, 0x99446d2f, 0x9094d41b, 0x1c184600, 0xd7230f1e, 0x5b119c07, 0xeca35654, 0x13eeaded, 0x45512887, 0x45018115, 0x09055014, 
    0xfbbfd63f, 0x9b75b3c6, 0x352bf519, 0x885586b6, 0x58c88034, 0xf41ce567, 0x7c2bceef, 0xa2e484c6, 0x78da55fe, 0xeed34d33, 0x6e899b74, 0x65a72d6c, 
    0x12c9e098, 0xc7d1c6b1, 0xe218bd22, 0x63cb2563, 0xb1bb13a2, 0x9d4e5ae5, 0xd13d6175, 0x5967e59e, 0x022138d8, 0x38eedc7c, 0x6ac5731c, 0x3fb5fe47, 
    0xbae815de, 0xaf8dc62d, 0xf0a9254f, 0x6103b4e5, 0x488d4526, 0x8351881f, 0xa6bbc65c, 0x13eba541, 0x4401c25a, 0x2347ae20, 0xe2a13823, 0x1ca2a322, 
    0x8572ada4, 0x715e5114, 0x455114cc, 0x89b85700, 0x9151c1dd, 0xf0705a8f, 0x1be2a786, 0xda816022, 0xf605e508, 0x739c894a, 0x749c9383, 0x775753e9, 
    0x1a8d53e0, 0x9838e3e4, 0x0100fff1, 0xbc4ed715, 0x0d6dc9ad, 0x63b7c9e9, 0x092fb4ce, 0x576e4c5f, 0x5479b74b, 0xa5d591b8, 0x8c91945f, 0x714e8ee5, 
    0xb5556aea, 0x48e6d69a, 0x84ac4de6, 0x82830ca3, 0x367ab50f, 0xac43af83, 0x7aa42d4b, 0x8452b561, 0xfcb88997, 0xc73518c0, 0xe911d6eb, 0xd1f6c4ba, 
    0x08526439, 0x464672dc, 0xf23aa779, 0x0996b670, 0xcee876bf, 0x8c2b8aa2, 0x8aa228c0, 0xe6896c00, 0x35e35c21, 0x2df8a2ab, 0x6719eb35, 0xb144f492, 
    0x0da68d49, 0x0f0c23f9, 0x00ff1dde, 0x77576695, 0x1a8d53e0, 0x9838e3e4, 0x0100fff1, 0x921abd15, 0x869eba8f, 0x8ebd9bb4, 0x5df04873, 0x1bd3ac86, 
    0x29835d2d, 0x78d64d06, 0xfd0023c9, 0xd26f00ff, 0xfbb5a7b2, 0xbbb6c415, 0x8c4c9ec4, 0xecc6c09b, 0xf65d3312, 0xac43af83, 0x7aa42d4b, 0x8452b561, 
    0xfcb88997, 0xc73518c0, 0xe911d6eb, 0xd1f6c4ba, 0x08526439, 0x464672dc, 0xa456a779, 0x557615a7, 0x67a67847, 0xce154551, 0x45511460, 0x78d41500, 
    0x46bac34f, 0x3dcfa6a5, 0xe99aa7ed, 0xc77c5029, 0xb1071818, 0x77d7cb15, 0x1a8d53e0, 0x9838e3e4, 0x0100fff1, 0x3429ad15, 0xbeb466f4, 0x423f0d22, 
    0x92b896f0, 0xb1a495ad, 0x2ec978b4, 0xeaf48ce0, 0x8d5ced48, 0xf2da02dc, 0x84db707b, 0xf56e3252, 0xbb6bc6c1, 0x75e875d0, 0x8fb46589, 0x50aa364c, 
    0x1f37f192, 0xb8060398, 0x3dc27afd, 0xda9e5837, 0x418a2c27, 0xc8488e1b, 0x49ea34cf, 0xc7dd26c9, 0x67a65853, 0x89154551, 0x14455188, 0x8bd65600, 
    0x168d5be2, 0x0886e0d9, 0xc9fb0ee4, 0x0fd07372, 0x04b558e9, 0x6d094bd7, 0x925105c0, 0xad00b0c5, 0x7e52c629, 0xf4bd51e9, 0x793cf93a, 0x961032a8, 
    0x8d1e23d0, 0x5cebc7c9, 0x73cbf3dc, 0x9733cf3b, 0x8f59ce91, 0xefad5473, 0x6463e516, 0xdc45925f, 0xe919dba7, 0x19a96856, 0x9343dac5, 0x280ad296, 
    0x2820b3a2, 0x2b008aa2, 0x2df1456b, 0xf06c8bc6, 0x07720443, 0x39b9e47d, 0xacf407e8, 0xe1e2865a, 0xe07b936d, 0x27960428, 0xaede0100, 0x8e564e0a, 
    0xd0f746e5, 0xe6f1a4eb, 0x5b42c8a0, 0x377a8c40, 0x73ad1f27, 0xcc2dcf73, 0x5ece3cef, 0x3d663947, 0xbab454cd, 0x6856c84b, 0x65a8e3fe, 0x2af2a03e, 
    0x9dcc277a, 0xd97212a4, 0x50511485, 0x14455148, 0x8bd65600, 0x168d5be2, 0x0886e0d9, 0xc9fb0ee4, 0x0fd07372, 0x8eb458e9, 0xbb9054c5, 0x8daaa08f, 
    0x69d3a0ef, 0x783275e8, 0x216450f3, 0x3d46a02d, 0xd68f931b, 0x96e7b9b9, 0x679e77e6, 0xb39c232f, 0x46a2e61e, 0xda95a02c, 0x122d0d7d, 0x9463f66e, 
    0xa228dc9b, 0x8a42928a, 0xb602a028, 0xdc125fb4, 0x04cfb668, 0x77204730, 0x9e934bde, 0xc54a7f80, 0x6c6d9aa2, 0x1dd5da34, 0xd43c9e44, 0x684b0819, 
    0xe4468f11, 0x6eaef5e3, 0x9db9e579, 0xc8cb99e7, 0xb9c72ce7, 0xc9a1e8a8, 0xdee4c6bd, 0x521445e1, 0x8aa22824, 0xbfc52a00, 0xcb352f86, 0x630b5e79, 
    0xbf314734, 0x4e4715ef, 0xd5d02747, 0x083cef7a, 0x40eed109, 0x8f732638, 0x9456e4fb, 0x9ad152db, 0xc9915753, 0x5b758227, 0x84adcb18, 0x2066419b, 
    0x24c9ad48, 0x52cf019e, 0x1c04816a, 0xd32b8211, 0x4f3d9bf4, 0xbe768a4f, 0x80a437bd, 0x8f510751, 0x735eeb73, 0xa50e99a8, 0x61c4d272, 0xc6989576, 
    0x3827877f, 0xcdee52a7, 0x666da48e, 0x2b8aa256, 0x8aa22023, 0xd6ab0028, 0xaaa10e3a, 0x5adad2c2, 0x691b9189, 0xfe60d425, 0x79d7a826, 0x8f4e40e0, 
    0x33c10172, 0x22df7f9c, 0xb8ec0aae, 0xc31cbb2b, 0x815953f8, 0x803c9d0b, 0x2765ec3a, 0x88b206f2, 0x118ce020, 0xd9a49f5e, 0x537c7aea, 0xbde9f5b5, 
    0x3a880224, 0x5a9f7b8c, 0xc8449df3, 0x96962b75, 0xacb40b23, 0x39fc33c6, 0xc639c539, 0xb2718eda, 0x288a5ab9, 0x8ac2ccac, 0xaf02a028, 0x8e7a68d8, 
    0x674b0ba9, 0xb6a2e66d, 0xe0aa77d2, 0xa8de27fe, 0x40e07957, 0x01728f4e, 0x7f9c33c1, 0x2aaa22df, 0x2ac2c5ee, 0xa5e6cc4e, 0x0ab7b6f0, 0xc0066b17, 
    0x8fd5b5eb, 0x10640de4, 0x2218c141, 0xb3493fbd, 0xa7f8f4d4, 0x7ad3eb6b, 0x75100548, 0xb53ef718, 0x90893ae7, 0x2c2d57ea, 0x59691746, 0x72f8678c, 
    0x8d728a73, 0x1505e790, 0x5114b572, 0x51146650, 0x7e150045, 0x75d443c3, 0x3b5b5a48, 0xb615356f, 0x0757bd93, 0x42f53ef1, 0x0202cfbb, 0x0e907b74, 
    0xfee39c09, 0x575115f9, 0x52112e76, 0x2f356776, 0x50b8b585, 0x073658bb, 0x7facae5d, 0x82206b20, 0x15c1080e, 0x9e4dfae9, 0x3bc5a7a7, 0xd29b5e5f, 
    0xa8832840, 0xaff5b9c7, 0x874cd439, 0x6269b952, 0xcc4abb30, 0x93c33f63, 0x6c94539c, 0xab283887, 0x8aa2a895, 0x8aa23083, 0xdfae0028, 0xf11637c1, 
    0x35291769, 0x989671c4, 0x7e803be0, 0x8a22aee8, 0x953bbba8, 0x9dbb7219, 0x69a68de6, 0x75ef04fa, 0xa01cb726, 0x0a411ba9, 0x9a93113f, 0xf8fb35e5, 
    0x7b662db5, 0xb11141a8, 0x24184901, 0x75d68c01, 0x595d3914, 0xc9eaca0d, 0x52511405, 0x14455140, 0xe06f5700, 0xb4788b9b, 0xe29a948b, 0x704ccb38, 
    0x743fc01d, 0x54451157, 0x8cca9d5d, 0xf3ce5db9, 0xfd34d346, 0x93ba7702, 0x54508e5b, 0x1f85a08d, 0x72cdc988, 0x5afcfd9a, 0xd43db396, 0x80d88820, 
    0x00128ca4, 0x8a3a6bc6, 0x86acae1c, 0x826475e5, 0x20a9288a, 0x008aa228, 0x4df0b72b, 0x455abcc5, 0x1c714dca, 0x0e38a665, 0x2bba1fe0, 0x2eaaa288, 
    0x5c46e5ce, 0xa379e7ae, 0x817e9a69, 0xad49dd3b, 0x462a28c7, 0xc48f42d0, 0x4db9e664, 0x4b2dfe7e, 0x10ea9e59, 0x52406c44, 0x63000946, 0x0e459d35, 
    0x72435657, 0x4541b2ba, 0x14905414, 0x15004551, 0xe226f8db, 0xe5222dde, 0x328eb826, 0x70071cd3, 0xc415dd0f, 0x67175551, 0x572ea372, 0xb4d1bc73, 
    0x9d403fcd, 0xe3d6a4ee, 0x68231594, 0x32e24721, 0xbfa65c73, 0xaca5167f, 0x220875cf, 0x23292036, 0x9a318004, 0x2b87a2ce, 0x5db921ab, 0x8aa22059, 
    0xff3f482a, 0x000000d9, 
};
};
} // namespace BluePrint
