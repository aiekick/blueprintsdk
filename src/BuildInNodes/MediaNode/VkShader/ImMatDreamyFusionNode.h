#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Dreamy_vulkan.h>

namespace BluePrint
{
struct DreamyFusionNode final : Node
{
    BP_NODE_WITH_NAME(DreamyFusionNode, "Dreamy Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Shape")
    DreamyFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Dreamy Transform"; }

    ~DreamyFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Dreamy_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return false; }
    bool Skippable() const override { return true; }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf773"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    ImGui::Dreamy_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 3806;
    const unsigned int logo_data[3808/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa9a22820, 0x00fff76a, 0xb76cbad9, 
    0x18756923, 0x760bdd40, 0xc095dda4, 0xda7345bb, 0x6fae881f, 0x7bcbbeef, 0x4d177114, 0xb952edd1, 0x57fadcef, 0x52324a43, 0x51144057, 0x450b5045, 
    0x51805414, 0x2ed45745, 0x359d8e85, 0x7c9005d7, 0xb527f4a0, 0x140bd80d, 0xaf832656, 0xbddda9c9, 0xa351ccb5, 0x0185dc6c, 0xadc9fc19, 0x28c5c1b3, 
    0x005d49c9, 0xc0144551, 0xa4a2285a, 0x8e8aa290, 0xd3b475f6, 0x793fb9a6, 0x420fca07, 0x4a32507b, 0xd6422b2b, 0xf674a54e, 0xdb8a08d7, 0x47402137, 
    0x46ac35f3, 0x49438f18, 0x58d0d534, 0x98a2284a, 0x15455187, 0x4d511420, 0xf42d91b9, 0xf949aee9, 0x891d8593, 0xa20e40ed, 0x546d74b3, 0xde66376a, 
    0xca48aa6d, 0x75fe186c, 0x156bc3a6, 0x9aa438f4, 0xb01ae86a, 0x30455194, 0x2b8aa223, 0x1fb98262, 0xbb065f18, 0xf296c882, 0x1d200fd3, 0xd600fff3, 
    0x56d775fe, 0x11243a74, 0x19a9cf6a, 0xcf679265, 0xfa0c8c0d, 0x44c5e971, 0x1ab292d3, 0x5efd2b39, 0x5b2bf5d5, 0x20293ecd, 0xa4ac0030, 0x743a9001, 
    0x77579c3e, 0x293ca90c, 0xea28672c, 0x6a501f18, 0x874f470d, 0xd336b453, 0x20480a96, 0xa54750af, 0x6cd1c63a, 0x49b6e36c, 0x8031d61d, 0xe1c7195f, 
    0x6c71314a, 0x4551140b, 0xa2682168, 0xe60a908a, 0xac7853fc, 0xc2ef58f0, 0xd3877ce7, 0xd2b5feb0, 0x51685256, 0xeb4b5e9d, 0x36c20589, 0x08881471, 
    0xc26ffd1f, 0x64b569a2, 0xd4bcc308, 0xadd5636c, 0xcae7f42e, 0x02aeaac4, 0xef388091, 0x05b12bea, 0x95530658, 0x3b6b9061, 0x2f6dd150, 0xc1500c2d, 
    0x0499b40d, 0x47009148, 0x61b18ae5, 0x5176f66c, 0x9428c95b, 0x03ee36c6, 0x45a91d19, 0x96c1dd34, 0xd08aa268, 0x2a8aa205, 0xf1c20a49, 0x86b1da1d, 
    0x7617b6c8, 0x61a70ff9, 0xb3766bfd, 0xea14d2a2, 0x3add5e92, 0x449cad4e, 0x75d88153, 0x596d9aa8, 0x3af7180d, 0xad7a848d, 0xc79ac6ad, 0xc6156a64, 
    0x1f0730d2, 0xeda8aea8, 0xa4722a27, 0xa8a31a64, 0x56975669, 0x787b1ba6, 0x87209f2d, 0xf2238048, 0x6e634dc5, 0xc171b6f6, 0x206bbe24, 0x8e63ecc6, 
    0xdd3445d4, 0xa2e8c9c6, 0x5147b28a, 0x15201545, 0x2b5dae91, 0x61cbac08, 0xe9736f77, 0xd75a7fd8, 0xaa6930aa, 0xee2e2935, 0x27566799, 0x76e09411, 
    0x9b646a1d, 0x4d464356, 0x359cfed5, 0xd6f4790b, 0x1850cb23, 0x7ff72b6d, 0x12d2d5fa, 0xb78d868d, 0xfbc00023, 0xc7e68a1a, 0xa2dd9a4f, 0x0b38ce8e, 
    0xaa481c7f, 0x6b49e947, 0xd66d2d6e, 0x5e382311, 0x8ad2ba85, 0xd4648369, 0x86584551, 0x67a3f7ec, 0x398a3ebd, 0xd98c5d98, 0x7acf46ef, 0xd8d62e7d, 
    0xf56a075f, 0xe628706c, 0xb3477661, 0xf49e8dde, 0xb9622ed8, 0xb9584877, 0xa77cef8f, 0x967a9f1f, 0x6317768e, 0xb3d17b36, 0x1c459fde, 0xecc62ecc, 
    0xbd67a3f7, 0x669e8a3e, 0x3d9bb12b, 0x4fefd9e8, 0x856565a5, 0x17c52aa6, 0x18672039, 0xc2cc51fa, 0xbd678fec, 0xb6e93d1b, 0x6edd11f7, 0xd1b677f2, 
    0x8f619493, 0x73b454cc, 0xb319bbb0, 0xf49e8dde, 0x61e628fa, 0x7acf2676, 0xa8d37b36, 0xbb62e6a9, 0x8ddeb31b, 0x91eaf49e, 0x79e19560, 0xf7897295, 
    0x7314478e, 0xd921bb30, 0x7acf46ef, 0x8d5b6548, 0xdab952de, 0x0c1b7332, 0x479f627e, 0xbbb10b3b, 0xefd9e83d, 0x668ea24e, 0xf76c6217, 0x3abd67a3, 
    0x2b669e8a, 0xe83dbbb1, 0xa94eefd9, 0x589ab563, 0xa24c645e, 0x3190e37d, 0xb20b3347, 0x6cf49e0d, 0x6684a7f7, 0x1c27d5ce, 0x94940e9c, 0x8ddd3173, 
    0xcf46efd9, 0x7314757a, 0xa28c5d31, 0x82422b8a, 0x4c2ed4a2, 0xbfc44b3a, 0x3eda677e, 0xaca5e698, 0x7a6ae7a3, 0x3adb5ba3, 0x2dc00983, 0xd4d411d0, 
    0x7754e8c9, 0xc61d651f, 0x6e40aa8d, 0xa8b1e47e, 0xebc9736c, 0xdcb4e2fa, 0x30102383, 0x99153809, 0x706aa173, 0x2fae6ec4, 0x58c7e9de, 0xf50427c0, 
    0xaa00ffc7, 0xb939c5af, 0x2a652589, 0x8cc000c4, 0xa3343872, 0x872d81a6, 0x641545d1, 0x5414458b, 0x99bb2888, 0x27314a93, 0x635c96de, 0xaafe1fdb, 
    0xb6baa52a, 0x6d49a9ab, 0x3904bb1c, 0x3c3887f9, 0x7e7cfe64, 0xc5d29b14, 0x71f67147, 0xa4fae8dc, 0x49c16a5f, 0xf5400210, 0xade2faeb, 0xc8954148, 
    0x078e0518, 0x419b53a5, 0x33a36dd4, 0x7749a8cd, 0xc41da2b7, 0x5693718f, 0x2aede356, 0xc42a95b2, 0xe418d900, 0x4d476970, 0xa2852d07, 0x16882a8a, 
    0x10a9288a, 0x534eb254, 0xef13684c, 0x0c3f264b, 0x45b5fe0f, 0xf7445a51, 0x312392d7, 0x5de11085, 0xa30e1c87, 0x8ecaa4f1, 0x7549d6e4, 0xfd31eaa4, 
    0x001d05af, 0xebf58cca, 0x299de2fa, 0x1895330d, 0xa5078e05, 0xa516fa44, 0xf579866a, 0xd10bbb17, 0xbf47e20e, 0x1fd79e26, 0xa45d2269, 0x8c6c0012, 
    0x0b0d8e64, 0x842d074d, 0x90298aa2, 0x5251142d, 0x3169ab20, 0x4fe12d5d, 0xfc982cbd, 0x2ea52a30, 0x5c5e1b9f, 0x14e68c4a, 0x0cbbc256, 0xc68f1c76, 
    0x62b9e182, 0x45e7dac6, 0x4eb54fbf, 0x03104966, 0xfdf538c1, 0x6988196a, 0xa9362ae4, 0xe6f44062, 0xac093495, 0x999a4e43, 0xc97c00bb, 0x53bfa7b7, 
    0xde51d744, 0xc1226ec8, 0x7a240356, 0xa069a1f7, 0x141db1e5, 0xca984151, 0xb92a4a2a, 0x073a72c7, 0xa58fd3cb, 0xe11c4549, 0xf5c43272, 0x8a928a26, 
    0x74e4c239, 0xce519454, 0x49451917, 0xae384f45, 0x7ef94047, 0xa9f419ef, 0x2e9ca328, 0xac1eb330, 0x5249e34f, 0x5c384751, 0x8a928a8e, 0x28e3c239, 
    0xe7a928a9, 0x52d1910b, 0x5c384751, 0x05236661, 0x2a69fc89, 0x0be7284a, 0x5152d191, 0x655c3847, 0x3c152d15, 0x1515b9e2, 0x8573142d, 0x8c71b2c8, 
    0x3ac668f0, 0xce51b454, 0xa5a22217, 0xb9708ea2, 0x5451141d, 0x481bad30, 0x9a4c9b2d, 0xeadca379, 0x8ee454db, 0xad569dd5, 0xa2dd06a7, 0xe6beaa3c, 
    0x410585fc, 0x36463f6a, 0x43929c1a, 0x0c05c3b1, 0x55c5c809, 0xaf143396, 0x2a46751b, 0xd7920a7f, 0xbdbeb75c, 0xbdd9b34f, 0x88f955b8, 0xf6f0633c, 
    0x0513f6a2, 0xfd7da1d3, 0x9ae77ac3, 0xd292c316, 0x455114e4, 0x14450b04, 0x572b8854, 0x93b5b54f, 0xe3799a4c, 0x54fbeadc, 0xacb023ee, 0xe6d3d1aa, 
    0xcf78651f, 0x6f6eb22a, 0x414553c8, 0x2769925d, 0x481ed64a, 0xcac680a3, 0x1f589033, 0x9ece9ad4, 0x2279263f, 0x5c3176ce, 0xcbd5e0fa, 0xf2da623d, 
    0xd4da56f1, 0x31bfaac2, 0x751c074e, 0xea50edc0, 0x7b6de936, 0x64b15124, 0xc67d82e0, 0x2539e868, 0x14ada26b, 0x68814851, 0x05918aa2, 0x1636696c, 
    0x75cd5893, 0x12ca8570, 0x3a1077a1, 0x1e6b4e0f, 0x878974b6, 0xb08b64d8, 0x14f22793, 0x635770d1, 0xf5d1a4b4, 0xa0289296, 0x3940d968, 0x991f8105, 
    0x7e3c9135, 0x0391c44d, 0xcf9563bb, 0xd86a0dae, 0xd7d7366b, 0x436b3b62, 0x8af9850a, 0xb84e0f1c, 0xb6534715, 0x22f94b4b, 0xc1208b8d, 0x66e4f504, 
    0x5692838e, 0x45512aba, 0x51c78c14, 0x0a221545, 0x9b74d2d8, 0x6b3edd5b, 0x6455de89, 0x0061a37d, 0xf5de1e74, 0x0cfa5b8f, 0x583afb83, 0x96344fcf, 
    0xb93585fc, 0xe9625770, 0xaa2eda76, 0xdf188265, 0x2603407c, 0xf2fb04e6, 0x1d56fa71, 0xcc455ec4, 0xe5dd86b0, 0xe0fa5cb9, 0xdd34b7e2, 0xebf2d262, 
    0x6d76f6ec, 0xdc98280c, 0x060e1ca7, 0xdce3d071, 0x6aab56d6, 0xb08c7a96, 0x6090c5c6, 0x8c3c4f82, 0x690e7bd3, 0x45a9e85a, 0x91995414, 0xefd94ed1, 
    0xd37acf46, 0x36741599, 0x3ae7d3a5, 0xaf2aaf7c, 0xbec5ce98, 0x9962dc6e, 0x9e8ddeb3, 0x522073f4, 0x56fb72b1, 0x820df29e, 0xddc79138, 0xa28a137c, 
    0x9919561a, 0x18a8bfc3, 0x7bb653fa, 0x8edeb3d1, 0x8d2b3774, 0xdeb39da2, 0x73f49e8d, 0x45095d21, 0x1bbd673f, 0x9079ea3d, 0x8d5586ae, 0xd7b4f136, 
    0x33124577, 0xb79b6fb1, 0x7bb6a818, 0x8edeb3d1, 0x172b3564, 0x2679756e, 0xf056a484, 0x2f9cdd44, 0x334fce4a, 0xf364ef6f, 0xd47abb1f, 0xd9e83d9b, 
    0x073a47ef, 0x8a32ee2b, 0x367acf7e, 0x85ccd17b, 0x7e8a3674, 0x7b367acf, 0x5d21f3d4, 0x759aab0c, 0xf691d3f0, 0x726725c6, 0x634c7fc7, 0xbd675b15, 
    0xe7e83d1b, 0xc6b65243, 0x34bbce8d, 0xde8e94d0, 0x05b39b08, 0xc86059e9, 0x9121cddc, 0xe93d56cf, 0xd9e83dfb, 0x609a43ef, 0x51c67de5, 0x46efd94f, 
    0x90397acf, 0x9da284ae, 0x9e8ddeb3, 0x57c83cf5, 0x47476b43, 0x52d3e3d4, 0x36139a45, 0x808eddf7, 0xaaf40770, 0xd9e83d1b, 0x439a42ef, 0xadc6b652, 
    0x686588c7, 0xb0d6568c, 0x2184a340, 0xc5ede87e, 0xc9951664, 0x3932a469, 0x4eefb13c, 0xcf46efd9, 0x8d696e7a, 0xa28dfbce, 0x8ddeb39d, 0x91b9f49e, 
    0x45514237, 0xb0540014, 0x21dc5cda, 0x95e56d78, 0x4264c141, 0x2aaafc40, 0xc532bcea, 0xfdc27974, 0xff8198e6, 0x698a7c00, 0x7715955d, 0x4b8f9f63, 
    0xdb7693bf, 0x9351be39, 0xc68f2394, 0x838391aa, 0x7594a65d, 0xea90666b, 0x1b958d4a, 0xfa643c16, 0x7c2557fb, 0xd24edf5c, 0x91666246, 0x39fc4389, 
    0xac36c539, 0x886c948a, 0x938aa228, 0x8aa26831, 0x1b9a0a90, 0x2f94ab2b, 0xa8d2b405, 0x96912c38, 0x0d15fe00, 0x62121e76, 0xbf807b34, 0xff71cc78, 
    0xa88a7c00, 0x1ea3b2ab, 0x7b966367, 0xb3d4d80b, 0x39aaced9, 0x0760a225, 0x795750e9, 0x015a9da5, 0x32c26a2b, 0x63441bb8, 0xf881df27, 0xc8761357, 
    0x68bcb3f7, 0x2a461a51, 0xcf6863a4, 0x39ac8602, 0x8a86c846, 0x5a20a928, 0x41a4a228, 0x7763c153, 0xeded8572, 0xc1419966, 0x0358c631, 0xdb1554f8, 
    0xec9f2c78, 0x4cbd8d7b, 0xc8f71fc7, 0xb1bb8aaa, 0xb1338f50, 0x7d9dbec8, 0xca92171a, 0x2d7514e1, 0x4a3f0013, 0xa58d5eaf, 0x4c12af36, 0xa88cb8da, 
    0x648ca000, 0x0a3ff0fb, 0x47c6fbf3, 0x42e39dbe, 0x5531d288, 0x78461b23, 0x1c364a14, 0x454364a3, 0x2d905414, 0x20525114, 0x17f616ab, 0xda5e6897, 
    0x1c9479d2, 0xc0328e16, 0xd7abc21f, 0x4e40e079, 0x5f07728f, 0xf9fee33c, 0x76575115, 0x76e6112a, 0xec00ff38, 0xcc7f507d, 0xfcfeef36, 0x3255f837, 
    0x04233808, 0x36e9a757, 0x539cb5fa, 0xc96800ff, 0x2840ce1d, 0x3e667622, 0xf4c0e6a3, 0x41d439af, 0x61ce951a, 0x3e56e630, 0x04155c59, 0x28a718e7, 
    0x723815d9, 0xa2a895ab, 0x9431838a, 0x506c4551, 0x50e14b57, 0x884e59d3, 0x07a74470, 0xcd15e5d3, 0x41479653, 0xa15f7684, 0xcaec34c5, 0xce5db98c, 
    0x53c7d29e, 0xb5aeddd2, 0x8464557d, 0x19992a0c, 0xf740fcb9, 0x4b75b0e2, 0x0935d4d4, 0x1552632e, 0x094606b0, 0xb36ac6c0, 0xee30ee48, 0x69ce3dcc, 
    0x39e8dbb4, 0x45c1ea4a, 0x2d905414, 0x01525114, 0xc3836f5d, 0x2a5ca749, 0xc129111c, 0x8a8000ff, 0x24cba9e4, 0xca8e3088, 0xa7298e3d, 0xca655466, 
    0x5e7a76ee, 0xcc58ac97, 0x983aeaf3, 0xd9b8309a, 0x727d98bd, 0x3a73c5d8, 0x7a57cce5, 0x41c0f2bc, 0x77044042, 0x75fee4c0, 0xc695a64d, 0xe861471a, 
    0xb729d358, 0x5d2987a5, 0x51140559, 0x51b44052, 0xbb824845, 0xfa02054f, 0xc1a9ca55, 0xfc0f8ef3, 0x4e175704, 0x618c6449, 0xc71e6524, 0xeeece214, 
    0xeeca6554, 0x973e7a77, 0xbcf3e9ab, 0xe7a98eda, 0x868db445, 0x5c9f6146, 0xf5e44ab7, 0xf52e98fb, 0xc8ad89ab, 0xe1069231, 0x261888d1, 0xb8d2b4a8, 
    0x3dec48c3, 0xa64c130b, 0x396475e5, 0x28c8ea4e, 0x05928aa2, 0x442a8aa2, 0x26f8db15, 0x222ddee2, 0x8eb826e5, 0x071cd332, 0x15dd0f70, 0x175551c4, 
    0x2ea37267, 0xd1bc7357, 0x403fcdb4, 0xd6a4ee9d, 0x231594e3, 0xe2472168, 0xa65c7332, 0xa5167fbf, 0x0875cfac, 0x29203622, 0x31800423, 0x87a2ce9a, 
    0xb921ab2b, 0xa220595d, 0x3f482a8a, 0x0000d9ff, 
};
};
} // namespace BluePrint
