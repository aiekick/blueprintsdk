#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Morph_vulkan.h>

namespace BluePrint
{
struct MorphFusionNode final : Node
{
    BP_NODE_WITH_NAME(MorphFusionNode, "Morph Transform", VERSION_BLUEPRINT, NodeType::Internal, NodeStyle::Default, "Fusion#Video#Mix")
    MorphFusionNode(BP* blueprint): Node(blueprint) { m_Name = "Morph Transform"; }

    ~MorphFusionNode()
    {
        if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
        if (m_logo) { ImGui::ImDestroyTexture(m_logo); m_logo = nullptr; }
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_first = context.GetPinValue<ImGui::ImMat>(m_MatInFirst);
        auto mat_second = context.GetPinValue<ImGui::ImMat>(m_MatInSecond);
        float progress = context.GetPinValue<float>(m_Pos);
        if (!mat_first.empty() && !mat_second.empty())
        {
            int gpu = mat_first.device == IM_DD_VULKAN ? mat_first.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_first);
                return m_Exit;
            }
            if (!m_fusion || m_device != gpu)
            {
                if (m_fusion) { delete m_fusion; m_fusion = nullptr; }
                m_fusion = new ImGui::Morph_vulkan(gpu);
            }
            if (!m_fusion)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_first.type : m_mat_data_type;
            m_NodeTimeMs = m_fusion->transition(mat_first, mat_second, im_RGB, progress, m_strength);
            im_RGB.time_stamp = mat_first.time_stamp;
            im_RGB.rate = mat_first.rate;
            im_RGB.flags = mat_first.flags;
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        ImGui::TextUnformatted("Mat Type:"); ImGui::SameLine();
        ImGui::RadioButton("AsInput", (int *)&m_mat_data_type, (int)IM_DT_UNDEFINED); ImGui::SameLine();
        ImGui::RadioButton("Int8", (int *)&m_mat_data_type, (int)IM_DT_INT8); ImGui::SameLine();
        ImGui::RadioButton("Int16", (int *)&m_mat_data_type, (int)IM_DT_INT16); ImGui::SameLine();
        ImGui::RadioButton("Float16", (int *)&m_mat_data_type, (int)IM_DT_FLOAT16); ImGui::SameLine();
        ImGui::RadioButton("Float32", (int *)&m_mat_data_type, (int)IM_DT_FLOAT32);
    }

    bool CustomLayout() const override { return true; }
    bool Skippable() const override { return true; }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::keys * key) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        float _strength = m_strength;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        ImGui::Dummy(ImVec2(200, 8));
        ImGui::PushItemWidth(200);
        ImGui::SliderFloat("Strength##Radial", &_strength, 0.0, 1.f, "%.1f", flags);
        ImGui::SameLine(320);  if (ImGui::Button(ICON_RESET "##reset_strength##Radial")) { _strength = 0.1f; changed = true; }
        ImGui::PopItemWidth();
        if (_strength != m_strength) { m_strength = _strength; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("strength"))
        {
            auto& val = value["strength"];
            if (val.is_number()) 
                m_strength = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["strength"] = imgui_json::number(m_strength);
    }

    void load_logo() const
    {
        int width = 0, height = 0, component = 0;
        if (auto data = stbi_load_from_memory((stbi_uc const *)logo_data, logo_size, &width, &height, &component, 4))
        {
            m_logo = ImGui::ImCreateTexture(data, width, height);
        }
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size) const override
    {
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        // if show icon then we using u8"\uf3a1"
        if (!m_logo)
        {
            load_logo();
        }
        if (m_logo)
        {
            int logo_col = (m_logo_index / 4) % 4;
            int logo_row = (m_logo_index / 4) / 4;
            float logo_start_x = logo_col * 0.25;
            float logo_start_y = logo_row * 0.25;
            ImGui::Image(m_logo, size, ImVec2(logo_start_x, logo_start_y),  ImVec2(logo_start_x + 0.25f, logo_start_y + 0.25f));
            m_logo_index++; if (m_logo_index >= 64) m_logo_index = 0;
        }
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatInFirst, &m_MatInSecond}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter       = { this, "Enter" };
    FlowPin   m_Exit        = { this, "Exit" };
    MatPin    m_MatInFirst  = { this, "In 1" };
    MatPin    m_MatInSecond = { this, "In 2" };
    FloatPin  m_Pos         = { this, "Pos" };
    MatPin    m_MatOut      = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatInFirst, &m_MatInSecond, &m_Pos };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_strength    {0.1f};
    ImGui::Morph_vulkan * m_fusion   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_size = 4197;
    const unsigned int logo_data[4200/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x07070a00, 0x0a060708, 0x0b080808, 0x0e0b0a0a, 0x0d0e1018, 0x151d0e0d, 
    0x23181116, 0x2224251f, 0x2621221f, 0x262f372b, 0x21293429, 0x31413022, 0x3e3b3934, 0x2e253e3e, 0x3c434944, 0x3e3d3748, 0x0b0a013b, 0x0e0d0e0b, 
    0x1c10101c, 0x2822283b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 0x3b3b3b3b, 
    0x3b3b3b3b, 0x3b3b3b3b, 0xc0ff3b3b, 0x00081100, 0x03000190, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcf003f00, 0xd22b8aa2, 0xa9a22820, 0x00fff76a, 0xb76cbad9, 
    0x18756923, 0x760bdd40, 0xc095dda4, 0xda7345bb, 0x6fae881f, 0x7bcbbeef, 0x4d177114, 0xb952edd1, 0x57fadcef, 0x52324a43, 0x51144057, 0x450b5045, 
    0x51805414, 0xcd8ae440, 0xd246b5d7, 0xd8c98ba3, 0x09249364, 0x8c812001, 0x93d623f4, 0x69605776, 0x167a5851, 0x797d77ad, 0xb4697734, 0x6a246b34, 
    0x19070a00, 0xf220e7f7, 0x4df0706b, 0xba929211, 0x298aa200, 0x4551b480, 0x15452149, 0x8deaae9d, 0xc3313ca5, 0x09cabb1a, 0x0c149ecb, 0xf77b1d76, 
    0xec4adaa4, 0x95158d66, 0x77376aa2, 0xa16e4ab3, 0xf1504765, 0x0646bb02, 0x3be78e33, 0x306bcd81, 0x1a3b10c3, 0x09b8ba13, 0x10531445, 0xa4a228ea, 
    0x8e2a8a02, 0x2e0da9b3, 0x882328e6, 0x7221d248, 0xfc17b059, 0xa44d4a7f, 0x45bdc0ae, 0x8c5ae865, 0xd1d48dba, 0x0c9587ca, 0x1c2860bc, 0x1df57a1c, 
    0xd7c6556b, 0xa138f465, 0xb0a0ab3b, 0x30455194, 0x2b8aa223, 0x1fb98262, 0xbb065f18, 0xf296c882, 0x1d200fd3, 0xd600fff3, 0x56d775fe, 0x11243a74, 
    0x19a9cf6a, 0xcf679265, 0xfa0c8c0d, 0x44c5e971, 0x1ab292d3, 0x5efd2b39, 0x5b2bf5d5, 0x20293ecd, 0xa4ac0030, 0x743a9001, 0x77579c3e, 0x293ca90c, 
    0xea28672c, 0x6a501f18, 0x874f470d, 0xd336b453, 0x20480a96, 0xa54750af, 0x6cd1c63a, 0x49b6e36c, 0x8031d61d, 0xe1c7195f, 0x6c71314a, 0x4551140b, 
    0xa2682168, 0xd401908a, 0xabe22f57, 0x6fb1ce98, 0x2268b914, 0xef556440, 0x80fcc893, 0x6a70a0ae, 0xf316e983, 0x3e794f6a, 0x449b0c27, 0xbc602052, 
    0xe73f23e7, 0x4d13e1af, 0x244720ab, 0x6b318c9a, 0xc9dbde31, 0x62294139, 0x526c80ac, 0xe3c95179, 0xddd58e04, 0xc8505786, 0x418695c1, 0xc98a2007, 
    0x8dddf0bd, 0x0fbab1dc, 0x30046db3, 0x1f864285, 0xb3d09ae3, 0xa97616b6, 0x0479246e, 0xe49c0163, 0x08a5b0e3, 0x19dc2dca, 0x5a51143d, 0x4551b400, 
    0xf75c2149, 0xad6bcc89, 0xc464f3c0, 0x3bea5021, 0xd035c78d, 0x2ebd3bd5, 0xa6edfada, 0x18621eb9, 0x633c6cc2, 0xff20e79c, 0x266a9e00, 0x4743569b, 
    0xb1c91535, 0x9a99a1d4, 0xbc0fccef, 0xc2ecb0ac, 0x633e9067, 0x915d51c7, 0xe1c87028, 0x1c04b9d5, 0x9e2c56e4, 0x0733b116, 0x7788e585, 0x8e317250, 
    0xd6faf7d9, 0x6f0bbcad, 0x8a85c40a, 0x89b90baf, 0xa5c9f4c0, 0x8d7bb508, 0xa2284ab2, 0x147524b4, 0x58015251, 0xae1124de, 0x64b30cb7, 0xe05020c4, 
    0x4dcc5d77, 0xcb6bd56c, 0xa6fb6b0b, 0x8d2e7596, 0xb6874d18, 0xd49c730e, 0x0d595dc9, 0xb5f51c3b, 0xd69eb2c9, 0x146cd740, 0x6db134e4, 0xe6e37b05, 
    0xadaeb83d, 0xb83167f6, 0x0e823c74, 0xe163ac78, 0x7c9745ab, 0x931a4d33, 0x6304b992, 0xaf00ffdb, 0x1182d39a, 0xac961f6f, 0x86eea3cc, 0x323dda39, 
    0xa6d6c779, 0xb2c1ad09, 0xb4a2285a, 0xf49edd10, 0xd1a7f76c, 0xb10b3347, 0xd9e83d9b, 0x65a54fef, 0xcec6f729, 0x143700ff, 0x23bb3073, 0xcf46efd9, 
    0x2e91207a, 0xef84455e, 0x3d76e331, 0xa7d763fa, 0x1c04796a, 0xe7288211, 0x67337661, 0xe93d1bbd, 0xc2cc51f4, 0x7acf6eec, 0xe8d37b36, 0xbb62e6a9, 
    0x8ddeb319, 0x56faf49e, 0x82034246, 0x1ff7fe99, 0x17668ece, 0xe83d7b64, 0x834fefd9, 0x58a429fd, 0x3716737e, 0xd7d3df63, 0x20086aa7, 0x47118ce0, 
    0x9bb10b3b, 0xefd9e83d, 0x668ea24f, 0xf76c6217, 0x3abd67a3, 0x2b669e8a, 0xe83dbbb1, 0xa54eefd9, 0x61a8c028, 0x772377b7, 0x73b41e03, 0xb319bb30, 
    0xf49e8dde, 0x19dc54f8, 0x94774344, 0x3d86fd32, 0xa4f0d7b3, 0x18418220, 0xcc1cb523, 0xf7ecc62e, 0x3abd67a3, 0x5d98398a, 0x8ddeb389, 0x2aeaf49e, 
    0xc6ae9879, 0x67a3f7ec, 0xe59d3abd, 0x950a2ab8, 0x713782dd, 0x1ccdeb91, 0xf6c82ecc, 0xdeb3d17b, 0x9f2786a5, 0x9fd4f2cd, 0xc7f36528, 0xc25f8f1f, 
    0x1d334799, 0xf49eddd8, 0x51a7f76c, 0xd8153347, 0xb4a228ca, 0xc4332b28, 0xec9a2c6b, 0xcd4fc671, 0x702ebf6c, 0x199bdbac, 0xf1cf3aad, 0xde3eda27, 
    0x6927da1e, 0x4ec11552, 0x07c77c58, 0xfc897a8f, 0x448b4425, 0xa4df5894, 0x77b423ef, 0xc95e086a, 0xfef9c793, 0x3227af75, 0x3c791bb7, 0x0233577a, 
    0x2614c9dd, 0x880bb56f, 0x5d99c2e4, 0x8c6704b9, 0x237f1cf4, 0x3d5d125d, 0x4624dfd8, 0x02030639, 0x8c675c07, 0x10cd9113, 0xc31e587a, 0xb28aa2a8, 
    0x2a8aa245, 0xc4571544, 0xecda340b, 0x41ccc630, 0xb61052b6, 0x06e2b610, 0xb56acf7f, 0x69967850, 0x6f33e252, 0x31d6190b, 0x0ecb1883, 0x861d0f4e, 
    0x32b53e32, 0x1e894af8, 0xefd32191, 0xa634f204, 0x11c2a12b, 0x33ce33f7, 0xafd2b7df, 0xee33914d, 0xf971875d, 0xd10a2b7d, 0x96149267, 0x76836be6, 
    0x2b6bf91c, 0xda77b491, 0x0a7fe00f, 0xde5bfbd9, 0x31227931, 0x8120c0b8, 0x137bc6c9, 0x88c28feb, 0x610f2cbd, 0xa28aa268, 0x2a8aa245, 0xa90e1544, 
    0x183589f6, 0x0dc88520, 0xee079864, 0x67c0dcee, 0xad00ffd3, 0x413c5353, 0x0b249024, 0x046e4e0c, 0xf3316620, 0x8e1c5caf, 0xfa380870, 0x44c596d2, 
    0xfb974e97, 0xfb4ce03e, 0x50904dca, 0xee78ba0f, 0x8c413f4f, 0xb9fecb52, 0x24b9d0ce, 0x66051ded, 0x64a7ac5b, 0xbc7217d7, 0xbb71cced, 0x00d4b311, 
    0xb4ca0f7f, 0xb237bce5, 0x5b7e0c99, 0xd4f1a000, 0x9cfa13e0, 0x3726147e, 0xa228cab0, 0x45d10299, 0x7e0a2215, 0xab7b67a2, 0x0320a378, 0xc649a566, 
    0x9f81e403, 0x3efc416e, 0x5b93cab4, 0x89e1ed95, 0xf1fc8d63, 0x5c63ae12, 0x3de7f53a, 0x1f240870, 0xd893c67f, 0x4cd892b8, 0x1217e46c, 0x94f3216e, 
    0x03e77652, 0xc35f4f82, 0xa2e2f5d8, 0x9d7bfd9f, 0x85c4329b, 0x2a3d001d, 0xa1db2eaa, 0xb3729724, 0xbb51f7e3, 0x07be83f0, 0xca2f3fe0, 0xbde1c5d5, 
    0x144a69b8, 0x18415038, 0xd7cf68e7, 0x3d98d09c, 0x8aa2e888, 0xa4a20c64, 0x779caba2, 0xdfdca523, 0x3e9d3fde, 0xe4c2398a, 0xe6d49364, 0x398a928a, 
    0x5474e4c2, 0x17ce5194, 0x45494519, 0x47ae384f, 0xbcbfbd4b, 0x147d3a7f, 0xc9c88573, 0x15cda927, 0x85731425, 0x28a9e8c8, 0x322e9ca3, 0x9e8a928a, 
    0x281db970, 0x8f010376, 0x8ea24fe7, 0xc4c2b870, 0x69fd24f5, 0xe7284a2a, 0x52d1910b, 0x5c384751, 0x152d1565, 0x15b9e23c, 0x80813b38, 0xe8d3f9ed, 
    0x462e9ca3, 0x27a99b59, 0x5a2a69ea, 0x910be728, 0x47d15251, 0x8a8e5c38, 0x5418aa28, 0xb40d09f7, 0x0c926490, 0xb39b2c2b, 0xedf43980, 0xae829af2, 
    0x340a47de, 0xe3e1b237, 0xd08d354b, 0x62194872, 0xde11fa08, 0x5c45858e, 0x6e480b5b, 0x1d229626, 0x4fc887dd, 0x3c0f4edd, 0x7b9d8e73, 0xf2a349d5, 
    0x00ff78a6, 0xf679c5b8, 0xa41b6235, 0x158222f3, 0x2db53c95, 0x42a18824, 0x3b06f0e4, 0xb5e00f90, 0x4d5edc15, 0x90015cc1, 0x80db0a1b, 0xf35fcfc8, 
    0x24d0d1f8, 0x140db9b4, 0xd1224151, 0x0a221545, 0x10bc2db9, 0x8e596e4b, 0x264d80c6, 0x4c5fc779, 0xeb547160, 0x8e22e156, 0x0b64ef38, 0xa3922d22, 
    0xcbc073a6, 0x23b84710, 0xaea232bd, 0xd9180b32, 0x9a288aa4, 0xb0db47e2, 0x605061b3, 0xe9638ce4, 0xa8ca7fcf, 0x71931fcf, 0xc7ce5924, 0xada19f2b, 
    0x65ba7151, 0xb624388a, 0x1812d7f2, 0xf64660d3, 0x7f3beec1, 0xafb3deb3, 0x4df716a0, 0x7e40c718, 0x01329053, 0x961c43eb, 0x45d12b97, 0x8a168814, 
    0x5610a928, 0x86b7b389, 0x58c8d4e2, 0x69e2f6c4, 0xe983db73, 0x3a2b70d0, 0x2285a5b7, 0x50fa8ab6, 0xa862311e, 0x19c83953, 0xcee9082c, 0x555c3445, 
    0xa2d2a4c8, 0x1c4732b7, 0x4a4a5e12, 0x630492f1, 0x0710e4e6, 0x8a3cdf71, 0xc88bb8cb, 0xe71c96b9, 0xf5b972cb, 0xaf74c5c1, 0x85a51bb6, 0x34da1a6d, 
    0xed129300, 0xf720f453, 0x5ce9b81d, 0x2d6ca1f6, 0x57101a2f, 0x62eda480, 0x530f90c3, 0xdab43ece, 0xd48ad51c, 0x98494551, 0xa4a228ea, 0xadec5741, 
    0xf3c23360, 0x2ff9d08d, 0x006cb92c, 0x9cdb6101, 0x6f852a70, 0xbe2ddbd9, 0x0af7b79a, 0xcacc3e59, 0x86aa2363, 0x39743c66, 0x4d937f04, 0x2c760517, 
    0x2310249a, 0xd66b6188, 0xe6fd012c, 0xc1410e02, 0xc7c81918, 0xdd61c539, 0xb97bf643, 0xcbbb0da0, 0xe0fa4c76, 0x2309bbe2, 0x5288dc10, 0x5008c1d4, 
    0x541ba1db, 0x23c8f39c, 0xe8b0639c, 0x2dd5966b, 0x9250cf92, 0x00cacf18, 0x32ce1620, 0x1a7fc601, 0x38152ba9, 0xa22815d9, 0x3a22838a, 0xe83ddb29, 
    0x735aefd9, 0xd486ae22, 0xa43b2697, 0x57495a8d, 0x8e71c266, 0x5d7e8c4a, 0xddb42e3f, 0xf76cf49e, 0x300799a3, 0xca249d81, 0xc8113648, 0x9ae7cf29, 
    0xc50ca96a, 0x7d9c9c9d, 0x01609ce3, 0x3dfb29fd, 0x47efd9e8, 0xa28d0b32, 0x8ddeb39d, 0x2073f49e, 0x7e8a12ba, 0x7b367acf, 0x5d21f3d4, 0xce32ab0c, 
    0xbaa9c492, 0xc8eec241, 0x7b0c2407, 0xe3f7c071, 0xdeb343ad, 0x73f49e8d, 0x5558a921, 0xcca4589e, 0xc6981273, 0xbdfe5fd6, 0x9cbd8347, 0x921c4b92, 
    0xfa637b4e, 0xd17bf653, 0x648edeb3, 0x5394612e, 0xb3d17bf6, 0x17648ede, 0xeca76843, 0xbd67a3f7, 0xd015324f, 0x91f7baca, 0xb1b06cc9, 0x630b0e90, 
    0xfc00901c, 0x75fc1eb8, 0xbd675735, 0xe7e83d1b, 0x6db15243, 0x70a05bb5, 0x113a3297, 0x6a00b28d, 0xe4950986, 0xc6676666, 0xa4d27372, 0xcf46efd9, 
    0x39d0397a, 0xfd14655c, 0xf76cf49e, 0xe80a99a3, 0x3ddb294a, 0x53efd9e8, 0x367485cc, 0xb500ffb4, 0x258eb7c9, 0x14da6269, 0x80278712, 0xe0801e07, 
    0x9ee77a1c, 0xbd673b6b, 0xf3e93d1b, 0xbf58a9a1, 0xa574b5fd, 0x20cbdcb6, 0x30d9462a, 0xa759ef71, 0x33d24a73, 0x25e333b3, 0xd94f738e, 0x7acf46ef, 
    0x2b07d31c, 0xb39da28d, 0xf49e8dde, 0x84ae90b9, 0x00288aa2, 0x9eb460a9, 0x288664e6, 0x94803ccb, 0x33908104, 0xfed04f9e, 0xe86f1555, 0x1ecaccd1, 
    0x5b6495dd, 0xd02d5536, 0xfcf84833, 0x2b4d533e, 0x63771595, 0x51231d32, 0xd931649d, 0x5bc688cb, 0xb3fced72, 0x64aaf0d7, 0x7cd7e060, 0xdcaa98db, 
    0x3072be44, 0xfbd29670, 0x3dceb9fc, 0xf871f0fa, 0xf9a81357, 0x0637da9f, 0x69179a68, 0x55378a19, 0xd6e3cfc9, 0xa762a39c, 0x14bd521e, 0x2d665251, 
    0x01525114, 0xfb342d56, 0x5644e9ab, 0xa56297f0, 0x542e24c0, 0xde27671c, 0xa04fd7ab, 0x65463345, 0x565975b7, 0x1c6ea2c8, 0x821c696e, 0x95a6157f, 
    0x765751d9, 0xb5d16231, 0x2cd99539, 0xce78c466, 0xf479dae4, 0x54e1af07, 0xebc1c188, 0xd704915e, 0xd1f91b09, 0xd8aa24c5, 0xf4f96edb, 0x04e31c20, 
    0x7b0e3f02, 0x00ffbce2, 0x467d6750, 0xa289e4e5, 0xc6989577, 0x382757dd, 0x396c94aa, 0xe81545c5, 0x05828aa2, 0x442a8aa2, 0x44cf7e15, 0xbc0875d4, 
    0xe9625bdb, 0xaeb218ce, 0xa822f571, 0xb1e17757, 0xfddaf031, 0x2866959d, 0x03dd32e2, 0xed136c16, 0xb2aba89a, 0x662715e1, 0x7ae85172, 0xb6ee88a4, 
    0x779d8013, 0x03f85321, 0x24aaf0d7, 0x35787010, 0x5087f6e9, 0x6e3fb5b7, 0x1f98e758, 0x6efcec97, 0x67e07a1c, 0xce2bfc39, 0xa88dcc2f, 0x18b1345c, 
    0x3166a55d, 0x9c93ab9e, 0x876c9453, 0xbda22838, 0x66505114, 0x5251142d, 0xf616ab20, 0x5e689717, 0x9479d2da, 0x328e161c, 0xabc21fc0, 0x40e079d7, 
    0x07728f4e, 0xfee33c5f, 0x575115f9, 0xe6112a76, 0x00ff3876, 0x7f507dec, 0xfeef36cc, 0x55f837fc, 0x23380832, 0xe9a75704, 0xa4b5fa36, 0x6800ff53, 
    0x40ce1dc9, 0x999d8831, 0xb0f9a88f, 0x75ce2b3d, 0x73a54610, 0x95394c98, 0x0557968f, 0x29c63941, 0x4e4536ca, 0x6ae5aa1c, 0xcca0a228, 0x5b511465, 
    0x5bd71514, 0x1bf42d88, 0x11b9677b, 0x89242c49, 0x76976514, 0xf11c3848, 0x8d5cedeb, 0x46916539, 0xd0034616, 0xb8d8691a, 0x3fee94cb, 0x01442cb5, 
    0x2a6ddc4d, 0x2b04b30c, 0x0f9c0c9c, 0xab7e5ce9, 0xa78eba7c, 0x5146c235, 0xd4332e58, 0xda5501e0, 0x76867147, 0x36cda96f, 0x29c7959b, 0x511468f3, 
    0xb4984945, 0x05484551, 0xd9777a76, 0x50d4f0e2, 0x3c71dc3d, 0x8dceb790, 0x387197b9, 0x67e41c38, 0xcab806f3, 0x0c2acd7a, 0xd0a38e2c, 0x76511531, 
    0x67e5322a, 0x6aa7067b, 0xd465fb96, 0xd4489622, 0x63943fb3, 0xeb410f24, 0xcdb8c28e, 0x1d35f966, 0xd7887b5a, 0x480ad808, 0x7f0680eb, 0xc8d2a84a, 
    0xc3ec0ee3, 0x449be6dc, 0x7cca71a5, 0x1445c1ca, 0x142d9054, 0xae205251, 0x47f244eb, 0x7bb6e385, 0x6896a0c8, 0x65bc0ddf, 0xad075b32, 0x9af5b470, 
    0x23ab5d54, 0x450cf4a8, 0x8c8a5d54, 0x5ae859b9, 0xdba7c573, 0xd43a77b4, 0x83256757, 0x63c0003b, 0x88eb7dea, 0xd4a3efd6, 0x62ee8975, 0x056c2352, 
    0x0c9c6024, 0xb2b4a966, 0xccc8c338, 0xb469ce3d, 0x1c56574a, 0xa26075a7, 0x16482a8a, 0x10a9288a, 0x9be06f57, 0x8bb4788b, 0x38e29a94, 0x1d704ccb, 
    0x57743fc0, 0x5d544511, 0xb98cca9d, 0x46f3ce5d, 0x02fd34d3, 0x5b93ba77, 0x8d54508e, 0x881f85a0, 0x9a72cdc9, 0x965afcfd, 0x20d43db3, 0xa480d888, 
    0xc600128c, 0x1c8a3a6b, 0xe586acae, 0x8a826475, 0xff20a928, 0x000000d9, 
};
};
} // namespace BluePrint
